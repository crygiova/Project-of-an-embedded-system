
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  0000254c  000025e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000254c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800268  00800268  00002748  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00002748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004e9  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000381a  00000000  00000000  00003e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d78  00000000  00000000  0000767b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000033bc  00000000  00000000  000093f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000450  00000000  00000000  0000c7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000959  00000000  00000000  0000cc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001880  00000000  00000000  0000d559  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000008fa  00000000  00000000  0000edd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d8  00000000  00000000  0000f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e4       	ldi	r30, 0x4C	; 76
      a0:	f5 e2       	ldi	r31, 0x25	; 37
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 36       	cpi	r26, 0x68	; 104
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a8 e6       	ldi	r26, 0x68	; 104
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 37       	cpi	r26, 0x77	; 119
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
      c6:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initADC>:

uint8_t ADCReady = 0;
char inScore=0;
int score=0;

void initADC(){
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
	ADMUX |=  (1 << REFS0) | (1 << REFS1); //We will be using Vcc as a + reference and chanel 0 (ADC0 / PF0)
      d6:	87 e2       	ldi	r24, 0x27	; 39
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	27 e2       	ldi	r18, 0x27	; 39
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	20 6c       	ori	r18, 0xC0	; 192
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN) |(1 << ADIE);
      e8:	86 e2       	ldi	r24, 0x26	; 38
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	26 e2       	ldi	r18, 0x26	; 38
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	20 81       	ld	r18, Z
      f4:	28 68       	ori	r18, 0x88	; 136
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
	DDRF &= ~(1<<PF0); //Set PE5 as Input
      fa:	81 e6       	ldi	r24, 0x61	; 97
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	21 e6       	ldi	r18, 0x61	; 97
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	2e 7f       	andi	r18, 0xFE	; 254
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
	
}
     10c:	cf 91       	pop	r28
     10e:	df 91       	pop	r29
     110:	08 95       	ret

00000112 <readADC>:

short readADC(){
     112:	df 93       	push	r29
     114:	cf 93       	push	r28
     116:	00 d0       	rcall	.+0      	; 0x118 <readADC+0x6>
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
	short r;
	ADCSRA |= (1 << ADSC);
     11c:	86 e2       	ldi	r24, 0x26	; 38
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	26 e2       	ldi	r18, 0x26	; 38
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	f9 01       	movw	r30, r18
     126:	20 81       	ld	r18, Z
     128:	20 64       	ori	r18, 0x40	; 64
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
	while ( !ADCReady ); //Wait while the flag is 0
     12e:	00 00       	nop
     130:	80 91 68 02 	lds	r24, 0x0268
     134:	88 23       	and	r24, r24
     136:	e1 f3       	breq	.-8      	; 0x130 <readADC+0x1e>
	ADCReady = 0;
     138:	10 92 68 02 	sts	0x0268, r1
	r = ADC; //(ADCH << 8) | ADCL;
     13c:	84 e2       	ldi	r24, 0x24	; 36
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	fc 01       	movw	r30, r24
     142:	80 81       	ld	r24, Z
     144:	91 81       	ldd	r25, Z+1	; 0x01
     146:	9a 83       	std	Y+2, r25	; 0x02
     148:	89 83       	std	Y+1, r24	; 0x01
	return r;
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	cf 91       	pop	r28
     154:	df 91       	pop	r29
     156:	08 95       	ret

00000158 <averageADC>:


short averageADC(char times){
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	00 d0       	rcall	.+0      	; 0x15e <averageADC+0x6>
     15e:	00 d0       	rcall	.+0      	; 0x160 <averageADC+0x8>
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	8c 83       	std	Y+4, r24	; 0x04
	char i;
	short acum = 0;
     166:	1b 82       	std	Y+3, r1	; 0x03
     168:	1a 82       	std	Y+2, r1	; 0x02
	for ( i = 0; i < times; i++) {
     16a:	19 82       	std	Y+1, r1	; 0x01
     16c:	0b c0       	rjmp	.+22     	; 0x184 <averageADC+0x2c>
		acum+=readADC();
     16e:	0e 94 89 00 	call	0x112	; 0x112 <readADC>
     172:	2a 81       	ldd	r18, Y+2	; 0x02
     174:	3b 81       	ldd	r19, Y+3	; 0x03
     176:	82 0f       	add	r24, r18
     178:	93 1f       	adc	r25, r19
     17a:	9b 83       	std	Y+3, r25	; 0x03
     17c:	8a 83       	std	Y+2, r24	; 0x02


short averageADC(char times){
	char i;
	short acum = 0;
	for ( i = 0; i < times; i++) {
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	8f 5f       	subi	r24, 0xFF	; 255
     182:	89 83       	std	Y+1, r24	; 0x01
     184:	99 81       	ldd	r25, Y+1	; 0x01
     186:	8c 81       	ldd	r24, Y+4	; 0x04
     188:	98 17       	cp	r25, r24
     18a:	88 f3       	brcs	.-30     	; 0x16e <averageADC+0x16>
		acum+=readADC();
	}
	acum = acum/times;
     18c:	8c 81       	ldd	r24, Y+4	; 0x04
     18e:	28 2f       	mov	r18, r24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	8a 81       	ldd	r24, Y+2	; 0x02
     194:	9b 81       	ldd	r25, Y+3	; 0x03
     196:	b9 01       	movw	r22, r18
     198:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divmodhi4>
     19c:	9b 01       	movw	r18, r22
     19e:	3b 83       	std	Y+3, r19	; 0x03
     1a0:	2a 83       	std	Y+2, r18	; 0x02
	if (!inScore && acum < GOAL_THRESH){
     1a2:	80 91 69 02 	lds	r24, 0x0269
     1a6:	88 23       	and	r24, r24
     1a8:	91 f4       	brne	.+36     	; 0x1ce <averageADC+0x76>
     1aa:	8a 81       	ldd	r24, Y+2	; 0x02
     1ac:	9b 81       	ldd	r25, Y+3	; 0x03
     1ae:	8a 30       	cpi	r24, 0x0A	; 10
     1b0:	91 05       	cpc	r25, r1
     1b2:	6c f4       	brge	.+26     	; 0x1ce <averageADC+0x76>
		++score;
     1b4:	80 91 6a 02 	lds	r24, 0x026A
     1b8:	90 91 6b 02 	lds	r25, 0x026B
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	90 93 6b 02 	sts	0x026B, r25
     1c2:	80 93 6a 02 	sts	0x026A, r24
		inScore = 1;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 69 02 	sts	0x0269, r24
     1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <averageADC+0x8c>
	} else if (inScore && acum >= GOAL_THRESH) {inScore = 0;}
     1ce:	80 91 69 02 	lds	r24, 0x0269
     1d2:	88 23       	and	r24, r24
     1d4:	39 f0       	breq	.+14     	; 0x1e4 <averageADC+0x8c>
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	9b 81       	ldd	r25, Y+3	; 0x03
     1da:	8a 30       	cpi	r24, 0x0A	; 10
     1dc:	91 05       	cpc	r25, r1
     1de:	14 f0       	brlt	.+4      	; 0x1e4 <averageADC+0x8c>
     1e0:	10 92 69 02 	sts	0x0269, r1
	return acum;
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	9b 81       	ldd	r25, Y+3	; 0x03
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <initCAN>:
#include "can.h"


volatile uint8_t flagMCP; //FLAG for MCP 

void initCAN(enum canMode mode){
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <initCAN+0x6>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t t;
	switch (mode){
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	82 30       	cpi	r24, 0x02	; 2
     20a:	91 05       	cpc	r25, r1
     20c:	a9 f0       	breq	.+42     	; 0x238 <initCAN+0x42>
     20e:	83 30       	cpi	r24, 0x03	; 3
     210:	91 05       	cpc	r25, r1
     212:	34 f4       	brge	.+12     	; 0x220 <initCAN+0x2a>
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	59 f0       	breq	.+22     	; 0x22e <initCAN+0x38>
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	91 05       	cpc	r25, r1
     21c:	51 f0       	breq	.+20     	; 0x232 <initCAN+0x3c>
     21e:	15 c0       	rjmp	.+42     	; 0x24a <initCAN+0x54>
     220:	83 30       	cpi	r24, 0x03	; 3
     222:	91 05       	cpc	r25, r1
     224:	61 f0       	breq	.+24     	; 0x23e <initCAN+0x48>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	91 05       	cpc	r25, r1
     22a:	61 f0       	breq	.+24     	; 0x244 <initCAN+0x4e>
     22c:	0e c0       	rjmp	.+28     	; 0x24a <initCAN+0x54>
		case(NORMAL):
			t = 0x00;			
     22e:	19 82       	std	Y+1, r1	; 0x01
			break;
     230:	0c c0       	rjmp	.+24     	; 0x24a <initCAN+0x54>
		case(SLEEP):
			t = 0x20;
     232:	80 e2       	ldi	r24, 0x20	; 32
     234:	89 83       	std	Y+1, r24	; 0x01
			break;
     236:	09 c0       	rjmp	.+18     	; 0x24a <initCAN+0x54>
		case(LOOPBACK):
			t = 0x40;			
     238:	80 e4       	ldi	r24, 0x40	; 64
     23a:	89 83       	std	Y+1, r24	; 0x01
			break;
     23c:	06 c0       	rjmp	.+12     	; 0x24a <initCAN+0x54>
		case(LISTEN):
			t = 0x60;
     23e:	80 e6       	ldi	r24, 0x60	; 96
     240:	89 83       	std	Y+1, r24	; 0x01
			break;		
     242:	03 c0       	rjmp	.+6      	; 0x24a <initCAN+0x54>
		case(CONFIG):
			t = 0x80;
     244:	80 e8       	ldi	r24, 0x80	; 128
     246:	89 83       	std	Y+1, r24	; 0x01
			break;
     248:	00 00       	nop
	};
	
	writeMCP(MCP_CANCTRL,t); //Sets mode
     24a:	8f e0       	ldi	r24, 0x0F	; 15
     24c:	69 81       	ldd	r22, Y+1	; 0x01
     24e:	0e 94 c2 04 	call	0x984	; 0x984 <writeMCP>
	writeMCP(MCP_RXB0CTRL, 0b01100000); //Disable all Filters buffer 0 //Todo, by names
     252:	80 e6       	ldi	r24, 0x60	; 96
     254:	60 e6       	ldi	r22, 0x60	; 96
     256:	0e 94 c2 04 	call	0x984	; 0x984 <writeMCP>
	writeMCP(MCP_RXB1CTRL, 0b01100000); //Disable all Filters buffer 1
     25a:	80 e7       	ldi	r24, 0x70	; 112
     25c:	60 e6       	ldi	r22, 0x60	; 96
     25e:	0e 94 c2 04 	call	0x984	; 0x984 <writeMCP>
	writeMCP(MCP_CANINTF,0x00); //Clear Pending Interrupts
     262:	8c e2       	ldi	r24, 0x2C	; 44
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	0e 94 c2 04 	call	0x984	; 0x984 <writeMCP>
	writeMCP(MCP_CANINTE, 0x1F); //Enable reception interrupts on both buffers
     26a:	8b e2       	ldi	r24, 0x2B	; 43
     26c:	6f e1       	ldi	r22, 0x1F	; 31
     26e:	0e 94 c2 04 	call	0x984	; 0x984 <writeMCP>
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <__vector_21>:

#include "globals.h"



ISR(ADC_vect){
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	8f 93       	push	r24
     288:	df 93       	push	r29
     28a:	cf 93       	push	r28
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
	ADCReady = 1;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 68 02 	sts	0x0268, r24
}
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	8f 91       	pop	r24
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <__vector_5>:


ISR(INT4_vect) //Interrupt routine for the CAN Transciver
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	00 90 5b 00 	lds	r0, 0x005B
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	2f 93       	push	r18
     2b8:	3f 93       	push	r19
     2ba:	4f 93       	push	r20
     2bc:	5f 93       	push	r21
     2be:	6f 93       	push	r22
     2c0:	7f 93       	push	r23
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	0f 92       	push	r0
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t mcp_flags;
	mcp_flags = readMCP(MCP_CANINTF);
     2d8:	8c e2       	ldi	r24, 0x2C	; 44
     2da:	0e 94 7f 04 	call	0x8fe	; 0x8fe <readMCP>
     2de:	89 83       	std	Y+1, r24	; 0x01
	writeMCP(MCP_CANINTF,0x00); //Clear Flags
     2e0:	8c e2       	ldi	r24, 0x2C	; 44
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	0e 94 c2 04 	call	0x984	; 0x984 <writeMCP>
	
	//printf("CAN MCP General interrupt handler \r\n");
	
    if(mcp_flags & 1 << 0) {  //RX0IF
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	81 70       	andi	r24, 0x01	; 1
     2f0:	90 70       	andi	r25, 0x00	; 0
     2f2:	88 23       	and	r24, r24
     2f4:	29 f0       	breq	.+10     	; 0x300 <__vector_5+0x5a>
		//printf("CAN MCP Interrupt RX0IF Triggered \r\n");	
		flagMCP |= 	(1 << 0);
     2f6:	80 91 6c 02 	lds	r24, 0x026C
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	80 93 6c 02 	sts	0x026C, r24
		
	}  if(mcp_flags & 1 << 1) { //RX1IF
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	88 2f       	mov	r24, r24
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	82 70       	andi	r24, 0x02	; 2
     308:	90 70       	andi	r25, 0x00	; 0
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	29 f0       	breq	.+10     	; 0x318 <__vector_5+0x72>
		//printf("CAN MCP Interrupt RX1IF Triggered \r\n");
		flagMCP |= 	(1 << 1);
     30e:	80 91 6c 02 	lds	r24, 0x026C
     312:	82 60       	ori	r24, 0x02	; 2
     314:	80 93 6c 02 	sts	0x026C, r24
		
	}  if(mcp_flags & 1 << 2) { //TX0IF
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	84 70       	andi	r24, 0x04	; 4
     320:	90 70       	andi	r25, 0x00	; 0
     322:	00 97       	sbiw	r24, 0x00	; 0
     324:	29 f0       	breq	.+10     	; 0x330 <__vector_5+0x8a>
		//printf("CAN MCP Interrupt TX0IF Triggered \r\n");
		flagMCP |= 	(1 << 2);
     326:	80 91 6c 02 	lds	r24, 0x026C
     32a:	84 60       	ori	r24, 0x04	; 4
     32c:	80 93 6c 02 	sts	0x026C, r24
		
	}  if(mcp_flags & 1 << 3) { //TX1IF
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	88 70       	andi	r24, 0x08	; 8
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	29 f0       	breq	.+10     	; 0x348 <__vector_5+0xa2>
	//	printf("CAN MCP Interrupt TX1IF Triggered \r\n");
		flagMCP |= 	(1 << 3);
     33e:	80 91 6c 02 	lds	r24, 0x026C
     342:	88 60       	ori	r24, 0x08	; 8
     344:	80 93 6c 02 	sts	0x026C, r24
		
	}  if(mcp_flags & 1 << 4) { //TX2IF
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	80 71       	andi	r24, 0x10	; 16
     350:	90 70       	andi	r25, 0x00	; 0
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	29 f0       	breq	.+10     	; 0x360 <__vector_5+0xba>
	//	printf("CAN MCP Interrupt TX2IF Triggered \r\n");
		flagMCP |= 	(1 << 4);
     356:	80 91 6c 02 	lds	r24, 0x026C
     35a:	80 61       	ori	r24, 0x10	; 16
     35c:	80 93 6c 02 	sts	0x026C, r24
	} 

		


}	
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	ff 91       	pop	r31
     368:	ef 91       	pop	r30
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	00 92 5b 00 	sts	0x005B, r0
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	18 95       	reti

0000038e <initInterrupts>:
 
void initInterrupts(){
     38e:	df 93       	push	r29
     390:	cf 93       	push	r28
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
// 	EMCUCR &= ~(1<<ISC2); //Set interrupt on 0 at INT2
// 	GICR |= (1<<INT1);
// 	GICR |= (1<<INT0); 
// 	GICR |= (1<<INT2); 
//TODO: Configure to our interrupts
	DDRE &= ~(1<<PE4); //Set PE5 as Input
     396:	82 e2       	ldi	r24, 0x22	; 34
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	22 e2       	ldi	r18, 0x22	; 34
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	2f 7e       	andi	r18, 0xEF	; 239
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	PORTD |= (1<<PE4); //Set pullup for PE5
     3a8:	82 e3       	ldi	r24, 0x32	; 50
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	22 e3       	ldi	r18, 0x32	; 50
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	20 61       	ori	r18, 0x10	; 16
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
	EICRB |= (1<<ISC41);
     3ba:	8a e5       	ldi	r24, 0x5A	; 90
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	2a e5       	ldi	r18, 0x5A	; 90
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	22 60       	ori	r18, 0x02	; 2
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
	EICRB &= ~(1<<ISC40); //Set interrupts on falling edge at PE5
     3cc:	8a e5       	ldi	r24, 0x5A	; 90
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	2a e5       	ldi	r18, 0x5A	; 90
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	20 81       	ld	r18, Z
     3d8:	2e 7f       	andi	r18, 0xFE	; 254
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
	EIMSK |= (1<<INT4); //Enable interrupt on PE5
     3de:	89 e5       	ldi	r24, 0x59	; 89
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	29 e5       	ldi	r18, 0x59	; 89
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	20 61       	ori	r18, 0x10	; 16
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	initADC();
     3f0:	0e 94 67 00 	call	0xce	; 0xce <initADC>
	sei();
     3f4:	78 94       	sei
}
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <main>:




int main(void)
{
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	c8 54       	subi	r28, 0x48	; 72
     40a:	d0 40       	sbci	r29, 0x00	; 0
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
	struct canMessage m2s,rm;
	initUART(UBBR);
     416:	8b e1       	ldi	r24, 0x1B	; 27
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 40 07 	call	0xe80	; 0xe80 <initUART>
	initInterrupts();
     41e:	0e 94 c7 01 	call	0x38e	; 0x38e <initInterrupts>
	initSPI();
     422:	0e 94 ad 03 	call	0x75a	; 0x75a <initSPI>
	printf("\r\n \r\n Hi, I am NODE 2 and this is NOT jackass, but we are getting there\r\n");
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <puts>
	resetMCP();
     42e:	0e 94 cb 03 	call	0x796	; 0x796 <resetMCP>
	initCAN(NORMAL);	
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <initCAN>
	writeMCP(MCP_CANINTF, 0x01);
     438:	8c e2       	ldi	r24, 0x2C	; 44
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	0e 94 c2 04 	call	0x984	; 0x984 <writeMCP>
	char newCurrent = 0;
     440:	19 82       	std	Y+1, r1	; 0x01
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	a0 ea       	ldi	r26, 0xA0	; 160
     448:	b0 e4       	ldi	r27, 0x40	; 64
     44a:	8a 83       	std	Y+2, r24	; 0x02
     44c:	9b 83       	std	Y+3, r25	; 0x03
     44e:	ac 83       	std	Y+4, r26	; 0x04
     450:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     452:	6a 81       	ldd	r22, Y+2	; 0x02
     454:	7b 81       	ldd	r23, Y+3	; 0x03
     456:	8c 81       	ldd	r24, Y+4	; 0x04
     458:	9d 81       	ldd	r25, Y+5	; 0x05
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	4a e7       	ldi	r20, 0x7A	; 122
     460:	54 e4       	ldi	r21, 0x44	; 68
     462:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	8e 83       	std	Y+6, r24	; 0x06
     46c:	9f 83       	std	Y+7, r25	; 0x07
     46e:	a8 87       	std	Y+8, r26	; 0x08
     470:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     472:	11 e0       	ldi	r17, 0x01	; 1
     474:	6e 81       	ldd	r22, Y+6	; 0x06
     476:	7f 81       	ldd	r23, Y+7	; 0x07
     478:	88 85       	ldd	r24, Y+8	; 0x08
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e8       	ldi	r20, 0x80	; 128
     482:	5f e3       	ldi	r21, 0x3F	; 63
     484:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__ltsf2>
     488:	88 23       	and	r24, r24
     48a:	0c f0       	brlt	.+2      	; 0x48e <main+0x92>
     48c:	10 e0       	ldi	r17, 0x00	; 0
     48e:	11 23       	and	r17, r17
     490:	29 f0       	breq	.+10     	; 0x49c <main+0xa0>
		__ticks = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9b 87       	std	Y+11, r25	; 0x0b
     498:	8a 87       	std	Y+10, r24	; 0x0a
     49a:	46 c0       	rjmp	.+140    	; 0x528 <main+0x12c>
	else if (__tmp > 65535)
     49c:	11 e0       	ldi	r17, 0x01	; 1
     49e:	6e 81       	ldd	r22, Y+6	; 0x06
     4a0:	7f 81       	ldd	r23, Y+7	; 0x07
     4a2:	88 85       	ldd	r24, Y+8	; 0x08
     4a4:	99 85       	ldd	r25, Y+9	; 0x09
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	3f ef       	ldi	r19, 0xFF	; 255
     4aa:	4f e7       	ldi	r20, 0x7F	; 127
     4ac:	57 e4       	ldi	r21, 0x47	; 71
     4ae:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__gtsf2>
     4b2:	18 16       	cp	r1, r24
     4b4:	0c f0       	brlt	.+2      	; 0x4b8 <main+0xbc>
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	11 23       	and	r17, r17
     4ba:	61 f1       	breq	.+88     	; 0x514 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4bc:	6a 81       	ldd	r22, Y+2	; 0x02
     4be:	7b 81       	ldd	r23, Y+3	; 0x03
     4c0:	8c 81       	ldd	r24, Y+4	; 0x04
     4c2:	9d 81       	ldd	r25, Y+5	; 0x05
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e2       	ldi	r20, 0x20	; 32
     4ca:	51 e4       	ldi	r21, 0x41	; 65
     4cc:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	bc 01       	movw	r22, r24
     4d6:	cd 01       	movw	r24, r26
     4d8:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fixunssfsi>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	9b 87       	std	Y+11, r25	; 0x0b
     4e2:	8a 87       	std	Y+10, r24	; 0x0a
     4e4:	12 c0       	rjmp	.+36     	; 0x50a <main+0x10e>
     4e6:	84 e6       	ldi	r24, 0x64	; 100
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	9d 87       	std	Y+13, r25	; 0x0d
     4ec:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     4f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     4f2:	8c 01       	movw	r16, r24
     4f4:	c8 01       	movw	r24, r16
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <main+0xfa>
     4fa:	8c 01       	movw	r16, r24
     4fc:	1d 87       	std	Y+13, r17	; 0x0d
     4fe:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     500:	8a 85       	ldd	r24, Y+10	; 0x0a
     502:	9b 85       	ldd	r25, Y+11	; 0x0b
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	9b 87       	std	Y+11, r25	; 0x0b
     508:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     50a:	8a 85       	ldd	r24, Y+10	; 0x0a
     50c:	9b 85       	ldd	r25, Y+11	; 0x0b
     50e:	00 97       	sbiw	r24, 0x00	; 0
     510:	51 f7       	brne	.-44     	; 0x4e6 <main+0xea>
     512:	17 c0       	rjmp	.+46     	; 0x542 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     514:	6e 81       	ldd	r22, Y+6	; 0x06
     516:	7f 81       	ldd	r23, Y+7	; 0x07
     518:	88 85       	ldd	r24, Y+8	; 0x08
     51a:	99 85       	ldd	r25, Y+9	; 0x09
     51c:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fixunssfsi>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	9b 87       	std	Y+11, r25	; 0x0b
     526:	8a 87       	std	Y+10, r24	; 0x0a
     528:	8a 85       	ldd	r24, Y+10	; 0x0a
     52a:	9b 85       	ldd	r25, Y+11	; 0x0b
     52c:	9f 87       	std	Y+15, r25	; 0x0f
     52e:	8e 87       	std	Y+14, r24	; 0x0e
     530:	8e 85       	ldd	r24, Y+14	; 0x0e
     532:	9f 85       	ldd	r25, Y+15	; 0x0f
     534:	8c 01       	movw	r16, r24
     536:	f8 01       	movw	r30, r16
     538:	31 97       	sbiw	r30, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <main+0x13c>
     53c:	8f 01       	movw	r16, r30
     53e:	1f 87       	std	Y+15, r17	; 0x0f
     540:	0e 87       	std	Y+14, r16	; 0x0e
// 		
// 		fillTxBufferMCP(0,m2s);
// 		requestToSendMCP(0);
		_delay_ms(5);
	
		initPWM();
     542:	0e 94 2c 03 	call	0x658	; 0x658 <initPWM>
     546:	01 c0       	rjmp	.+2      	; 0x54a <main+0x14e>
// 		fillTxBufferMCP(2,m2s);
// 		requestToSendMCP(2);
	
	
	
	}
     548:	00 00       	nop
		struct canMessage m0,m1, current;
	
	 while(1){
		
		//receiving
		if(flagMCP & 1 << 0) {
     54a:	80 91 6c 02 	lds	r24, 0x026C
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	81 70       	andi	r24, 0x01	; 1
     554:	90 70       	andi	r25, 0x00	; 0
     556:	88 23       	and	r24, r24
     558:	e9 f0       	breq	.+58     	; 0x594 <main+0x198>
			flagMCP &= ~(1 << 0);
     55a:	80 91 6c 02 	lds	r24, 0x026C
     55e:	8e 7f       	andi	r24, 0xFE	; 254
     560:	80 93 6c 02 	sts	0x026C, r24
			m0 = readRxBufferMCP(0);
     564:	ce 01       	movw	r24, r28
     566:	86 96       	adiw	r24, 0x26	; 38
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	0e 94 c3 05 	call	0xb86	; 0xb86 <readRxBufferMCP>
			current = m0;
     56e:	ce 01       	movw	r24, r28
     570:	cc 96       	adiw	r24, 0x3c	; 60
     572:	9e 01       	movw	r18, r28
     574:	2a 5d       	subi	r18, 0xDA	; 218
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	4b e0       	ldi	r20, 0x0B	; 11
     57a:	f9 01       	movw	r30, r18
     57c:	00 80       	ld	r0, Z
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	fc 01       	movw	r30, r24
     584:	00 82       	st	Z, r0
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	41 50       	subi	r20, 0x01	; 1
     58a:	44 23       	and	r20, r20
     58c:	b1 f7       	brne	.-20     	; 0x57a <main+0x17e>
			//printf ("Buffer 0 ID: %d, Size: %d, Data: %s \r\n", m0.id, m0.size, m0.data);
			newCurrent = 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	24 c0       	rjmp	.+72     	; 0x5dc <main+0x1e0>
		}
		
		else if(flagMCP & 1 << 1) {
     594:	80 91 6c 02 	lds	r24, 0x026C
     598:	88 2f       	mov	r24, r24
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	82 70       	andi	r24, 0x02	; 2
     59e:	90 70       	andi	r25, 0x00	; 0
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	e1 f0       	breq	.+56     	; 0x5dc <main+0x1e0>
			flagMCP &= ~(1 << 1);
     5a4:	80 91 6c 02 	lds	r24, 0x026C
     5a8:	8d 7f       	andi	r24, 0xFD	; 253
     5aa:	80 93 6c 02 	sts	0x026C, r24
			m1 = readRxBufferMCP(1);
     5ae:	ce 01       	movw	r24, r28
     5b0:	c1 96       	adiw	r24, 0x31	; 49
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	0e 94 c3 05 	call	0xb86	; 0xb86 <readRxBufferMCP>
			current = m1;
     5b8:	ce 01       	movw	r24, r28
     5ba:	cc 96       	adiw	r24, 0x3c	; 60
     5bc:	9e 01       	movw	r18, r28
     5be:	2f 5c       	subi	r18, 0xCF	; 207
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	4b e0       	ldi	r20, 0x0B	; 11
     5c4:	f9 01       	movw	r30, r18
     5c6:	00 80       	ld	r0, Z
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	fc 01       	movw	r30, r24
     5ce:	00 82       	st	Z, r0
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	41 50       	subi	r20, 0x01	; 1
     5d4:	44 23       	and	r20, r20
     5d6:	b1 f7       	brne	.-20     	; 0x5c4 <main+0x1c8>
			//printf ("Buffer 1 ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
			newCurrent = 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(newCurrent) {
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	88 23       	and	r24, r24
     5e0:	79 f0       	breq	.+30     	; 0x600 <main+0x204>
		
			switch (current.id){
     5e2:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e4:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e6:	8a 30       	cpi	r24, 0x0A	; 10
     5e8:	91 05       	cpc	r25, r1
     5ea:	29 f4       	brne	.+10     	; 0x5f6 <main+0x1fa>
				case JOY_MESSAGE:
				//	printf("Joystick X: %d    Y: %d   DIR: %d \r\n", current.data[0],current.data[1],current.data[2]);
					newCurrent = 0;
     5ec:	19 82       	std	Y+1, r1	; 0x01
					setPWM(current.data[0]);
     5ee:	8f ad       	ldd	r24, Y+63	; 0x3f
     5f0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <setPWM>
					break;
     5f4:	05 c0       	rjmp	.+10     	; 0x600 <main+0x204>
				default:
					newCurrent = 0;
     5f6:	19 82       	std	Y+1, r1	; 0x01
					//printf ("Current CAN message ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
					setPWM(current.data[0]);
     5f8:	8f ad       	ldd	r24, Y+63	; 0x3f
     5fa:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <setPWM>
					break;
     5fe:	00 00       	nop
			}
		}
		
		//Checking for GOAL
		volatile short temp = averageADC(5);
     600:	85 e0       	ldi	r24, 0x05	; 5
     602:	0e 94 ac 00 	call	0x158	; 0x158 <averageADC>
     606:	9c 01       	movw	r18, r24
     608:	ce 01       	movw	r24, r28
     60a:	89 5b       	subi	r24, 0xB9	; 185
     60c:	9f 4f       	sbci	r25, 0xFF	; 255
     60e:	fc 01       	movw	r30, r24
     610:	31 83       	std	Z+1, r19	; 0x01
     612:	20 83       	st	Z, r18
		if(temp < 10)
     614:	ce 01       	movw	r24, r28
     616:	89 5b       	subi	r24, 0xB9	; 185
     618:	9f 4f       	sbci	r25, 0xFF	; 255
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	8a 30       	cpi	r24, 0x0A	; 10
     622:	91 05       	cpc	r25, r1
     624:	0c f0       	brlt	.+2      	; 0x628 <main+0x22c>
     626:	90 cf       	rjmp	.-224    	; 0x548 <main+0x14c>
		printf("GOAAAAALs: %d \r\n",score);
     628:	20 91 6a 02 	lds	r18, 0x026A
     62c:	30 91 6b 02 	lds	r19, 0x026B
     630:	00 d0       	rcall	.+0      	; 0x632 <main+0x236>
     632:	00 d0       	rcall	.+0      	; 0x634 <main+0x238>
     634:	8d b7       	in	r24, 0x3d	; 61
     636:	9e b7       	in	r25, 0x3e	; 62
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	49 e4       	ldi	r20, 0x49	; 73
     63c:	51 e0       	ldi	r21, 0x01	; 1
     63e:	fc 01       	movw	r30, r24
     640:	51 83       	std	Z+1, r21	; 0x01
     642:	40 83       	st	Z, r20
     644:	fc 01       	movw	r30, r24
     646:	33 83       	std	Z+3, r19	; 0x03
     648:	22 83       	std	Z+2, r18	; 0x02
     64a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <printf>
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
// 		fillTxBufferMCP(2,m2s);
// 		requestToSendMCP(2);
	
	
	
	}
     656:	79 cf       	rjmp	.-270    	; 0x54a <main+0x14e>

00000658 <initPWM>:
 *  Author: jordifr
 */ 

#include "pwm.h"

void initPWM(){
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
	ICR1 = 10400;
     660:	86 e4       	ldi	r24, 0x46	; 70
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	20 ea       	ldi	r18, 0xA0	; 160
     666:	38 e2       	ldi	r19, 0x28	; 40
     668:	fc 01       	movw	r30, r24
     66a:	31 83       	std	Z+1, r19	; 0x01
     66c:	20 83       	st	Z, r18
	OCR1B = CENTRAL_POS;
     66e:	88 e4       	ldi	r24, 0x48	; 72
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	33 e0       	ldi	r19, 0x03	; 3
     676:	fc 01       	movw	r30, r24
     678:	31 83       	std	Z+1, r19	; 0x01
     67a:	20 83       	st	Z, r18
	TCCR1A |= (1 << COM1B1) | (1 << WGM11);
     67c:	8f e4       	ldi	r24, 0x4F	; 79
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	2f e4       	ldi	r18, 0x4F	; 79
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	20 81       	ld	r18, Z
     688:	22 62       	ori	r18, 0x22	; 34
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10); //Sets mode 14 and preescaler to 8 
     68e:	8e e4       	ldi	r24, 0x4E	; 78
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	2e e4       	ldi	r18, 0x4E	; 78
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	f9 01       	movw	r30, r18
     698:	20 81       	ld	r18, Z
     69a:	2a 61       	ori	r18, 0x1A	; 26
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
	DDRB |= (1 << PB5) | (1 << PB6); //Set as output
     6a0:	87 e3       	ldi	r24, 0x37	; 55
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	27 e3       	ldi	r18, 0x37	; 55
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	20 66       	ori	r18, 0x60	; 96
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
	
}
     6b2:	cf 91       	pop	r28
     6b4:	df 91       	pop	r29
     6b6:	08 95       	ret

000006b8 <setPWM>:

void setPWM(uint8_t pos){
     6b8:	df 93       	push	r29
     6ba:	cf 93       	push	r28
     6bc:	00 d0       	rcall	.+0      	; 0x6be <setPWM+0x6>
     6be:	0f 92       	push	r0
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	8b 83       	std	Y+3, r24	; 0x03
	int16_t t;
	t = (int16_t) (MIN_POS+pos*2.4);
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	aa 27       	eor	r26, r26
     6ce:	97 fd       	sbrc	r25, 7
     6d0:	a0 95       	com	r26
     6d2:	ba 2f       	mov	r27, r26
     6d4:	bc 01       	movw	r22, r24
     6d6:	cd 01       	movw	r24, r26
     6d8:	0e 94 07 0b 	call	0x160e	; 0x160e <__floatsisf>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	2a e9       	ldi	r18, 0x9A	; 154
     6e6:	39 e9       	ldi	r19, 0x99	; 153
     6e8:	49 e1       	ldi	r20, 0x19	; 25
     6ea:	50 e4       	ldi	r21, 0x40	; 64
     6ec:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	bc 01       	movw	r22, r24
     6f6:	cd 01       	movw	r24, r26
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e8       	ldi	r19, 0x80	; 128
     6fc:	46 ee       	ldi	r20, 0xE6	; 230
     6fe:	53 e4       	ldi	r21, 0x43	; 67
     700:	0e 94 1f 09 	call	0x123e	; 0x123e <__addsf3>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	bc 01       	movw	r22, r24
     70a:	cd 01       	movw	r24, r26
     70c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fixsfsi>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	9a 83       	std	Y+2, r25	; 0x02
     716:	89 83       	std	Y+1, r24	; 0x01
	
	if (t < MIN_POS) t = MIN_POS;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	8d 3c       	cpi	r24, 0xCD	; 205
     720:	92 07       	cpc	r25, r18
     722:	24 f4       	brge	.+8      	; 0x72c <setPWM+0x74>
     724:	8d ec       	ldi	r24, 0xCD	; 205
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
	if (t > MAX_POS) t = MAX_POS;
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	e4 e0       	ldi	r30, 0x04	; 4
     732:	84 33       	cpi	r24, 0x34	; 52
     734:	9e 07       	cpc	r25, r30
     736:	24 f0       	brlt	.+8      	; 0x740 <setPWM+0x88>
     738:	83 e3       	ldi	r24, 0x33	; 51
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	9a 83       	std	Y+2, r25	; 0x02
     73e:	89 83       	std	Y+1, r24	; 0x01
	
	OCR1B = t;
     740:	88 e4       	ldi	r24, 0x48	; 72
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	29 81       	ldd	r18, Y+1	; 0x01
     746:	3a 81       	ldd	r19, Y+2	; 0x02
     748:	fc 01       	movw	r30, r24
     74a:	31 83       	std	Z+1, r19	; 0x01
     74c:	20 83       	st	Z, r18
	//printf("pos = %d; OCR = %d;delta = %d; MIN: %d; MAX %d***  DELTA_POS/255 : %d \n\r",pos,OCR1A,DELTA_POS,MIN_POS,MAX_POS, DELTA_POS/255);
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	08 95       	ret

0000075a <initSPI>:
 */ 


#include "spi.h"

void initSPI(){
     75a:	df 93       	push	r29
     75c:	cf 93       	push	r28
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
	//Setting pins and directions 
	//MOSI, SCK, !SS as output
	DDRB = (1 << DDB2) | (1 << DDB1)  | (1 << DDB0);
     762:	87 e3       	ldi	r24, 0x37	; 55
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	27 e0       	ldi	r18, 0x07	; 7
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
	//DDRB &= ~(1 << PB6);
	PORTB |=  (1 << PB0); //Pullup to avoid wrong fallback to slave mode
     76c:	88 e3       	ldi	r24, 0x38	; 56
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	28 e3       	ldi	r18, 0x38	; 56
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	21 60       	ori	r18, 0x01	; 1
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
	//MISO is Overriden as input, TODO: check if it work
	SPCR |=   (1 << SPE) | (1 << MSTR) | (1<<SPR0) ; // fosc/16
     77e:	8d e2       	ldi	r24, 0x2D	; 45
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	2d e2       	ldi	r18, 0x2D	; 45
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	21 65       	ori	r18, 0x51	; 81
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
	//configured as Master, NOT producing interrupts
	
}
     790:	cf 91       	pop	r28
     792:	df 91       	pop	r29
     794:	08 95       	ret

00000796 <resetMCP>:

void resetMCP(){
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	df 93       	push	r29
     79c:	cf 93       	push	r28
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	2e 97       	sbiw	r28, 0x0e	; 14
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
	select_mcp();
     7ae:	88 e3       	ldi	r24, 0x38	; 56
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	28 e3       	ldi	r18, 0x38	; 56
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	2e 7f       	andi	r18, 0xFE	; 254
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
	SPDR = MCP_RESET;
     7c0:	8f e2       	ldi	r24, 0x2F	; 47
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	20 ec       	ldi	r18, 0xC0	; 192
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     wait_spi();
     7ca:	8e e2       	ldi	r24, 0x2E	; 46
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	88 23       	and	r24, r24
     7d4:	d4 f7       	brge	.-12     	; 0x7ca <resetMCP+0x34>
	deselect_mcp();
     7d6:	88 e3       	ldi	r24, 0x38	; 56
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	28 e3       	ldi	r18, 0x38	; 56
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	20 81       	ld	r18, Z
     7e2:	21 60       	ori	r18, 0x01	; 1
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	a0 e2       	ldi	r26, 0x20	; 32
     7ee:	b1 e4       	ldi	r27, 0x41	; 65
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	ab 83       	std	Y+3, r26	; 0x03
     7f6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7f8:	69 81       	ldd	r22, Y+1	; 0x01
     7fa:	7a 81       	ldd	r23, Y+2	; 0x02
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	9c 81       	ldd	r25, Y+4	; 0x04
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	4a e7       	ldi	r20, 0x7A	; 122
     806:	54 e4       	ldi	r21, 0x44	; 68
     808:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	8d 83       	std	Y+5, r24	; 0x05
     812:	9e 83       	std	Y+6, r25	; 0x06
     814:	af 83       	std	Y+7, r26	; 0x07
     816:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     818:	11 e0       	ldi	r17, 0x01	; 1
     81a:	6d 81       	ldd	r22, Y+5	; 0x05
     81c:	7e 81       	ldd	r23, Y+6	; 0x06
     81e:	8f 81       	ldd	r24, Y+7	; 0x07
     820:	98 85       	ldd	r25, Y+8	; 0x08
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e8       	ldi	r20, 0x80	; 128
     828:	5f e3       	ldi	r21, 0x3F	; 63
     82a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__ltsf2>
     82e:	88 23       	and	r24, r24
     830:	0c f0       	brlt	.+2      	; 0x834 <resetMCP+0x9e>
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	11 23       	and	r17, r17
     836:	29 f0       	breq	.+10     	; 0x842 <resetMCP+0xac>
		__ticks = 1;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	9a 87       	std	Y+10, r25	; 0x0a
     83e:	89 87       	std	Y+9, r24	; 0x09
     840:	46 c0       	rjmp	.+140    	; 0x8ce <resetMCP+0x138>
	else if (__tmp > 65535)
     842:	11 e0       	ldi	r17, 0x01	; 1
     844:	6d 81       	ldd	r22, Y+5	; 0x05
     846:	7e 81       	ldd	r23, Y+6	; 0x06
     848:	8f 81       	ldd	r24, Y+7	; 0x07
     84a:	98 85       	ldd	r25, Y+8	; 0x08
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	3f ef       	ldi	r19, 0xFF	; 255
     850:	4f e7       	ldi	r20, 0x7F	; 127
     852:	57 e4       	ldi	r21, 0x47	; 71
     854:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__gtsf2>
     858:	18 16       	cp	r1, r24
     85a:	0c f0       	brlt	.+2      	; 0x85e <resetMCP+0xc8>
     85c:	10 e0       	ldi	r17, 0x00	; 0
     85e:	11 23       	and	r17, r17
     860:	61 f1       	breq	.+88     	; 0x8ba <resetMCP+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	7a 81       	ldd	r23, Y+2	; 0x02
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	bc 01       	movw	r22, r24
     87c:	cd 01       	movw	r24, r26
     87e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fixunssfsi>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	9a 87       	std	Y+10, r25	; 0x0a
     888:	89 87       	std	Y+9, r24	; 0x09
     88a:	12 c0       	rjmp	.+36     	; 0x8b0 <resetMCP+0x11a>
     88c:	84 e6       	ldi	r24, 0x64	; 100
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	9c 87       	std	Y+12, r25	; 0x0c
     892:	8b 87       	std	Y+11, r24	; 0x0b
     894:	8b 85       	ldd	r24, Y+11	; 0x0b
     896:	9c 85       	ldd	r25, Y+12	; 0x0c
     898:	8c 01       	movw	r16, r24
     89a:	c8 01       	movw	r24, r16
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <resetMCP+0x106>
     8a0:	8c 01       	movw	r16, r24
     8a2:	1c 87       	std	Y+12, r17	; 0x0c
     8a4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a6:	89 85       	ldd	r24, Y+9	; 0x09
     8a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	9a 87       	std	Y+10, r25	; 0x0a
     8ae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	51 f7       	brne	.-44     	; 0x88c <resetMCP+0xf6>
     8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <resetMCP+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ba:	6d 81       	ldd	r22, Y+5	; 0x05
     8bc:	7e 81       	ldd	r23, Y+6	; 0x06
     8be:	8f 81       	ldd	r24, Y+7	; 0x07
     8c0:	98 85       	ldd	r25, Y+8	; 0x08
     8c2:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fixunssfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	9a 87       	std	Y+10, r25	; 0x0a
     8cc:	89 87       	std	Y+9, r24	; 0x09
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d2:	9e 87       	std	Y+14, r25	; 0x0e
     8d4:	8d 87       	std	Y+13, r24	; 0x0d
     8d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8da:	8c 01       	movw	r16, r24
     8dc:	f8 01       	movw	r30, r16
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <resetMCP+0x148>
     8e2:	8f 01       	movw	r16, r30
     8e4:	1e 87       	std	Y+14, r17	; 0x0e
     8e6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	//Resets the SPI-CAN controller and waits for it to be ready
}
     8e8:	2e 96       	adiw	r28, 0x0e	; 14
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	08 95       	ret

000008fe <readMCP>:

uint8_t readMCP(char address){
     8fe:	df 93       	push	r29
     900:	cf 93       	push	r28
     902:	00 d0       	rcall	.+0      	; 0x904 <readMCP+0x6>
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t r;
	select_mcp();
     90a:	88 e3       	ldi	r24, 0x38	; 56
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	28 e3       	ldi	r18, 0x38	; 56
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	f9 01       	movw	r30, r18
     914:	20 81       	ld	r18, Z
     916:	2e 7f       	andi	r18, 0xFE	; 254
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
	SPDR = MCP_READ;
     91c:	8f e2       	ldi	r24, 0x2F	; 47
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	23 e0       	ldi	r18, 0x03	; 3
     922:	fc 01       	movw	r30, r24
     924:	20 83       	st	Z, r18
    wait_spi();
     926:	8e e2       	ldi	r24, 0x2E	; 46
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	fc 01       	movw	r30, r24
     92c:	80 81       	ld	r24, Z
     92e:	88 23       	and	r24, r24
     930:	d4 f7       	brge	.-12     	; 0x926 <readMCP+0x28>
	SPDR = address;
     932:	8f e2       	ldi	r24, 0x2F	; 47
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	2a 81       	ldd	r18, Y+2	; 0x02
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
    wait_spi();
     93c:	8e e2       	ldi	r24, 0x2E	; 46
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	88 23       	and	r24, r24
     946:	d4 f7       	brge	.-12     	; 0x93c <readMCP+0x3e>
	SPDR = MCP_DUMMY;
     948:	8f e2       	ldi	r24, 0x2F	; 47
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	fc 01       	movw	r30, r24
     94e:	10 82       	st	Z, r1
    wait_spi();
     950:	8e e2       	ldi	r24, 0x2E	; 46
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	fc 01       	movw	r30, r24
     956:	80 81       	ld	r24, Z
     958:	88 23       	and	r24, r24
     95a:	d4 f7       	brge	.-12     	; 0x950 <readMCP+0x52>
	r = SPDR;
     95c:	8f e2       	ldi	r24, 0x2F	; 47
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
     966:	88 e3       	ldi	r24, 0x38	; 56
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	28 e3       	ldi	r18, 0x38	; 56
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	21 60       	ori	r18, 0x01	; 1
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
	return r;
     978:	89 81       	ldd	r24, Y+1	; 0x01
}
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	08 95       	ret

00000984 <writeMCP>:

void writeMCP(char address, char data){
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	00 d0       	rcall	.+0      	; 0x98a <writeMCP+0x6>
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	6a 83       	std	Y+2, r22	; 0x02
	select_mcp();
     992:	88 e3       	ldi	r24, 0x38	; 56
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	28 e3       	ldi	r18, 0x38	; 56
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	2e 7f       	andi	r18, 0xFE	; 254
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
	SPDR = MCP_WRITE;
     9a4:	8f e2       	ldi	r24, 0x2F	; 47
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	22 e0       	ldi	r18, 0x02	; 2
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
    wait_spi();
     9ae:	8e e2       	ldi	r24, 0x2E	; 46
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	fc 01       	movw	r30, r24
     9b4:	80 81       	ld	r24, Z
     9b6:	88 23       	and	r24, r24
     9b8:	d4 f7       	brge	.-12     	; 0x9ae <writeMCP+0x2a>
	SPDR = address;
     9ba:	8f e2       	ldi	r24, 0x2F	; 47
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	29 81       	ldd	r18, Y+1	; 0x01
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
    wait_spi();
     9c4:	8e e2       	ldi	r24, 0x2E	; 46
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	88 23       	and	r24, r24
     9ce:	d4 f7       	brge	.-12     	; 0x9c4 <writeMCP+0x40>
	SPDR = data;
     9d0:	8f e2       	ldi	r24, 0x2F	; 47
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	2a 81       	ldd	r18, Y+2	; 0x02
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
    wait_spi();
     9da:	8e e2       	ldi	r24, 0x2E	; 46
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	88 23       	and	r24, r24
     9e4:	d4 f7       	brge	.-12     	; 0x9da <writeMCP+0x56>
	deselect_mcp();
     9e6:	88 e3       	ldi	r24, 0x38	; 56
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	28 e3       	ldi	r18, 0x38	; 56
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	f9 01       	movw	r30, r18
     9f0:	20 81       	ld	r18, Z
     9f2:	21 60       	ori	r18, 0x01	; 1
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
}
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	08 95       	ret

00000a02 <requestToSendMCP>:


void requestToSendMCP(char buffer){
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	0f 92       	push	r0
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	89 83       	std	Y+1, r24	; 0x01
	select_mcp();
     a0e:	88 e3       	ldi	r24, 0x38	; 56
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	28 e3       	ldi	r18, 0x38	; 56
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	f9 01       	movw	r30, r18
     a18:	20 81       	ld	r18, Z
     a1a:	2e 7f       	andi	r18, 0xFE	; 254
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
	switch(buffer) {
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	91 05       	cpc	r25, r1
     a2a:	59 f0       	breq	.+22     	; 0xa42 <requestToSendMCP+0x40>
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	91 05       	cpc	r25, r1
     a30:	71 f0       	breq	.+28     	; 0xa4e <requestToSendMCP+0x4c>
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	91 f4       	brne	.+36     	; 0xa5a <requestToSendMCP+0x58>
		case 0:
			SPDR = MCP_RTS_TX0;
     a36:	8f e2       	ldi	r24, 0x2F	; 47
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	21 e8       	ldi	r18, 0x81	; 129
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
			break;
     a40:	0c c0       	rjmp	.+24     	; 0xa5a <requestToSendMCP+0x58>
		case 1:
		    SPDR = MCP_RTS_TX1;
     a42:	8f e2       	ldi	r24, 0x2F	; 47
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	22 e8       	ldi	r18, 0x82	; 130
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18
			break;
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <requestToSendMCP+0x58>
		case 2:	
		    SPDR = MCP_RTS_TX2;
     a4e:	8f e2       	ldi	r24, 0x2F	; 47
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	24 e8       	ldi	r18, 0x84	; 132
     a54:	fc 01       	movw	r30, r24
     a56:	20 83       	st	Z, r18
			break;
     a58:	00 00       	nop
	}
	wait_spi();
     a5a:	8e e2       	ldi	r24, 0x2E	; 46
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	80 81       	ld	r24, Z
     a62:	88 23       	and	r24, r24
     a64:	d4 f7       	brge	.-12     	; 0xa5a <requestToSendMCP+0x58>
	deselect_mcp();
     a66:	88 e3       	ldi	r24, 0x38	; 56
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	28 e3       	ldi	r18, 0x38	; 56
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	21 60       	ori	r18, 0x01	; 1
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
}
     a78:	0f 90       	pop	r0
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	08 95       	ret

00000a80 <bitModifyMCP>:


void bitModifyMCP(char address, char mask, char data){
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	00 d0       	rcall	.+0      	; 0xa86 <bitModifyMCP+0x6>
     a86:	0f 92       	push	r0
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	6a 83       	std	Y+2, r22	; 0x02
     a90:	4b 83       	std	Y+3, r20	; 0x03
	select_mcp();
     a92:	88 e3       	ldi	r24, 0x38	; 56
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	28 e3       	ldi	r18, 0x38	; 56
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	f9 01       	movw	r30, r18
     a9c:	20 81       	ld	r18, Z
     a9e:	2e 7f       	andi	r18, 0xFE	; 254
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18
    SPDR = MCP_BITMOD;
     aa4:	8f e2       	ldi	r24, 0x2F	; 47
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	25 e0       	ldi	r18, 0x05	; 5
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
    wait_spi();
     aae:	8e e2       	ldi	r24, 0x2E	; 46
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	88 23       	and	r24, r24
     ab8:	d4 f7       	brge	.-12     	; 0xaae <bitModifyMCP+0x2e>
	SPDR = address;
     aba:	8f e2       	ldi	r24, 0x2F	; 47
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	29 81       	ldd	r18, Y+1	; 0x01
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
    wait_spi();
     ac4:	8e e2       	ldi	r24, 0x2E	; 46
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	88 23       	and	r24, r24
     ace:	d4 f7       	brge	.-12     	; 0xac4 <bitModifyMCP+0x44>
	SPDR = mask;
     ad0:	8f e2       	ldi	r24, 0x2F	; 47
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	2a 81       	ldd	r18, Y+2	; 0x02
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
    wait_spi();
     ada:	8e e2       	ldi	r24, 0x2E	; 46
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	88 23       	and	r24, r24
     ae4:	d4 f7       	brge	.-12     	; 0xada <bitModifyMCP+0x5a>
	SPDR = data;
     ae6:	8f e2       	ldi	r24, 0x2F	; 47
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	2b 81       	ldd	r18, Y+3	; 0x03
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
    wait_spi();
     af0:	8e e2       	ldi	r24, 0x2E	; 46
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	fc 01       	movw	r30, r24
     af6:	80 81       	ld	r24, Z
     af8:	88 23       	and	r24, r24
     afa:	d4 f7       	brge	.-12     	; 0xaf0 <bitModifyMCP+0x70>
	deselect_mcp();
     afc:	88 e3       	ldi	r24, 0x38	; 56
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	28 e3       	ldi	r18, 0x38	; 56
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	f9 01       	movw	r30, r18
     b06:	20 81       	ld	r18, Z
     b08:	21 60       	ori	r18, 0x01	; 1
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 83       	st	Z, r18
}
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <readStatus>:

uint8_t readStatus(){
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	0f 92       	push	r0
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
	uint8_t r;
	select_mcp();
     b24:	88 e3       	ldi	r24, 0x38	; 56
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	28 e3       	ldi	r18, 0x38	; 56
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	f9 01       	movw	r30, r18
     b2e:	20 81       	ld	r18, Z
     b30:	2e 7f       	andi	r18, 0xFE	; 254
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
    SPDR = MCP_READ_STATUS;
     b36:	8f e2       	ldi	r24, 0x2F	; 47
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	20 ea       	ldi	r18, 0xA0	; 160
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 83       	st	Z, r18
    wait_spi();
     b40:	8e e2       	ldi	r24, 0x2E	; 46
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	fc 01       	movw	r30, r24
     b46:	80 81       	ld	r24, Z
     b48:	88 23       	and	r24, r24
     b4a:	d4 f7       	brge	.-12     	; 0xb40 <readStatus+0x26>
	SPDR = MCP_DUMMY;
     b4c:	8f e2       	ldi	r24, 0x2F	; 47
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	fc 01       	movw	r30, r24
     b52:	10 82       	st	Z, r1
    wait_spi();
     b54:	8e e2       	ldi	r24, 0x2E	; 46
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	88 23       	and	r24, r24
     b5e:	d4 f7       	brge	.-12     	; 0xb54 <readStatus+0x3a>
	r = SPDR;
     b60:	8f e2       	ldi	r24, 0x2F	; 47
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	fc 01       	movw	r30, r24
     b66:	80 81       	ld	r24, Z
     b68:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
     b6a:	88 e3       	ldi	r24, 0x38	; 56
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	28 e3       	ldi	r18, 0x38	; 56
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	f9 01       	movw	r30, r18
     b74:	20 81       	ld	r18, Z
     b76:	21 60       	ori	r18, 0x01	; 1
     b78:	fc 01       	movw	r30, r24
     b7a:	20 83       	st	Z, r18
	return r;
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <readRxBufferMCP>:

struct canMessage readRxBufferMCP(char buffer){
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	2d 97       	sbiw	r28, 0x0d	; 13
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	ac 01       	movw	r20, r24
     b9c:	6d 87       	std	Y+13, r22	; 0x0d
	//Adresses are relative to Buffer 0
	struct canMessage m;
	
	select_mcp();
     b9e:	88 e3       	ldi	r24, 0x38	; 56
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	28 e3       	ldi	r18, 0x38	; 56
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	2e 7f       	andi	r18, 0xFE	; 254
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
     bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb2:	88 23       	and	r24, r24
     bb4:	31 f4       	brne	.+12     	; 0xbc2 <readRxBufferMCP+0x3c>
     bb6:	8f e2       	ldi	r24, 0x2F	; 47
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	20 e9       	ldi	r18, 0x90	; 144
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 83       	st	Z, r18
	else SPDR = MCP_READ_RX1;
	wait_spi();
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <readRxBufferMCP+0x46>
	struct canMessage m;
	
	select_mcp();
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
	else SPDR = MCP_READ_RX1;
     bc2:	8f e2       	ldi	r24, 0x2F	; 47
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	24 e9       	ldi	r18, 0x94	; 148
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
	wait_spi();
     bcc:	8e e2       	ldi	r24, 0x2E	; 46
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	88 23       	and	r24, r24
     bd6:	d4 f7       	brge	.-12     	; 0xbcc <readRxBufferMCP+0x46>
	
	SPDR = MCP_DUMMY;
     bd8:	8f e2       	ldi	r24, 0x2F	; 47
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	fc 01       	movw	r30, r24
     bde:	10 82       	st	Z, r1
	wait_spi();
     be0:	8e e2       	ldi	r24, 0x2E	; 46
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	88 23       	and	r24, r24
     bea:	d4 f7       	brge	.-12     	; 0xbe0 <readRxBufferMCP+0x5a>
	
	m.id = SPDR<<3; //8 high bits recived and shifted to fit the 11bit format (0x61)
     bec:	8f e2       	ldi	r24, 0x2F	; 47
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	fc 01       	movw	r30, r24
     bf2:	80 81       	ld	r24, Z
     bf4:	88 2f       	mov	r24, r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	9b 83       	std	Y+3, r25	; 0x03
     c06:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
     c08:	8f e2       	ldi	r24, 0x2F	; 47
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	fc 01       	movw	r30, r24
     c0e:	10 82       	st	Z, r1
	wait_spi();    //Recive lower 3 bits of id
     c10:	8e e2       	ldi	r24, 0x2E	; 46
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	fc 01       	movw	r30, r24
     c16:	80 81       	ld	r24, Z
     c18:	88 23       	and	r24, r24
     c1a:	d4 f7       	brge	.-12     	; 0xc10 <readRxBufferMCP+0x8a>
	
	m.id |= (SPDR & 0xE0)>>5;  //Id is received, cleansed and constructed  (0x62)
     c1c:	2a 81       	ldd	r18, Y+2	; 0x02
     c1e:	3b 81       	ldd	r19, Y+3	; 0x03
     c20:	8f e2       	ldi	r24, 0x2F	; 47
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	fc 01       	movw	r30, r24
     c26:	80 81       	ld	r24, Z
     c28:	82 95       	swap	r24
     c2a:	86 95       	lsr	r24
     c2c:	87 70       	andi	r24, 0x07	; 7
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	82 2b       	or	r24, r18
     c36:	93 2b       	or	r25, r19
     c38:	9b 83       	std	Y+3, r25	; 0x03
     c3a:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
     c3c:	8f e2       	ldi	r24, 0x2F	; 47
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	fc 01       	movw	r30, r24
     c42:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x63)
     c44:	8e e2       	ldi	r24, 0x2E	; 46
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	fc 01       	movw	r30, r24
     c4a:	80 81       	ld	r24, Z
     c4c:	88 23       	and	r24, r24
     c4e:	d4 f7       	brge	.-12     	; 0xc44 <readRxBufferMCP+0xbe>
	
	SPDR = MCP_DUMMY;  
     c50:	8f e2       	ldi	r24, 0x2F	; 47
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x64)
     c58:	8e e2       	ldi	r24, 0x2E	; 46
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	80 81       	ld	r24, Z
     c60:	88 23       	and	r24, r24
     c62:	d4 f7       	brge	.-12     	; 0xc58 <readRxBufferMCP+0xd2>
	
	SPDR = MCP_DUMMY;  
     c64:	8f e2       	ldi	r24, 0x2F	; 47
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	fc 01       	movw	r30, r24
     c6a:	10 82       	st	Z, r1
	wait_spi();    //Reads DLC (size) (0x65)
     c6c:	8e e2       	ldi	r24, 0x2E	; 46
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	fc 01       	movw	r30, r24
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	d4 f7       	brge	.-12     	; 0xc6c <readRxBufferMCP+0xe6>
	
	m.size = SPDR & 0x0F;
     c78:	8f e2       	ldi	r24, 0x2F	; 47
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	80 81       	ld	r24, Z
     c80:	8f 70       	andi	r24, 0x0F	; 15
     c82:	8c 83       	std	Y+4, r24	; 0x04
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     c84:	19 82       	std	Y+1, r1	; 0x01
     c86:	1b c0       	rjmp	.+54     	; 0xcbe <readRxBufferMCP+0x138>
		SPDR = MCP_DUMMY;  
     c88:	8f e2       	ldi	r24, 0x2F	; 47
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	fc 01       	movw	r30, r24
     c8e:	10 82       	st	Z, r1
		wait_spi();    //Reads data (0x66..0x6D) 
     c90:	8e e2       	ldi	r24, 0x2E	; 46
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	88 23       	and	r24, r24
     c9a:	d4 f7       	brge	.-12     	; 0xc90 <readRxBufferMCP+0x10a>
		m.data[c] = SPDR;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	2f e2       	ldi	r18, 0x2F	; 47
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	f9 01       	movw	r30, r18
     ca8:	60 81       	ld	r22, Z
     caa:	9e 01       	movw	r18, r28
     cac:	2b 5f       	subi	r18, 0xFB	; 251
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	fc 01       	movw	r30, r24
     cb6:	60 83       	st	Z, r22
	
	m.size = SPDR & 0x0F;
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	89 17       	cp	r24, r25
     cc4:	08 f3       	brcs	.-62     	; 0xc88 <readRxBufferMCP+0x102>
		SPDR = MCP_DUMMY;  
		wait_spi();    //Reads data (0x66..0x6D) 
		m.data[c] = SPDR;
	}
	
	deselect_mcp();
     cc6:	88 e3       	ldi	r24, 0x38	; 56
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	28 e3       	ldi	r18, 0x38	; 56
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	f9 01       	movw	r30, r18
     cd0:	20 81       	ld	r18, Z
     cd2:	21 60       	ori	r18, 0x01	; 1
     cd4:	fc 01       	movw	r30, r24
     cd6:	20 83       	st	Z, r18
	
	return m;
     cd8:	ca 01       	movw	r24, r20
     cda:	9e 01       	movw	r18, r28
     cdc:	2e 5f       	subi	r18, 0xFE	; 254
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	6b e0       	ldi	r22, 0x0B	; 11
     ce2:	f9 01       	movw	r30, r18
     ce4:	00 80       	ld	r0, Z
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	fc 01       	movw	r30, r24
     cec:	00 82       	st	Z, r0
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	61 50       	subi	r22, 0x01	; 1
     cf2:	66 23       	and	r22, r22
     cf4:	b1 f7       	brne	.-20     	; 0xce2 <readRxBufferMCP+0x15c>
}
     cf6:	ca 01       	movw	r24, r20
     cf8:	2d 96       	adiw	r28, 0x0d	; 13
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <fillTxBufferMCP>:


void fillTxBufferMCP(char buffer, struct canMessage m){
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	2e 97       	sbiw	r28, 0x0e	; 14
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	cc 82       	std	Y+4, r12	; 0x04
     d2e:	dd 82       	std	Y+5, r13	; 0x05
     d30:	ee 82       	std	Y+6, r14	; 0x06
     d32:	ff 82       	std	Y+7, r15	; 0x07
     d34:	08 87       	std	Y+8, r16	; 0x08
     d36:	19 87       	std	Y+9, r17	; 0x09
     d38:	2a 87       	std	Y+10, r18	; 0x0a
     d3a:	3b 87       	std	Y+11, r19	; 0x0b
     d3c:	4c 87       	std	Y+12, r20	; 0x0c
     d3e:	5d 87       	std	Y+13, r21	; 0x0d
     d40:	6e 87       	std	Y+14, r22	; 0x0e
	//Adresses are relative to Buffer 0
	select_mcp();
     d42:	88 e3       	ldi	r24, 0x38	; 56
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	28 e3       	ldi	r18, 0x38	; 56
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	f9 01       	movw	r30, r18
     d4c:	20 81       	ld	r18, Z
     d4e:	2e 7f       	andi	r18, 0xFE	; 254
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	29 f4       	brne	.+10     	; 0xd64 <fillTxBufferMCP+0x5a>
     d5a:	8f e2       	ldi	r24, 0x2F	; 47
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	20 e4       	ldi	r18, 0x40	; 64
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	31 f4       	brne	.+12     	; 0xd76 <fillTxBufferMCP+0x6c>
     d6a:	8f e2       	ldi	r24, 0x2F	; 47
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	22 e4       	ldi	r18, 0x42	; 66
     d70:	fc 01       	movw	r30, r24
     d72:	20 83       	st	Z, r18
	else SPDR = MCP_LOAD_TX2;
	wait_spi();
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <fillTxBufferMCP+0x76>
void fillTxBufferMCP(char buffer, struct canMessage m){
	//Adresses are relative to Buffer 0
	select_mcp();
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
	else SPDR = MCP_LOAD_TX2;
     d76:	8f e2       	ldi	r24, 0x2F	; 47
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	24 e4       	ldi	r18, 0x44	; 68
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
	wait_spi();
     d80:	8e e2       	ldi	r24, 0x2E	; 46
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	fc 01       	movw	r30, r24
     d86:	80 81       	ld	r24, Z
     d88:	88 23       	and	r24, r24
     d8a:	d4 f7       	brge	.-12     	; 0xd80 <fillTxBufferMCP+0x76>
	
	uint8_t t;
	
	t = m.id >> 3;
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	96 95       	lsr	r25
     d96:	87 95       	ror	r24
     d98:	96 95       	lsr	r25
     d9a:	87 95       	ror	r24
     d9c:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
     d9e:	8f e2       	ldi	r24, 0x2F	; 47
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	2a 81       	ldd	r18, Y+2	; 0x02
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
	wait_spi();  //sends higher 8 bits of ID to 0x31
     da8:	8e e2       	ldi	r24, 0x2E	; 46
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	80 81       	ld	r24, Z
     db0:	88 23       	and	r24, r24
     db2:	d4 f7       	brge	.-12     	; 0xda8 <fillTxBufferMCP+0x9e>
	
	t = (m.id << 5) & 0xE0;
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	82 95       	swap	r24
     dba:	88 0f       	add	r24, r24
     dbc:	80 7e       	andi	r24, 0xE0	; 224
     dbe:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
     dc0:	8f e2       	ldi	r24, 0x2F	; 47
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	2a 81       	ldd	r18, Y+2	; 0x02
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
	wait_spi(); //sends lower 3 bits to higher bits of 0x32
     dca:	8e e2       	ldi	r24, 0x2E	; 46
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	80 81       	ld	r24, Z
     dd2:	88 23       	and	r24, r24
     dd4:	d4 f7       	brge	.-12     	; 0xdca <fillTxBufferMCP+0xc0>
		
	SPDR = MCP_DUMMY;  
     dd6:	8f e2       	ldi	r24, 0x2F	; 47
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc 01       	movw	r30, r24
     ddc:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill (0x33)
     dde:	8e e2       	ldi	r24, 0x2E	; 46
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	fc 01       	movw	r30, r24
     de4:	80 81       	ld	r24, Z
     de6:	88 23       	and	r24, r24
     de8:	d4 f7       	brge	.-12     	; 0xdde <fillTxBufferMCP+0xd4>
	
	SPDR = MCP_DUMMY;  
     dea:	8f e2       	ldi	r24, 0x2F	; 47
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	fc 01       	movw	r30, r24
     df0:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill(0x34)
     df2:	8e e2       	ldi	r24, 0x2E	; 46
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	88 23       	and	r24, r24
     dfc:	d4 f7       	brge	.-12     	; 0xdf2 <fillTxBufferMCP+0xe8>
	
	
	SPDR = m.size & 0x0F;  
     dfe:	8f e2       	ldi	r24, 0x2F	; 47
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	2e 81       	ldd	r18, Y+6	; 0x06
     e04:	2f 70       	andi	r18, 0x0F	; 15
     e06:	fc 01       	movw	r30, r24
     e08:	20 83       	st	Z, r18
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
     e0a:	8e e2       	ldi	r24, 0x2E	; 46
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	88 23       	and	r24, r24
     e14:	d4 f7       	brge	.-12     	; 0xe0a <fillTxBufferMCP+0x100>
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	17 c0       	rjmp	.+46     	; 0xe48 <fillTxBufferMCP+0x13e>
		SPDR = m.data[c];  
     e1a:	8f e2       	ldi	r24, 0x2F	; 47
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	29 81       	ldd	r18, Y+1	; 0x01
     e20:	22 2f       	mov	r18, r18
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	ae 01       	movw	r20, r28
     e26:	49 5f       	subi	r20, 0xF9	; 249
     e28:	5f 4f       	sbci	r21, 0xFF	; 255
     e2a:	24 0f       	add	r18, r20
     e2c:	35 1f       	adc	r19, r21
     e2e:	f9 01       	movw	r30, r18
     e30:	20 81       	ld	r18, Z
     e32:	fc 01       	movw	r30, r24
     e34:	20 83       	st	Z, r18
		wait_spi();    //fills in data (0x36..0x40) 
     e36:	8e e2       	ldi	r24, 0x2E	; 46
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	80 81       	ld	r24, Z
     e3e:	88 23       	and	r24, r24
     e40:	d4 f7       	brge	.-12     	; 0xe36 <fillTxBufferMCP+0x12c>
	SPDR = m.size & 0x0F;  
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	8f 5f       	subi	r24, 0xFF	; 255
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	89 17       	cp	r24, r25
     e4e:	28 f3       	brcs	.-54     	; 0xe1a <fillTxBufferMCP+0x110>
		SPDR = m.data[c];  
		wait_spi();    //fills in data (0x36..0x40) 
	}
	
	deselect_mcp();
     e50:	88 e3       	ldi	r24, 0x38	; 56
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	28 e3       	ldi	r18, 0x38	; 56
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	f9 01       	movw	r30, r18
     e5a:	20 81       	ld	r18, Z
     e5c:	21 60       	ori	r18, 0x01	; 1
     e5e:	fc 01       	movw	r30, r24
     e60:	20 83       	st	Z, r18
     e62:	2e 96       	adiw	r28, 0x0e	; 14
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	08 95       	ret

00000e80 <initUART>:
 */ 


#include "uart.h"

void initUART(uint16_t ubrr ){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <initUART+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	
	//Init clock generator reg
	UBRR1H = (unsigned char) (ubrr >> 8);
     e8e:	88 e9       	ldi	r24, 0x98	; 152
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	3a 81       	ldd	r19, Y+2	; 0x02
     e96:	23 2f       	mov	r18, r19
     e98:	33 27       	eor	r19, r19
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
	UBRR1L = (unsigned char) ubrr;
     e9e:	89 e9       	ldi	r24, 0x99	; 153
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	29 81       	ldd	r18, Y+1	; 0x01
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
	//UCSR0A = 0b00000000 //TODO: Rx & Tx "polling"
	UCSR1B = 0b00011000;
     ea8:	8a e9       	ldi	r24, 0x9A	; 154
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	28 e1       	ldi	r18, 0x18	; 24
     eae:	fc 01       	movw	r30, r24
     eb0:	20 83       	st	Z, r18
	UCSR1C = 0b10000110;	
     eb2:	8d e9       	ldi	r24, 0x9D	; 157
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	26 e8       	ldi	r18, 0x86	; 134
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
	fdevopen(putC,getC);
     ebc:	82 e8       	ldi	r24, 0x82	; 130
     ebe:	97 e0       	ldi	r25, 0x07	; 7
     ec0:	2a e6       	ldi	r18, 0x6A	; 106
     ec2:	37 e0       	ldi	r19, 0x07	; 7
     ec4:	b9 01       	movw	r22, r18
     ec6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <fdevopen>
}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <getC>:

int getC()
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while( !(UCSR1A & 1 << RXC1) );
     ede:	00 00       	nop
     ee0:	8b e9       	ldi	r24, 0x9B	; 155
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	80 81       	ld	r24, Z
     ee8:	88 23       	and	r24, r24
     eea:	d4 f7       	brge	.-12     	; 0xee0 <getC+0xc>
	c = UDR1;
     eec:	8c e9       	ldi	r24, 0x9C	; 156
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	89 83       	std	Y+1, r24	; 0x01
	return c;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
}
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <putC>:

int putC(char data){
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR1A & 1 << UDRE1) );
     f10:	00 00       	nop
     f12:	8b e9       	ldi	r24, 0x9B	; 155
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	fc 01       	movw	r30, r24
     f18:	80 81       	ld	r24, Z
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	80 72       	andi	r24, 0x20	; 32
     f20:	90 70       	andi	r25, 0x00	; 0
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	b1 f3       	breq	.-20     	; 0xf12 <putC+0xe>
	UDR1 = data;
     f26:	8c e9       	ldi	r24, 0x9C	; 156
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	29 81       	ldd	r18, Y+1	; 0x01
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
	while( !(UCSR1A & 1 << TXC1) );
     f30:	00 00       	nop
     f32:	8b e9       	ldi	r24, 0x9B	; 155
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	fc 01       	movw	r30, r24
     f38:	80 81       	ld	r24, Z
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	80 74       	andi	r24, 0x40	; 64
     f40:	90 70       	andi	r25, 0x00	; 0
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	b1 f3       	breq	.-20     	; 0xf32 <putC+0x2e>
	return 0;
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <__fixunssfsi>:
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	7b 01       	movw	r14, r22
     f5c:	8c 01       	movw	r16, r24
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	5f e4       	ldi	r21, 0x4F	; 79
     f66:	0e 94 a7 0a 	call	0x154e	; 0x154e <__gesf2>
     f6a:	87 fd       	sbrc	r24, 7
     f6c:	11 c0       	rjmp	.+34     	; 0xf90 <__fixunssfsi+0x3e>
     f6e:	c8 01       	movw	r24, r16
     f70:	b7 01       	movw	r22, r14
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	5f e4       	ldi	r21, 0x4F	; 79
     f7a:	0e 94 4c 09 	call	0x1298	; 0x1298 <__subsf3>
     f7e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fixsfsi>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	20 50       	subi	r18, 0x00	; 0
     f88:	30 40       	sbci	r19, 0x00	; 0
     f8a:	40 40       	sbci	r20, 0x00	; 0
     f8c:	50 48       	sbci	r21, 0x80	; 128
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <__fixunssfsi+0x4a>
     f90:	c8 01       	movw	r24, r16
     f92:	b7 01       	movw	r22, r14
     f94:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fixsfsi>
     f98:	9b 01       	movw	r18, r22
     f9a:	ac 01       	movw	r20, r24
     f9c:	b9 01       	movw	r22, r18
     f9e:	ca 01       	movw	r24, r20
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	08 95       	ret

00000faa <_fpadd_parts>:
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	eb ed       	ldi	r30, 0xDB	; 219
     fb0:	f7 e0       	ldi	r31, 0x07	; 7
     fb2:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__prologue_saves__+0x8>
     fb6:	fc 01       	movw	r30, r24
     fb8:	ea 01       	movw	r28, r20
     fba:	80 81       	ld	r24, Z
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <_fpadd_parts+0x18>
     fc0:	38 c1       	rjmp	.+624    	; 0x1232 <__stack+0x133>
     fc2:	db 01       	movw	r26, r22
     fc4:	9c 91       	ld	r25, X
     fc6:	92 30       	cpi	r25, 0x02	; 2
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <_fpadd_parts+0x22>
     fca:	30 c1       	rjmp	.+608    	; 0x122c <__stack+0x12d>
     fcc:	84 30       	cpi	r24, 0x04	; 4
     fce:	59 f4       	brne	.+22     	; 0xfe6 <_fpadd_parts+0x3c>
     fd0:	94 30       	cpi	r25, 0x04	; 4
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <_fpadd_parts+0x2c>
     fd4:	2e c1       	rjmp	.+604    	; 0x1232 <__stack+0x133>
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	8c 91       	ld	r24, X
     fdc:	11 97       	sbiw	r26, 0x01	; 1
     fde:	98 17       	cp	r25, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <_fpadd_parts+0x3a>
     fe2:	21 c1       	rjmp	.+578    	; 0x1226 <__stack+0x127>
     fe4:	26 c1       	rjmp	.+588    	; 0x1232 <__stack+0x133>
     fe6:	94 30       	cpi	r25, 0x04	; 4
     fe8:	09 f4       	brne	.+2      	; 0xfec <_fpadd_parts+0x42>
     fea:	20 c1       	rjmp	.+576    	; 0x122c <__stack+0x12d>
     fec:	92 30       	cpi	r25, 0x02	; 2
     fee:	b1 f4       	brne	.+44     	; 0x101c <_fpadd_parts+0x72>
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	09 f0       	breq	.+2      	; 0xff6 <_fpadd_parts+0x4c>
     ff4:	1e c1       	rjmp	.+572    	; 0x1232 <__stack+0x133>
     ff6:	ca 01       	movw	r24, r20
     ff8:	af 01       	movw	r20, r30
     ffa:	28 e0       	ldi	r18, 0x08	; 8
     ffc:	da 01       	movw	r26, r20
     ffe:	0d 90       	ld	r0, X+
    1000:	ad 01       	movw	r20, r26
    1002:	dc 01       	movw	r26, r24
    1004:	0d 92       	st	X+, r0
    1006:	cd 01       	movw	r24, r26
    1008:	21 50       	subi	r18, 0x01	; 1
    100a:	c1 f7       	brne	.-16     	; 0xffc <_fpadd_parts+0x52>
    100c:	db 01       	movw	r26, r22
    100e:	11 96       	adiw	r26, 0x01	; 1
    1010:	8c 91       	ld	r24, X
    1012:	11 97       	sbiw	r26, 0x01	; 1
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	89 23       	and	r24, r25
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	0a c1       	rjmp	.+532    	; 0x1230 <__stack+0x131>
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	09 f4       	brne	.+2      	; 0x1022 <_fpadd_parts+0x78>
    1020:	05 c1       	rjmp	.+522    	; 0x122c <__stack+0x12d>
    1022:	c2 80       	ldd	r12, Z+2	; 0x02
    1024:	d3 80       	ldd	r13, Z+3	; 0x03
    1026:	db 01       	movw	r26, r22
    1028:	12 96       	adiw	r26, 0x02	; 2
    102a:	6d 90       	ld	r6, X+
    102c:	7c 90       	ld	r7, X
    102e:	13 97       	sbiw	r26, 0x03	; 3
    1030:	24 81       	ldd	r18, Z+4	; 0x04
    1032:	35 81       	ldd	r19, Z+5	; 0x05
    1034:	46 81       	ldd	r20, Z+6	; 0x06
    1036:	57 81       	ldd	r21, Z+7	; 0x07
    1038:	14 96       	adiw	r26, 0x04	; 4
    103a:	ed 90       	ld	r14, X+
    103c:	fd 90       	ld	r15, X+
    103e:	0d 91       	ld	r16, X+
    1040:	1c 91       	ld	r17, X
    1042:	17 97       	sbiw	r26, 0x07	; 7
    1044:	c6 01       	movw	r24, r12
    1046:	86 19       	sub	r24, r6
    1048:	97 09       	sbc	r25, r7
    104a:	5c 01       	movw	r10, r24
    104c:	97 ff       	sbrs	r25, 7
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <_fpadd_parts+0xae>
    1050:	aa 24       	eor	r10, r10
    1052:	bb 24       	eor	r11, r11
    1054:	a8 1a       	sub	r10, r24
    1056:	b9 0a       	sbc	r11, r25
    1058:	b0 e2       	ldi	r27, 0x20	; 32
    105a:	ab 16       	cp	r10, r27
    105c:	b1 04       	cpc	r11, r1
    105e:	0c f0       	brlt	.+2      	; 0x1062 <_fpadd_parts+0xb8>
    1060:	61 c0       	rjmp	.+194    	; 0x1124 <__stack+0x25>
    1062:	18 16       	cp	r1, r24
    1064:	19 06       	cpc	r1, r25
    1066:	6c f5       	brge	.+90     	; 0x10c2 <_fpadd_parts+0x118>
    1068:	37 01       	movw	r6, r14
    106a:	48 01       	movw	r8, r16
    106c:	0a 2c       	mov	r0, r10
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <_fpadd_parts+0xce>
    1070:	96 94       	lsr	r9
    1072:	87 94       	ror	r8
    1074:	77 94       	ror	r7
    1076:	67 94       	ror	r6
    1078:	0a 94       	dec	r0
    107a:	d2 f7       	brpl	.-12     	; 0x1070 <_fpadd_parts+0xc6>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	0a 2c       	mov	r0, r10
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <_fpadd_parts+0xe6>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	aa 1f       	adc	r26, r26
    108e:	bb 1f       	adc	r27, r27
    1090:	0a 94       	dec	r0
    1092:	d2 f7       	brpl	.-12     	; 0x1088 <_fpadd_parts+0xde>
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	a1 09       	sbc	r26, r1
    1098:	b1 09       	sbc	r27, r1
    109a:	8e 21       	and	r24, r14
    109c:	9f 21       	and	r25, r15
    109e:	a0 23       	and	r26, r16
    10a0:	b1 23       	and	r27, r17
    10a2:	ee 24       	eor	r14, r14
    10a4:	ff 24       	eor	r15, r15
    10a6:	87 01       	movw	r16, r14
    10a8:	e3 94       	inc	r14
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	a1 05       	cpc	r26, r1
    10ae:	b1 05       	cpc	r27, r1
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <_fpadd_parts+0x10e>
    10b2:	ee 24       	eor	r14, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	87 01       	movw	r16, r14
    10b8:	e6 28       	or	r14, r6
    10ba:	f7 28       	or	r15, r7
    10bc:	08 29       	or	r16, r8
    10be:	19 29       	or	r17, r9
    10c0:	3c c0       	rjmp	.+120    	; 0x113a <__stack+0x3b>
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	d1 f1       	breq	.+116    	; 0x113a <__stack+0x3b>
    10c6:	ca 0c       	add	r12, r10
    10c8:	db 1c       	adc	r13, r11
    10ca:	39 01       	movw	r6, r18
    10cc:	4a 01       	movw	r8, r20
    10ce:	0a 2c       	mov	r0, r10
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <_fpadd_parts+0x130>
    10d2:	96 94       	lsr	r9
    10d4:	87 94       	ror	r8
    10d6:	77 94       	ror	r7
    10d8:	67 94       	ror	r6
    10da:	0a 94       	dec	r0
    10dc:	d2 f7       	brpl	.-12     	; 0x10d2 <_fpadd_parts+0x128>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a0 e0       	ldi	r26, 0x00	; 0
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	0a 2c       	mov	r0, r10
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <_fpadd_parts+0x148>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	aa 1f       	adc	r26, r26
    10f0:	bb 1f       	adc	r27, r27
    10f2:	0a 94       	dec	r0
    10f4:	d2 f7       	brpl	.-12     	; 0x10ea <_fpadd_parts+0x140>
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	a1 09       	sbc	r26, r1
    10fa:	b1 09       	sbc	r27, r1
    10fc:	82 23       	and	r24, r18
    10fe:	93 23       	and	r25, r19
    1100:	a4 23       	and	r26, r20
    1102:	b5 23       	and	r27, r21
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	a1 05       	cpc	r26, r1
    1110:	b1 05       	cpc	r27, r1
    1112:	19 f4       	brne	.+6      	; 0x111a <__stack+0x1b>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	26 29       	or	r18, r6
    111c:	37 29       	or	r19, r7
    111e:	48 29       	or	r20, r8
    1120:	59 29       	or	r21, r9
    1122:	0b c0       	rjmp	.+22     	; 0x113a <__stack+0x3b>
    1124:	6c 14       	cp	r6, r12
    1126:	7d 04       	cpc	r7, r13
    1128:	24 f4       	brge	.+8      	; 0x1132 <__stack+0x33>
    112a:	ee 24       	eor	r14, r14
    112c:	ff 24       	eor	r15, r15
    112e:	87 01       	movw	r16, r14
    1130:	04 c0       	rjmp	.+8      	; 0x113a <__stack+0x3b>
    1132:	63 01       	movw	r12, r6
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	81 81       	ldd	r24, Z+1	; 0x01
    113c:	fb 01       	movw	r30, r22
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	89 17       	cp	r24, r25
    1142:	09 f4       	brne	.+2      	; 0x1146 <__stack+0x47>
    1144:	45 c0       	rjmp	.+138    	; 0x11d0 <__stack+0xd1>
    1146:	88 23       	and	r24, r24
    1148:	49 f0       	breq	.+18     	; 0x115c <__stack+0x5d>
    114a:	d8 01       	movw	r26, r16
    114c:	c7 01       	movw	r24, r14
    114e:	82 1b       	sub	r24, r18
    1150:	93 0b       	sbc	r25, r19
    1152:	a4 0b       	sbc	r26, r20
    1154:	b5 0b       	sbc	r27, r21
    1156:	9c 01       	movw	r18, r24
    1158:	ad 01       	movw	r20, r26
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <__stack+0x65>
    115c:	2e 19       	sub	r18, r14
    115e:	3f 09       	sbc	r19, r15
    1160:	40 0b       	sbc	r20, r16
    1162:	51 0b       	sbc	r21, r17
    1164:	57 fd       	sbrc	r21, 7
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <__stack+0x71>
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	db 82       	std	Y+3, r13	; 0x03
    116c:	ca 82       	std	Y+2, r12	; 0x02
    116e:	0b c0       	rjmp	.+22     	; 0x1186 <__stack+0x87>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	db 82       	std	Y+3, r13	; 0x03
    1176:	ca 82       	std	Y+2, r12	; 0x02
    1178:	50 95       	com	r21
    117a:	40 95       	com	r20
    117c:	30 95       	com	r19
    117e:	21 95       	neg	r18
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	4f 4f       	sbci	r20, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	2c 83       	std	Y+4, r18	; 0x04
    1188:	3d 83       	std	Y+5, r19	; 0x05
    118a:	4e 83       	std	Y+6, r20	; 0x06
    118c:	5f 83       	std	Y+7, r21	; 0x07
    118e:	0d c0       	rjmp	.+26     	; 0x11aa <__stack+0xab>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	aa 1f       	adc	r26, r26
    1196:	bb 1f       	adc	r27, r27
    1198:	8c 83       	std	Y+4, r24	; 0x04
    119a:	9d 83       	std	Y+5, r25	; 0x05
    119c:	ae 83       	std	Y+6, r26	; 0x06
    119e:	bf 83       	std	Y+7, r27	; 0x07
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	9b 83       	std	Y+3, r25	; 0x03
    11a8:	8a 83       	std	Y+2, r24	; 0x02
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	ae 81       	ldd	r26, Y+6	; 0x06
    11b0:	bf 81       	ldd	r27, Y+7	; 0x07
    11b2:	9c 01       	movw	r18, r24
    11b4:	ad 01       	movw	r20, r26
    11b6:	21 50       	subi	r18, 0x01	; 1
    11b8:	30 40       	sbci	r19, 0x00	; 0
    11ba:	40 40       	sbci	r20, 0x00	; 0
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	2f 3f       	cpi	r18, 0xFF	; 255
    11c0:	ef ef       	ldi	r30, 0xFF	; 255
    11c2:	3e 07       	cpc	r19, r30
    11c4:	ef ef       	ldi	r30, 0xFF	; 255
    11c6:	4e 07       	cpc	r20, r30
    11c8:	ef e3       	ldi	r30, 0x3F	; 63
    11ca:	5e 07       	cpc	r21, r30
    11cc:	08 f3       	brcs	.-62     	; 0x1190 <__stack+0x91>
    11ce:	0b c0       	rjmp	.+22     	; 0x11e6 <__stack+0xe7>
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	db 82       	std	Y+3, r13	; 0x03
    11d4:	ca 82       	std	Y+2, r12	; 0x02
    11d6:	2e 0d       	add	r18, r14
    11d8:	3f 1d       	adc	r19, r15
    11da:	40 1f       	adc	r20, r16
    11dc:	51 1f       	adc	r21, r17
    11de:	2c 83       	std	Y+4, r18	; 0x04
    11e0:	3d 83       	std	Y+5, r19	; 0x05
    11e2:	4e 83       	std	Y+6, r20	; 0x06
    11e4:	5f 83       	std	Y+7, r21	; 0x07
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	88 83       	st	Y, r24
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	4e 81       	ldd	r20, Y+6	; 0x06
    11f0:	5f 81       	ldd	r21, Y+7	; 0x07
    11f2:	57 ff       	sbrs	r21, 7
    11f4:	1d c0       	rjmp	.+58     	; 0x1230 <__stack+0x131>
    11f6:	da 01       	movw	r26, r20
    11f8:	c9 01       	movw	r24, r18
    11fa:	81 70       	andi	r24, 0x01	; 1
    11fc:	90 70       	andi	r25, 0x00	; 0
    11fe:	a0 70       	andi	r26, 0x00	; 0
    1200:	b0 70       	andi	r27, 0x00	; 0
    1202:	56 95       	lsr	r21
    1204:	47 95       	ror	r20
    1206:	37 95       	ror	r19
    1208:	27 95       	ror	r18
    120a:	82 2b       	or	r24, r18
    120c:	93 2b       	or	r25, r19
    120e:	a4 2b       	or	r26, r20
    1210:	b5 2b       	or	r27, r21
    1212:	8c 83       	std	Y+4, r24	; 0x04
    1214:	9d 83       	std	Y+5, r25	; 0x05
    1216:	ae 83       	std	Y+6, r26	; 0x06
    1218:	bf 83       	std	Y+7, r27	; 0x07
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	9b 81       	ldd	r25, Y+3	; 0x03
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	9b 83       	std	Y+3, r25	; 0x03
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <__stack+0x131>
    1226:	ea e5       	ldi	r30, 0x5A	; 90
    1228:	f1 e0       	ldi	r31, 0x01	; 1
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <__stack+0x133>
    122c:	fb 01       	movw	r30, r22
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <__stack+0x133>
    1230:	fe 01       	movw	r30, r28
    1232:	cf 01       	movw	r24, r30
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	ee e0       	ldi	r30, 0x0E	; 14
    123a:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <__epilogue_restores__+0x8>

0000123e <__addsf3>:
    123e:	a0 e2       	ldi	r26, 0x20	; 32
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e2       	ldi	r30, 0x25	; 37
    1244:	f9 e0       	ldi	r31, 0x09	; 9
    1246:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__prologue_saves__+0x18>
    124a:	69 83       	std	Y+1, r22	; 0x01
    124c:	7a 83       	std	Y+2, r23	; 0x02
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	2d 83       	std	Y+5, r18	; 0x05
    1254:	3e 83       	std	Y+6, r19	; 0x06
    1256:	4f 83       	std	Y+7, r20	; 0x07
    1258:	58 87       	std	Y+8, r21	; 0x08
    125a:	89 e0       	ldi	r24, 0x09	; 9
    125c:	e8 2e       	mov	r14, r24
    125e:	f1 2c       	mov	r15, r1
    1260:	ec 0e       	add	r14, r28
    1262:	fd 1e       	adc	r15, r29
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	b7 01       	movw	r22, r14
    126a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    126e:	8e 01       	movw	r16, r28
    1270:	0f 5e       	subi	r16, 0xEF	; 239
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	ce 01       	movw	r24, r28
    1276:	05 96       	adiw	r24, 0x05	; 5
    1278:	b8 01       	movw	r22, r16
    127a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    127e:	c7 01       	movw	r24, r14
    1280:	b8 01       	movw	r22, r16
    1282:	ae 01       	movw	r20, r28
    1284:	47 5e       	subi	r20, 0xE7	; 231
    1286:	5f 4f       	sbci	r21, 0xFF	; 255
    1288:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_fpadd_parts>
    128c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__pack_f>
    1290:	a0 96       	adiw	r28, 0x20	; 32
    1292:	e6 e0       	ldi	r30, 0x06	; 6
    1294:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x18>

00001298 <__subsf3>:
    1298:	a0 e2       	ldi	r26, 0x20	; 32
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e2 e5       	ldi	r30, 0x52	; 82
    129e:	f9 e0       	ldi	r31, 0x09	; 9
    12a0:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__prologue_saves__+0x18>
    12a4:	69 83       	std	Y+1, r22	; 0x01
    12a6:	7a 83       	std	Y+2, r23	; 0x02
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	2d 83       	std	Y+5, r18	; 0x05
    12ae:	3e 83       	std	Y+6, r19	; 0x06
    12b0:	4f 83       	std	Y+7, r20	; 0x07
    12b2:	58 87       	std	Y+8, r21	; 0x08
    12b4:	8e 01       	movw	r16, r28
    12b6:	07 5f       	subi	r16, 0xF7	; 247
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	b8 01       	movw	r22, r16
    12c0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    12c4:	91 e1       	ldi	r25, 0x11	; 17
    12c6:	e9 2e       	mov	r14, r25
    12c8:	f1 2c       	mov	r15, r1
    12ca:	ec 0e       	add	r14, r28
    12cc:	fd 1e       	adc	r15, r29
    12ce:	ce 01       	movw	r24, r28
    12d0:	05 96       	adiw	r24, 0x05	; 5
    12d2:	b7 01       	movw	r22, r14
    12d4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    12d8:	8a 89       	ldd	r24, Y+18	; 0x12
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	89 27       	eor	r24, r25
    12de:	8a 8b       	std	Y+18, r24	; 0x12
    12e0:	c8 01       	movw	r24, r16
    12e2:	b7 01       	movw	r22, r14
    12e4:	ae 01       	movw	r20, r28
    12e6:	47 5e       	subi	r20, 0xE7	; 231
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ea:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_fpadd_parts>
    12ee:	0e 94 13 0c 	call	0x1826	; 0x1826 <__pack_f>
    12f2:	a0 96       	adiw	r28, 0x20	; 32
    12f4:	e6 e0       	ldi	r30, 0x06	; 6
    12f6:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x18>

000012fa <__mulsf3>:
    12fa:	a0 e2       	ldi	r26, 0x20	; 32
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e3 e8       	ldi	r30, 0x83	; 131
    1300:	f9 e0       	ldi	r31, 0x09	; 9
    1302:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__>
    1306:	69 83       	std	Y+1, r22	; 0x01
    1308:	7a 83       	std	Y+2, r23	; 0x02
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	2d 83       	std	Y+5, r18	; 0x05
    1310:	3e 83       	std	Y+6, r19	; 0x06
    1312:	4f 83       	std	Y+7, r20	; 0x07
    1314:	58 87       	std	Y+8, r21	; 0x08
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	be 01       	movw	r22, r28
    131c:	67 5f       	subi	r22, 0xF7	; 247
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    1324:	ce 01       	movw	r24, r28
    1326:	05 96       	adiw	r24, 0x05	; 5
    1328:	be 01       	movw	r22, r28
    132a:	6f 5e       	subi	r22, 0xEF	; 239
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    1332:	99 85       	ldd	r25, Y+9	; 0x09
    1334:	92 30       	cpi	r25, 0x02	; 2
    1336:	78 f0       	brcs	.+30     	; 0x1356 <__mulsf3+0x5c>
    1338:	89 89       	ldd	r24, Y+17	; 0x11
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	c0 f0       	brcs	.+48     	; 0x136e <__mulsf3+0x74>
    133e:	94 30       	cpi	r25, 0x04	; 4
    1340:	19 f4       	brne	.+6      	; 0x1348 <__mulsf3+0x4e>
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	41 f4       	brne	.+16     	; 0x1356 <__mulsf3+0x5c>
    1346:	cb c0       	rjmp	.+406    	; 0x14de <__mulsf3+0x1e4>
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	19 f4       	brne	.+6      	; 0x1352 <__mulsf3+0x58>
    134c:	92 30       	cpi	r25, 0x02	; 2
    134e:	79 f4       	brne	.+30     	; 0x136e <__mulsf3+0x74>
    1350:	c6 c0       	rjmp	.+396    	; 0x14de <__mulsf3+0x1e4>
    1352:	92 30       	cpi	r25, 0x02	; 2
    1354:	51 f4       	brne	.+20     	; 0x136a <__mulsf3+0x70>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	2a 85       	ldd	r18, Y+10	; 0x0a
    135a:	9a 89       	ldd	r25, Y+18	; 0x12
    135c:	29 17       	cp	r18, r25
    135e:	09 f4       	brne	.+2      	; 0x1362 <__mulsf3+0x68>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	8a 87       	std	Y+10, r24	; 0x0a
    1364:	ce 01       	movw	r24, r28
    1366:	09 96       	adiw	r24, 0x09	; 9
    1368:	bc c0       	rjmp	.+376    	; 0x14e2 <__mulsf3+0x1e8>
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	51 f4       	brne	.+20     	; 0x1382 <__mulsf3+0x88>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	2a 85       	ldd	r18, Y+10	; 0x0a
    1372:	9a 89       	ldd	r25, Y+18	; 0x12
    1374:	29 17       	cp	r18, r25
    1376:	09 f4       	brne	.+2      	; 0x137a <__mulsf3+0x80>
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	8a 8b       	std	Y+18, r24	; 0x12
    137c:	ce 01       	movw	r24, r28
    137e:	41 96       	adiw	r24, 0x11	; 17
    1380:	b0 c0       	rjmp	.+352    	; 0x14e2 <__mulsf3+0x1e8>
    1382:	6d 84       	ldd	r6, Y+13	; 0x0d
    1384:	7e 84       	ldd	r7, Y+14	; 0x0e
    1386:	8f 84       	ldd	r8, Y+15	; 0x0f
    1388:	98 88       	ldd	r9, Y+16	; 0x10
    138a:	ed 88       	ldd	r14, Y+21	; 0x15
    138c:	fe 88       	ldd	r15, Y+22	; 0x16
    138e:	0f 89       	ldd	r16, Y+23	; 0x17
    1390:	18 8d       	ldd	r17, Y+24	; 0x18
    1392:	e0 e2       	ldi	r30, 0x20	; 32
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	dc 01       	movw	r26, r24
    139c:	aa 24       	eor	r10, r10
    139e:	bb 24       	eor	r11, r11
    13a0:	65 01       	movw	r12, r10
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	a9 01       	movw	r20, r18
    13a8:	b3 01       	movw	r22, r6
    13aa:	61 70       	andi	r22, 0x01	; 1
    13ac:	70 70       	andi	r23, 0x00	; 0
    13ae:	61 15       	cp	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	d1 f0       	breq	.+52     	; 0x13e8 <__mulsf3+0xee>
    13b4:	2e 0d       	add	r18, r14
    13b6:	3f 1d       	adc	r19, r15
    13b8:	40 1f       	adc	r20, r16
    13ba:	51 1f       	adc	r21, r17
    13bc:	15 01       	movw	r2, r10
    13be:	26 01       	movw	r4, r12
    13c0:	28 0e       	add	r2, r24
    13c2:	39 1e       	adc	r3, r25
    13c4:	4a 1e       	adc	r4, r26
    13c6:	5b 1e       	adc	r5, r27
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	2e 15       	cp	r18, r14
    13d2:	3f 05       	cpc	r19, r15
    13d4:	40 07       	cpc	r20, r16
    13d6:	51 07       	cpc	r21, r17
    13d8:	18 f0       	brcs	.+6      	; 0x13e0 <__mulsf3+0xe6>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	dc 01       	movw	r26, r24
    13e0:	82 0d       	add	r24, r2
    13e2:	93 1d       	adc	r25, r3
    13e4:	a4 1d       	adc	r26, r4
    13e6:	b5 1d       	adc	r27, r5
    13e8:	aa 0c       	add	r10, r10
    13ea:	bb 1c       	adc	r11, r11
    13ec:	cc 1c       	adc	r12, r12
    13ee:	dd 1c       	adc	r13, r13
    13f0:	17 ff       	sbrs	r17, 7
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <__mulsf3+0x10c>
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	26 2e       	mov	r2, r22
    13f8:	31 2c       	mov	r3, r1
    13fa:	41 2c       	mov	r4, r1
    13fc:	51 2c       	mov	r5, r1
    13fe:	a2 28       	or	r10, r2
    1400:	b3 28       	or	r11, r3
    1402:	c4 28       	or	r12, r4
    1404:	d5 28       	or	r13, r5
    1406:	31 97       	sbiw	r30, 0x01	; 1
    1408:	49 f0       	breq	.+18     	; 0x141c <__mulsf3+0x122>
    140a:	ee 0c       	add	r14, r14
    140c:	ff 1c       	adc	r15, r15
    140e:	00 1f       	adc	r16, r16
    1410:	11 1f       	adc	r17, r17
    1412:	96 94       	lsr	r9
    1414:	87 94       	ror	r8
    1416:	77 94       	ror	r7
    1418:	67 94       	ror	r6
    141a:	c6 cf       	rjmp	.-116    	; 0x13a8 <__mulsf3+0xae>
    141c:	6b 89       	ldd	r22, Y+19	; 0x13
    141e:	7c 89       	ldd	r23, Y+20	; 0x14
    1420:	eb 85       	ldd	r30, Y+11	; 0x0b
    1422:	fc 85       	ldd	r31, Y+12	; 0x0c
    1424:	6e 0f       	add	r22, r30
    1426:	7f 1f       	adc	r23, r31
    1428:	6e 5f       	subi	r22, 0xFE	; 254
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	7c 8f       	std	Y+28, r23	; 0x1c
    142e:	6b 8f       	std	Y+27, r22	; 0x1b
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	ea 85       	ldd	r30, Y+10	; 0x0a
    1434:	7a 89       	ldd	r23, Y+18	; 0x12
    1436:	e7 17       	cp	r30, r23
    1438:	09 f4       	brne	.+2      	; 0x143c <__mulsf3+0x142>
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	6a 8f       	std	Y+26, r22	; 0x1a
    143e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1440:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1442:	10 c0       	rjmp	.+32     	; 0x1464 <__mulsf3+0x16a>
    1444:	fc 01       	movw	r30, r24
    1446:	e1 70       	andi	r30, 0x01	; 1
    1448:	f0 70       	andi	r31, 0x00	; 0
    144a:	30 97       	sbiw	r30, 0x00	; 0
    144c:	29 f0       	breq	.+10     	; 0x1458 <__mulsf3+0x15e>
    144e:	56 95       	lsr	r21
    1450:	47 95       	ror	r20
    1452:	37 95       	ror	r19
    1454:	27 95       	ror	r18
    1456:	50 68       	ori	r21, 0x80	; 128
    1458:	b6 95       	lsr	r27
    145a:	a7 95       	ror	r26
    145c:	97 95       	ror	r25
    145e:	87 95       	ror	r24
    1460:	6f 5f       	subi	r22, 0xFF	; 255
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	b7 fd       	sbrc	r27, 7
    1466:	ee cf       	rjmp	.-36     	; 0x1444 <__mulsf3+0x14a>
    1468:	0c c0       	rjmp	.+24     	; 0x1482 <__mulsf3+0x188>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	aa 1f       	adc	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	57 fd       	sbrc	r21, 7
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	22 0f       	add	r18, r18
    1478:	33 1f       	adc	r19, r19
    147a:	44 1f       	adc	r20, r20
    147c:	55 1f       	adc	r21, r21
    147e:	61 50       	subi	r22, 0x01	; 1
    1480:	70 40       	sbci	r23, 0x00	; 0
    1482:	80 30       	cpi	r24, 0x00	; 0
    1484:	e0 e0       	ldi	r30, 0x00	; 0
    1486:	9e 07       	cpc	r25, r30
    1488:	e0 e0       	ldi	r30, 0x00	; 0
    148a:	ae 07       	cpc	r26, r30
    148c:	e0 e4       	ldi	r30, 0x40	; 64
    148e:	be 07       	cpc	r27, r30
    1490:	60 f3       	brcs	.-40     	; 0x146a <__mulsf3+0x170>
    1492:	6b 8f       	std	Y+27, r22	; 0x1b
    1494:	7c 8f       	std	Y+28, r23	; 0x1c
    1496:	6f e7       	ldi	r22, 0x7F	; 127
    1498:	e6 2e       	mov	r14, r22
    149a:	f1 2c       	mov	r15, r1
    149c:	01 2d       	mov	r16, r1
    149e:	11 2d       	mov	r17, r1
    14a0:	e8 22       	and	r14, r24
    14a2:	f9 22       	and	r15, r25
    14a4:	0a 23       	and	r16, r26
    14a6:	1b 23       	and	r17, r27
    14a8:	60 e4       	ldi	r22, 0x40	; 64
    14aa:	e6 16       	cp	r14, r22
    14ac:	f1 04       	cpc	r15, r1
    14ae:	01 05       	cpc	r16, r1
    14b0:	11 05       	cpc	r17, r1
    14b2:	61 f4       	brne	.+24     	; 0x14cc <__mulsf3+0x1d2>
    14b4:	87 fd       	sbrc	r24, 7
    14b6:	0a c0       	rjmp	.+20     	; 0x14cc <__mulsf3+0x1d2>
    14b8:	21 15       	cp	r18, r1
    14ba:	31 05       	cpc	r19, r1
    14bc:	41 05       	cpc	r20, r1
    14be:	51 05       	cpc	r21, r1
    14c0:	29 f0       	breq	.+10     	; 0x14cc <__mulsf3+0x1d2>
    14c2:	80 5c       	subi	r24, 0xC0	; 192
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	af 4f       	sbci	r26, 0xFF	; 255
    14c8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ca:	80 78       	andi	r24, 0x80	; 128
    14cc:	8d 8f       	std	Y+29, r24	; 0x1d
    14ce:	9e 8f       	std	Y+30, r25	; 0x1e
    14d0:	af 8f       	std	Y+31, r26	; 0x1f
    14d2:	b8 a3       	std	Y+32, r27	; 0x20
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	89 8f       	std	Y+25, r24	; 0x19
    14d8:	ce 01       	movw	r24, r28
    14da:	49 96       	adiw	r24, 0x19	; 25
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <__mulsf3+0x1e8>
    14de:	8a e5       	ldi	r24, 0x5A	; 90
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 13 0c 	call	0x1826	; 0x1826 <__pack_f>
    14e6:	a0 96       	adiw	r28, 0x20	; 32
    14e8:	e2 e1       	ldi	r30, 0x12	; 18
    14ea:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__>

000014ee <__gtsf2>:
    14ee:	a8 e1       	ldi	r26, 0x18	; 24
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ed e7       	ldi	r30, 0x7D	; 125
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__prologue_saves__+0x18>
    14fa:	69 83       	std	Y+1, r22	; 0x01
    14fc:	7a 83       	std	Y+2, r23	; 0x02
    14fe:	8b 83       	std	Y+3, r24	; 0x03
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	2d 83       	std	Y+5, r18	; 0x05
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	4f 83       	std	Y+7, r20	; 0x07
    1508:	58 87       	std	Y+8, r21	; 0x08
    150a:	8e 01       	movw	r16, r28
    150c:	07 5f       	subi	r16, 0xF7	; 247
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ce 01       	movw	r24, r28
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	b8 01       	movw	r22, r16
    1516:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    151a:	81 e1       	ldi	r24, 0x11	; 17
    151c:	e8 2e       	mov	r14, r24
    151e:	f1 2c       	mov	r15, r1
    1520:	ec 0e       	add	r14, r28
    1522:	fd 1e       	adc	r15, r29
    1524:	ce 01       	movw	r24, r28
    1526:	05 96       	adiw	r24, 0x05	; 5
    1528:	b7 01       	movw	r22, r14
    152a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	40 f0       	brcs	.+16     	; 0x1544 <__gtsf2+0x56>
    1534:	89 89       	ldd	r24, Y+17	; 0x11
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	28 f0       	brcs	.+10     	; 0x1544 <__gtsf2+0x56>
    153a:	c8 01       	movw	r24, r16
    153c:	b7 01       	movw	r22, r14
    153e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fpcmp_parts_f>
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <__gtsf2+0x58>
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	68 96       	adiw	r28, 0x18	; 24
    1548:	e6 e0       	ldi	r30, 0x06	; 6
    154a:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x18>

0000154e <__gesf2>:
    154e:	a8 e1       	ldi	r26, 0x18	; 24
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ed ea       	ldi	r30, 0xAD	; 173
    1554:	fa e0       	ldi	r31, 0x0A	; 10
    1556:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__prologue_saves__+0x18>
    155a:	69 83       	std	Y+1, r22	; 0x01
    155c:	7a 83       	std	Y+2, r23	; 0x02
    155e:	8b 83       	std	Y+3, r24	; 0x03
    1560:	9c 83       	std	Y+4, r25	; 0x04
    1562:	2d 83       	std	Y+5, r18	; 0x05
    1564:	3e 83       	std	Y+6, r19	; 0x06
    1566:	4f 83       	std	Y+7, r20	; 0x07
    1568:	58 87       	std	Y+8, r21	; 0x08
    156a:	8e 01       	movw	r16, r28
    156c:	07 5f       	subi	r16, 0xF7	; 247
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	ce 01       	movw	r24, r28
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	b8 01       	movw	r22, r16
    1576:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    157a:	81 e1       	ldi	r24, 0x11	; 17
    157c:	e8 2e       	mov	r14, r24
    157e:	f1 2c       	mov	r15, r1
    1580:	ec 0e       	add	r14, r28
    1582:	fd 1e       	adc	r15, r29
    1584:	ce 01       	movw	r24, r28
    1586:	05 96       	adiw	r24, 0x05	; 5
    1588:	b7 01       	movw	r22, r14
    158a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	40 f0       	brcs	.+16     	; 0x15a4 <__gesf2+0x56>
    1594:	89 89       	ldd	r24, Y+17	; 0x11
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	28 f0       	brcs	.+10     	; 0x15a4 <__gesf2+0x56>
    159a:	c8 01       	movw	r24, r16
    159c:	b7 01       	movw	r22, r14
    159e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fpcmp_parts_f>
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <__gesf2+0x58>
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	68 96       	adiw	r28, 0x18	; 24
    15a8:	e6 e0       	ldi	r30, 0x06	; 6
    15aa:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x18>

000015ae <__ltsf2>:
    15ae:	a8 e1       	ldi	r26, 0x18	; 24
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ed ed       	ldi	r30, 0xDD	; 221
    15b4:	fa e0       	ldi	r31, 0x0A	; 10
    15b6:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__prologue_saves__+0x18>
    15ba:	69 83       	std	Y+1, r22	; 0x01
    15bc:	7a 83       	std	Y+2, r23	; 0x02
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	8e 01       	movw	r16, r28
    15cc:	07 5f       	subi	r16, 0xF7	; 247
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	ce 01       	movw	r24, r28
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	b8 01       	movw	r22, r16
    15d6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    15da:	81 e1       	ldi	r24, 0x11	; 17
    15dc:	e8 2e       	mov	r14, r24
    15de:	f1 2c       	mov	r15, r1
    15e0:	ec 0e       	add	r14, r28
    15e2:	fd 1e       	adc	r15, r29
    15e4:	ce 01       	movw	r24, r28
    15e6:	05 96       	adiw	r24, 0x05	; 5
    15e8:	b7 01       	movw	r22, r14
    15ea:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	40 f0       	brcs	.+16     	; 0x1604 <__ltsf2+0x56>
    15f4:	89 89       	ldd	r24, Y+17	; 0x11
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	28 f0       	brcs	.+10     	; 0x1604 <__ltsf2+0x56>
    15fa:	c8 01       	movw	r24, r16
    15fc:	b7 01       	movw	r22, r14
    15fe:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fpcmp_parts_f>
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <__ltsf2+0x58>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	68 96       	adiw	r28, 0x18	; 24
    1608:	e6 e0       	ldi	r30, 0x06	; 6
    160a:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x18>

0000160e <__floatsisf>:
    160e:	a8 e0       	ldi	r26, 0x08	; 8
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e0       	ldi	r30, 0x0D	; 13
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__prologue_saves__+0x18>
    161a:	7b 01       	movw	r14, r22
    161c:	8c 01       	movw	r16, r24
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	d8 01       	movw	r26, r16
    1624:	c7 01       	movw	r24, r14
    1626:	88 27       	eor	r24, r24
    1628:	b7 fd       	sbrc	r27, 7
    162a:	83 95       	inc	r24
    162c:	99 27       	eor	r25, r25
    162e:	aa 27       	eor	r26, r26
    1630:	bb 27       	eor	r27, r27
    1632:	28 2f       	mov	r18, r24
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	e1 14       	cp	r14, r1
    1638:	f1 04       	cpc	r15, r1
    163a:	01 05       	cpc	r16, r1
    163c:	11 05       	cpc	r17, r1
    163e:	19 f4       	brne	.+6      	; 0x1646 <__floatsisf+0x38>
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	37 c0       	rjmp	.+110    	; 0x16b4 <__floatsisf+0xa6>
    1646:	8e e1       	ldi	r24, 0x1E	; 30
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	22 23       	and	r18, r18
    1650:	89 f0       	breq	.+34     	; 0x1674 <__floatsisf+0x66>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	e8 16       	cp	r14, r24
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	f8 06       	cpc	r15, r24
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	08 07       	cpc	r16, r24
    165e:	80 e8       	ldi	r24, 0x80	; 128
    1660:	18 07       	cpc	r17, r24
    1662:	69 f1       	breq	.+90     	; 0x16be <__floatsisf+0xb0>
    1664:	10 95       	com	r17
    1666:	00 95       	com	r16
    1668:	f0 94       	com	r15
    166a:	e0 94       	com	r14
    166c:	e1 1c       	adc	r14, r1
    166e:	f1 1c       	adc	r15, r1
    1670:	01 1d       	adc	r16, r1
    1672:	11 1d       	adc	r17, r1
    1674:	ed 82       	std	Y+5, r14	; 0x05
    1676:	fe 82       	std	Y+6, r15	; 0x06
    1678:	0f 83       	std	Y+7, r16	; 0x07
    167a:	18 87       	std	Y+8, r17	; 0x08
    167c:	c8 01       	movw	r24, r16
    167e:	b7 01       	movw	r22, r14
    1680:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__clzsi2>
    1684:	9c 01       	movw	r18, r24
    1686:	21 50       	subi	r18, 0x01	; 1
    1688:	30 40       	sbci	r19, 0x00	; 0
    168a:	12 16       	cp	r1, r18
    168c:	13 06       	cpc	r1, r19
    168e:	94 f4       	brge	.+36     	; 0x16b4 <__floatsisf+0xa6>
    1690:	02 2e       	mov	r0, r18
    1692:	04 c0       	rjmp	.+8      	; 0x169c <__floatsisf+0x8e>
    1694:	ee 0c       	add	r14, r14
    1696:	ff 1c       	adc	r15, r15
    1698:	00 1f       	adc	r16, r16
    169a:	11 1f       	adc	r17, r17
    169c:	0a 94       	dec	r0
    169e:	d2 f7       	brpl	.-12     	; 0x1694 <__floatsisf+0x86>
    16a0:	ed 82       	std	Y+5, r14	; 0x05
    16a2:	fe 82       	std	Y+6, r15	; 0x06
    16a4:	0f 83       	std	Y+7, r16	; 0x07
    16a6:	18 87       	std	Y+8, r17	; 0x08
    16a8:	8e e1       	ldi	r24, 0x1E	; 30
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	82 1b       	sub	r24, r18
    16ae:	93 0b       	sbc	r25, r19
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	8b 83       	std	Y+3, r24	; 0x03
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	0e 94 13 0c 	call	0x1826	; 0x1826 <__pack_f>
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <__floatsisf+0xb8>
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	9f ec       	ldi	r25, 0xCF	; 207
    16c6:	28 96       	adiw	r28, 0x08	; 8
    16c8:	e6 e0       	ldi	r30, 0x06	; 6
    16ca:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x18>

000016ce <__fixsfsi>:
    16ce:	ac e0       	ldi	r26, 0x0C	; 12
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ed e6       	ldi	r30, 0x6D	; 109
    16d4:	fb e0       	ldi	r31, 0x0B	; 11
    16d6:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__prologue_saves__+0x20>
    16da:	69 83       	std	Y+1, r22	; 0x01
    16dc:	7a 83       	std	Y+2, r23	; 0x02
    16de:	8b 83       	std	Y+3, r24	; 0x03
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	ce 01       	movw	r24, r28
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	be 01       	movw	r22, r28
    16e8:	6b 5f       	subi	r22, 0xFB	; 251
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__unpack_f>
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	81 f1       	breq	.+96     	; 0x1756 <__fixsfsi+0x88>
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	70 f1       	brcs	.+92     	; 0x1756 <__fixsfsi+0x88>
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	21 f4       	brne	.+8      	; 0x1706 <__fixsfsi+0x38>
    16fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1700:	88 23       	and	r24, r24
    1702:	69 f1       	breq	.+90     	; 0x175e <__fixsfsi+0x90>
    1704:	0a c0       	rjmp	.+20     	; 0x171a <__fixsfsi+0x4c>
    1706:	2f 81       	ldd	r18, Y+7	; 0x07
    1708:	38 85       	ldd	r19, Y+8	; 0x08
    170a:	37 fd       	sbrc	r19, 7
    170c:	24 c0       	rjmp	.+72     	; 0x1756 <__fixsfsi+0x88>
    170e:	6e 81       	ldd	r22, Y+6	; 0x06
    1710:	2f 31       	cpi	r18, 0x1F	; 31
    1712:	31 05       	cpc	r19, r1
    1714:	3c f0       	brlt	.+14     	; 0x1724 <__fixsfsi+0x56>
    1716:	66 23       	and	r22, r22
    1718:	11 f1       	breq	.+68     	; 0x175e <__fixsfsi+0x90>
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e8       	ldi	r21, 0x80	; 128
    1722:	21 c0       	rjmp	.+66     	; 0x1766 <__fixsfsi+0x98>
    1724:	8e e1       	ldi	r24, 0x1E	; 30
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	82 1b       	sub	r24, r18
    172a:	93 0b       	sbc	r25, r19
    172c:	29 85       	ldd	r18, Y+9	; 0x09
    172e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1730:	4b 85       	ldd	r20, Y+11	; 0x0b
    1732:	5c 85       	ldd	r21, Y+12	; 0x0c
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__fixsfsi+0x70>
    1736:	56 95       	lsr	r21
    1738:	47 95       	ror	r20
    173a:	37 95       	ror	r19
    173c:	27 95       	ror	r18
    173e:	8a 95       	dec	r24
    1740:	d2 f7       	brpl	.-12     	; 0x1736 <__fixsfsi+0x68>
    1742:	66 23       	and	r22, r22
    1744:	81 f0       	breq	.+32     	; 0x1766 <__fixsfsi+0x98>
    1746:	50 95       	com	r21
    1748:	40 95       	com	r20
    174a:	30 95       	com	r19
    174c:	21 95       	neg	r18
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	4f 4f       	sbci	r20, 0xFF	; 255
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <__fixsfsi+0x98>
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__fixsfsi+0x98>
    175e:	2f ef       	ldi	r18, 0xFF	; 255
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f ef       	ldi	r20, 0xFF	; 255
    1764:	5f e7       	ldi	r21, 0x7F	; 127
    1766:	b9 01       	movw	r22, r18
    1768:	ca 01       	movw	r24, r20
    176a:	2c 96       	adiw	r28, 0x0c	; 12
    176c:	e2 e0       	ldi	r30, 0x02	; 2
    176e:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__epilogue_restores__+0x20>

00001772 <__clzsi2>:
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	7b 01       	movw	r14, r22
    1784:	8c 01       	movw	r16, r24
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	e8 16       	cp	r14, r24
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	f8 06       	cpc	r15, r24
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	08 07       	cpc	r16, r24
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	18 07       	cpc	r17, r24
    1796:	58 f4       	brcc	.+22     	; 0x17ae <__clzsi2+0x3c>
    1798:	ef ef       	ldi	r30, 0xFF	; 255
    179a:	ee 16       	cp	r14, r30
    179c:	f1 04       	cpc	r15, r1
    179e:	01 05       	cpc	r16, r1
    17a0:	11 05       	cpc	r17, r1
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <__clzsi2+0x34>
    17a4:	90 f4       	brcc	.+36     	; 0x17ca <__clzsi2+0x58>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	dc 01       	movw	r26, r24
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <__clzsi2+0x6a>
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	ef 16       	cp	r14, r31
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	ff 06       	cpc	r15, r31
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	0f 07       	cpc	r16, r31
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	1f 07       	cpc	r17, r31
    17be:	50 f4       	brcc	.+20     	; 0x17d4 <__clzsi2+0x62>
    17c0:	80 e1       	ldi	r24, 0x10	; 16
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <__clzsi2+0x6a>
    17ca:	88 e0       	ldi	r24, 0x08	; 8
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__clzsi2+0x6a>
    17d4:	88 e1       	ldi	r24, 0x18	; 24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e0       	ldi	r26, 0x00	; 0
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	20 e2       	ldi	r18, 0x20	; 32
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	28 1b       	sub	r18, r24
    17e6:	39 0b       	sbc	r19, r25
    17e8:	4a 0b       	sbc	r20, r26
    17ea:	5b 0b       	sbc	r21, r27
    17ec:	57 01       	movw	r10, r14
    17ee:	68 01       	movw	r12, r16
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <__clzsi2+0x88>
    17f2:	d6 94       	lsr	r13
    17f4:	c7 94       	ror	r12
    17f6:	b7 94       	ror	r11
    17f8:	a7 94       	ror	r10
    17fa:	8a 95       	dec	r24
    17fc:	d2 f7       	brpl	.-12     	; 0x17f2 <__clzsi2+0x80>
    17fe:	d6 01       	movw	r26, r12
    1800:	c5 01       	movw	r24, r10
    1802:	8e 59       	subi	r24, 0x9E	; 158
    1804:	9e 4f       	sbci	r25, 0xFE	; 254
    1806:	fc 01       	movw	r30, r24
    1808:	80 81       	ld	r24, Z
    180a:	28 1b       	sub	r18, r24
    180c:	31 09       	sbc	r19, r1
    180e:	41 09       	sbc	r20, r1
    1810:	51 09       	sbc	r21, r1
    1812:	c9 01       	movw	r24, r18
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	08 95       	ret

00001826 <__pack_f>:
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	fc 01       	movw	r30, r24
    1834:	24 81       	ldd	r18, Z+4	; 0x04
    1836:	35 81       	ldd	r19, Z+5	; 0x05
    1838:	46 81       	ldd	r20, Z+6	; 0x06
    183a:	57 81       	ldd	r21, Z+7	; 0x07
    183c:	61 81       	ldd	r22, Z+1	; 0x01
    183e:	80 81       	ld	r24, Z
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	20 f4       	brcc	.+8      	; 0x184c <__pack_f+0x26>
    1844:	40 61       	ori	r20, 0x10	; 16
    1846:	ef ef       	ldi	r30, 0xFF	; 255
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	a3 c0       	rjmp	.+326    	; 0x1992 <__pack_f+0x16c>
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	09 f4       	brne	.+2      	; 0x1852 <__pack_f+0x2c>
    1850:	9b c0       	rjmp	.+310    	; 0x1988 <__pack_f+0x162>
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	09 f4       	brne	.+2      	; 0x1858 <__pack_f+0x32>
    1856:	92 c0       	rjmp	.+292    	; 0x197c <__pack_f+0x156>
    1858:	21 15       	cp	r18, r1
    185a:	31 05       	cpc	r19, r1
    185c:	41 05       	cpc	r20, r1
    185e:	51 05       	cpc	r21, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <__pack_f+0x3e>
    1862:	8f c0       	rjmp	.+286    	; 0x1982 <__pack_f+0x15c>
    1864:	02 80       	ldd	r0, Z+2	; 0x02
    1866:	f3 81       	ldd	r31, Z+3	; 0x03
    1868:	e0 2d       	mov	r30, r0
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	e2 38       	cpi	r30, 0x82	; 130
    186e:	f8 07       	cpc	r31, r24
    1870:	0c f0       	brlt	.+2      	; 0x1874 <__pack_f+0x4e>
    1872:	5a c0       	rjmp	.+180    	; 0x1928 <__pack_f+0x102>
    1874:	c2 e8       	ldi	r28, 0x82	; 130
    1876:	df ef       	ldi	r29, 0xFF	; 255
    1878:	ce 1b       	sub	r28, r30
    187a:	df 0b       	sbc	r29, r31
    187c:	ca 31       	cpi	r28, 0x1A	; 26
    187e:	d1 05       	cpc	r29, r1
    1880:	6c f5       	brge	.+90     	; 0x18dc <__pack_f+0xb6>
    1882:	79 01       	movw	r14, r18
    1884:	8a 01       	movw	r16, r20
    1886:	0c 2e       	mov	r0, r28
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <__pack_f+0x6c>
    188a:	16 95       	lsr	r17
    188c:	07 95       	ror	r16
    188e:	f7 94       	ror	r15
    1890:	e7 94       	ror	r14
    1892:	0a 94       	dec	r0
    1894:	d2 f7       	brpl	.-12     	; 0x188a <__pack_f+0x64>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e0       	ldi	r26, 0x00	; 0
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	0c 2e       	mov	r0, r28
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__pack_f+0x84>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	aa 1f       	adc	r26, r26
    18a8:	bb 1f       	adc	r27, r27
    18aa:	0a 94       	dec	r0
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <__pack_f+0x7c>
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	a1 09       	sbc	r26, r1
    18b2:	b1 09       	sbc	r27, r1
    18b4:	82 23       	and	r24, r18
    18b6:	93 23       	and	r25, r19
    18b8:	a4 23       	and	r26, r20
    18ba:	b5 23       	and	r27, r21
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	a1 05       	cpc	r26, r1
    18c8:	b1 05       	cpc	r27, r1
    18ca:	19 f4       	brne	.+6      	; 0x18d2 <__pack_f+0xac>
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	a9 01       	movw	r20, r18
    18d2:	2e 29       	or	r18, r14
    18d4:	3f 29       	or	r19, r15
    18d6:	40 2b       	or	r20, r16
    18d8:	51 2b       	or	r21, r17
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <__pack_f+0xbc>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	da 01       	movw	r26, r20
    18e4:	c9 01       	movw	r24, r18
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	a0 70       	andi	r26, 0x00	; 0
    18ec:	b0 70       	andi	r27, 0x00	; 0
    18ee:	80 34       	cpi	r24, 0x40	; 64
    18f0:	91 05       	cpc	r25, r1
    18f2:	a1 05       	cpc	r26, r1
    18f4:	b1 05       	cpc	r27, r1
    18f6:	39 f4       	brne	.+14     	; 0x1906 <__pack_f+0xe0>
    18f8:	27 ff       	sbrs	r18, 7
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <__pack_f+0xe8>
    18fc:	20 5c       	subi	r18, 0xC0	; 192
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	4f 4f       	sbci	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255
    1904:	04 c0       	rjmp	.+8      	; 0x190e <__pack_f+0xe8>
    1906:	21 5c       	subi	r18, 0xC1	; 193
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	4f 4f       	sbci	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	e1 e0       	ldi	r30, 0x01	; 1
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	20 30       	cpi	r18, 0x00	; 0
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	38 07       	cpc	r19, r24
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	48 07       	cpc	r20, r24
    191c:	80 e4       	ldi	r24, 0x40	; 64
    191e:	58 07       	cpc	r21, r24
    1920:	28 f5       	brcc	.+74     	; 0x196c <__pack_f+0x146>
    1922:	e0 e0       	ldi	r30, 0x00	; 0
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	22 c0       	rjmp	.+68     	; 0x196c <__pack_f+0x146>
    1928:	e0 38       	cpi	r30, 0x80	; 128
    192a:	f1 05       	cpc	r31, r1
    192c:	6c f5       	brge	.+90     	; 0x1988 <__pack_f+0x162>
    192e:	e1 58       	subi	r30, 0x81	; 129
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	da 01       	movw	r26, r20
    1934:	c9 01       	movw	r24, r18
    1936:	8f 77       	andi	r24, 0x7F	; 127
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	a0 70       	andi	r26, 0x00	; 0
    193c:	b0 70       	andi	r27, 0x00	; 0
    193e:	80 34       	cpi	r24, 0x40	; 64
    1940:	91 05       	cpc	r25, r1
    1942:	a1 05       	cpc	r26, r1
    1944:	b1 05       	cpc	r27, r1
    1946:	39 f4       	brne	.+14     	; 0x1956 <__pack_f+0x130>
    1948:	27 ff       	sbrs	r18, 7
    194a:	09 c0       	rjmp	.+18     	; 0x195e <__pack_f+0x138>
    194c:	20 5c       	subi	r18, 0xC0	; 192
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	4f 4f       	sbci	r20, 0xFF	; 255
    1952:	5f 4f       	sbci	r21, 0xFF	; 255
    1954:	04 c0       	rjmp	.+8      	; 0x195e <__pack_f+0x138>
    1956:	21 5c       	subi	r18, 0xC1	; 193
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	4f 4f       	sbci	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	57 ff       	sbrs	r21, 7
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__pack_f+0x146>
    1962:	56 95       	lsr	r21
    1964:	47 95       	ror	r20
    1966:	37 95       	ror	r19
    1968:	27 95       	ror	r18
    196a:	31 96       	adiw	r30, 0x01	; 1
    196c:	87 e0       	ldi	r24, 0x07	; 7
    196e:	56 95       	lsr	r21
    1970:	47 95       	ror	r20
    1972:	37 95       	ror	r19
    1974:	27 95       	ror	r18
    1976:	8a 95       	dec	r24
    1978:	d1 f7       	brne	.-12     	; 0x196e <__pack_f+0x148>
    197a:	0b c0       	rjmp	.+22     	; 0x1992 <__pack_f+0x16c>
    197c:	e0 e0       	ldi	r30, 0x00	; 0
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	05 c0       	rjmp	.+10     	; 0x198c <__pack_f+0x166>
    1982:	e0 e0       	ldi	r30, 0x00	; 0
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <__pack_f+0x16c>
    1988:	ef ef       	ldi	r30, 0xFF	; 255
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	a9 01       	movw	r20, r18
    1992:	8e 2f       	mov	r24, r30
    1994:	87 95       	ror	r24
    1996:	88 27       	eor	r24, r24
    1998:	87 95       	ror	r24
    199a:	94 2f       	mov	r25, r20
    199c:	9f 77       	andi	r25, 0x7F	; 127
    199e:	67 95       	ror	r22
    19a0:	66 27       	eor	r22, r22
    19a2:	67 95       	ror	r22
    19a4:	e6 95       	lsr	r30
    19a6:	e2 2e       	mov	r14, r18
    19a8:	a9 2f       	mov	r26, r25
    19aa:	a8 2b       	or	r26, r24
    19ac:	fe 2f       	mov	r31, r30
    19ae:	f6 2b       	or	r31, r22
    19b0:	62 2f       	mov	r22, r18
    19b2:	73 2f       	mov	r23, r19
    19b4:	8a 2f       	mov	r24, r26
    19b6:	9f 2f       	mov	r25, r31
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	e6 e0       	ldi	r30, 0x06	; 6
    19be:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x18>

000019c2 <__unpack_f>:
    19c2:	dc 01       	movw	r26, r24
    19c4:	fb 01       	movw	r30, r22
    19c6:	2c 91       	ld	r18, X
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	3c 91       	ld	r19, X
    19cc:	11 97       	sbiw	r26, 0x01	; 1
    19ce:	12 96       	adiw	r26, 0x02	; 2
    19d0:	8c 91       	ld	r24, X
    19d2:	12 97       	sbiw	r26, 0x02	; 2
    19d4:	48 2f       	mov	r20, r24
    19d6:	4f 77       	andi	r20, 0x7F	; 127
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	98 2f       	mov	r25, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	99 27       	eor	r25, r25
    19e0:	99 1f       	adc	r25, r25
    19e2:	13 96       	adiw	r26, 0x03	; 3
    19e4:	6c 91       	ld	r22, X
    19e6:	13 97       	sbiw	r26, 0x03	; 3
    19e8:	86 2f       	mov	r24, r22
    19ea:	88 0f       	add	r24, r24
    19ec:	89 2b       	or	r24, r25
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	66 1f       	adc	r22, r22
    19f2:	66 27       	eor	r22, r22
    19f4:	66 1f       	adc	r22, r22
    19f6:	61 83       	std	Z+1, r22	; 0x01
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	39 f5       	brne	.+78     	; 0x1a4a <__unpack_f+0x88>
    19fc:	21 15       	cp	r18, r1
    19fe:	31 05       	cpc	r19, r1
    1a00:	41 05       	cpc	r20, r1
    1a02:	51 05       	cpc	r21, r1
    1a04:	11 f4       	brne	.+4      	; 0x1a0a <__unpack_f+0x48>
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	29 c0       	rjmp	.+82     	; 0x1a5c <__unpack_f+0x9a>
    1a0a:	82 e8       	ldi	r24, 0x82	; 130
    1a0c:	9f ef       	ldi	r25, 0xFF	; 255
    1a0e:	93 83       	std	Z+3, r25	; 0x03
    1a10:	82 83       	std	Z+2, r24	; 0x02
    1a12:	67 e0       	ldi	r22, 0x07	; 7
    1a14:	22 0f       	add	r18, r18
    1a16:	33 1f       	adc	r19, r19
    1a18:	44 1f       	adc	r20, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	6a 95       	dec	r22
    1a1e:	d1 f7       	brne	.-12     	; 0x1a14 <__unpack_f+0x52>
    1a20:	83 e0       	ldi	r24, 0x03	; 3
    1a22:	80 83       	st	Z, r24
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <__unpack_f+0x76>
    1a26:	22 0f       	add	r18, r18
    1a28:	33 1f       	adc	r19, r19
    1a2a:	44 1f       	adc	r20, r20
    1a2c:	55 1f       	adc	r21, r21
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	93 83       	std	Z+3, r25	; 0x03
    1a36:	82 83       	std	Z+2, r24	; 0x02
    1a38:	20 30       	cpi	r18, 0x00	; 0
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	38 07       	cpc	r19, r24
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	48 07       	cpc	r20, r24
    1a42:	80 e4       	ldi	r24, 0x40	; 64
    1a44:	58 07       	cpc	r21, r24
    1a46:	78 f3       	brcs	.-34     	; 0x1a26 <__unpack_f+0x64>
    1a48:	20 c0       	rjmp	.+64     	; 0x1a8a <__unpack_f+0xc8>
    1a4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	79 f4       	brne	.+30     	; 0x1a6e <__unpack_f+0xac>
    1a50:	21 15       	cp	r18, r1
    1a52:	31 05       	cpc	r19, r1
    1a54:	41 05       	cpc	r20, r1
    1a56:	51 05       	cpc	r21, r1
    1a58:	19 f4       	brne	.+6      	; 0x1a60 <__unpack_f+0x9e>
    1a5a:	84 e0       	ldi	r24, 0x04	; 4
    1a5c:	80 83       	st	Z, r24
    1a5e:	08 95       	ret
    1a60:	44 ff       	sbrs	r20, 4
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <__unpack_f+0xa8>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	80 83       	st	Z, r24
    1a68:	10 c0       	rjmp	.+32     	; 0x1a8a <__unpack_f+0xc8>
    1a6a:	10 82       	st	Z, r1
    1a6c:	0e c0       	rjmp	.+28     	; 0x1a8a <__unpack_f+0xc8>
    1a6e:	8f 57       	subi	r24, 0x7F	; 127
    1a70:	90 40       	sbci	r25, 0x00	; 0
    1a72:	93 83       	std	Z+3, r25	; 0x03
    1a74:	82 83       	std	Z+2, r24	; 0x02
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	80 83       	st	Z, r24
    1a7a:	87 e0       	ldi	r24, 0x07	; 7
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	44 1f       	adc	r20, r20
    1a82:	55 1f       	adc	r21, r21
    1a84:	8a 95       	dec	r24
    1a86:	d1 f7       	brne	.-12     	; 0x1a7c <__unpack_f+0xba>
    1a88:	50 64       	ori	r21, 0x40	; 64
    1a8a:	24 83       	std	Z+4, r18	; 0x04
    1a8c:	35 83       	std	Z+5, r19	; 0x05
    1a8e:	46 83       	std	Z+6, r20	; 0x06
    1a90:	57 83       	std	Z+7, r21	; 0x07
    1a92:	08 95       	ret

00001a94 <__fpcmp_parts_f>:
    1a94:	fc 01       	movw	r30, r24
    1a96:	db 01       	movw	r26, r22
    1a98:	90 81       	ld	r25, Z
    1a9a:	92 30       	cpi	r25, 0x02	; 2
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <__fpcmp_parts_f+0xc>
    1a9e:	49 c0       	rjmp	.+146    	; 0x1b32 <__fpcmp_parts_f+0x9e>
    1aa0:	8c 91       	ld	r24, X
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <__fpcmp_parts_f+0x14>
    1aa6:	45 c0       	rjmp	.+138    	; 0x1b32 <__fpcmp_parts_f+0x9e>
    1aa8:	94 30       	cpi	r25, 0x04	; 4
    1aaa:	51 f4       	brne	.+20     	; 0x1ac0 <__fpcmp_parts_f+0x2c>
    1aac:	61 81       	ldd	r22, Z+1	; 0x01
    1aae:	84 30       	cpi	r24, 0x04	; 4
    1ab0:	b1 f5       	brne	.+108    	; 0x1b1e <__fpcmp_parts_f+0x8a>
    1ab2:	11 96       	adiw	r26, 0x01	; 1
    1ab4:	2c 91       	ld	r18, X
    1ab6:	11 97       	sbiw	r26, 0x01	; 1
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	26 1b       	sub	r18, r22
    1abc:	31 09       	sbc	r19, r1
    1abe:	41 c0       	rjmp	.+130    	; 0x1b42 <__fpcmp_parts_f+0xae>
    1ac0:	84 30       	cpi	r24, 0x04	; 4
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <__fpcmp_parts_f+0x38>
    1ac4:	92 30       	cpi	r25, 0x02	; 2
    1ac6:	41 f4       	brne	.+16     	; 0x1ad8 <__fpcmp_parts_f+0x44>
    1ac8:	82 30       	cpi	r24, 0x02	; 2
    1aca:	b1 f1       	breq	.+108    	; 0x1b38 <__fpcmp_parts_f+0xa4>
    1acc:	11 96       	adiw	r26, 0x01	; 1
    1ace:	8c 91       	ld	r24, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	88 23       	and	r24, r24
    1ad4:	a1 f1       	breq	.+104    	; 0x1b3e <__fpcmp_parts_f+0xaa>
    1ad6:	2d c0       	rjmp	.+90     	; 0x1b32 <__fpcmp_parts_f+0x9e>
    1ad8:	61 81       	ldd	r22, Z+1	; 0x01
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	01 f1       	breq	.+64     	; 0x1b1e <__fpcmp_parts_f+0x8a>
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	8c 91       	ld	r24, X
    1ae2:	11 97       	sbiw	r26, 0x01	; 1
    1ae4:	68 17       	cp	r22, r24
    1ae6:	d9 f4       	brne	.+54     	; 0x1b1e <__fpcmp_parts_f+0x8a>
    1ae8:	22 81       	ldd	r18, Z+2	; 0x02
    1aea:	33 81       	ldd	r19, Z+3	; 0x03
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	8d 91       	ld	r24, X+
    1af0:	9c 91       	ld	r25, X
    1af2:	13 97       	sbiw	r26, 0x03	; 3
    1af4:	82 17       	cp	r24, r18
    1af6:	93 07       	cpc	r25, r19
    1af8:	94 f0       	brlt	.+36     	; 0x1b1e <__fpcmp_parts_f+0x8a>
    1afa:	28 17       	cp	r18, r24
    1afc:	39 07       	cpc	r19, r25
    1afe:	bc f0       	brlt	.+46     	; 0x1b2e <__fpcmp_parts_f+0x9a>
    1b00:	24 81       	ldd	r18, Z+4	; 0x04
    1b02:	35 81       	ldd	r19, Z+5	; 0x05
    1b04:	46 81       	ldd	r20, Z+6	; 0x06
    1b06:	57 81       	ldd	r21, Z+7	; 0x07
    1b08:	14 96       	adiw	r26, 0x04	; 4
    1b0a:	8d 91       	ld	r24, X+
    1b0c:	9d 91       	ld	r25, X+
    1b0e:	0d 90       	ld	r0, X+
    1b10:	bc 91       	ld	r27, X
    1b12:	a0 2d       	mov	r26, r0
    1b14:	82 17       	cp	r24, r18
    1b16:	93 07       	cpc	r25, r19
    1b18:	a4 07       	cpc	r26, r20
    1b1a:	b5 07       	cpc	r27, r21
    1b1c:	18 f4       	brcc	.+6      	; 0x1b24 <__fpcmp_parts_f+0x90>
    1b1e:	66 23       	and	r22, r22
    1b20:	41 f0       	breq	.+16     	; 0x1b32 <__fpcmp_parts_f+0x9e>
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <__fpcmp_parts_f+0xaa>
    1b24:	28 17       	cp	r18, r24
    1b26:	39 07       	cpc	r19, r25
    1b28:	4a 07       	cpc	r20, r26
    1b2a:	5b 07       	cpc	r21, r27
    1b2c:	28 f4       	brcc	.+10     	; 0x1b38 <__fpcmp_parts_f+0xa4>
    1b2e:	66 23       	and	r22, r22
    1b30:	31 f0       	breq	.+12     	; 0x1b3e <__fpcmp_parts_f+0xaa>
    1b32:	21 e0       	ldi	r18, 0x01	; 1
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <__fpcmp_parts_f+0xae>
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <__fpcmp_parts_f+0xae>
    1b3e:	2f ef       	ldi	r18, 0xFF	; 255
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	c9 01       	movw	r24, r18
    1b44:	08 95       	ret

00001b46 <__divmodhi4>:
    1b46:	97 fb       	bst	r25, 7
    1b48:	09 2e       	mov	r0, r25
    1b4a:	07 26       	eor	r0, r23
    1b4c:	0a d0       	rcall	.+20     	; 0x1b62 <__divmodhi4_neg1>
    1b4e:	77 fd       	sbrc	r23, 7
    1b50:	04 d0       	rcall	.+8      	; 0x1b5a <__divmodhi4_neg2>
    1b52:	0c d0       	rcall	.+24     	; 0x1b6c <__udivmodhi4>
    1b54:	06 d0       	rcall	.+12     	; 0x1b62 <__divmodhi4_neg1>
    1b56:	00 20       	and	r0, r0
    1b58:	1a f4       	brpl	.+6      	; 0x1b60 <__divmodhi4_exit>

00001b5a <__divmodhi4_neg2>:
    1b5a:	70 95       	com	r23
    1b5c:	61 95       	neg	r22
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255

00001b60 <__divmodhi4_exit>:
    1b60:	08 95       	ret

00001b62 <__divmodhi4_neg1>:
    1b62:	f6 f7       	brtc	.-4      	; 0x1b60 <__divmodhi4_exit>
    1b64:	90 95       	com	r25
    1b66:	81 95       	neg	r24
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	08 95       	ret

00001b6c <__udivmodhi4>:
    1b6c:	aa 1b       	sub	r26, r26
    1b6e:	bb 1b       	sub	r27, r27
    1b70:	51 e1       	ldi	r21, 0x11	; 17
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <__udivmodhi4_ep>

00001b74 <__udivmodhi4_loop>:
    1b74:	aa 1f       	adc	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	a6 17       	cp	r26, r22
    1b7a:	b7 07       	cpc	r27, r23
    1b7c:	10 f0       	brcs	.+4      	; 0x1b82 <__udivmodhi4_ep>
    1b7e:	a6 1b       	sub	r26, r22
    1b80:	b7 0b       	sbc	r27, r23

00001b82 <__udivmodhi4_ep>:
    1b82:	88 1f       	adc	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	5a 95       	dec	r21
    1b88:	a9 f7       	brne	.-22     	; 0x1b74 <__udivmodhi4_loop>
    1b8a:	80 95       	com	r24
    1b8c:	90 95       	com	r25
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	08 95       	ret

00001b94 <__prologue_saves__>:
    1b94:	2f 92       	push	r2
    1b96:	3f 92       	push	r3
    1b98:	4f 92       	push	r4
    1b9a:	5f 92       	push	r5
    1b9c:	6f 92       	push	r6
    1b9e:	7f 92       	push	r7
    1ba0:	8f 92       	push	r8
    1ba2:	9f 92       	push	r9
    1ba4:	af 92       	push	r10
    1ba6:	bf 92       	push	r11
    1ba8:	cf 92       	push	r12
    1baa:	df 92       	push	r13
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	ca 1b       	sub	r28, r26
    1bbe:	db 0b       	sbc	r29, r27
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	09 94       	ijmp

00001bcc <__epilogue_restores__>:
    1bcc:	2a 88       	ldd	r2, Y+18	; 0x12
    1bce:	39 88       	ldd	r3, Y+17	; 0x11
    1bd0:	48 88       	ldd	r4, Y+16	; 0x10
    1bd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bda:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bde:	b9 84       	ldd	r11, Y+9	; 0x09
    1be0:	c8 84       	ldd	r12, Y+8	; 0x08
    1be2:	df 80       	ldd	r13, Y+7	; 0x07
    1be4:	ee 80       	ldd	r14, Y+6	; 0x06
    1be6:	fd 80       	ldd	r15, Y+5	; 0x05
    1be8:	0c 81       	ldd	r16, Y+4	; 0x04
    1bea:	1b 81       	ldd	r17, Y+3	; 0x03
    1bec:	aa 81       	ldd	r26, Y+2	; 0x02
    1bee:	b9 81       	ldd	r27, Y+1	; 0x01
    1bf0:	ce 0f       	add	r28, r30
    1bf2:	d1 1d       	adc	r29, r1
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	ed 01       	movw	r28, r26
    1c00:	08 95       	ret

00001c02 <fdevopen>:
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	eb 01       	movw	r28, r22
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	11 f4       	brne	.+4      	; 0x1c16 <fdevopen+0x14>
    1c12:	20 97       	sbiw	r28, 0x00	; 0
    1c14:	c9 f1       	breq	.+114    	; 0x1c88 <fdevopen+0x86>
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	6e e0       	ldi	r22, 0x0E	; 14
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	0e 94 a5 10 	call	0x214a	; 0x214a <calloc>
    1c22:	fc 01       	movw	r30, r24
    1c24:	9c 01       	movw	r18, r24
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	89 f1       	breq	.+98     	; 0x1c8c <fdevopen+0x8a>
    1c2a:	80 e8       	ldi	r24, 0x80	; 128
    1c2c:	83 83       	std	Z+3, r24	; 0x03
    1c2e:	20 97       	sbiw	r28, 0x00	; 0
    1c30:	71 f0       	breq	.+28     	; 0x1c4e <fdevopen+0x4c>
    1c32:	d3 87       	std	Z+11, r29	; 0x0b
    1c34:	c2 87       	std	Z+10, r28	; 0x0a
    1c36:	81 e8       	ldi	r24, 0x81	; 129
    1c38:	83 83       	std	Z+3, r24	; 0x03
    1c3a:	80 91 6d 02 	lds	r24, 0x026D
    1c3e:	90 91 6e 02 	lds	r25, 0x026E
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <fdevopen+0x4c>
    1c46:	f0 93 6e 02 	sts	0x026E, r31
    1c4a:	e0 93 6d 02 	sts	0x026D, r30
    1c4e:	01 15       	cp	r16, r1
    1c50:	11 05       	cpc	r17, r1
    1c52:	e1 f0       	breq	.+56     	; 0x1c8c <fdevopen+0x8a>
    1c54:	11 87       	std	Z+9, r17	; 0x09
    1c56:	00 87       	std	Z+8, r16	; 0x08
    1c58:	83 81       	ldd	r24, Z+3	; 0x03
    1c5a:	82 60       	ori	r24, 0x02	; 2
    1c5c:	83 83       	std	Z+3, r24	; 0x03
    1c5e:	80 91 6f 02 	lds	r24, 0x026F
    1c62:	90 91 70 02 	lds	r25, 0x0270
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	89 f4       	brne	.+34     	; 0x1c8c <fdevopen+0x8a>
    1c6a:	f0 93 70 02 	sts	0x0270, r31
    1c6e:	e0 93 6f 02 	sts	0x026F, r30
    1c72:	80 91 71 02 	lds	r24, 0x0271
    1c76:	90 91 72 02 	lds	r25, 0x0272
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	39 f4       	brne	.+14     	; 0x1c8c <fdevopen+0x8a>
    1c7e:	f0 93 72 02 	sts	0x0272, r31
    1c82:	e0 93 71 02 	sts	0x0271, r30
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <fdevopen+0x8a>
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	c9 01       	movw	r24, r18
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <printf>:
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	35 96       	adiw	r30, 0x05	; 5
    1ca4:	61 91       	ld	r22, Z+
    1ca6:	71 91       	ld	r23, Z+
    1ca8:	80 91 6f 02 	lds	r24, 0x026F
    1cac:	90 91 70 02 	lds	r25, 0x0270
    1cb0:	af 01       	movw	r20, r30
    1cb2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <vfprintf>
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <puts>:
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	8c 01       	movw	r16, r24
    1cca:	e0 91 6f 02 	lds	r30, 0x026F
    1cce:	f0 91 70 02 	lds	r31, 0x0270
    1cd2:	83 81       	ldd	r24, Z+3	; 0x03
    1cd4:	81 ff       	sbrs	r24, 1
    1cd6:	1f c0       	rjmp	.+62     	; 0x1d16 <puts+0x5a>
    1cd8:	c0 e0       	ldi	r28, 0x00	; 0
    1cda:	d0 e0       	ldi	r29, 0x00	; 0
    1cdc:	0a c0       	rjmp	.+20     	; 0x1cf2 <puts+0x36>
    1cde:	db 01       	movw	r26, r22
    1ce0:	18 96       	adiw	r26, 0x08	; 8
    1ce2:	ed 91       	ld	r30, X+
    1ce4:	fc 91       	ld	r31, X
    1ce6:	19 97       	sbiw	r26, 0x09	; 9
    1ce8:	09 95       	icall
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	11 f0       	breq	.+4      	; 0x1cf2 <puts+0x36>
    1cee:	cf ef       	ldi	r28, 0xFF	; 255
    1cf0:	df ef       	ldi	r29, 0xFF	; 255
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	81 91       	ld	r24, Z+
    1cf6:	8f 01       	movw	r16, r30
    1cf8:	60 91 6f 02 	lds	r22, 0x026F
    1cfc:	70 91 70 02 	lds	r23, 0x0270
    1d00:	88 23       	and	r24, r24
    1d02:	69 f7       	brne	.-38     	; 0x1cde <puts+0x22>
    1d04:	db 01       	movw	r26, r22
    1d06:	18 96       	adiw	r26, 0x08	; 8
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	19 97       	sbiw	r26, 0x09	; 9
    1d0e:	8a e0       	ldi	r24, 0x0A	; 10
    1d10:	09 95       	icall
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	11 f0       	breq	.+4      	; 0x1d1a <puts+0x5e>
    1d16:	cf ef       	ldi	r28, 0xFF	; 255
    1d18:	df ef       	ldi	r29, 0xFF	; 255
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	08 95       	ret

00001d2a <vfprintf>:
    1d2a:	2f 92       	push	r2
    1d2c:	3f 92       	push	r3
    1d2e:	4f 92       	push	r4
    1d30:	5f 92       	push	r5
    1d32:	6f 92       	push	r6
    1d34:	7f 92       	push	r7
    1d36:	8f 92       	push	r8
    1d38:	9f 92       	push	r9
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	2c 97       	sbiw	r28, 0x0c	; 12
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	6c 01       	movw	r12, r24
    1d60:	1b 01       	movw	r2, r22
    1d62:	8a 01       	movw	r16, r20
    1d64:	fc 01       	movw	r30, r24
    1d66:	17 82       	std	Z+7, r1	; 0x07
    1d68:	16 82       	std	Z+6, r1	; 0x06
    1d6a:	83 81       	ldd	r24, Z+3	; 0x03
    1d6c:	81 ff       	sbrs	r24, 1
    1d6e:	d1 c1       	rjmp	.+930    	; 0x2112 <vfprintf+0x3e8>
    1d70:	2e 01       	movw	r4, r28
    1d72:	08 94       	sec
    1d74:	41 1c       	adc	r4, r1
    1d76:	51 1c       	adc	r5, r1
    1d78:	f6 01       	movw	r30, r12
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	f1 01       	movw	r30, r2
    1d7e:	93 fd       	sbrc	r25, 3
    1d80:	85 91       	lpm	r24, Z+
    1d82:	93 ff       	sbrs	r25, 3
    1d84:	81 91       	ld	r24, Z+
    1d86:	1f 01       	movw	r2, r30
    1d88:	88 23       	and	r24, r24
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <vfprintf+0x64>
    1d8c:	be c1       	rjmp	.+892    	; 0x210a <vfprintf+0x3e0>
    1d8e:	85 32       	cpi	r24, 0x25	; 37
    1d90:	39 f4       	brne	.+14     	; 0x1da0 <vfprintf+0x76>
    1d92:	93 fd       	sbrc	r25, 3
    1d94:	85 91       	lpm	r24, Z+
    1d96:	93 ff       	sbrs	r25, 3
    1d98:	81 91       	ld	r24, Z+
    1d9a:	1f 01       	movw	r2, r30
    1d9c:	85 32       	cpi	r24, 0x25	; 37
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <vfprintf+0x80>
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	b6 01       	movw	r22, r12
    1da4:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1da8:	e7 cf       	rjmp	.-50     	; 0x1d78 <vfprintf+0x4e>
    1daa:	ee 24       	eor	r14, r14
    1dac:	ff 24       	eor	r15, r15
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	20 32       	cpi	r18, 0x20	; 32
    1db2:	b0 f4       	brcc	.+44     	; 0x1de0 <vfprintf+0xb6>
    1db4:	8b 32       	cpi	r24, 0x2B	; 43
    1db6:	69 f0       	breq	.+26     	; 0x1dd2 <vfprintf+0xa8>
    1db8:	8c 32       	cpi	r24, 0x2C	; 44
    1dba:	28 f4       	brcc	.+10     	; 0x1dc6 <vfprintf+0x9c>
    1dbc:	80 32       	cpi	r24, 0x20	; 32
    1dbe:	51 f0       	breq	.+20     	; 0x1dd4 <vfprintf+0xaa>
    1dc0:	83 32       	cpi	r24, 0x23	; 35
    1dc2:	71 f4       	brne	.+28     	; 0x1de0 <vfprintf+0xb6>
    1dc4:	0b c0       	rjmp	.+22     	; 0x1ddc <vfprintf+0xb2>
    1dc6:	8d 32       	cpi	r24, 0x2D	; 45
    1dc8:	39 f0       	breq	.+14     	; 0x1dd8 <vfprintf+0xae>
    1dca:	80 33       	cpi	r24, 0x30	; 48
    1dcc:	49 f4       	brne	.+18     	; 0x1de0 <vfprintf+0xb6>
    1dce:	21 60       	ori	r18, 0x01	; 1
    1dd0:	2c c0       	rjmp	.+88     	; 0x1e2a <vfprintf+0x100>
    1dd2:	22 60       	ori	r18, 0x02	; 2
    1dd4:	24 60       	ori	r18, 0x04	; 4
    1dd6:	29 c0       	rjmp	.+82     	; 0x1e2a <vfprintf+0x100>
    1dd8:	28 60       	ori	r18, 0x08	; 8
    1dda:	27 c0       	rjmp	.+78     	; 0x1e2a <vfprintf+0x100>
    1ddc:	20 61       	ori	r18, 0x10	; 16
    1dde:	25 c0       	rjmp	.+74     	; 0x1e2a <vfprintf+0x100>
    1de0:	27 fd       	sbrc	r18, 7
    1de2:	2c c0       	rjmp	.+88     	; 0x1e3c <vfprintf+0x112>
    1de4:	38 2f       	mov	r19, r24
    1de6:	30 53       	subi	r19, 0x30	; 48
    1de8:	3a 30       	cpi	r19, 0x0A	; 10
    1dea:	98 f4       	brcc	.+38     	; 0x1e12 <vfprintf+0xe8>
    1dec:	26 ff       	sbrs	r18, 6
    1dee:	08 c0       	rjmp	.+16     	; 0x1e00 <vfprintf+0xd6>
    1df0:	8e 2d       	mov	r24, r14
    1df2:	88 0f       	add	r24, r24
    1df4:	e8 2e       	mov	r14, r24
    1df6:	ee 0c       	add	r14, r14
    1df8:	ee 0c       	add	r14, r14
    1dfa:	e8 0e       	add	r14, r24
    1dfc:	e3 0e       	add	r14, r19
    1dfe:	15 c0       	rjmp	.+42     	; 0x1e2a <vfprintf+0x100>
    1e00:	8f 2d       	mov	r24, r15
    1e02:	88 0f       	add	r24, r24
    1e04:	f8 2e       	mov	r15, r24
    1e06:	ff 0c       	add	r15, r15
    1e08:	ff 0c       	add	r15, r15
    1e0a:	f8 0e       	add	r15, r24
    1e0c:	f3 0e       	add	r15, r19
    1e0e:	20 62       	ori	r18, 0x20	; 32
    1e10:	0c c0       	rjmp	.+24     	; 0x1e2a <vfprintf+0x100>
    1e12:	8e 32       	cpi	r24, 0x2E	; 46
    1e14:	21 f4       	brne	.+8      	; 0x1e1e <vfprintf+0xf4>
    1e16:	26 fd       	sbrc	r18, 6
    1e18:	78 c1       	rjmp	.+752    	; 0x210a <vfprintf+0x3e0>
    1e1a:	20 64       	ori	r18, 0x40	; 64
    1e1c:	06 c0       	rjmp	.+12     	; 0x1e2a <vfprintf+0x100>
    1e1e:	8c 36       	cpi	r24, 0x6C	; 108
    1e20:	11 f4       	brne	.+4      	; 0x1e26 <vfprintf+0xfc>
    1e22:	20 68       	ori	r18, 0x80	; 128
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <vfprintf+0x100>
    1e26:	88 36       	cpi	r24, 0x68	; 104
    1e28:	49 f4       	brne	.+18     	; 0x1e3c <vfprintf+0x112>
    1e2a:	f1 01       	movw	r30, r2
    1e2c:	93 fd       	sbrc	r25, 3
    1e2e:	85 91       	lpm	r24, Z+
    1e30:	93 ff       	sbrs	r25, 3
    1e32:	81 91       	ld	r24, Z+
    1e34:	1f 01       	movw	r2, r30
    1e36:	88 23       	and	r24, r24
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <vfprintf+0x112>
    1e3a:	ba cf       	rjmp	.-140    	; 0x1db0 <vfprintf+0x86>
    1e3c:	98 2f       	mov	r25, r24
    1e3e:	95 54       	subi	r25, 0x45	; 69
    1e40:	93 30       	cpi	r25, 0x03	; 3
    1e42:	18 f0       	brcs	.+6      	; 0x1e4a <vfprintf+0x120>
    1e44:	90 52       	subi	r25, 0x20	; 32
    1e46:	93 30       	cpi	r25, 0x03	; 3
    1e48:	28 f4       	brcc	.+10     	; 0x1e54 <vfprintf+0x12a>
    1e4a:	0c 5f       	subi	r16, 0xFC	; 252
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	ff e3       	ldi	r31, 0x3F	; 63
    1e50:	f9 83       	std	Y+1, r31	; 0x01
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <vfprintf+0x144>
    1e54:	83 36       	cpi	r24, 0x63	; 99
    1e56:	31 f0       	breq	.+12     	; 0x1e64 <vfprintf+0x13a>
    1e58:	83 37       	cpi	r24, 0x73	; 115
    1e5a:	71 f0       	breq	.+28     	; 0x1e78 <vfprintf+0x14e>
    1e5c:	83 35       	cpi	r24, 0x53	; 83
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <vfprintf+0x138>
    1e60:	60 c0       	rjmp	.+192    	; 0x1f22 <vfprintf+0x1f8>
    1e62:	22 c0       	rjmp	.+68     	; 0x1ea8 <vfprintf+0x17e>
    1e64:	f8 01       	movw	r30, r16
    1e66:	80 81       	ld	r24, Z
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	0e 5f       	subi	r16, 0xFE	; 254
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	42 01       	movw	r8, r4
    1e70:	71 e0       	ldi	r23, 0x01	; 1
    1e72:	a7 2e       	mov	r10, r23
    1e74:	b1 2c       	mov	r11, r1
    1e76:	16 c0       	rjmp	.+44     	; 0x1ea4 <vfprintf+0x17a>
    1e78:	62 e0       	ldi	r22, 0x02	; 2
    1e7a:	66 2e       	mov	r6, r22
    1e7c:	71 2c       	mov	r7, r1
    1e7e:	60 0e       	add	r6, r16
    1e80:	71 1e       	adc	r7, r17
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 80       	ld	r8, Z
    1e86:	91 80       	ldd	r9, Z+1	; 0x01
    1e88:	26 ff       	sbrs	r18, 6
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <vfprintf+0x168>
    1e8c:	6e 2d       	mov	r22, r14
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x16c>
    1e92:	6f ef       	ldi	r22, 0xFF	; 255
    1e94:	7f ef       	ldi	r23, 0xFF	; 255
    1e96:	c4 01       	movw	r24, r8
    1e98:	2c 87       	std	Y+12, r18	; 0x0c
    1e9a:	0e 94 0f 12 	call	0x241e	; 0x241e <strnlen>
    1e9e:	5c 01       	movw	r10, r24
    1ea0:	83 01       	movw	r16, r6
    1ea2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ea4:	2f 77       	andi	r18, 0x7F	; 127
    1ea6:	17 c0       	rjmp	.+46     	; 0x1ed6 <vfprintf+0x1ac>
    1ea8:	52 e0       	ldi	r21, 0x02	; 2
    1eaa:	65 2e       	mov	r6, r21
    1eac:	71 2c       	mov	r7, r1
    1eae:	60 0e       	add	r6, r16
    1eb0:	71 1e       	adc	r7, r17
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 80       	ld	r8, Z
    1eb6:	91 80       	ldd	r9, Z+1	; 0x01
    1eb8:	26 ff       	sbrs	r18, 6
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <vfprintf+0x198>
    1ebc:	6e 2d       	mov	r22, r14
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x19c>
    1ec2:	6f ef       	ldi	r22, 0xFF	; 255
    1ec4:	7f ef       	ldi	r23, 0xFF	; 255
    1ec6:	c4 01       	movw	r24, r8
    1ec8:	2c 87       	std	Y+12, r18	; 0x0c
    1eca:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strnlen_P>
    1ece:	5c 01       	movw	r10, r24
    1ed0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ed2:	20 68       	ori	r18, 0x80	; 128
    1ed4:	83 01       	movw	r16, r6
    1ed6:	23 fd       	sbrc	r18, 3
    1ed8:	20 c0       	rjmp	.+64     	; 0x1f1a <vfprintf+0x1f0>
    1eda:	08 c0       	rjmp	.+16     	; 0x1eec <vfprintf+0x1c2>
    1edc:	80 e2       	ldi	r24, 0x20	; 32
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	2c 87       	std	Y+12, r18	; 0x0c
    1ee4:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1ee8:	fa 94       	dec	r15
    1eea:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eec:	8f 2d       	mov	r24, r15
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a8 16       	cp	r10, r24
    1ef2:	b9 06       	cpc	r11, r25
    1ef4:	98 f3       	brcs	.-26     	; 0x1edc <vfprintf+0x1b2>
    1ef6:	11 c0       	rjmp	.+34     	; 0x1f1a <vfprintf+0x1f0>
    1ef8:	f4 01       	movw	r30, r8
    1efa:	27 fd       	sbrc	r18, 7
    1efc:	85 91       	lpm	r24, Z+
    1efe:	27 ff       	sbrs	r18, 7
    1f00:	81 91       	ld	r24, Z+
    1f02:	4f 01       	movw	r8, r30
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	b6 01       	movw	r22, r12
    1f08:	2c 87       	std	Y+12, r18	; 0x0c
    1f0a:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1f0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f10:	f1 10       	cpse	r15, r1
    1f12:	fa 94       	dec	r15
    1f14:	08 94       	sec
    1f16:	a1 08       	sbc	r10, r1
    1f18:	b1 08       	sbc	r11, r1
    1f1a:	a1 14       	cp	r10, r1
    1f1c:	b1 04       	cpc	r11, r1
    1f1e:	61 f7       	brne	.-40     	; 0x1ef8 <vfprintf+0x1ce>
    1f20:	f1 c0       	rjmp	.+482    	; 0x2104 <vfprintf+0x3da>
    1f22:	84 36       	cpi	r24, 0x64	; 100
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <vfprintf+0x200>
    1f26:	89 36       	cpi	r24, 0x69	; 105
    1f28:	49 f5       	brne	.+82     	; 0x1f7c <vfprintf+0x252>
    1f2a:	27 ff       	sbrs	r18, 7
    1f2c:	08 c0       	rjmp	.+16     	; 0x1f3e <vfprintf+0x214>
    1f2e:	f8 01       	movw	r30, r16
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	0c 5f       	subi	r16, 0xFC	; 252
    1f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3c:	09 c0       	rjmp	.+18     	; 0x1f50 <vfprintf+0x226>
    1f3e:	f8 01       	movw	r30, r16
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	88 27       	eor	r24, r24
    1f46:	77 fd       	sbrc	r23, 7
    1f48:	80 95       	com	r24
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	0e 5f       	subi	r16, 0xFE	; 254
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	4f e6       	ldi	r20, 0x6F	; 111
    1f52:	b4 2e       	mov	r11, r20
    1f54:	b2 22       	and	r11, r18
    1f56:	97 ff       	sbrs	r25, 7
    1f58:	09 c0       	rjmp	.+18     	; 0x1f6c <vfprintf+0x242>
    1f5a:	90 95       	com	r25
    1f5c:	80 95       	com	r24
    1f5e:	70 95       	com	r23
    1f60:	61 95       	neg	r22
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	8f 4f       	sbci	r24, 0xFF	; 255
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	f0 e8       	ldi	r31, 0x80	; 128
    1f6a:	bf 2a       	or	r11, r31
    1f6c:	a2 01       	movw	r20, r4
    1f6e:	2a e0       	ldi	r18, 0x0A	; 10
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	0e 94 46 12 	call	0x248c	; 0x248c <__ultoa_invert>
    1f76:	78 2e       	mov	r7, r24
    1f78:	74 18       	sub	r7, r4
    1f7a:	45 c0       	rjmp	.+138    	; 0x2006 <vfprintf+0x2dc>
    1f7c:	85 37       	cpi	r24, 0x75	; 117
    1f7e:	31 f4       	brne	.+12     	; 0x1f8c <vfprintf+0x262>
    1f80:	3f ee       	ldi	r19, 0xEF	; 239
    1f82:	b3 2e       	mov	r11, r19
    1f84:	b2 22       	and	r11, r18
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	25 c0       	rjmp	.+74     	; 0x1fd6 <vfprintf+0x2ac>
    1f8c:	99 ef       	ldi	r25, 0xF9	; 249
    1f8e:	b9 2e       	mov	r11, r25
    1f90:	b2 22       	and	r11, r18
    1f92:	8f 36       	cpi	r24, 0x6F	; 111
    1f94:	c1 f0       	breq	.+48     	; 0x1fc6 <vfprintf+0x29c>
    1f96:	80 37       	cpi	r24, 0x70	; 112
    1f98:	20 f4       	brcc	.+8      	; 0x1fa2 <vfprintf+0x278>
    1f9a:	88 35       	cpi	r24, 0x58	; 88
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <vfprintf+0x276>
    1f9e:	b5 c0       	rjmp	.+362    	; 0x210a <vfprintf+0x3e0>
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <vfprintf+0x292>
    1fa2:	80 37       	cpi	r24, 0x70	; 112
    1fa4:	21 f0       	breq	.+8      	; 0x1fae <vfprintf+0x284>
    1fa6:	88 37       	cpi	r24, 0x78	; 120
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <vfprintf+0x282>
    1faa:	af c0       	rjmp	.+350    	; 0x210a <vfprintf+0x3e0>
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <vfprintf+0x288>
    1fae:	20 e1       	ldi	r18, 0x10	; 16
    1fb0:	b2 2a       	or	r11, r18
    1fb2:	b4 fe       	sbrs	r11, 4
    1fb4:	0b c0       	rjmp	.+22     	; 0x1fcc <vfprintf+0x2a2>
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
    1fb8:	b8 2a       	or	r11, r24
    1fba:	08 c0       	rjmp	.+16     	; 0x1fcc <vfprintf+0x2a2>
    1fbc:	b4 fe       	sbrs	r11, 4
    1fbe:	09 c0       	rjmp	.+18     	; 0x1fd2 <vfprintf+0x2a8>
    1fc0:	e6 e0       	ldi	r30, 0x06	; 6
    1fc2:	be 2a       	or	r11, r30
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <vfprintf+0x2a8>
    1fc6:	28 e0       	ldi	r18, 0x08	; 8
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	05 c0       	rjmp	.+10     	; 0x1fd6 <vfprintf+0x2ac>
    1fcc:	20 e1       	ldi	r18, 0x10	; 16
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <vfprintf+0x2ac>
    1fd2:	20 e1       	ldi	r18, 0x10	; 16
    1fd4:	32 e0       	ldi	r19, 0x02	; 2
    1fd6:	b7 fe       	sbrs	r11, 7
    1fd8:	08 c0       	rjmp	.+16     	; 0x1fea <vfprintf+0x2c0>
    1fda:	f8 01       	movw	r30, r16
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	0c 5f       	subi	r16, 0xFC	; 252
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <vfprintf+0x2ce>
    1fea:	f8 01       	movw	r30, r16
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 5f       	subi	r16, 0xFE	; 254
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	a2 01       	movw	r20, r4
    1ffa:	0e 94 46 12 	call	0x248c	; 0x248c <__ultoa_invert>
    1ffe:	78 2e       	mov	r7, r24
    2000:	74 18       	sub	r7, r4
    2002:	ff e7       	ldi	r31, 0x7F	; 127
    2004:	bf 22       	and	r11, r31
    2006:	b6 fe       	sbrs	r11, 6
    2008:	0b c0       	rjmp	.+22     	; 0x2020 <vfprintf+0x2f6>
    200a:	2e ef       	ldi	r18, 0xFE	; 254
    200c:	b2 22       	and	r11, r18
    200e:	7e 14       	cp	r7, r14
    2010:	38 f4       	brcc	.+14     	; 0x2020 <vfprintf+0x2f6>
    2012:	b4 fe       	sbrs	r11, 4
    2014:	07 c0       	rjmp	.+14     	; 0x2024 <vfprintf+0x2fa>
    2016:	b2 fc       	sbrc	r11, 2
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <vfprintf+0x2fa>
    201a:	8f ee       	ldi	r24, 0xEF	; 239
    201c:	b8 22       	and	r11, r24
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <vfprintf+0x2fa>
    2020:	a7 2c       	mov	r10, r7
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <vfprintf+0x2fc>
    2024:	ae 2c       	mov	r10, r14
    2026:	8b 2d       	mov	r24, r11
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	b4 fe       	sbrs	r11, 4
    202c:	0d c0       	rjmp	.+26     	; 0x2048 <vfprintf+0x31e>
    202e:	fe 01       	movw	r30, r28
    2030:	e7 0d       	add	r30, r7
    2032:	f1 1d       	adc	r31, r1
    2034:	20 81       	ld	r18, Z
    2036:	20 33       	cpi	r18, 0x30	; 48
    2038:	19 f4       	brne	.+6      	; 0x2040 <vfprintf+0x316>
    203a:	e9 ee       	ldi	r30, 0xE9	; 233
    203c:	be 22       	and	r11, r30
    203e:	09 c0       	rjmp	.+18     	; 0x2052 <vfprintf+0x328>
    2040:	a3 94       	inc	r10
    2042:	b2 fe       	sbrs	r11, 2
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <vfprintf+0x328>
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <vfprintf+0x326>
    2048:	86 78       	andi	r24, 0x86	; 134
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	09 f0       	breq	.+2      	; 0x2052 <vfprintf+0x328>
    2050:	a3 94       	inc	r10
    2052:	8b 2c       	mov	r8, r11
    2054:	99 24       	eor	r9, r9
    2056:	b3 fc       	sbrc	r11, 3
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <vfprintf+0x358>
    205a:	b0 fe       	sbrs	r11, 0
    205c:	0f c0       	rjmp	.+30     	; 0x207c <vfprintf+0x352>
    205e:	af 14       	cp	r10, r15
    2060:	28 f4       	brcc	.+10     	; 0x206c <vfprintf+0x342>
    2062:	e7 2c       	mov	r14, r7
    2064:	ef 0c       	add	r14, r15
    2066:	ea 18       	sub	r14, r10
    2068:	af 2c       	mov	r10, r15
    206a:	08 c0       	rjmp	.+16     	; 0x207c <vfprintf+0x352>
    206c:	e7 2c       	mov	r14, r7
    206e:	06 c0       	rjmp	.+12     	; 0x207c <vfprintf+0x352>
    2070:	80 e2       	ldi	r24, 0x20	; 32
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	b6 01       	movw	r22, r12
    2076:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    207a:	a3 94       	inc	r10
    207c:	af 14       	cp	r10, r15
    207e:	c0 f3       	brcs	.-16     	; 0x2070 <vfprintf+0x346>
    2080:	04 c0       	rjmp	.+8      	; 0x208a <vfprintf+0x360>
    2082:	af 14       	cp	r10, r15
    2084:	10 f4       	brcc	.+4      	; 0x208a <vfprintf+0x360>
    2086:	fa 18       	sub	r15, r10
    2088:	01 c0       	rjmp	.+2      	; 0x208c <vfprintf+0x362>
    208a:	ff 24       	eor	r15, r15
    208c:	84 fe       	sbrs	r8, 4
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <vfprintf+0x384>
    2090:	80 e3       	ldi	r24, 0x30	; 48
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	b6 01       	movw	r22, r12
    2096:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    209a:	82 fe       	sbrs	r8, 2
    209c:	1f c0       	rjmp	.+62     	; 0x20dc <vfprintf+0x3b2>
    209e:	81 fe       	sbrs	r8, 1
    20a0:	03 c0       	rjmp	.+6      	; 0x20a8 <vfprintf+0x37e>
    20a2:	88 e5       	ldi	r24, 0x58	; 88
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	10 c0       	rjmp	.+32     	; 0x20c8 <vfprintf+0x39e>
    20a8:	88 e7       	ldi	r24, 0x78	; 120
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0d c0       	rjmp	.+26     	; 0x20c8 <vfprintf+0x39e>
    20ae:	c4 01       	movw	r24, r8
    20b0:	86 78       	andi	r24, 0x86	; 134
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	91 f0       	breq	.+36     	; 0x20dc <vfprintf+0x3b2>
    20b8:	81 fc       	sbrc	r8, 1
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <vfprintf+0x396>
    20bc:	80 e2       	ldi	r24, 0x20	; 32
    20be:	01 c0       	rjmp	.+2      	; 0x20c2 <vfprintf+0x398>
    20c0:	8b e2       	ldi	r24, 0x2B	; 43
    20c2:	b7 fc       	sbrc	r11, 7
    20c4:	8d e2       	ldi	r24, 0x2D	; 45
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	b6 01       	movw	r22, r12
    20ca:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    20ce:	06 c0       	rjmp	.+12     	; 0x20dc <vfprintf+0x3b2>
    20d0:	80 e3       	ldi	r24, 0x30	; 48
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	b6 01       	movw	r22, r12
    20d6:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    20da:	ea 94       	dec	r14
    20dc:	7e 14       	cp	r7, r14
    20de:	c0 f3       	brcs	.-16     	; 0x20d0 <vfprintf+0x3a6>
    20e0:	7a 94       	dec	r7
    20e2:	f2 01       	movw	r30, r4
    20e4:	e7 0d       	add	r30, r7
    20e6:	f1 1d       	adc	r31, r1
    20e8:	80 81       	ld	r24, Z
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	b6 01       	movw	r22, r12
    20ee:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    20f2:	77 20       	and	r7, r7
    20f4:	a9 f7       	brne	.-22     	; 0x20e0 <vfprintf+0x3b6>
    20f6:	06 c0       	rjmp	.+12     	; 0x2104 <vfprintf+0x3da>
    20f8:	80 e2       	ldi	r24, 0x20	; 32
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	b6 01       	movw	r22, r12
    20fe:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    2102:	fa 94       	dec	r15
    2104:	ff 20       	and	r15, r15
    2106:	c1 f7       	brne	.-16     	; 0x20f8 <vfprintf+0x3ce>
    2108:	37 ce       	rjmp	.-914    	; 0x1d78 <vfprintf+0x4e>
    210a:	f6 01       	movw	r30, r12
    210c:	26 81       	ldd	r18, Z+6	; 0x06
    210e:	37 81       	ldd	r19, Z+7	; 0x07
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <vfprintf+0x3ec>
    2112:	2f ef       	ldi	r18, 0xFF	; 255
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	c9 01       	movw	r24, r18
    2118:	2c 96       	adiw	r28, 0x0c	; 12
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	bf 90       	pop	r11
    2136:	af 90       	pop	r10
    2138:	9f 90       	pop	r9
    213a:	8f 90       	pop	r8
    213c:	7f 90       	pop	r7
    213e:	6f 90       	pop	r6
    2140:	5f 90       	pop	r5
    2142:	4f 90       	pop	r4
    2144:	3f 90       	pop	r3
    2146:	2f 90       	pop	r2
    2148:	08 95       	ret

0000214a <calloc>:
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	68 9f       	mul	r22, r24
    2158:	80 01       	movw	r16, r0
    215a:	69 9f       	mul	r22, r25
    215c:	10 0d       	add	r17, r0
    215e:	78 9f       	mul	r23, r24
    2160:	10 0d       	add	r17, r0
    2162:	11 24       	eor	r1, r1
    2164:	c8 01       	movw	r24, r16
    2166:	0e 94 ca 10 	call	0x2194	; 0x2194 <malloc>
    216a:	e8 2e       	mov	r14, r24
    216c:	e7 01       	movw	r28, r14
    216e:	7e 01       	movw	r14, r28
    2170:	f9 2e       	mov	r15, r25
    2172:	e7 01       	movw	r28, r14
    2174:	20 97       	sbiw	r28, 0x00	; 0
    2176:	31 f0       	breq	.+12     	; 0x2184 <calloc+0x3a>
    2178:	8e 2d       	mov	r24, r14
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	a8 01       	movw	r20, r16
    2180:	0e 94 08 12 	call	0x2410	; 0x2410 <memset>
    2184:	ce 01       	movw	r24, r28
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	08 95       	ret

00002194 <malloc>:
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	82 30       	cpi	r24, 0x02	; 2
    219a:	91 05       	cpc	r25, r1
    219c:	10 f4       	brcc	.+4      	; 0x21a2 <malloc+0xe>
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	e0 91 75 02 	lds	r30, 0x0275
    21a6:	f0 91 76 02 	lds	r31, 0x0276
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	26 c0       	rjmp	.+76     	; 0x2200 <malloc+0x6c>
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	68 17       	cp	r22, r24
    21ba:	79 07       	cpc	r23, r25
    21bc:	e0 f0       	brcs	.+56     	; 0x21f6 <malloc+0x62>
    21be:	68 17       	cp	r22, r24
    21c0:	79 07       	cpc	r23, r25
    21c2:	81 f4       	brne	.+32     	; 0x21e4 <malloc+0x50>
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	21 15       	cp	r18, r1
    21ca:	31 05       	cpc	r19, r1
    21cc:	31 f0       	breq	.+12     	; 0x21da <malloc+0x46>
    21ce:	d9 01       	movw	r26, r18
    21d0:	13 96       	adiw	r26, 0x03	; 3
    21d2:	9c 93       	st	X, r25
    21d4:	8e 93       	st	-X, r24
    21d6:	12 97       	sbiw	r26, 0x02	; 2
    21d8:	2b c0       	rjmp	.+86     	; 0x2230 <malloc+0x9c>
    21da:	90 93 76 02 	sts	0x0276, r25
    21de:	80 93 75 02 	sts	0x0275, r24
    21e2:	26 c0       	rjmp	.+76     	; 0x2230 <malloc+0x9c>
    21e4:	41 15       	cp	r20, r1
    21e6:	51 05       	cpc	r21, r1
    21e8:	19 f0       	breq	.+6      	; 0x21f0 <malloc+0x5c>
    21ea:	64 17       	cp	r22, r20
    21ec:	75 07       	cpc	r23, r21
    21ee:	18 f4       	brcc	.+6      	; 0x21f6 <malloc+0x62>
    21f0:	ab 01       	movw	r20, r22
    21f2:	e9 01       	movw	r28, r18
    21f4:	df 01       	movw	r26, r30
    21f6:	9f 01       	movw	r18, r30
    21f8:	72 81       	ldd	r23, Z+2	; 0x02
    21fa:	63 81       	ldd	r22, Z+3	; 0x03
    21fc:	e7 2f       	mov	r30, r23
    21fe:	f6 2f       	mov	r31, r22
    2200:	30 97       	sbiw	r30, 0x00	; 0
    2202:	c1 f6       	brne	.-80     	; 0x21b4 <malloc+0x20>
    2204:	41 15       	cp	r20, r1
    2206:	51 05       	cpc	r21, r1
    2208:	01 f1       	breq	.+64     	; 0x224a <malloc+0xb6>
    220a:	48 1b       	sub	r20, r24
    220c:	59 0b       	sbc	r21, r25
    220e:	44 30       	cpi	r20, 0x04	; 4
    2210:	51 05       	cpc	r21, r1
    2212:	80 f4       	brcc	.+32     	; 0x2234 <malloc+0xa0>
    2214:	12 96       	adiw	r26, 0x02	; 2
    2216:	8d 91       	ld	r24, X+
    2218:	9c 91       	ld	r25, X
    221a:	13 97       	sbiw	r26, 0x03	; 3
    221c:	20 97       	sbiw	r28, 0x00	; 0
    221e:	19 f0       	breq	.+6      	; 0x2226 <malloc+0x92>
    2220:	9b 83       	std	Y+3, r25	; 0x03
    2222:	8a 83       	std	Y+2, r24	; 0x02
    2224:	04 c0       	rjmp	.+8      	; 0x222e <malloc+0x9a>
    2226:	90 93 76 02 	sts	0x0276, r25
    222a:	80 93 75 02 	sts	0x0275, r24
    222e:	fd 01       	movw	r30, r26
    2230:	32 96       	adiw	r30, 0x02	; 2
    2232:	46 c0       	rjmp	.+140    	; 0x22c0 <malloc+0x12c>
    2234:	fd 01       	movw	r30, r26
    2236:	e4 0f       	add	r30, r20
    2238:	f5 1f       	adc	r31, r21
    223a:	81 93       	st	Z+, r24
    223c:	91 93       	st	Z+, r25
    223e:	42 50       	subi	r20, 0x02	; 2
    2240:	50 40       	sbci	r21, 0x00	; 0
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	5c 93       	st	X, r21
    2246:	4e 93       	st	-X, r20
    2248:	3b c0       	rjmp	.+118    	; 0x22c0 <malloc+0x12c>
    224a:	20 91 73 02 	lds	r18, 0x0273
    224e:	30 91 74 02 	lds	r19, 0x0274
    2252:	21 15       	cp	r18, r1
    2254:	31 05       	cpc	r19, r1
    2256:	41 f4       	brne	.+16     	; 0x2268 <malloc+0xd4>
    2258:	20 91 64 02 	lds	r18, 0x0264
    225c:	30 91 65 02 	lds	r19, 0x0265
    2260:	30 93 74 02 	sts	0x0274, r19
    2264:	20 93 73 02 	sts	0x0273, r18
    2268:	20 91 66 02 	lds	r18, 0x0266
    226c:	30 91 67 02 	lds	r19, 0x0267
    2270:	21 15       	cp	r18, r1
    2272:	31 05       	cpc	r19, r1
    2274:	41 f4       	brne	.+16     	; 0x2286 <malloc+0xf2>
    2276:	2d b7       	in	r18, 0x3d	; 61
    2278:	3e b7       	in	r19, 0x3e	; 62
    227a:	40 91 62 02 	lds	r20, 0x0262
    227e:	50 91 63 02 	lds	r21, 0x0263
    2282:	24 1b       	sub	r18, r20
    2284:	35 0b       	sbc	r19, r21
    2286:	e0 91 73 02 	lds	r30, 0x0273
    228a:	f0 91 74 02 	lds	r31, 0x0274
    228e:	e2 17       	cp	r30, r18
    2290:	f3 07       	cpc	r31, r19
    2292:	a0 f4       	brcc	.+40     	; 0x22bc <malloc+0x128>
    2294:	2e 1b       	sub	r18, r30
    2296:	3f 0b       	sbc	r19, r31
    2298:	28 17       	cp	r18, r24
    229a:	39 07       	cpc	r19, r25
    229c:	78 f0       	brcs	.+30     	; 0x22bc <malloc+0x128>
    229e:	ac 01       	movw	r20, r24
    22a0:	4e 5f       	subi	r20, 0xFE	; 254
    22a2:	5f 4f       	sbci	r21, 0xFF	; 255
    22a4:	24 17       	cp	r18, r20
    22a6:	35 07       	cpc	r19, r21
    22a8:	48 f0       	brcs	.+18     	; 0x22bc <malloc+0x128>
    22aa:	4e 0f       	add	r20, r30
    22ac:	5f 1f       	adc	r21, r31
    22ae:	50 93 74 02 	sts	0x0274, r21
    22b2:	40 93 73 02 	sts	0x0273, r20
    22b6:	81 93       	st	Z+, r24
    22b8:	91 93       	st	Z+, r25
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <malloc+0x12c>
    22bc:	e0 e0       	ldi	r30, 0x00	; 0
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	cf 01       	movw	r24, r30
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	08 95       	ret

000022c8 <free>:
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <free+0xa>
    22d0:	91 c0       	rjmp	.+290    	; 0x23f4 <free+0x12c>
    22d2:	fc 01       	movw	r30, r24
    22d4:	32 97       	sbiw	r30, 0x02	; 2
    22d6:	13 82       	std	Z+3, r1	; 0x03
    22d8:	12 82       	std	Z+2, r1	; 0x02
    22da:	60 91 75 02 	lds	r22, 0x0275
    22de:	70 91 76 02 	lds	r23, 0x0276
    22e2:	61 15       	cp	r22, r1
    22e4:	71 05       	cpc	r23, r1
    22e6:	81 f4       	brne	.+32     	; 0x2308 <free+0x40>
    22e8:	20 81       	ld	r18, Z
    22ea:	31 81       	ldd	r19, Z+1	; 0x01
    22ec:	28 0f       	add	r18, r24
    22ee:	39 1f       	adc	r19, r25
    22f0:	80 91 73 02 	lds	r24, 0x0273
    22f4:	90 91 74 02 	lds	r25, 0x0274
    22f8:	82 17       	cp	r24, r18
    22fa:	93 07       	cpc	r25, r19
    22fc:	99 f5       	brne	.+102    	; 0x2364 <free+0x9c>
    22fe:	f0 93 74 02 	sts	0x0274, r31
    2302:	e0 93 73 02 	sts	0x0273, r30
    2306:	76 c0       	rjmp	.+236    	; 0x23f4 <free+0x12c>
    2308:	db 01       	movw	r26, r22
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <free+0x4c>
    2310:	cd 01       	movw	r24, r26
    2312:	d9 01       	movw	r26, r18
    2314:	ae 17       	cp	r26, r30
    2316:	bf 07       	cpc	r27, r31
    2318:	48 f4       	brcc	.+18     	; 0x232c <free+0x64>
    231a:	12 96       	adiw	r26, 0x02	; 2
    231c:	2d 91       	ld	r18, X+
    231e:	3c 91       	ld	r19, X
    2320:	13 97       	sbiw	r26, 0x03	; 3
    2322:	21 15       	cp	r18, r1
    2324:	31 05       	cpc	r19, r1
    2326:	a1 f7       	brne	.-24     	; 0x2310 <free+0x48>
    2328:	cd 01       	movw	r24, r26
    232a:	21 c0       	rjmp	.+66     	; 0x236e <free+0xa6>
    232c:	b3 83       	std	Z+3, r27	; 0x03
    232e:	a2 83       	std	Z+2, r26	; 0x02
    2330:	ef 01       	movw	r28, r30
    2332:	49 91       	ld	r20, Y+
    2334:	59 91       	ld	r21, Y+
    2336:	9e 01       	movw	r18, r28
    2338:	24 0f       	add	r18, r20
    233a:	35 1f       	adc	r19, r21
    233c:	a2 17       	cp	r26, r18
    233e:	b3 07       	cpc	r27, r19
    2340:	79 f4       	brne	.+30     	; 0x2360 <free+0x98>
    2342:	2d 91       	ld	r18, X+
    2344:	3c 91       	ld	r19, X
    2346:	11 97       	sbiw	r26, 0x01	; 1
    2348:	24 0f       	add	r18, r20
    234a:	35 1f       	adc	r19, r21
    234c:	2e 5f       	subi	r18, 0xFE	; 254
    234e:	3f 4f       	sbci	r19, 0xFF	; 255
    2350:	31 83       	std	Z+1, r19	; 0x01
    2352:	20 83       	st	Z, r18
    2354:	12 96       	adiw	r26, 0x02	; 2
    2356:	2d 91       	ld	r18, X+
    2358:	3c 91       	ld	r19, X
    235a:	13 97       	sbiw	r26, 0x03	; 3
    235c:	33 83       	std	Z+3, r19	; 0x03
    235e:	22 83       	std	Z+2, r18	; 0x02
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	29 f4       	brne	.+10     	; 0x236e <free+0xa6>
    2364:	f0 93 76 02 	sts	0x0276, r31
    2368:	e0 93 75 02 	sts	0x0275, r30
    236c:	43 c0       	rjmp	.+134    	; 0x23f4 <free+0x12c>
    236e:	dc 01       	movw	r26, r24
    2370:	13 96       	adiw	r26, 0x03	; 3
    2372:	fc 93       	st	X, r31
    2374:	ee 93       	st	-X, r30
    2376:	12 97       	sbiw	r26, 0x02	; 2
    2378:	4d 91       	ld	r20, X+
    237a:	5d 91       	ld	r21, X+
    237c:	a4 0f       	add	r26, r20
    237e:	b5 1f       	adc	r27, r21
    2380:	ea 17       	cp	r30, r26
    2382:	fb 07       	cpc	r31, r27
    2384:	69 f4       	brne	.+26     	; 0x23a0 <free+0xd8>
    2386:	20 81       	ld	r18, Z
    2388:	31 81       	ldd	r19, Z+1	; 0x01
    238a:	24 0f       	add	r18, r20
    238c:	35 1f       	adc	r19, r21
    238e:	2e 5f       	subi	r18, 0xFE	; 254
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	ec 01       	movw	r28, r24
    2394:	39 83       	std	Y+1, r19	; 0x01
    2396:	28 83       	st	Y, r18
    2398:	22 81       	ldd	r18, Z+2	; 0x02
    239a:	33 81       	ldd	r19, Z+3	; 0x03
    239c:	3b 83       	std	Y+3, r19	; 0x03
    239e:	2a 83       	std	Y+2, r18	; 0x02
    23a0:	e0 e0       	ldi	r30, 0x00	; 0
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <free+0xe2>
    23a6:	fb 01       	movw	r30, r22
    23a8:	bc 01       	movw	r22, r24
    23aa:	db 01       	movw	r26, r22
    23ac:	12 96       	adiw	r26, 0x02	; 2
    23ae:	8d 91       	ld	r24, X+
    23b0:	9c 91       	ld	r25, X
    23b2:	13 97       	sbiw	r26, 0x03	; 3
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	b9 f7       	brne	.-18     	; 0x23a6 <free+0xde>
    23b8:	9b 01       	movw	r18, r22
    23ba:	2e 5f       	subi	r18, 0xFE	; 254
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	8d 91       	ld	r24, X+
    23c0:	9c 91       	ld	r25, X
    23c2:	11 97       	sbiw	r26, 0x01	; 1
    23c4:	82 0f       	add	r24, r18
    23c6:	93 1f       	adc	r25, r19
    23c8:	40 91 73 02 	lds	r20, 0x0273
    23cc:	50 91 74 02 	lds	r21, 0x0274
    23d0:	48 17       	cp	r20, r24
    23d2:	59 07       	cpc	r21, r25
    23d4:	79 f4       	brne	.+30     	; 0x23f4 <free+0x12c>
    23d6:	30 97       	sbiw	r30, 0x00	; 0
    23d8:	29 f4       	brne	.+10     	; 0x23e4 <free+0x11c>
    23da:	10 92 76 02 	sts	0x0276, r1
    23de:	10 92 75 02 	sts	0x0275, r1
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <free+0x120>
    23e4:	13 82       	std	Z+3, r1	; 0x03
    23e6:	12 82       	std	Z+2, r1	; 0x02
    23e8:	22 50       	subi	r18, 0x02	; 2
    23ea:	30 40       	sbci	r19, 0x00	; 0
    23ec:	30 93 74 02 	sts	0x0274, r19
    23f0:	20 93 73 02 	sts	0x0273, r18
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	08 95       	ret

000023fa <strnlen_P>:
    23fa:	fc 01       	movw	r30, r24
    23fc:	05 90       	lpm	r0, Z+
    23fe:	61 50       	subi	r22, 0x01	; 1
    2400:	70 40       	sbci	r23, 0x00	; 0
    2402:	01 10       	cpse	r0, r1
    2404:	d8 f7       	brcc	.-10     	; 0x23fc <strnlen_P+0x2>
    2406:	80 95       	com	r24
    2408:	90 95       	com	r25
    240a:	8e 0f       	add	r24, r30
    240c:	9f 1f       	adc	r25, r31
    240e:	08 95       	ret

00002410 <memset>:
    2410:	dc 01       	movw	r26, r24
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <memset+0x6>
    2414:	6d 93       	st	X+, r22
    2416:	41 50       	subi	r20, 0x01	; 1
    2418:	50 40       	sbci	r21, 0x00	; 0
    241a:	e0 f7       	brcc	.-8      	; 0x2414 <memset+0x4>
    241c:	08 95       	ret

0000241e <strnlen>:
    241e:	fc 01       	movw	r30, r24
    2420:	61 50       	subi	r22, 0x01	; 1
    2422:	70 40       	sbci	r23, 0x00	; 0
    2424:	01 90       	ld	r0, Z+
    2426:	01 10       	cpse	r0, r1
    2428:	d8 f7       	brcc	.-10     	; 0x2420 <strnlen+0x2>
    242a:	80 95       	com	r24
    242c:	90 95       	com	r25
    242e:	8e 0f       	add	r24, r30
    2430:	9f 1f       	adc	r25, r31
    2432:	08 95       	ret

00002434 <fputc>:
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	8c 01       	movw	r16, r24
    243e:	eb 01       	movw	r28, r22
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	81 ff       	sbrs	r24, 1
    2444:	1b c0       	rjmp	.+54     	; 0x247c <fputc+0x48>
    2446:	82 ff       	sbrs	r24, 2
    2448:	0d c0       	rjmp	.+26     	; 0x2464 <fputc+0x30>
    244a:	2e 81       	ldd	r18, Y+6	; 0x06
    244c:	3f 81       	ldd	r19, Y+7	; 0x07
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	28 17       	cp	r18, r24
    2454:	39 07       	cpc	r19, r25
    2456:	64 f4       	brge	.+24     	; 0x2470 <fputc+0x3c>
    2458:	e8 81       	ld	r30, Y
    245a:	f9 81       	ldd	r31, Y+1	; 0x01
    245c:	01 93       	st	Z+, r16
    245e:	f9 83       	std	Y+1, r31	; 0x01
    2460:	e8 83       	st	Y, r30
    2462:	06 c0       	rjmp	.+12     	; 0x2470 <fputc+0x3c>
    2464:	e8 85       	ldd	r30, Y+8	; 0x08
    2466:	f9 85       	ldd	r31, Y+9	; 0x09
    2468:	80 2f       	mov	r24, r16
    246a:	09 95       	icall
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	31 f4       	brne	.+12     	; 0x247c <fputc+0x48>
    2470:	8e 81       	ldd	r24, Y+6	; 0x06
    2472:	9f 81       	ldd	r25, Y+7	; 0x07
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	9f 83       	std	Y+7, r25	; 0x07
    2478:	8e 83       	std	Y+6, r24	; 0x06
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <fputc+0x4c>
    247c:	0f ef       	ldi	r16, 0xFF	; 255
    247e:	1f ef       	ldi	r17, 0xFF	; 255
    2480:	c8 01       	movw	r24, r16
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	08 95       	ret

0000248c <__ultoa_invert>:
    248c:	fa 01       	movw	r30, r20
    248e:	aa 27       	eor	r26, r26
    2490:	28 30       	cpi	r18, 0x08	; 8
    2492:	51 f1       	breq	.+84     	; 0x24e8 <__ultoa_invert+0x5c>
    2494:	20 31       	cpi	r18, 0x10	; 16
    2496:	81 f1       	breq	.+96     	; 0x24f8 <__ultoa_invert+0x6c>
    2498:	e8 94       	clt
    249a:	6f 93       	push	r22
    249c:	6e 7f       	andi	r22, 0xFE	; 254
    249e:	6e 5f       	subi	r22, 0xFE	; 254
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	8f 4f       	sbci	r24, 0xFF	; 255
    24a4:	9f 4f       	sbci	r25, 0xFF	; 255
    24a6:	af 4f       	sbci	r26, 0xFF	; 255
    24a8:	b1 e0       	ldi	r27, 0x01	; 1
    24aa:	3e d0       	rcall	.+124    	; 0x2528 <__ultoa_invert+0x9c>
    24ac:	b4 e0       	ldi	r27, 0x04	; 4
    24ae:	3c d0       	rcall	.+120    	; 0x2528 <__ultoa_invert+0x9c>
    24b0:	67 0f       	add	r22, r23
    24b2:	78 1f       	adc	r23, r24
    24b4:	89 1f       	adc	r24, r25
    24b6:	9a 1f       	adc	r25, r26
    24b8:	a1 1d       	adc	r26, r1
    24ba:	68 0f       	add	r22, r24
    24bc:	79 1f       	adc	r23, r25
    24be:	8a 1f       	adc	r24, r26
    24c0:	91 1d       	adc	r25, r1
    24c2:	a1 1d       	adc	r26, r1
    24c4:	6a 0f       	add	r22, r26
    24c6:	71 1d       	adc	r23, r1
    24c8:	81 1d       	adc	r24, r1
    24ca:	91 1d       	adc	r25, r1
    24cc:	a1 1d       	adc	r26, r1
    24ce:	20 d0       	rcall	.+64     	; 0x2510 <__ultoa_invert+0x84>
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <__ultoa_invert+0x48>
    24d2:	68 94       	set
    24d4:	3f 91       	pop	r19
    24d6:	2a e0       	ldi	r18, 0x0A	; 10
    24d8:	26 9f       	mul	r18, r22
    24da:	11 24       	eor	r1, r1
    24dc:	30 19       	sub	r19, r0
    24de:	30 5d       	subi	r19, 0xD0	; 208
    24e0:	31 93       	st	Z+, r19
    24e2:	de f6       	brtc	.-74     	; 0x249a <__ultoa_invert+0xe>
    24e4:	cf 01       	movw	r24, r30
    24e6:	08 95       	ret
    24e8:	46 2f       	mov	r20, r22
    24ea:	47 70       	andi	r20, 0x07	; 7
    24ec:	40 5d       	subi	r20, 0xD0	; 208
    24ee:	41 93       	st	Z+, r20
    24f0:	b3 e0       	ldi	r27, 0x03	; 3
    24f2:	0f d0       	rcall	.+30     	; 0x2512 <__ultoa_invert+0x86>
    24f4:	c9 f7       	brne	.-14     	; 0x24e8 <__ultoa_invert+0x5c>
    24f6:	f6 cf       	rjmp	.-20     	; 0x24e4 <__ultoa_invert+0x58>
    24f8:	46 2f       	mov	r20, r22
    24fa:	4f 70       	andi	r20, 0x0F	; 15
    24fc:	40 5d       	subi	r20, 0xD0	; 208
    24fe:	4a 33       	cpi	r20, 0x3A	; 58
    2500:	18 f0       	brcs	.+6      	; 0x2508 <__ultoa_invert+0x7c>
    2502:	49 5d       	subi	r20, 0xD9	; 217
    2504:	31 fd       	sbrc	r19, 1
    2506:	40 52       	subi	r20, 0x20	; 32
    2508:	41 93       	st	Z+, r20
    250a:	02 d0       	rcall	.+4      	; 0x2510 <__ultoa_invert+0x84>
    250c:	a9 f7       	brne	.-22     	; 0x24f8 <__ultoa_invert+0x6c>
    250e:	ea cf       	rjmp	.-44     	; 0x24e4 <__ultoa_invert+0x58>
    2510:	b4 e0       	ldi	r27, 0x04	; 4
    2512:	a6 95       	lsr	r26
    2514:	97 95       	ror	r25
    2516:	87 95       	ror	r24
    2518:	77 95       	ror	r23
    251a:	67 95       	ror	r22
    251c:	ba 95       	dec	r27
    251e:	c9 f7       	brne	.-14     	; 0x2512 <__ultoa_invert+0x86>
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	61 05       	cpc	r22, r1
    2524:	71 05       	cpc	r23, r1
    2526:	08 95       	ret
    2528:	9b 01       	movw	r18, r22
    252a:	ac 01       	movw	r20, r24
    252c:	0a 2e       	mov	r0, r26
    252e:	06 94       	lsr	r0
    2530:	57 95       	ror	r21
    2532:	47 95       	ror	r20
    2534:	37 95       	ror	r19
    2536:	27 95       	ror	r18
    2538:	ba 95       	dec	r27
    253a:	c9 f7       	brne	.-14     	; 0x252e <__ultoa_invert+0xa2>
    253c:	62 0f       	add	r22, r18
    253e:	73 1f       	adc	r23, r19
    2540:	84 1f       	adc	r24, r20
    2542:	95 1f       	adc	r25, r21
    2544:	a0 1d       	adc	r26, r0
    2546:	08 95       	ret

00002548 <_exit>:
    2548:	f8 94       	cli

0000254a <__stop_program>:
    254a:	ff cf       	rjmp	.-2      	; 0x254a <__stop_program>
