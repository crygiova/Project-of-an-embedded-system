
Industrial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800100  000027a2  00002836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800362  00800362  00002a98  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e8  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005cc  00000000  00000000  00003c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000380f  00000000  00000000  00004254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bc8  00000000  00000000  00007a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000325c  00000000  00000000  0000962b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d0  00000000  00000000  0000c888  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a4b  00000000  00000000  0000cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000171a  00000000  00000000  0000d7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000837  00000000  00000000  0000eebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  0000f6f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_1>
       8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_2>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_15>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <myfont>:
      70:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
      80:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
      90:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
      a0:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
      b0:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
      c0:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
      d0:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
      e0:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
      f0:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
     100:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
     110:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
     120:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
     130:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
     140:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
     150:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
     160:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
     170:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
     180:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
     190:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
     1a0:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
     1b0:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
     1c0:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
     1d0:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
     1e0:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
     1f0:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
     200:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
     210:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
     220:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
     230:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
     240:	00 00 42 3c 08 00 04 02 04 02 00 00                 ..B<........

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	13 e0       	ldi	r17, 0x03	; 3
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e2 ea       	ldi	r30, 0xA2	; 162
     260:	f7 e2       	ldi	r31, 0x27	; 39
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a2 36       	cpi	r26, 0x62	; 98
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	13 e0       	ldi	r17, 0x03	; 3
     270:	a2 e6       	ldi	r26, 0x62	; 98
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a5 37       	cpi	r26, 0x75	; 117
     27a:	b1 07       	cpc	r27, r17
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <main>
     282:	0c 94 cf 13 	jmp	0x279e	; 0x279e <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <readADC>:
uint8_t resultADC;
uint8_t flagADC;

volatile char* extADC = 0x1442;

void readADC(enum channelsADC channel){
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	0f 92       	push	r0
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	89 83       	std	Y+1, r24	; 0x01
	switch(channel){
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	91 05       	cpc	r25, r1
     2a0:	69 f0       	breq	.+26     	; 0x2bc <readADC+0x32>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	1c f4       	brge	.+6      	; 0x2ae <readADC+0x24>
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	81 f0       	breq	.+32     	; 0x2cc <readADC+0x42>
     2ac:	27 c0       	rjmp	.+78     	; 0x2fc <readADC+0x72>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	91 05       	cpc	r25, r1
     2b2:	a1 f0       	breq	.+40     	; 0x2dc <readADC+0x52>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	91 05       	cpc	r25, r1
     2b8:	c9 f0       	breq	.+50     	; 0x2ec <readADC+0x62>
     2ba:	20 c0       	rjmp	.+64     	; 0x2fc <readADC+0x72>
		case Y_AXIS:
			*extADC = 0x04;
     2bc:	80 91 00 01 	lds	r24, 0x0100
     2c0:	90 91 01 01 	lds	r25, 0x0101
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
			break;
     2ca:	1f c0       	rjmp	.+62     	; 0x30a <readADC+0x80>
		case X_AXIS:
			*extADC = 0x05;
     2cc:	80 91 00 01 	lds	r24, 0x0100
     2d0:	90 91 01 01 	lds	r25, 0x0101
     2d4:	25 e0       	ldi	r18, 0x05	; 5
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
			break;
     2da:	17 c0       	rjmp	.+46     	; 0x30a <readADC+0x80>
		case L_SLIDER:
			*extADC = 0x06;
     2dc:	80 91 00 01 	lds	r24, 0x0100
     2e0:	90 91 01 01 	lds	r25, 0x0101
     2e4:	26 e0       	ldi	r18, 0x06	; 6
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
			break; 
     2ea:	0f c0       	rjmp	.+30     	; 0x30a <readADC+0x80>
		case R_SLIDER: 
			*extADC = 0x07;
     2ec:	80 91 00 01 	lds	r24, 0x0100
     2f0:	90 91 01 01 	lds	r25, 0x0101
     2f4:	27 e0       	ldi	r18, 0x07	; 7
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
			break;
     2fa:	07 c0       	rjmp	.+14     	; 0x30a <readADC+0x80>
		default:
			*extADC = 0x00;
     2fc:	80 91 00 01 	lds	r24, 0x0100
     300:	90 91 01 01 	lds	r25, 0x0101
     304:	fc 01       	movw	r30, r24
     306:	10 82       	st	Z, r1
			break;
     308:	00 00       	nop
	}
	//_delay_ms(100); //TODO: interrupt
	//result = *extADC;
	}
     30a:	0f 90       	pop	r0
     30c:	cf 91       	pop	r28
     30e:	df 91       	pop	r29
     310:	08 95       	ret

00000312 <ADC_read>:

uint8_t ADC_read(enum channelsADC channel){
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	0f 92       	push	r0
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	89 83       	std	Y+1, r24	; 0x01
	readADC(channel);
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	0e 94 45 01 	call	0x28a	; 0x28a <readADC>
	while(!flagADC); //TODO: Make it less pooling-style
     324:	00 00       	nop
     326:	80 91 66 03 	lds	r24, 0x0366
     32a:	88 23       	and	r24, r24
     32c:	e1 f3       	breq	.-8      	; 0x326 <ADC_read+0x14>
	flagADC = 0;
     32e:	10 92 66 03 	sts	0x0366, r1
	return resultADC;
     332:	80 91 67 03 	lds	r24, 0x0367
     336:	0f 90       	pop	r0
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <printMenu>:
														"Options",
														"Help"
	
};

void printMenu(uint8_t menuOption){
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <printMenu+0x6>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     34a:	19 82       	std	Y+1, r1	; 0x01
     34c:	34 c0       	rjmp	.+104    	; 0x3b6 <printMenu+0x78>
		gotoCharOLED(c,0);
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
		if (c == menuOption) putInvertedSOLED(menu[c]);
     356:	99 81       	ldd	r25, Y+1	; 0x01
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	98 17       	cp	r25, r24
     35c:	a9 f4       	brne	.+42     	; 0x388 <printMenu+0x4a>
     35e:	42 e0       	ldi	r20, 0x02	; 2
     360:	51 e0       	ldi	r21, 0x01	; 1
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	28 2f       	mov	r18, r24
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	c9 01       	movw	r24, r18
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	84 0f       	add	r24, r20
     380:	95 1f       	adc	r25, r21
     382:	0e 94 36 06 	call	0xc6c	; 0xc6c <putInvertedSOLED>
     386:	14 c0       	rjmp	.+40     	; 0x3b0 <printMenu+0x72>
		else putsOLED(menu[c]);
     388:	42 e0       	ldi	r20, 0x02	; 2
     38a:	51 e0       	ldi	r21, 0x01	; 1
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	28 2f       	mov	r18, r24
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	c9 01       	movw	r24, r18
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	84 0f       	add	r24, r20
     3aa:	95 1f       	adc	r25, r21
     3ac:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
	
};

void printMenu(uint8_t menuOption){
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	83 30       	cpi	r24, 0x03	; 3
     3ba:	48 f2       	brcs	.-110    	; 0x34e <printMenu+0x10>
		gotoCharOLED(c,0);
		if (c == menuOption) putInvertedSOLED(menu[c]);
		else putsOLED(menu[c]);
	}
}
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	08 95       	ret

000003c6 <initExtMemIface>:

void initExtMemIface(){
     3c6:	df 93       	push	r29
     3c8:	cf 93       	push	r28
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1 << SRE);
     3ce:	85 e5       	ldi	r24, 0x55	; 85
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	25 e5       	ldi	r18, 0x55	; 85
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	20 68       	ori	r18, 0x80	; 128
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
}
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	08 95       	ret

000003e6 <initTimer>:

void initTimer(){ //It will raise a timer interrupt every aprox 10th of sec.
     3e6:	df 93       	push	r29
     3e8:	cf 93       	push	r28
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	//TCCR1B = 0b00000101; //Set source and prescaler
	TCCR1B |= (1 << CS11);
     3ee:	8e e4       	ldi	r24, 0x4E	; 78
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	2e e4       	ldi	r18, 0x4E	; 78
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	f9 01       	movw	r30, r18
     3f8:	20 81       	ld	r18, Z
     3fa:	22 60       	ori	r18, 0x02	; 2
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
	TIMSK  |= (1 << TOIE1); //Enable interrupt by overlfow
     400:	89 e5       	ldi	r24, 0x59	; 89
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	29 e5       	ldi	r18, 0x59	; 89
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	f9 01       	movw	r30, r18
     40a:	20 81       	ld	r18, Z
     40c:	20 68       	ori	r18, 0x80	; 128
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18
}
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <stopTimer>:

void stopTimer(){
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS11);
     420:	8e e4       	ldi	r24, 0x4E	; 78
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	2e e4       	ldi	r18, 0x4E	; 78
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	2d 7f       	andi	r18, 0xFD	; 253
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
	
}
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <__vector_1>:




ISR(INT0_vect) //Interrupt routine for the ADC
{
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
	resultADC = *extADC;
     452:	80 91 00 01 	lds	r24, 0x0100
     456:	90 91 01 01 	lds	r25, 0x0101
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	80 93 67 03 	sts	0x0367, r24
	flagADC = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 66 03 	sts	0x0366, r24
}	
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	ff 91       	pop	r31
     46e:	ef 91       	pop	r30
     470:	9f 91       	pop	r25
     472:	8f 91       	pop	r24
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_2>:

ISR(INT1_vect) //Interrupt routine for the Int1 (Joystick Button)
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	8f 93       	push	r24
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
	flagJoyButton = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 65 03 	sts	0x0365, r24
}
     498:	cf 91       	pop	r28
     49a:	df 91       	pop	r29
     49c:	8f 91       	pop	r24
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_15>:

ISR(TIMER1_OVF_vect)
{
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     4be:	80 91 62 03 	lds	r24, 0x0362
     4c2:	90 91 63 03 	lds	r25, 0x0363
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	90 93 63 03 	sts	0x0363, r25
     4cc:	80 93 62 03 	sts	0x0362, r24
	if( ticks >= 5 ) {
     4d0:	80 91 62 03 	lds	r24, 0x0362
     4d4:	90 91 63 03 	lds	r25, 0x0363
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	91 05       	cpc	r25, r1
     4dc:	18 f0       	brcs	.+6      	; 0x4e4 <__vector_15+0x3c>
			readControl = 1;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 68 03 	sts	0x0368, r24
	}
}	
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <initInterrupts>:
 

void initInterrupts(){
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= ~(1<<PD3); //Set INT1/PD3 as Input
     4fe:	81 e3       	ldi	r24, 0x31	; 49
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	21 e3       	ldi	r18, 0x31	; 49
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z
     50a:	27 7f       	andi	r18, 0xF7	; 247
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
	PORTD |= (1<<PD3); //Set pullup
     510:	82 e3       	ldi	r24, 0x32	; 50
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	22 e3       	ldi	r18, 0x32	; 50
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	28 60       	ori	r18, 0x08	; 8
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
	MCUCR |= 1<<ISC11; //Set interrupt on falling edge
     522:	85 e5       	ldi	r24, 0x55	; 85
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	25 e5       	ldi	r18, 0x55	; 85
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	28 60       	ori	r18, 0x08	; 8
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
	GICR |= (1<<INT1);
     534:	8b e5       	ldi	r24, 0x5B	; 91
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	2b e5       	ldi	r18, 0x5B	; 91
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	f9 01       	movw	r30, r18
     53e:	20 81       	ld	r18, Z
     540:	20 68       	ori	r18, 0x80	; 128
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
	GICR |= (1<<INT0); 
     546:	8b e5       	ldi	r24, 0x5B	; 91
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	2b e5       	ldi	r18, 0x5B	; 91
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	20 64       	ori	r18, 0x40	; 64
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
	sei();
     558:	78 94       	sei
}
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <printHelp>:

void printHelp(){
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	2e 97       	sbiw	r28, 0x0e	; 14
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
	gotoCharOLED(0,0);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
	putsOLED("Need help ?");
     580:	82 e9       	ldi	r24, 0x92	; 146
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
	gotoCharOLED(1,0);
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
	putsOLED("Try google ...");
     590:	8e e9       	ldi	r24, 0x9E	; 158
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
	gotoCharOLED(2,0);
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
	putsOLED("or buy me beer");
     5a0:	8d ea       	ldi	r24, 0xAD	; 173
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e4       	ldi	r25, 0x40	; 64
     5ac:	ac e9       	ldi	r26, 0x9C	; 156
     5ae:	b5 e4       	ldi	r27, 0x45	; 69
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	9a 83       	std	Y+2, r25	; 0x02
     5b4:	ab 83       	std	Y+3, r26	; 0x03
     5b6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5b8:	69 81       	ldd	r22, Y+1	; 0x01
     5ba:	7a 81       	ldd	r23, Y+2	; 0x02
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	2a e9       	ldi	r18, 0x9A	; 154
     5c2:	39 e9       	ldi	r19, 0x99	; 153
     5c4:	49 e9       	ldi	r20, 0x99	; 153
     5c6:	54 e4       	ldi	r21, 0x44	; 68
     5c8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__mulsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	8d 83       	std	Y+5, r24	; 0x05
     5d2:	9e 83       	std	Y+6, r25	; 0x06
     5d4:	af 83       	std	Y+7, r26	; 0x07
     5d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5d8:	11 e0       	ldi	r17, 0x01	; 1
     5da:	6d 81       	ldd	r22, Y+5	; 0x05
     5dc:	7e 81       	ldd	r23, Y+6	; 0x06
     5de:	8f 81       	ldd	r24, Y+7	; 0x07
     5e0:	98 85       	ldd	r25, Y+8	; 0x08
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e8       	ldi	r20, 0x80	; 128
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__ltsf2>
     5ee:	88 23       	and	r24, r24
     5f0:	0c f0       	brlt	.+2      	; 0x5f4 <printHelp+0x94>
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	11 23       	and	r17, r17
     5f6:	29 f0       	breq	.+10     	; 0x602 <printHelp+0xa2>
		__ticks = 1;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	9a 87       	std	Y+10, r25	; 0x0a
     5fe:	89 87       	std	Y+9, r24	; 0x09
     600:	46 c0       	rjmp	.+140    	; 0x68e <printHelp+0x12e>
	else if (__tmp > 65535)
     602:	11 e0       	ldi	r17, 0x01	; 1
     604:	6d 81       	ldd	r22, Y+5	; 0x05
     606:	7e 81       	ldd	r23, Y+6	; 0x06
     608:	8f 81       	ldd	r24, Y+7	; 0x07
     60a:	98 85       	ldd	r25, Y+8	; 0x08
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	3f ef       	ldi	r19, 0xFF	; 255
     610:	4f e7       	ldi	r20, 0x7F	; 127
     612:	57 e4       	ldi	r21, 0x47	; 71
     614:	0e 94 85 0c 	call	0x190a	; 0x190a <__gtsf2>
     618:	18 16       	cp	r1, r24
     61a:	0c f0       	brlt	.+2      	; 0x61e <printHelp+0xbe>
     61c:	10 e0       	ldi	r17, 0x00	; 0
     61e:	11 23       	and	r17, r17
     620:	61 f1       	breq	.+88     	; 0x67a <printHelp+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     622:	69 81       	ldd	r22, Y+1	; 0x01
     624:	7a 81       	ldd	r23, Y+2	; 0x02
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	40 e2       	ldi	r20, 0x20	; 32
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__mulsf3>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	bc 01       	movw	r22, r24
     63c:	cd 01       	movw	r24, r26
     63e:	0e 94 b7 09 	call	0x136e	; 0x136e <__fixunssfsi>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	9a 87       	std	Y+10, r25	; 0x0a
     648:	89 87       	std	Y+9, r24	; 0x09
     64a:	12 c0       	rjmp	.+36     	; 0x670 <printHelp+0x110>
     64c:	8a e7       	ldi	r24, 0x7A	; 122
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	9c 87       	std	Y+12, r25	; 0x0c
     652:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     654:	8b 85       	ldd	r24, Y+11	; 0x0b
     656:	9c 85       	ldd	r25, Y+12	; 0x0c
     658:	8c 01       	movw	r16, r24
     65a:	c8 01       	movw	r24, r16
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <printHelp+0xfc>
     660:	8c 01       	movw	r16, r24
     662:	1c 87       	std	Y+12, r17	; 0x0c
     664:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     666:	89 85       	ldd	r24, Y+9	; 0x09
     668:	9a 85       	ldd	r25, Y+10	; 0x0a
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	9a 87       	std	Y+10, r25	; 0x0a
     66e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     670:	89 85       	ldd	r24, Y+9	; 0x09
     672:	9a 85       	ldd	r25, Y+10	; 0x0a
     674:	00 97       	sbiw	r24, 0x00	; 0
     676:	51 f7       	brne	.-44     	; 0x64c <printHelp+0xec>
     678:	17 c0       	rjmp	.+46     	; 0x6a8 <printHelp+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     67a:	6d 81       	ldd	r22, Y+5	; 0x05
     67c:	7e 81       	ldd	r23, Y+6	; 0x06
     67e:	8f 81       	ldd	r24, Y+7	; 0x07
     680:	98 85       	ldd	r25, Y+8	; 0x08
     682:	0e 94 b7 09 	call	0x136e	; 0x136e <__fixunssfsi>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	9a 87       	std	Y+10, r25	; 0x0a
     68c:	89 87       	std	Y+9, r24	; 0x09
     68e:	89 85       	ldd	r24, Y+9	; 0x09
     690:	9a 85       	ldd	r25, Y+10	; 0x0a
     692:	9e 87       	std	Y+14, r25	; 0x0e
     694:	8d 87       	std	Y+13, r24	; 0x0d
     696:	8d 85       	ldd	r24, Y+13	; 0x0d
     698:	9e 85       	ldd	r25, Y+14	; 0x0e
     69a:	8c 01       	movw	r16, r24
     69c:	c8 01       	movw	r24, r16
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <printHelp+0x13e>
     6a2:	8c 01       	movw	r16, r24
     6a4:	1e 87       	std	Y+14, r17	; 0x0e
     6a6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(5000);
	clearOLED();
     6a8:	0e 94 d2 06 	call	0xda4	; 0xda4 <clearOLED>
}
     6ac:	2e 96       	adiw	r28, 0x0e	; 14
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <main>:


int main(void)
{
     6c2:	df 93       	push	r29
     6c4:	cf 93       	push	r28
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <main+0x6>
     6c8:	0f 92       	push	r0
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
	
	initUART(UBBR);
     6ce:	8f e1       	ldi	r24, 0x1F	; 31
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 f5 06 	call	0xdea	; 0xdea <initUART>
	printf("Simple RAM TEST \r\n");
     6d6:	8c eb       	ldi	r24, 0xBC	; 188
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
	initExtMemIface();
     6de:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <initExtMemIface>
	initTimer();
     6e2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <initTimer>
	initInterrupts();
     6e6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <initInterrupts>
	SRAM_test();
     6ea:	0e 94 16 08 	call	0x102c	; 0x102c <SRAM_test>
	joyInit();
     6ee:	0e 94 ee 03 	call	0x7dc	; 0x7dc <joyInit>
	initOLED();
     6f2:	0e 94 59 05 	call	0xab2	; 0xab2 <initOLED>
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <main+0x38>
// 		printf ("Joystick Reads X: %d    Y: %d \n\r",c.x,c.y);
// 		printdir(d);
// 		_delay_ms(1000);
		
		
	}
     6f8:	00 00       	nop
	initOLED();
	struct joypos_t c;
	enum joydir_t d;
	
	 while(1){
		if (readControl) {
     6fa:	80 91 68 03 	lds	r24, 0x0368
     6fe:	88 23       	and	r24, r24
     700:	a1 f1       	breq	.+104    	; 0x76a <main+0xa8>
			readControl = 0;
     702:	10 92 68 03 	sts	0x0368, r1
			d = getJoyDirection();
     706:	0e 94 13 04 	call	0x826	; 0x826 <getJoyDirection>
     70a:	89 83       	std	Y+1, r24	; 0x01
			if (d == TOP || d == RIGHT_TOP || d == LEFT_TOP) menuOption = (menuOption-1)%NUM_MENU_OPTIONS;
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	84 30       	cpi	r24, 0x04	; 4
     710:	31 f0       	breq	.+12     	; 0x71e <main+0x5c>
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	19 f0       	breq	.+6      	; 0x71e <main+0x5c>
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	69 f4       	brne	.+26     	; 0x738 <main+0x76>
     71e:	80 91 64 03 	lds	r24, 0x0364
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	23 e0       	ldi	r18, 0x03	; 3
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	b9 01       	movw	r22, r18
     72e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__divmodhi4>
     732:	80 93 64 03 	sts	0x0364, r24
     736:	15 c0       	rjmp	.+42     	; 0x762 <main+0xa0>
			else if (d == BOTTOM || d == RIGHT_BOTTOM|| d == LEFT_BOTTOM) menuOption = (menuOption+1)%NUM_MENU_OPTIONS;
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	85 30       	cpi	r24, 0x05	; 5
     73c:	31 f0       	breq	.+12     	; 0x74a <main+0x88>
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	19 f0       	breq	.+6      	; 0x74a <main+0x88>
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	88 23       	and	r24, r24
     748:	61 f4       	brne	.+24     	; 0x762 <main+0xa0>
     74a:	80 91 64 03 	lds	r24, 0x0364
     74e:	88 2f       	mov	r24, r24
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	23 e0       	ldi	r18, 0x03	; 3
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	b9 01       	movw	r22, r18
     75a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__divmodhi4>
     75e:	80 93 64 03 	sts	0x0364, r24
			printMenu(menuOption);
     762:	80 91 64 03 	lds	r24, 0x0364
     766:	0e 94 9f 01 	call	0x33e	; 0x33e <printMenu>
		} if (flagJoyButton) {
     76a:	80 91 65 03 	lds	r24, 0x0365
     76e:	88 23       	and	r24, r24
     770:	19 f2       	breq	.-122    	; 0x6f8 <main+0x36>
		
			flagJoyButton = 0;
     772:	10 92 65 03 	sts	0x0365, r1
			gotoCharOLED(7,0);
     776:	87 e0       	ldi	r24, 0x07	; 7
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
			putsOLED("                        "); //Cleans last selected option from screen
     77e:	8e ec       	ldi	r24, 0xCE	; 206
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
			switch(menuOption){
     786:	80 91 64 03 	lds	r24, 0x0364
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	91 05       	cpc	r25, r1
     792:	71 f0       	breq	.+28     	; 0x7b0 <main+0xee>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	91 05       	cpc	r25, r1
     798:	a1 f0       	breq	.+40     	; 0x7c2 <main+0x100>
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	a9 f4       	brne	.+42     	; 0x7c8 <main+0x106>
				case 0: //Play
					gotoCharOLED(7,0);
     79e:	87 e0       	ldi	r24, 0x07	; 7
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
					putsOLED("PLAY");
     7a6:	87 ee       	ldi	r24, 0xE7	; 231
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
					break;
     7ae:	15 c0       	rjmp	.+42     	; 0x7da <main+0x118>
					
			   case 1: //Options
					gotoCharOLED(7,0);
     7b0:	87 e0       	ldi	r24, 0x07	; 7
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
					putsOLED("OPTIONS");
     7b8:	8c ee       	ldi	r24, 0xEC	; 236
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
					break;
     7c0:	0c c0       	rjmp	.+24     	; 0x7da <main+0x118>
					
			   case 2: //Help
				    printHelp();
     7c2:	0e 94 b0 02 	call	0x560	; 0x560 <printHelp>
					break;
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <main+0x118>
					
			  default:
					gotoCharOLED(7,0);
     7c8:	87 e0       	ldi	r24, 0x07	; 7
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <gotoCharOLED>
					putsOLED("Stick to the OPTIONS !!!");
     7d0:	84 ef       	ldi	r24, 0xF4	; 244
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <putsOLED>
					break;
     7d8:	00 00       	nop
// 		printf ("Joystick Reads X: %d    Y: %d \n\r",c.x,c.y);
// 		printdir(d);
// 		_delay_ms(1000);
		
		
	}
     7da:	8f cf       	rjmp	.-226    	; 0x6fa <main+0x38>

000007dc <joyInit>:

volatile uint8_t flagJoyButton = 0; //Initialize flag for joybutton
struct joypos_t mPoint; //Will be initialized in runntime


void joyInit(){
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
	mPoint.x = ADC_read(X_AXIS);
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     7ea:	80 93 69 03 	sts	0x0369, r24
	mPoint.y = ADC_read(Y_AXIS);
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     7f4:	80 93 6a 03 	sts	0x036A, r24
}
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <getJoyPosition>:

struct joypos_t getJoyPosition(){
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	00 d0       	rcall	.+0      	; 0x804 <getJoyPosition+0x6>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
	r.x = ADC_read(X_AXIS);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     80e:	89 83       	std	Y+1, r24	; 0x01
	r.y = ADC_read(Y_AXIS);
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     816:	8a 83       	std	Y+2, r24	; 0x02
	return r;	
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	cf 91       	pop	r28
     822:	df 91       	pop	r29
     824:	08 95       	ret

00000826 <getJoyDirection>:

enum joydir_t getJoyDirection(){
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	00 d0       	rcall	.+0      	; 0x82c <getJoyDirection+0x6>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
    r = getJoyPosition();
     830:	0e 94 ff 03 	call	0x7fe	; 0x7fe <getJoyPosition>
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
	if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) return CENTER;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	28 2f       	mov	r18, r24
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	80 91 69 03 	lds	r24, 0x0369
     842:	88 2f       	mov	r24, r24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	a9 01       	movw	r20, r18
     848:	48 1b       	sub	r20, r24
     84a:	59 0b       	sbc	r21, r25
     84c:	ca 01       	movw	r24, r20
     84e:	5f ef       	ldi	r21, 0xFF	; 255
     850:	88 3e       	cpi	r24, 0xE8	; 232
     852:	95 07       	cpc	r25, r21
     854:	6c f1       	brlt	.+90     	; 0x8b0 <getJoyDirection+0x8a>
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	28 2f       	mov	r18, r24
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	80 91 69 03 	lds	r24, 0x0369
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	a9 01       	movw	r20, r18
     866:	48 1b       	sub	r20, r24
     868:	59 0b       	sbc	r21, r25
     86a:	ca 01       	movw	r24, r20
     86c:	89 31       	cpi	r24, 0x19	; 25
     86e:	91 05       	cpc	r25, r1
     870:	fc f4       	brge	.+62     	; 0x8b0 <getJoyDirection+0x8a>
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	28 2f       	mov	r18, r24
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	80 91 6a 03 	lds	r24, 0x036A
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a9 01       	movw	r20, r18
     882:	48 1b       	sub	r20, r24
     884:	59 0b       	sbc	r21, r25
     886:	ca 01       	movw	r24, r20
     888:	5f ef       	ldi	r21, 0xFF	; 255
     88a:	88 3e       	cpi	r24, 0xE8	; 232
     88c:	95 07       	cpc	r25, r21
     88e:	84 f0       	brlt	.+32     	; 0x8b0 <getJoyDirection+0x8a>
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	28 2f       	mov	r18, r24
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	80 91 6a 03 	lds	r24, 0x036A
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a9 01       	movw	r20, r18
     8a0:	48 1b       	sub	r20, r24
     8a2:	59 0b       	sbc	r21, r25
     8a4:	ca 01       	movw	r24, r20
     8a6:	89 31       	cpi	r24, 0x19	; 25
     8a8:	91 05       	cpc	r25, r1
     8aa:	14 f4       	brge	.+4      	; 0x8b0 <getJoyDirection+0x8a>
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	7d c0       	rjmp	.+250    	; 0x9aa <getJoyDirection+0x184>
	else {
		if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && !abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	80 91 69 03 	lds	r24, 0x0369
     8ba:	88 2f       	mov	r24, r24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a9 01       	movw	r20, r18
     8c0:	48 1b       	sub	r20, r24
     8c2:	59 0b       	sbc	r21, r25
     8c4:	ca 01       	movw	r24, r20
     8c6:	5f ef       	ldi	r21, 0xFF	; 255
     8c8:	88 3e       	cpi	r24, 0xE8	; 232
     8ca:	95 07       	cpc	r25, r21
     8cc:	bc f0       	brlt	.+46     	; 0x8fc <getJoyDirection+0xd6>
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	80 91 69 03 	lds	r24, 0x0369
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	48 1b       	sub	r20, r24
     8e0:	59 0b       	sbc	r21, r25
     8e2:	ca 01       	movw	r24, r20
     8e4:	89 31       	cpi	r24, 0x19	; 25
     8e6:	91 05       	cpc	r25, r1
     8e8:	4c f4       	brge	.+18     	; 0x8fc <getJoyDirection+0xd6>
			if (r.y > mPoint.y) return TOP;
     8ea:	9a 81       	ldd	r25, Y+2	; 0x02
     8ec:	80 91 6a 03 	lds	r24, 0x036A
     8f0:	89 17       	cp	r24, r25
     8f2:	10 f4       	brcc	.+4      	; 0x8f8 <getJoyDirection+0xd2>
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	59 c0       	rjmp	.+178    	; 0x9aa <getJoyDirection+0x184>
			else return BOTTOM;
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	57 c0       	rjmp	.+174    	; 0x9aa <getJoyDirection+0x184>
		}
		if (!abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     8fc:	8a 81       	ldd	r24, Y+2	; 0x02
     8fe:	28 2f       	mov	r18, r24
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	80 91 6a 03 	lds	r24, 0x036A
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a9 01       	movw	r20, r18
     90c:	48 1b       	sub	r20, r24
     90e:	59 0b       	sbc	r21, r25
     910:	ca 01       	movw	r24, r20
     912:	5f ef       	ldi	r21, 0xFF	; 255
     914:	88 3e       	cpi	r24, 0xE8	; 232
     916:	95 07       	cpc	r25, r21
     918:	bc f0       	brlt	.+46     	; 0x948 <getJoyDirection+0x122>
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	28 2f       	mov	r18, r24
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	80 91 6a 03 	lds	r24, 0x036A
     924:	88 2f       	mov	r24, r24
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a9 01       	movw	r20, r18
     92a:	48 1b       	sub	r20, r24
     92c:	59 0b       	sbc	r21, r25
     92e:	ca 01       	movw	r24, r20
     930:	89 31       	cpi	r24, 0x19	; 25
     932:	91 05       	cpc	r25, r1
     934:	4c f4       	brge	.+18     	; 0x948 <getJoyDirection+0x122>
			if (r.x > mPoint.x) return RIGHT;
     936:	99 81       	ldd	r25, Y+1	; 0x01
     938:	80 91 69 03 	lds	r24, 0x0369
     93c:	89 17       	cp	r24, r25
     93e:	10 f4       	brcc	.+4      	; 0x944 <getJoyDirection+0x11e>
     940:	87 e0       	ldi	r24, 0x07	; 7
     942:	33 c0       	rjmp	.+102    	; 0x9aa <getJoyDirection+0x184>
			else return LEFT;
     944:	86 e0       	ldi	r24, 0x06	; 6
     946:	31 c0       	rjmp	.+98     	; 0x9aa <getJoyDirection+0x184>
		} 
		if (r.x < mPoint.x && r.y < mPoint.y) return LEFT_BOTTOM; 
     948:	99 81       	ldd	r25, Y+1	; 0x01
     94a:	80 91 69 03 	lds	r24, 0x0369
     94e:	98 17       	cp	r25, r24
     950:	38 f4       	brcc	.+14     	; 0x960 <getJoyDirection+0x13a>
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	80 91 6a 03 	lds	r24, 0x036A
     958:	98 17       	cp	r25, r24
     95a:	10 f4       	brcc	.+4      	; 0x960 <getJoyDirection+0x13a>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	25 c0       	rjmp	.+74     	; 0x9aa <getJoyDirection+0x184>
		if (r.x < mPoint.x && r.y > mPoint.y) return LEFT_TOP;
     960:	99 81       	ldd	r25, Y+1	; 0x01
     962:	80 91 69 03 	lds	r24, 0x0369
     966:	98 17       	cp	r25, r24
     968:	38 f4       	brcc	.+14     	; 0x978 <getJoyDirection+0x152>
     96a:	9a 81       	ldd	r25, Y+2	; 0x02
     96c:	80 91 6a 03 	lds	r24, 0x036A
     970:	89 17       	cp	r24, r25
     972:	10 f4       	brcc	.+4      	; 0x978 <getJoyDirection+0x152>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	19 c0       	rjmp	.+50     	; 0x9aa <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y < mPoint.y) return RIGHT_BOTTOM;
     978:	99 81       	ldd	r25, Y+1	; 0x01
     97a:	80 91 69 03 	lds	r24, 0x0369
     97e:	89 17       	cp	r24, r25
     980:	38 f4       	brcc	.+14     	; 0x990 <getJoyDirection+0x16a>
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	80 91 6a 03 	lds	r24, 0x036A
     988:	98 17       	cp	r25, r24
     98a:	10 f4       	brcc	.+4      	; 0x990 <getJoyDirection+0x16a>
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	0d c0       	rjmp	.+26     	; 0x9aa <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y > mPoint.y) return RIGHT_TOP;
     990:	99 81       	ldd	r25, Y+1	; 0x01
     992:	80 91 69 03 	lds	r24, 0x0369
     996:	89 17       	cp	r24, r25
     998:	38 f4       	brcc	.+14     	; 0x9a8 <getJoyDirection+0x182>
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	80 91 6a 03 	lds	r24, 0x036A
     9a0:	89 17       	cp	r24, r25
     9a2:	10 f4       	brcc	.+4      	; 0x9a8 <getJoyDirection+0x182>
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <getJoyDirection+0x184>
	}
	
	return CENTER; //In case of error return inhert NEVER USED
     9a8:	88 e0       	ldi	r24, 0x08	; 8
}
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <printdir>:



	
	void printdir(enum joydir_t d) {
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	0f 92       	push	r0
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	89 83       	std	Y+1, r24	; 0x01
		switch (d){
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	88 2f       	mov	r24, r24
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	84 30       	cpi	r24, 0x04	; 4
     9c8:	91 05       	cpc	r25, r1
     9ca:	01 f1       	breq	.+64     	; 0xa0c <printdir+0x58>
     9cc:	85 30       	cpi	r24, 0x05	; 5
     9ce:	91 05       	cpc	r25, r1
     9d0:	84 f4       	brge	.+32     	; 0x9f2 <printdir+0x3e>
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	91 05       	cpc	r25, r1
     9d6:	c1 f1       	breq	.+112    	; 0xa48 <printdir+0x94>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	91 05       	cpc	r25, r1
     9dc:	1c f4       	brge	.+6      	; 0x9e4 <printdir+0x30>
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	c1 f1       	breq	.+112    	; 0xa52 <printdir+0x9e>
     9e2:	41 c0       	rjmp	.+130    	; 0xa66 <printdir+0xb2>
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	91 05       	cpc	r25, r1
     9e8:	29 f1       	breq	.+74     	; 0xa34 <printdir+0x80>
     9ea:	83 30       	cpi	r24, 0x03	; 3
     9ec:	91 05       	cpc	r25, r1
     9ee:	39 f1       	breq	.+78     	; 0xa3e <printdir+0x8a>
     9f0:	3a c0       	rjmp	.+116    	; 0xa66 <printdir+0xb2>
     9f2:	86 30       	cpi	r24, 0x06	; 6
     9f4:	91 05       	cpc	r25, r1
     9f6:	a1 f0       	breq	.+40     	; 0xa20 <printdir+0x6c>
     9f8:	86 30       	cpi	r24, 0x06	; 6
     9fa:	91 05       	cpc	r25, r1
     9fc:	64 f0       	brlt	.+24     	; 0xa16 <printdir+0x62>
     9fe:	87 30       	cpi	r24, 0x07	; 7
     a00:	91 05       	cpc	r25, r1
     a02:	99 f0       	breq	.+38     	; 0xa2a <printdir+0x76>
     a04:	88 30       	cpi	r24, 0x08	; 8
     a06:	91 05       	cpc	r25, r1
     a08:	49 f1       	breq	.+82     	; 0xa5c <printdir+0xa8>
     a0a:	2d c0       	rjmp	.+90     	; 0xa66 <printdir+0xb2>
			case TOP: printf("TOP \r\n"); break;
     a0c:	8d e0       	ldi	r24, 0x0D	; 13
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a14:	28 c0       	rjmp	.+80     	; 0xa66 <printdir+0xb2>
			case BOTTOM: printf("BOTTOM \r\n"); break;
     a16:	83 e1       	ldi	r24, 0x13	; 19
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a1e:	23 c0       	rjmp	.+70     	; 0xa66 <printdir+0xb2>
			case LEFT: printf("LEFT \r\n"); break;
     a20:	8c e1       	ldi	r24, 0x1C	; 28
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a28:	1e c0       	rjmp	.+60     	; 0xa66 <printdir+0xb2>
			case RIGHT: printf("RIGHT \r\n"); break;
     a2a:	83 e2       	ldi	r24, 0x23	; 35
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a32:	19 c0       	rjmp	.+50     	; 0xa66 <printdir+0xb2>
			case RIGHT_BOTTOM: printf("RIGHT_BOTTOM \r\n"); break;
     a34:	8b e2       	ldi	r24, 0x2B	; 43
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a3c:	14 c0       	rjmp	.+40     	; 0xa66 <printdir+0xb2>
			case RIGHT_TOP: printf("RIGHT_TOP \r\n"); break;
     a3e:	8a e3       	ldi	r24, 0x3A	; 58
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <printdir+0xb2>
			case LEFT_TOP: printf("LEFT_TOP \r\n"); break;
     a48:	86 e4       	ldi	r24, 0x46	; 70
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a50:	0a c0       	rjmp	.+20     	; 0xa66 <printdir+0xb2>
			case LEFT_BOTTOM: printf("LEFT_BOTTOM \r\n"); break;
     a52:	81 e5       	ldi	r24, 0x51	; 81
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <printdir+0xb2>
			case CENTER: printf("SENTRUM \r\n"); break;	
     a5c:	8f e5       	ldi	r24, 0x5F	; 95
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>
     a64:	00 00       	nop
		}	
		
	}
     a66:	0f 90       	pop	r0
     a68:	cf 91       	pop	r28
     a6a:	df 91       	pop	r29
     a6c:	08 95       	ret

00000a6e <writeDataOLED>:
#include "font_5x7.h"

volatile char* extDataOled = 0x1242; //Adress for the Data reg of the OLED DC=0       0b0001 0010 0100 0010
volatile char* extCommandOled = 0x1001; //Adress for the Command reg of the OLED DC=1 0b0001 0000 0000 0001

void writeDataOLED(uint8_t c){
     a6e:	df 93       	push	r29
     a70:	cf 93       	push	r28
     a72:	0f 92       	push	r0
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	89 83       	std	Y+1, r24	; 0x01
	*extDataOled = c;
     a7a:	80 91 69 02 	lds	r24, 0x0269
     a7e:	90 91 6a 02 	lds	r25, 0x026A
     a82:	29 81       	ldd	r18, Y+1	; 0x01
     a84:	fc 01       	movw	r30, r24
     a86:	20 83       	st	Z, r18
}
     a88:	0f 90       	pop	r0
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	08 95       	ret

00000a90 <writeCommandOLED>:

void writeCommandOLED(uint8_t c){
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	0f 92       	push	r0
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	89 83       	std	Y+1, r24	; 0x01
	*extCommandOled = c;
     a9c:	80 91 6b 02 	lds	r24, 0x026B
     aa0:	90 91 6c 02 	lds	r25, 0x026C
     aa4:	29 81       	ldd	r18, Y+1	; 0x01
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
}
     aaa:	0f 90       	pop	r0
     aac:	cf 91       	pop	r28
     aae:	df 91       	pop	r29
     ab0:	08 95       	ret

00000ab2 <initOLED>:

void initOLED()
{
     ab2:	df 93       	push	r29
     ab4:	cf 93       	push	r28
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
    writeCommandOLED(0xae); // display off
     aba:	8e ea       	ldi	r24, 0xAE	; 174
     abc:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xa1); //segment remap
     ac0:	81 ea       	ldi	r24, 0xA1	; 161
     ac2:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xda); //common pads hardware: alternative
     ac6:	8a ed       	ldi	r24, 0xDA	; 218
     ac8:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x12);
     acc:	82 e1       	ldi	r24, 0x12	; 18
     ace:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xc8); //common output scan direction:com63~com0
     ad2:	88 ec       	ldi	r24, 0xC8	; 200
     ad4:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xa8); //multiplex ration mode:63
     ad8:	88 ea       	ldi	r24, 0xA8	; 168
     ada:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x3f);
     ade:	8f e3       	ldi	r24, 0x3F	; 63
     ae0:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xd5); //display divide ratio/osc. freq. mode
     ae4:	85 ed       	ldi	r24, 0xD5	; 213
     ae6:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x80);
     aea:	80 e8       	ldi	r24, 0x80	; 128
     aec:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x81); //contrast control
     af0:	81 e8       	ldi	r24, 0x81	; 129
     af2:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x50);
     af6:	80 e5       	ldi	r24, 0x50	; 80
     af8:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xd9); //set pre-charge period
     afc:	89 ed       	ldi	r24, 0xD9	; 217
     afe:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x21);
     b02:	81 e2       	ldi	r24, 0x21	; 33
     b04:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x20); //Set Memory Addressing Mode
     b08:	80 e2       	ldi	r24, 0x20	; 32
     b0a:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x00); // horizontal
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xdb); //VCOM deselect level mode
     b14:	8b ed       	ldi	r24, 0xDB	; 219
     b16:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x30);
     b1a:	80 e3       	ldi	r24, 0x30	; 48
     b1c:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xad); //master configuration
     b20:	8d ea       	ldi	r24, 0xAD	; 173
     b22:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0x00);
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>

    //oled_home();
    writeCommandOLED(0x21); //Set column
     b2c:	81 e2       	ldi	r24, 0x21	; 33
     b2e:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x00);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x7F);
     b38:	8f e7       	ldi	r24, 0x7F	; 127
     b3a:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	
	writeCommandOLED(0x22); //Set row
     b3e:	82 e2       	ldi	r24, 0x22	; 34
     b40:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x00);
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x07);
     b4a:	87 e0       	ldi	r24, 0x07	; 7
     b4c:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	
	writeCommandOLED(0x40); //Set start line to 0th
     b50:	80 e4       	ldi	r24, 0x40	; 64
     b52:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>

    writeCommandOLED(0xa4); //out follows RAM content
     b56:	84 ea       	ldi	r24, 0xA4	; 164
     b58:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xa6); //set normal display
     b5c:	86 ea       	ldi	r24, 0xA6	; 166
     b5e:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
    writeCommandOLED(0xaf); // display on
     b62:	8f ea       	ldi	r24, 0xAF	; 175
     b64:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	
	clearOLED();
     b68:	0e 94 d2 06 	call	0xda4	; 0xda4 <clearOLED>
	
	
}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <invertModeOLED>:


void invertModeOLED() {
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa7);	
     b7a:	87 ea       	ldi	r24, 0xA7	; 167
     b7c:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <normalModeOLED>:

void normalModeOLED() {
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa6);	
     b8e:	86 ea       	ldi	r24, 0xA6	; 166
     b90:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <gotoCharOLED>:

//Treats the OLED as a display char of 25 characters long by 8 lines
//It will write from the given position to the end of the line and display
void gotoCharOLED(char line, char pos){
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <gotoCharOLED+0x6>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     ba8:	81 e2       	ldi	r24, 0x21	; 33
     baa:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(pos*5);
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	98 2f       	mov	r25, r24
     bb2:	99 0f       	add	r25, r25
     bb4:	99 0f       	add	r25, r25
     bb6:	89 0f       	add	r24, r25
     bb8:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x7F);
     bbc:	8f e7       	ldi	r24, 0x7F	; 127
     bbe:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     bc2:	82 e2       	ldi	r24, 0x22	; 34
     bc4:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(line);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x07);
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
}
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <gotoPosOLED>:

void gotoPosOLED(char x, char y){
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <gotoPosOLED+0x6>
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     bec:	81 e2       	ldi	r24, 0x21	; 33
     bee:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(x);
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x7F);
     bf8:	8f e7       	ldi	r24, 0x7F	; 127
     bfa:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     bfe:	82 e2       	ldi	r24, 0x22	; 34
     c00:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(y);
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
	writeCommandOLED(0x07);
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	0e 94 48 05 	call	0xa90	; 0xa90 <writeCommandOLED>
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <putsOLED>:

void putsOLED(char* s){
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <putsOLED+0x6>
     c20:	0f 92       	push	r0
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	9b 83       	std	Y+3, r25	; 0x03
     c28:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putcOLED(s[counter]);
     c2a:	19 82       	std	Y+1, r1	; 0x01
     c2c:	0e c0       	rjmp	.+28     	; 0xc4a <putsOLED+0x30>
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	2a 81       	ldd	r18, Y+2	; 0x02
     c36:	3b 81       	ldd	r19, Y+3	; 0x03
     c38:	82 0f       	add	r24, r18
     c3a:	93 1f       	adc	r25, r19
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	0e 94 5f 06 	call	0xcbe	; 0xcbe <putcOLED>
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	2a 81       	ldd	r18, Y+2	; 0x02
     c52:	3b 81       	ldd	r19, Y+3	; 0x03
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	fc 01       	movw	r30, r24
     c5a:	80 81       	ld	r24, Z
     c5c:	88 23       	and	r24, r24
     c5e:	39 f7       	brne	.-50     	; 0xc2e <putsOLED+0x14>
}
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <putInvertedSOLED>:

void putInvertedSOLED(char* s){
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	00 d0       	rcall	.+0      	; 0xc72 <putInvertedSOLED+0x6>
     c72:	0f 92       	push	r0
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	9b 83       	std	Y+3, r25	; 0x03
     c7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putInvertedCOLED(s[counter]);
     c7c:	19 82       	std	Y+1, r1	; 0x01
     c7e:	0e c0       	rjmp	.+28     	; 0xc9c <putInvertedSOLED+0x30>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	2a 81       	ldd	r18, Y+2	; 0x02
     c88:	3b 81       	ldd	r19, Y+3	; 0x03
     c8a:	82 0f       	add	r24, r18
     c8c:	93 1f       	adc	r25, r19
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	0e 94 98 06 	call	0xd30	; 0xd30 <putInvertedCOLED>
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	2a 81       	ldd	r18, Y+2	; 0x02
     ca4:	3b 81       	ldd	r19, Y+3	; 0x03
     ca6:	82 0f       	add	r24, r18
     ca8:	93 1f       	adc	r25, r19
     caa:	fc 01       	movw	r30, r24
     cac:	80 81       	ld	r24, Z
     cae:	88 23       	and	r24, r24
     cb0:	39 f7       	brne	.-50     	; 0xc80 <putInvertedSOLED+0x14>
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <putcOLED>:

void putcOLED(char c){
     cbe:	1f 93       	push	r17
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <putcOLED+0x8>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <putcOLED+0xa>
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(pgm_read_byte(&(myfont[c-32][counter]))); //-32 is to compensate for the offset between our fontfile and the true ascii table
     cd0:	19 82       	std	Y+1, r1	; 0x01
     cd2:	22 c0       	rjmp	.+68     	; 0xd18 <putcOLED+0x5a>
     cd4:	20 e7       	ldi	r18, 0x70	; 112
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	ac 01       	movw	r20, r24
     ce0:	44 0f       	add	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	44 0f       	add	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	48 0f       	add	r20, r24
     cea:	59 1f       	adc	r21, r25
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	84 0f       	add	r24, r20
     cf4:	95 1f       	adc	r25, r21
     cf6:	80 5a       	subi	r24, 0xA0	; 160
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	82 0f       	add	r24, r18
     cfc:	93 1f       	adc	r25, r19
     cfe:	9b 83       	std	Y+3, r25	; 0x03
     d00:	8a 83       	std	Y+2, r24	; 0x02
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	fc 01       	movw	r30, r24
     d08:	14 91       	lpm	r17, Z+
     d0a:	1c 83       	std	Y+4, r17	; 0x04
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	0e 94 37 05 	call	0xa6e	; 0xa6e <writeDataOLED>
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	d8 f2       	brcs	.-74     	; 0xcd4 <putcOLED+0x16>
}
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	1f 91       	pop	r17
     d2e:	08 95       	ret

00000d30 <putInvertedCOLED>:

void putInvertedCOLED(char c){
     d30:	1f 93       	push	r17
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <putInvertedCOLED+0x8>
     d38:	00 d0       	rcall	.+0      	; 0xd3a <putInvertedCOLED+0xa>
     d3a:	0f 92       	push	r0
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(~pgm_read_byte(&(myfont[c-32][counter]))); 
     d42:	19 82       	std	Y+1, r1	; 0x01
     d44:	23 c0       	rjmp	.+70     	; 0xd8c <putInvertedCOLED+0x5c>
     d46:	20 e7       	ldi	r18, 0x70	; 112
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	ac 01       	movw	r20, r24
     d52:	44 0f       	add	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	48 0f       	add	r20, r24
     d5c:	59 1f       	adc	r21, r25
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	84 0f       	add	r24, r20
     d66:	95 1f       	adc	r25, r21
     d68:	80 5a       	subi	r24, 0xA0	; 160
     d6a:	90 40       	sbci	r25, 0x00	; 0
     d6c:	82 0f       	add	r24, r18
     d6e:	93 1f       	adc	r25, r19
     d70:	9b 83       	std	Y+3, r25	; 0x03
     d72:	8a 83       	std	Y+2, r24	; 0x02
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	fc 01       	movw	r30, r24
     d7a:	14 91       	lpm	r17, Z+
     d7c:	1c 83       	std	Y+4, r17	; 0x04
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	80 95       	com	r24
     d82:	0e 94 37 05 	call	0xa6e	; 0xa6e <writeDataOLED>
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	85 30       	cpi	r24, 0x05	; 5
     d90:	d0 f2       	brcs	.-76     	; 0xd46 <putInvertedCOLED+0x16>
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	1f 91       	pop	r17
     da2:	08 95       	ret

00000da4 <clearOLED>:

void clearOLED(){
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <clearOLED+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
	gotoPosOLED(0,0);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	0e 94 ef 05 	call	0xbde	; 0xbde <gotoPosOLED>
	uint16_t i;
	for(i = 0; i < 128*8; i++) writeDataOLED(0x00);
     db6:	1a 82       	std	Y+2, r1	; 0x02
     db8:	19 82       	std	Y+1, r1	; 0x01
     dba:	08 c0       	rjmp	.+16     	; 0xdcc <clearOLED+0x28>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	0e 94 37 05 	call	0xa6e	; 0xa6e <writeDataOLED>
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	24 e0       	ldi	r18, 0x04	; 4
     dd2:	80 30       	cpi	r24, 0x00	; 0
     dd4:	92 07       	cpc	r25, r18
     dd6:	90 f3       	brcs	.-28     	; 0xdbc <clearOLED+0x18>
	gotoPosOLED(0,0);
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	0e 94 ef 05 	call	0xbde	; 0xbde <gotoPosOLED>
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <initUART>:
 */ 


#include "uart.h"

void initUART(uint16_t ubrr ){
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <initUART+0x6>
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	9a 83       	std	Y+2, r25	; 0x02
     df6:	89 83       	std	Y+1, r24	; 0x01
	
	//Init clock generator reg
	UBRR0H = (unsigned char) (ubrr >> 8);
     df8:	80 e4       	ldi	r24, 0x40	; 64
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	29 81       	ldd	r18, Y+1	; 0x01
     dfe:	3a 81       	ldd	r19, Y+2	; 0x02
     e00:	23 2f       	mov	r18, r19
     e02:	33 27       	eor	r19, r19
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
     e08:	89 e2       	ldi	r24, 0x29	; 41
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	29 81       	ldd	r18, Y+1	; 0x01
     e0e:	fc 01       	movw	r30, r24
     e10:	20 83       	st	Z, r18
	//UCSR0A = 0b00000000 //TODO: Rx & Tx "polling"
	UCSR0B = 0b00011000;
     e12:	8a e2       	ldi	r24, 0x2A	; 42
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	28 e1       	ldi	r18, 0x18	; 24
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
	UCSR0C = 0b10000110;
     e1c:	80 e4       	ldi	r24, 0x40	; 64
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	26 e8       	ldi	r18, 0x86	; 134
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
	
	fdevopen(putC,getC);
     e26:	87 e3       	ldi	r24, 0x37	; 55
     e28:	97 e0       	ldi	r25, 0x07	; 7
     e2a:	2f e1       	ldi	r18, 0x1F	; 31
     e2c:	37 e0       	ldi	r19, 0x07	; 7
     e2e:	b9 01       	movw	r22, r18
     e30:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fdevopen>
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <getC>:

int getC()
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	0f 92       	push	r0
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while( !(UCSR0A & 1 << RXC0) );
     e48:	00 00       	nop
     e4a:	8b e2       	ldi	r24, 0x2B	; 43
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	fc 01       	movw	r30, r24
     e50:	80 81       	ld	r24, Z
     e52:	88 23       	and	r24, r24
     e54:	d4 f7       	brge	.-12     	; 0xe4a <getC+0xc>
	c = UDR0;
     e56:	8c e2       	ldi	r24, 0x2C	; 44
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	89 83       	std	Y+1, r24	; 0x01
	return c;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
}
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <putC>:

int putC(char data){
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & 1 << UDRE0) );
     e7a:	00 00       	nop
     e7c:	8b e2       	ldi	r24, 0x2B	; 43
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	80 81       	ld	r24, Z
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	80 72       	andi	r24, 0x20	; 32
     e8a:	90 70       	andi	r25, 0x00	; 0
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	b1 f3       	breq	.-20     	; 0xe7c <putC+0xe>
	UDR0 = data;
     e90:	8c e2       	ldi	r24, 0x2C	; 44
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	29 81       	ldd	r18, Y+1	; 0x01
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
	while( !(UCSR0A & 1 << TXC0) );
     e9a:	00 00       	nop
     e9c:	8b e2       	ldi	r24, 0x2B	; 43
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	80 74       	andi	r24, 0x40	; 64
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	b1 f3       	breq	.-20     	; 0xe9c <putC+0x2e>
	return 0;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <testLatch>:


#include "utils.h"

void testLatch()
{
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	2e 97       	sbiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
     ed4:	8a e3       	ldi	r24, 0x3A	; 58
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	fc 01       	movw	r30, r24
     edc:	20 83       	st	Z, r18
	DDRE = 0xFF;
     ede:	86 e2       	ldi	r24, 0x26	; 38
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	2f ef       	ldi	r18, 0xFF	; 255
     ee4:	fc 01       	movw	r30, r24
     ee6:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x55;
     ee8:	8b e3       	ldi	r24, 0x3B	; 59
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	25 e5       	ldi	r18, 0x55	; 85
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
	PORT_E.b1 = 1;
     ef2:	87 e2       	ldi	r24, 0x27	; 39
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 81       	ld	r18, Z
     efa:	22 60       	ori	r18, 0x02	; 2
     efc:	fc 01       	movw	r30, r24
     efe:	20 83       	st	Z, r18
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e2       	ldi	r26, 0x20	; 32
     f06:	b1 e4       	ldi	r27, 0x41	; 65
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	ab 83       	std	Y+3, r26	; 0x03
     f0e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f10:	69 81       	ldd	r22, Y+1	; 0x01
     f12:	7a 81       	ldd	r23, Y+2	; 0x02
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	2a e9       	ldi	r18, 0x9A	; 154
     f1a:	39 e9       	ldi	r19, 0x99	; 153
     f1c:	49 e9       	ldi	r20, 0x99	; 153
     f1e:	54 e4       	ldi	r21, 0x44	; 68
     f20:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	8d 83       	std	Y+5, r24	; 0x05
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	af 83       	std	Y+7, r26	; 0x07
     f2e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f30:	11 e0       	ldi	r17, 0x01	; 1
     f32:	6d 81       	ldd	r22, Y+5	; 0x05
     f34:	7e 81       	ldd	r23, Y+6	; 0x06
     f36:	8f 81       	ldd	r24, Y+7	; 0x07
     f38:	98 85       	ldd	r25, Y+8	; 0x08
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e8       	ldi	r20, 0x80	; 128
     f40:	5f e3       	ldi	r21, 0x3F	; 63
     f42:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__ltsf2>
     f46:	88 23       	and	r24, r24
     f48:	0c f0       	brlt	.+2      	; 0xf4c <testLatch+0x90>
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	11 23       	and	r17, r17
     f4e:	29 f0       	breq	.+10     	; 0xf5a <testLatch+0x9e>
		__ticks = 1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9a 87       	std	Y+10, r25	; 0x0a
     f56:	89 87       	std	Y+9, r24	; 0x09
     f58:	46 c0       	rjmp	.+140    	; 0xfe6 <testLatch+0x12a>
	else if (__tmp > 65535)
     f5a:	11 e0       	ldi	r17, 0x01	; 1
     f5c:	6d 81       	ldd	r22, Y+5	; 0x05
     f5e:	7e 81       	ldd	r23, Y+6	; 0x06
     f60:	8f 81       	ldd	r24, Y+7	; 0x07
     f62:	98 85       	ldd	r25, Y+8	; 0x08
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	0e 94 85 0c 	call	0x190a	; 0x190a <__gtsf2>
     f70:	18 16       	cp	r1, r24
     f72:	0c f0       	brlt	.+2      	; 0xf76 <testLatch+0xba>
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	11 23       	and	r17, r17
     f78:	61 f1       	breq	.+88     	; 0xfd2 <testLatch+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7a:	69 81       	ldd	r22, Y+1	; 0x01
     f7c:	7a 81       	ldd	r23, Y+2	; 0x02
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 e4       	ldi	r21, 0x41	; 65
     f8a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 b7 09 	call	0x136e	; 0x136e <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9a 87       	std	Y+10, r25	; 0x0a
     fa0:	89 87       	std	Y+9, r24	; 0x09
     fa2:	12 c0       	rjmp	.+36     	; 0xfc8 <testLatch+0x10c>
     fa4:	8a e7       	ldi	r24, 0x7A	; 122
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9c 87       	std	Y+12, r25	; 0x0c
     faa:	8b 87       	std	Y+11, r24	; 0x0b
     fac:	8b 85       	ldd	r24, Y+11	; 0x0b
     fae:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb0:	8c 01       	movw	r16, r24
     fb2:	c8 01       	movw	r24, r16
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <testLatch+0xf8>
     fb8:	8c 01       	movw	r16, r24
     fba:	1c 87       	std	Y+12, r17	; 0x0c
     fbc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9a 87       	std	Y+10, r25	; 0x0a
     fc6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	89 85       	ldd	r24, Y+9	; 0x09
     fca:	9a 85       	ldd	r25, Y+10	; 0x0a
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	51 f7       	brne	.-44     	; 0xfa4 <testLatch+0xe8>
     fd0:	17 c0       	rjmp	.+46     	; 0x1000 <testLatch+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6d 81       	ldd	r22, Y+5	; 0x05
     fd4:	7e 81       	ldd	r23, Y+6	; 0x06
     fd6:	8f 81       	ldd	r24, Y+7	; 0x07
     fd8:	98 85       	ldd	r25, Y+8	; 0x08
     fda:	0e 94 b7 09 	call	0x136e	; 0x136e <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9a 87       	std	Y+10, r25	; 0x0a
     fe4:	89 87       	std	Y+9, r24	; 0x09
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	9e 87       	std	Y+14, r25	; 0x0e
     fec:	8d 87       	std	Y+13, r24	; 0x0d
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	8c 01       	movw	r16, r24
     ff4:	f8 01       	movw	r30, r16
     ff6:	31 97       	sbiw	r30, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <testLatch+0x13a>
     ffa:	8f 01       	movw	r16, r30
     ffc:	1e 87       	std	Y+14, r17	; 0x0e
     ffe:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	PORT_E.b1 = 0;
    1000:	87 e2       	ldi	r24, 0x27	; 39
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	20 81       	ld	r18, Z
    1008:	2d 7f       	andi	r18, 0xFD	; 253
    100a:	fc 01       	movw	r30, r24
    100c:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x00;
    100e:	8b e3       	ldi	r24, 0x3B	; 59
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	fc 01       	movw	r30, r24
    1014:	10 82       	st	Z, r1
}
    1016:	2e 96       	adiw	r28, 0x0e	; 14
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <SRAM_test>:

void SRAM_test(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	29 97       	sbiw	r28, 0x09	; 9
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
	// Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	98 e1       	ldi	r25, 0x18	; 24
    1044:	98 87       	std	Y+8, r25	; 0x08
    1046:	8f 83       	std	Y+7, r24	; 0x07
	
	unsigned int i, werrors, rerrors;
	werrors = 0;
    1048:	1c 82       	std	Y+4, r1	; 0x04
    104a:	1b 82       	std	Y+3, r1	; 0x03
	rerrors = 0;
    104c:	1e 82       	std	Y+6, r1	; 0x06
    104e:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
    1050:	8d e6       	ldi	r24, 0x6D	; 109
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts>

	for (i = 0; i < 0x800; i++) {
    1058:	1a 82       	std	Y+2, r1	; 0x02
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	53 c0       	rjmp	.+166    	; 0x1104 <SRAM_test+0xd8>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 95       	com	r24
    1062:	89 87       	std	Y+9, r24	; 0x09
		ext_ram[i] = testvalue;
    1064:	2f 81       	ldd	r18, Y+7	; 0x07
    1066:	38 85       	ldd	r19, Y+8	; 0x08
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	82 0f       	add	r24, r18
    106e:	93 1f       	adc	r25, r19
    1070:	29 85       	ldd	r18, Y+9	; 0x09
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
		//printf("WRITE: current i: %d \r\n",i);
		if (ext_ram[i] != testvalue) {
    1076:	2f 81       	ldd	r18, Y+7	; 0x07
    1078:	38 85       	ldd	r19, Y+8	; 0x08
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	82 0f       	add	r24, r18
    1080:	93 1f       	adc	r25, r19
    1082:	fc 01       	movw	r30, r24
    1084:	90 81       	ld	r25, Z
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	98 17       	cp	r25, r24
    108a:	b9 f1       	breq	.+110    	; 0x10fa <SRAM_test+0xce>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    108c:	2f 81       	ldd	r18, Y+7	; 0x07
    108e:	38 85       	ldd	r19, Y+8	; 0x08
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	fc 01       	movw	r30, r24
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	8d b7       	in	r24, 0x3d	; 61
    10a8:	9e b7       	in	r25, 0x3e	; 62
    10aa:	08 97       	sbiw	r24, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	9e bf       	out	0x3e, r25	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	8d bf       	out	0x3d, r24	; 61
    10b6:	8d b7       	in	r24, 0x3d	; 61
    10b8:	9e b7       	in	r25, 0x3e	; 62
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	64 e8       	ldi	r22, 0x84	; 132
    10be:	72 e0       	ldi	r23, 0x02	; 2
    10c0:	fc 01       	movw	r30, r24
    10c2:	71 83       	std	Z+1, r23	; 0x01
    10c4:	60 83       	st	Z, r22
    10c6:	69 81       	ldd	r22, Y+1	; 0x01
    10c8:	7a 81       	ldd	r23, Y+2	; 0x02
    10ca:	fc 01       	movw	r30, r24
    10cc:	73 83       	std	Z+3, r23	; 0x03
    10ce:	62 83       	std	Z+2, r22	; 0x02
    10d0:	fc 01       	movw	r30, r24
    10d2:	55 83       	std	Z+5, r21	; 0x05
    10d4:	44 83       	std	Z+4, r20	; 0x04
    10d6:	fc 01       	movw	r30, r24
    10d8:	37 83       	std	Z+7, r19	; 0x07
    10da:	26 83       	std	Z+6, r18	; 0x06
    10dc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <printf>
    10e0:	8d b7       	in	r24, 0x3d	; 61
    10e2:	9e b7       	in	r25, 0x3e	; 62
    10e4:	08 96       	adiw	r24, 0x08	; 8
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	9e bf       	out	0x3e, r25	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	8d bf       	out	0x3d, r24	; 61
			werrors++;
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	8b 83       	std	Y+3, r24	; 0x03
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	e8 e0       	ldi	r30, 0x08	; 8
    110a:	80 30       	cpi	r24, 0x00	; 0
    110c:	9e 07       	cpc	r25, r30
    110e:	08 f4       	brcc	.+2      	; 0x1112 <SRAM_test+0xe6>
    1110:	a6 cf       	rjmp	.-180    	; 0x105e <SRAM_test+0x32>
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    1112:	1a 82       	std	Y+2, r1	; 0x02
    1114:	19 82       	std	Y+1, r1	; 0x01
    1116:	4a c0       	rjmp	.+148    	; 0x11ac <SRAM_test+0x180>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	80 95       	com	r24
    111c:	89 87       	std	Y+9, r24	; 0x09
		//printf("READ: current i: %d \r\n",i);
  		if (ext_ram[i] != testvalue) {
    111e:	2f 81       	ldd	r18, Y+7	; 0x07
    1120:	38 85       	ldd	r19, Y+8	; 0x08
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	fc 01       	movw	r30, r24
    112c:	90 81       	ld	r25, Z
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	98 17       	cp	r25, r24
    1132:	b9 f1       	breq	.+110    	; 0x11a2 <SRAM_test+0x176>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    1134:	2f 81       	ldd	r18, Y+7	; 0x07
    1136:	38 85       	ldd	r19, Y+8	; 0x08
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	fc 01       	movw	r30, r24
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8d b7       	in	r24, 0x3d	; 61
    1150:	9e b7       	in	r25, 0x3e	; 62
    1152:	08 97       	sbiw	r24, 0x08	; 8
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	9e bf       	out	0x3e, r25	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	8d bf       	out	0x3d, r24	; 61
    115e:	8d b7       	in	r24, 0x3d	; 61
    1160:	9e b7       	in	r25, 0x3e	; 62
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	64 ec       	ldi	r22, 0xC4	; 196
    1166:	72 e0       	ldi	r23, 0x02	; 2
    1168:	fc 01       	movw	r30, r24
    116a:	71 83       	std	Z+1, r23	; 0x01
    116c:	60 83       	st	Z, r22
    116e:	69 81       	ldd	r22, Y+1	; 0x01
    1170:	7a 81       	ldd	r23, Y+2	; 0x02
    1172:	fc 01       	movw	r30, r24
    1174:	73 83       	std	Z+3, r23	; 0x03
    1176:	62 83       	std	Z+2, r22	; 0x02
    1178:	fc 01       	movw	r30, r24
    117a:	55 83       	std	Z+5, r21	; 0x05
    117c:	44 83       	std	Z+4, r20	; 0x04
    117e:	fc 01       	movw	r30, r24
    1180:	37 83       	std	Z+7, r19	; 0x07
    1182:	26 83       	std	Z+6, r18	; 0x06
    1184:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <printf>
    1188:	8d b7       	in	r24, 0x3d	; 61
    118a:	9e b7       	in	r25, 0x3e	; 62
    118c:	08 96       	adiw	r24, 0x08	; 8
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	9e bf       	out	0x3e, r25	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	8d bf       	out	0x3d, r24	; 61
			rerrors++;
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	e8 e0       	ldi	r30, 0x08	; 8
    11b2:	80 30       	cpi	r24, 0x00	; 0
    11b4:	9e 07       	cpc	r25, r30
    11b6:	08 f4       	brcc	.+2      	; 0x11ba <SRAM_test+0x18e>
    11b8:	af cf       	rjmp	.-162    	; 0x1118 <SRAM_test+0xec>
			rerrors++;
		} else {
			//printf("SRAM READ OK \r\n "); 
		}
	}
	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <SRAM_test+0x190>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <SRAM_test+0x192>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <SRAM_test+0x194>
    11c0:	8d b7       	in	r24, 0x3d	; 61
    11c2:	9e b7       	in	r25, 0x3e	; 62
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	23 e0       	ldi	r18, 0x03	; 3
    11c8:	33 e0       	ldi	r19, 0x03	; 3
    11ca:	fc 01       	movw	r30, r24
    11cc:	31 83       	std	Z+1, r19	; 0x01
    11ce:	20 83       	st	Z, r18
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	fc 01       	movw	r30, r24
    11d6:	33 83       	std	Z+3, r19	; 0x03
    11d8:	22 83       	std	Z+2, r18	; 0x02
    11da:	2d 81       	ldd	r18, Y+5	; 0x05
    11dc:	3e 81       	ldd	r19, Y+6	; 0x06
    11de:	fc 01       	movw	r30, r24
    11e0:	35 83       	std	Z+5, r19	; 0x05
    11e2:	24 83       	std	Z+4, r18	; 0x04
    11e4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <printf>
    11e8:	8d b7       	in	r24, 0x3d	; 61
    11ea:	9e b7       	in	r25, 0x3e	; 62
    11ec:	06 96       	adiw	r24, 0x06	; 6
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	9e bf       	out	0x3e, r25	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	8d bf       	out	0x3d, r24	; 61
}
    11f8:	29 96       	adiw	r28, 0x09	; 9
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <GAL_test>:




void GAL_test(void* start, void* stop){
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	64 97       	sbiw	r28, 0x14	; 20
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	9a 8b       	std	Y+18, r25	; 0x12
    1224:	89 8b       	std	Y+17, r24	; 0x11
    1226:	7c 8b       	std	Y+20, r23	; 0x14
    1228:	6b 8b       	std	Y+19, r22	; 0x13
	volatile char* access = (char *) start;
    122a:	89 89       	ldd	r24, Y+17	; 0x11
    122c:	9a 89       	ldd	r25, Y+18	; 0x12
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
	while(access != (char* ) stop ) {
    1232:	8a c0       	rjmp	.+276    	; 0x1348 <GAL_test+0x13e>
		*access = 0x42;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	22 e4       	ldi	r18, 0x42	; 66
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18
		++access;
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a0 e2       	ldi	r26, 0x20	; 32
    124e:	b1 e4       	ldi	r27, 0x41	; 65
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	ad 83       	std	Y+5, r26	; 0x05
    1256:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1258:	6b 81       	ldd	r22, Y+3	; 0x03
    125a:	7c 81       	ldd	r23, Y+4	; 0x04
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	2a e9       	ldi	r18, 0x9A	; 154
    1262:	39 e9       	ldi	r19, 0x99	; 153
    1264:	49 e9       	ldi	r20, 0x99	; 153
    1266:	54 e4       	ldi	r21, 0x44	; 68
    1268:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	8f 83       	std	Y+7, r24	; 0x07
    1272:	98 87       	std	Y+8, r25	; 0x08
    1274:	a9 87       	std	Y+9, r26	; 0x09
    1276:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1278:	11 e0       	ldi	r17, 0x01	; 1
    127a:	6f 81       	ldd	r22, Y+7	; 0x07
    127c:	78 85       	ldd	r23, Y+8	; 0x08
    127e:	89 85       	ldd	r24, Y+9	; 0x09
    1280:	9a 85       	ldd	r25, Y+10	; 0x0a
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e8       	ldi	r20, 0x80	; 128
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__ltsf2>
    128e:	88 23       	and	r24, r24
    1290:	0c f0       	brlt	.+2      	; 0x1294 <GAL_test+0x8a>
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	11 23       	and	r17, r17
    1296:	29 f0       	breq	.+10     	; 0x12a2 <GAL_test+0x98>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 87       	std	Y+12, r25	; 0x0c
    129e:	8b 87       	std	Y+11, r24	; 0x0b
    12a0:	46 c0       	rjmp	.+140    	; 0x132e <GAL_test+0x124>
	else if (__tmp > 65535)
    12a2:	11 e0       	ldi	r17, 0x01	; 1
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 85 0c 	call	0x190a	; 0x190a <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	0c f0       	brlt	.+2      	; 0x12be <GAL_test+0xb4>
    12bc:	10 e0       	ldi	r17, 0x00	; 0
    12be:	11 23       	and	r17, r17
    12c0:	61 f1       	breq	.+88     	; 0x131a <GAL_test+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c2:	6b 81       	ldd	r22, Y+3	; 0x03
    12c4:	7c 81       	ldd	r23, Y+4	; 0x04
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 b7 09 	call	0x136e	; 0x136e <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9c 87       	std	Y+12, r25	; 0x0c
    12e8:	8b 87       	std	Y+11, r24	; 0x0b
    12ea:	12 c0       	rjmp	.+36     	; 0x1310 <GAL_test+0x106>
    12ec:	8a e7       	ldi	r24, 0x7A	; 122
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9e 87       	std	Y+14, r25	; 0x0e
    12f2:	8d 87       	std	Y+13, r24	; 0x0d
    12f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f8:	8c 01       	movw	r16, r24
    12fa:	c8 01       	movw	r24, r16
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <GAL_test+0xf2>
    1300:	8c 01       	movw	r16, r24
    1302:	1e 87       	std	Y+14, r17	; 0x0e
    1304:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1306:	8b 85       	ldd	r24, Y+11	; 0x0b
    1308:	9c 85       	ldd	r25, Y+12	; 0x0c
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	9c 87       	std	Y+12, r25	; 0x0c
    130e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	8b 85       	ldd	r24, Y+11	; 0x0b
    1312:	9c 85       	ldd	r25, Y+12	; 0x0c
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	51 f7       	brne	.-44     	; 0x12ec <GAL_test+0xe2>
    1318:	17 c0       	rjmp	.+46     	; 0x1348 <GAL_test+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	0e 94 b7 09 	call	0x136e	; 0x136e <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9c 87       	std	Y+12, r25	; 0x0c
    132c:	8b 87       	std	Y+11, r24	; 0x0b
    132e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1330:	9c 85       	ldd	r25, Y+12	; 0x0c
    1332:	98 8b       	std	Y+16, r25	; 0x10
    1334:	8f 87       	std	Y+15, r24	; 0x0f
    1336:	8f 85       	ldd	r24, Y+15	; 0x0f
    1338:	98 89       	ldd	r25, Y+16	; 0x10
    133a:	8c 01       	movw	r16, r24
    133c:	f8 01       	movw	r30, r16
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <GAL_test+0x134>
    1342:	8f 01       	movw	r16, r30
    1344:	18 8b       	std	Y+16, r17	; 0x10
    1346:	0f 87       	std	Y+15, r16	; 0x0f



void GAL_test(void* start, void* stop){
	volatile char* access = (char *) start;
	while(access != (char* ) stop ) {
    1348:	8b 89       	ldd	r24, Y+19	; 0x13
    134a:	9c 89       	ldd	r25, Y+20	; 0x14
    134c:	29 81       	ldd	r18, Y+1	; 0x01
    134e:	3a 81       	ldd	r19, Y+2	; 0x02
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	09 f0       	breq	.+2      	; 0x1358 <GAL_test+0x14e>
    1356:	6e cf       	rjmp	.-292    	; 0x1234 <GAL_test+0x2a>
		++access;
		_delay_ms(10);
	}
		
	
    1358:	64 96       	adiw	r28, 0x14	; 20
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <__fixunssfsi>:
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	7b 01       	movw	r14, r22
    1378:	8c 01       	movw	r16, r24
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	5f e4       	ldi	r21, 0x4F	; 79
    1382:	0e 94 b5 0c 	call	0x196a	; 0x196a <__gesf2>
    1386:	87 fd       	sbrc	r24, 7
    1388:	11 c0       	rjmp	.+34     	; 0x13ac <__fixunssfsi+0x3e>
    138a:	c8 01       	movw	r24, r16
    138c:	b7 01       	movw	r22, r14
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	5f e4       	ldi	r21, 0x4F	; 79
    1396:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__subsf3>
    139a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	20 50       	subi	r18, 0x00	; 0
    13a4:	30 40       	sbci	r19, 0x00	; 0
    13a6:	40 40       	sbci	r20, 0x00	; 0
    13a8:	50 48       	sbci	r21, 0x80	; 128
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <__fixunssfsi+0x4a>
    13ac:	c8 01       	movw	r24, r16
    13ae:	b7 01       	movw	r22, r14
    13b0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	b9 01       	movw	r22, r18
    13ba:	ca 01       	movw	r24, r20
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	08 95       	ret

000013c6 <_fpadd_parts>:
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e9 ee       	ldi	r30, 0xE9	; 233
    13cc:	f9 e0       	ldi	r31, 0x09	; 9
    13ce:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__prologue_saves__+0x8>
    13d2:	fc 01       	movw	r30, r24
    13d4:	ea 01       	movw	r28, r20
    13d6:	80 81       	ld	r24, Z
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	08 f4       	brcc	.+2      	; 0x13de <_fpadd_parts+0x18>
    13dc:	38 c1       	rjmp	.+624    	; 0x164e <_fpadd_parts+0x288>
    13de:	db 01       	movw	r26, r22
    13e0:	9c 91       	ld	r25, X
    13e2:	92 30       	cpi	r25, 0x02	; 2
    13e4:	08 f4       	brcc	.+2      	; 0x13e8 <_fpadd_parts+0x22>
    13e6:	30 c1       	rjmp	.+608    	; 0x1648 <_fpadd_parts+0x282>
    13e8:	84 30       	cpi	r24, 0x04	; 4
    13ea:	59 f4       	brne	.+22     	; 0x1402 <_fpadd_parts+0x3c>
    13ec:	94 30       	cpi	r25, 0x04	; 4
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <_fpadd_parts+0x2c>
    13f0:	2e c1       	rjmp	.+604    	; 0x164e <_fpadd_parts+0x288>
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	11 96       	adiw	r26, 0x01	; 1
    13f6:	8c 91       	ld	r24, X
    13f8:	11 97       	sbiw	r26, 0x01	; 1
    13fa:	98 17       	cp	r25, r24
    13fc:	09 f0       	breq	.+2      	; 0x1400 <_fpadd_parts+0x3a>
    13fe:	21 c1       	rjmp	.+578    	; 0x1642 <_fpadd_parts+0x27c>
    1400:	26 c1       	rjmp	.+588    	; 0x164e <_fpadd_parts+0x288>
    1402:	94 30       	cpi	r25, 0x04	; 4
    1404:	09 f4       	brne	.+2      	; 0x1408 <_fpadd_parts+0x42>
    1406:	20 c1       	rjmp	.+576    	; 0x1648 <_fpadd_parts+0x282>
    1408:	92 30       	cpi	r25, 0x02	; 2
    140a:	b1 f4       	brne	.+44     	; 0x1438 <_fpadd_parts+0x72>
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	09 f0       	breq	.+2      	; 0x1412 <_fpadd_parts+0x4c>
    1410:	1e c1       	rjmp	.+572    	; 0x164e <_fpadd_parts+0x288>
    1412:	ca 01       	movw	r24, r20
    1414:	af 01       	movw	r20, r30
    1416:	28 e0       	ldi	r18, 0x08	; 8
    1418:	da 01       	movw	r26, r20
    141a:	0d 90       	ld	r0, X+
    141c:	ad 01       	movw	r20, r26
    141e:	dc 01       	movw	r26, r24
    1420:	0d 92       	st	X+, r0
    1422:	cd 01       	movw	r24, r26
    1424:	21 50       	subi	r18, 0x01	; 1
    1426:	c1 f7       	brne	.-16     	; 0x1418 <_fpadd_parts+0x52>
    1428:	db 01       	movw	r26, r22
    142a:	11 96       	adiw	r26, 0x01	; 1
    142c:	8c 91       	ld	r24, X
    142e:	11 97       	sbiw	r26, 0x01	; 1
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	89 23       	and	r24, r25
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	0a c1       	rjmp	.+532    	; 0x164c <_fpadd_parts+0x286>
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	09 f4       	brne	.+2      	; 0x143e <_fpadd_parts+0x78>
    143c:	05 c1       	rjmp	.+522    	; 0x1648 <_fpadd_parts+0x282>
    143e:	c2 80       	ldd	r12, Z+2	; 0x02
    1440:	d3 80       	ldd	r13, Z+3	; 0x03
    1442:	db 01       	movw	r26, r22
    1444:	12 96       	adiw	r26, 0x02	; 2
    1446:	6d 90       	ld	r6, X+
    1448:	7c 90       	ld	r7, X
    144a:	13 97       	sbiw	r26, 0x03	; 3
    144c:	24 81       	ldd	r18, Z+4	; 0x04
    144e:	35 81       	ldd	r19, Z+5	; 0x05
    1450:	46 81       	ldd	r20, Z+6	; 0x06
    1452:	57 81       	ldd	r21, Z+7	; 0x07
    1454:	14 96       	adiw	r26, 0x04	; 4
    1456:	ed 90       	ld	r14, X+
    1458:	fd 90       	ld	r15, X+
    145a:	0d 91       	ld	r16, X+
    145c:	1c 91       	ld	r17, X
    145e:	17 97       	sbiw	r26, 0x07	; 7
    1460:	c6 01       	movw	r24, r12
    1462:	86 19       	sub	r24, r6
    1464:	97 09       	sbc	r25, r7
    1466:	5c 01       	movw	r10, r24
    1468:	97 ff       	sbrs	r25, 7
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <_fpadd_parts+0xae>
    146c:	aa 24       	eor	r10, r10
    146e:	bb 24       	eor	r11, r11
    1470:	a8 1a       	sub	r10, r24
    1472:	b9 0a       	sbc	r11, r25
    1474:	b0 e2       	ldi	r27, 0x20	; 32
    1476:	ab 16       	cp	r10, r27
    1478:	b1 04       	cpc	r11, r1
    147a:	0c f0       	brlt	.+2      	; 0x147e <_fpadd_parts+0xb8>
    147c:	61 c0       	rjmp	.+194    	; 0x1540 <_fpadd_parts+0x17a>
    147e:	18 16       	cp	r1, r24
    1480:	19 06       	cpc	r1, r25
    1482:	6c f5       	brge	.+90     	; 0x14de <_fpadd_parts+0x118>
    1484:	37 01       	movw	r6, r14
    1486:	48 01       	movw	r8, r16
    1488:	0a 2c       	mov	r0, r10
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <_fpadd_parts+0xce>
    148c:	96 94       	lsr	r9
    148e:	87 94       	ror	r8
    1490:	77 94       	ror	r7
    1492:	67 94       	ror	r6
    1494:	0a 94       	dec	r0
    1496:	d2 f7       	brpl	.-12     	; 0x148c <_fpadd_parts+0xc6>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	0a 2c       	mov	r0, r10
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <_fpadd_parts+0xe6>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	aa 1f       	adc	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	0a 94       	dec	r0
    14ae:	d2 f7       	brpl	.-12     	; 0x14a4 <_fpadd_parts+0xde>
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	a1 09       	sbc	r26, r1
    14b4:	b1 09       	sbc	r27, r1
    14b6:	8e 21       	and	r24, r14
    14b8:	9f 21       	and	r25, r15
    14ba:	a0 23       	and	r26, r16
    14bc:	b1 23       	and	r27, r17
    14be:	ee 24       	eor	r14, r14
    14c0:	ff 24       	eor	r15, r15
    14c2:	87 01       	movw	r16, r14
    14c4:	e3 94       	inc	r14
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	a1 05       	cpc	r26, r1
    14ca:	b1 05       	cpc	r27, r1
    14cc:	19 f4       	brne	.+6      	; 0x14d4 <_fpadd_parts+0x10e>
    14ce:	ee 24       	eor	r14, r14
    14d0:	ff 24       	eor	r15, r15
    14d2:	87 01       	movw	r16, r14
    14d4:	e6 28       	or	r14, r6
    14d6:	f7 28       	or	r15, r7
    14d8:	08 29       	or	r16, r8
    14da:	19 29       	or	r17, r9
    14dc:	3c c0       	rjmp	.+120    	; 0x1556 <_fpadd_parts+0x190>
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	d1 f1       	breq	.+116    	; 0x1556 <_fpadd_parts+0x190>
    14e2:	ca 0c       	add	r12, r10
    14e4:	db 1c       	adc	r13, r11
    14e6:	39 01       	movw	r6, r18
    14e8:	4a 01       	movw	r8, r20
    14ea:	0a 2c       	mov	r0, r10
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <_fpadd_parts+0x130>
    14ee:	96 94       	lsr	r9
    14f0:	87 94       	ror	r8
    14f2:	77 94       	ror	r7
    14f4:	67 94       	ror	r6
    14f6:	0a 94       	dec	r0
    14f8:	d2 f7       	brpl	.-12     	; 0x14ee <_fpadd_parts+0x128>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	a0 e0       	ldi	r26, 0x00	; 0
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	0a 2c       	mov	r0, r10
    1504:	04 c0       	rjmp	.+8      	; 0x150e <_fpadd_parts+0x148>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	aa 1f       	adc	r26, r26
    150c:	bb 1f       	adc	r27, r27
    150e:	0a 94       	dec	r0
    1510:	d2 f7       	brpl	.-12     	; 0x1506 <_fpadd_parts+0x140>
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	a1 09       	sbc	r26, r1
    1516:	b1 09       	sbc	r27, r1
    1518:	82 23       	and	r24, r18
    151a:	93 23       	and	r25, r19
    151c:	a4 23       	and	r26, r20
    151e:	b5 23       	and	r27, r21
    1520:	21 e0       	ldi	r18, 0x01	; 1
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	19 f4       	brne	.+6      	; 0x1536 <_fpadd_parts+0x170>
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	26 29       	or	r18, r6
    1538:	37 29       	or	r19, r7
    153a:	48 29       	or	r20, r8
    153c:	59 29       	or	r21, r9
    153e:	0b c0       	rjmp	.+22     	; 0x1556 <_fpadd_parts+0x190>
    1540:	6c 14       	cp	r6, r12
    1542:	7d 04       	cpc	r7, r13
    1544:	24 f4       	brge	.+8      	; 0x154e <_fpadd_parts+0x188>
    1546:	ee 24       	eor	r14, r14
    1548:	ff 24       	eor	r15, r15
    154a:	87 01       	movw	r16, r14
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <_fpadd_parts+0x190>
    154e:	63 01       	movw	r12, r6
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	81 81       	ldd	r24, Z+1	; 0x01
    1558:	fb 01       	movw	r30, r22
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	89 17       	cp	r24, r25
    155e:	09 f4       	brne	.+2      	; 0x1562 <_fpadd_parts+0x19c>
    1560:	45 c0       	rjmp	.+138    	; 0x15ec <_fpadd_parts+0x226>
    1562:	88 23       	and	r24, r24
    1564:	49 f0       	breq	.+18     	; 0x1578 <_fpadd_parts+0x1b2>
    1566:	d8 01       	movw	r26, r16
    1568:	c7 01       	movw	r24, r14
    156a:	82 1b       	sub	r24, r18
    156c:	93 0b       	sbc	r25, r19
    156e:	a4 0b       	sbc	r26, r20
    1570:	b5 0b       	sbc	r27, r21
    1572:	9c 01       	movw	r18, r24
    1574:	ad 01       	movw	r20, r26
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <_fpadd_parts+0x1ba>
    1578:	2e 19       	sub	r18, r14
    157a:	3f 09       	sbc	r19, r15
    157c:	40 0b       	sbc	r20, r16
    157e:	51 0b       	sbc	r21, r17
    1580:	57 fd       	sbrc	r21, 7
    1582:	04 c0       	rjmp	.+8      	; 0x158c <_fpadd_parts+0x1c6>
    1584:	19 82       	std	Y+1, r1	; 0x01
    1586:	db 82       	std	Y+3, r13	; 0x03
    1588:	ca 82       	std	Y+2, r12	; 0x02
    158a:	0b c0       	rjmp	.+22     	; 0x15a2 <_fpadd_parts+0x1dc>
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	db 82       	std	Y+3, r13	; 0x03
    1592:	ca 82       	std	Y+2, r12	; 0x02
    1594:	50 95       	com	r21
    1596:	40 95       	com	r20
    1598:	30 95       	com	r19
    159a:	21 95       	neg	r18
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	4f 4f       	sbci	r20, 0xFF	; 255
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255
    15a2:	2c 83       	std	Y+4, r18	; 0x04
    15a4:	3d 83       	std	Y+5, r19	; 0x05
    15a6:	4e 83       	std	Y+6, r20	; 0x06
    15a8:	5f 83       	std	Y+7, r21	; 0x07
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <_fpadd_parts+0x200>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	aa 1f       	adc	r26, r26
    15b2:	bb 1f       	adc	r27, r27
    15b4:	8c 83       	std	Y+4, r24	; 0x04
    15b6:	9d 83       	std	Y+5, r25	; 0x05
    15b8:	ae 83       	std	Y+6, r26	; 0x06
    15ba:	bf 83       	std	Y+7, r27	; 0x07
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9b 83       	std	Y+3, r25	; 0x03
    15c4:	8a 83       	std	Y+2, r24	; 0x02
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	ae 81       	ldd	r26, Y+6	; 0x06
    15cc:	bf 81       	ldd	r27, Y+7	; 0x07
    15ce:	9c 01       	movw	r18, r24
    15d0:	ad 01       	movw	r20, r26
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	30 40       	sbci	r19, 0x00	; 0
    15d6:	40 40       	sbci	r20, 0x00	; 0
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	2f 3f       	cpi	r18, 0xFF	; 255
    15dc:	ef ef       	ldi	r30, 0xFF	; 255
    15de:	3e 07       	cpc	r19, r30
    15e0:	ef ef       	ldi	r30, 0xFF	; 255
    15e2:	4e 07       	cpc	r20, r30
    15e4:	ef e3       	ldi	r30, 0x3F	; 63
    15e6:	5e 07       	cpc	r21, r30
    15e8:	08 f3       	brcs	.-62     	; 0x15ac <_fpadd_parts+0x1e6>
    15ea:	0b c0       	rjmp	.+22     	; 0x1602 <_fpadd_parts+0x23c>
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	db 82       	std	Y+3, r13	; 0x03
    15f0:	ca 82       	std	Y+2, r12	; 0x02
    15f2:	2e 0d       	add	r18, r14
    15f4:	3f 1d       	adc	r19, r15
    15f6:	40 1f       	adc	r20, r16
    15f8:	51 1f       	adc	r21, r17
    15fa:	2c 83       	std	Y+4, r18	; 0x04
    15fc:	3d 83       	std	Y+5, r19	; 0x05
    15fe:	4e 83       	std	Y+6, r20	; 0x06
    1600:	5f 83       	std	Y+7, r21	; 0x07
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	88 83       	st	Y, r24
    1606:	2c 81       	ldd	r18, Y+4	; 0x04
    1608:	3d 81       	ldd	r19, Y+5	; 0x05
    160a:	4e 81       	ldd	r20, Y+6	; 0x06
    160c:	5f 81       	ldd	r21, Y+7	; 0x07
    160e:	57 ff       	sbrs	r21, 7
    1610:	1d c0       	rjmp	.+58     	; 0x164c <_fpadd_parts+0x286>
    1612:	da 01       	movw	r26, r20
    1614:	c9 01       	movw	r24, r18
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	a0 70       	andi	r26, 0x00	; 0
    161c:	b0 70       	andi	r27, 0x00	; 0
    161e:	56 95       	lsr	r21
    1620:	47 95       	ror	r20
    1622:	37 95       	ror	r19
    1624:	27 95       	ror	r18
    1626:	82 2b       	or	r24, r18
    1628:	93 2b       	or	r25, r19
    162a:	a4 2b       	or	r26, r20
    162c:	b5 2b       	or	r27, r21
    162e:	8c 83       	std	Y+4, r24	; 0x04
    1630:	9d 83       	std	Y+5, r25	; 0x05
    1632:	ae 83       	std	Y+6, r26	; 0x06
    1634:	bf 83       	std	Y+7, r27	; 0x07
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	9b 83       	std	Y+3, r25	; 0x03
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	05 c0       	rjmp	.+10     	; 0x164c <_fpadd_parts+0x286>
    1642:	e3 e5       	ldi	r30, 0x53	; 83
    1644:	f3 e0       	ldi	r31, 0x03	; 3
    1646:	03 c0       	rjmp	.+6      	; 0x164e <_fpadd_parts+0x288>
    1648:	fb 01       	movw	r30, r22
    164a:	01 c0       	rjmp	.+2      	; 0x164e <_fpadd_parts+0x288>
    164c:	fe 01       	movw	r30, r28
    164e:	cf 01       	movw	r24, r30
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	ee e0       	ldi	r30, 0x0E	; 14
    1656:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__epilogue_restores__+0x8>

0000165a <__addsf3>:
    165a:	a0 e2       	ldi	r26, 0x20	; 32
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e3 e3       	ldi	r30, 0x33	; 51
    1660:	fb e0       	ldi	r31, 0x0B	; 11
    1662:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__prologue_saves__+0x18>
    1666:	69 83       	std	Y+1, r22	; 0x01
    1668:	7a 83       	std	Y+2, r23	; 0x02
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	2d 83       	std	Y+5, r18	; 0x05
    1670:	3e 83       	std	Y+6, r19	; 0x06
    1672:	4f 83       	std	Y+7, r20	; 0x07
    1674:	58 87       	std	Y+8, r21	; 0x08
    1676:	89 e0       	ldi	r24, 0x09	; 9
    1678:	e8 2e       	mov	r14, r24
    167a:	f1 2c       	mov	r15, r1
    167c:	ec 0e       	add	r14, r28
    167e:	fd 1e       	adc	r15, r29
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	b7 01       	movw	r22, r14
    1686:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    168a:	8e 01       	movw	r16, r28
    168c:	0f 5e       	subi	r16, 0xEF	; 239
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	ce 01       	movw	r24, r28
    1692:	05 96       	adiw	r24, 0x05	; 5
    1694:	b8 01       	movw	r22, r16
    1696:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    169a:	c7 01       	movw	r24, r14
    169c:	b8 01       	movw	r22, r16
    169e:	ae 01       	movw	r20, r28
    16a0:	47 5e       	subi	r20, 0xE7	; 231
    16a2:	5f 4f       	sbci	r21, 0xFF	; 255
    16a4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_fpadd_parts>
    16a8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__pack_f>
    16ac:	a0 96       	adiw	r28, 0x20	; 32
    16ae:	e6 e0       	ldi	r30, 0x06	; 6
    16b0:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

000016b4 <__subsf3>:
    16b4:	a0 e2       	ldi	r26, 0x20	; 32
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e0 e6       	ldi	r30, 0x60	; 96
    16ba:	fb e0       	ldi	r31, 0x0B	; 11
    16bc:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__prologue_saves__+0x18>
    16c0:	69 83       	std	Y+1, r22	; 0x01
    16c2:	7a 83       	std	Y+2, r23	; 0x02
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	2d 83       	std	Y+5, r18	; 0x05
    16ca:	3e 83       	std	Y+6, r19	; 0x06
    16cc:	4f 83       	std	Y+7, r20	; 0x07
    16ce:	58 87       	std	Y+8, r21	; 0x08
    16d0:	8e 01       	movw	r16, r28
    16d2:	07 5f       	subi	r16, 0xF7	; 247
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	b8 01       	movw	r22, r16
    16dc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    16e0:	91 e1       	ldi	r25, 0x11	; 17
    16e2:	e9 2e       	mov	r14, r25
    16e4:	f1 2c       	mov	r15, r1
    16e6:	ec 0e       	add	r14, r28
    16e8:	fd 1e       	adc	r15, r29
    16ea:	ce 01       	movw	r24, r28
    16ec:	05 96       	adiw	r24, 0x05	; 5
    16ee:	b7 01       	movw	r22, r14
    16f0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    16f4:	8a 89       	ldd	r24, Y+18	; 0x12
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	89 27       	eor	r24, r25
    16fa:	8a 8b       	std	Y+18, r24	; 0x12
    16fc:	c8 01       	movw	r24, r16
    16fe:	b7 01       	movw	r22, r14
    1700:	ae 01       	movw	r20, r28
    1702:	47 5e       	subi	r20, 0xE7	; 231
    1704:	5f 4f       	sbci	r21, 0xFF	; 255
    1706:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_fpadd_parts>
    170a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__pack_f>
    170e:	a0 96       	adiw	r28, 0x20	; 32
    1710:	e6 e0       	ldi	r30, 0x06	; 6
    1712:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

00001716 <__mulsf3>:
    1716:	a0 e2       	ldi	r26, 0x20	; 32
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e1 e9       	ldi	r30, 0x91	; 145
    171c:	fb e0       	ldi	r31, 0x0B	; 11
    171e:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__prologue_saves__>
    1722:	69 83       	std	Y+1, r22	; 0x01
    1724:	7a 83       	std	Y+2, r23	; 0x02
    1726:	8b 83       	std	Y+3, r24	; 0x03
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	2d 83       	std	Y+5, r18	; 0x05
    172c:	3e 83       	std	Y+6, r19	; 0x06
    172e:	4f 83       	std	Y+7, r20	; 0x07
    1730:	58 87       	std	Y+8, r21	; 0x08
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	be 01       	movw	r22, r28
    1738:	67 5f       	subi	r22, 0xF7	; 247
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    1740:	ce 01       	movw	r24, r28
    1742:	05 96       	adiw	r24, 0x05	; 5
    1744:	be 01       	movw	r22, r28
    1746:	6f 5e       	subi	r22, 0xEF	; 239
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    174e:	99 85       	ldd	r25, Y+9	; 0x09
    1750:	92 30       	cpi	r25, 0x02	; 2
    1752:	78 f0       	brcs	.+30     	; 0x1772 <__mulsf3+0x5c>
    1754:	89 89       	ldd	r24, Y+17	; 0x11
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	c0 f0       	brcs	.+48     	; 0x178a <__mulsf3+0x74>
    175a:	94 30       	cpi	r25, 0x04	; 4
    175c:	19 f4       	brne	.+6      	; 0x1764 <__mulsf3+0x4e>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	41 f4       	brne	.+16     	; 0x1772 <__mulsf3+0x5c>
    1762:	cb c0       	rjmp	.+406    	; 0x18fa <__mulsf3+0x1e4>
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	19 f4       	brne	.+6      	; 0x176e <__mulsf3+0x58>
    1768:	92 30       	cpi	r25, 0x02	; 2
    176a:	79 f4       	brne	.+30     	; 0x178a <__mulsf3+0x74>
    176c:	c6 c0       	rjmp	.+396    	; 0x18fa <__mulsf3+0x1e4>
    176e:	92 30       	cpi	r25, 0x02	; 2
    1770:	51 f4       	brne	.+20     	; 0x1786 <__mulsf3+0x70>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	2a 85       	ldd	r18, Y+10	; 0x0a
    1776:	9a 89       	ldd	r25, Y+18	; 0x12
    1778:	29 17       	cp	r18, r25
    177a:	09 f4       	brne	.+2      	; 0x177e <__mulsf3+0x68>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	8a 87       	std	Y+10, r24	; 0x0a
    1780:	ce 01       	movw	r24, r28
    1782:	09 96       	adiw	r24, 0x09	; 9
    1784:	bc c0       	rjmp	.+376    	; 0x18fe <__mulsf3+0x1e8>
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	51 f4       	brne	.+20     	; 0x179e <__mulsf3+0x88>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	2a 85       	ldd	r18, Y+10	; 0x0a
    178e:	9a 89       	ldd	r25, Y+18	; 0x12
    1790:	29 17       	cp	r18, r25
    1792:	09 f4       	brne	.+2      	; 0x1796 <__mulsf3+0x80>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	8a 8b       	std	Y+18, r24	; 0x12
    1798:	ce 01       	movw	r24, r28
    179a:	41 96       	adiw	r24, 0x11	; 17
    179c:	b0 c0       	rjmp	.+352    	; 0x18fe <__mulsf3+0x1e8>
    179e:	6d 84       	ldd	r6, Y+13	; 0x0d
    17a0:	7e 84       	ldd	r7, Y+14	; 0x0e
    17a2:	8f 84       	ldd	r8, Y+15	; 0x0f
    17a4:	98 88       	ldd	r9, Y+16	; 0x10
    17a6:	ed 88       	ldd	r14, Y+21	; 0x15
    17a8:	fe 88       	ldd	r15, Y+22	; 0x16
    17aa:	0f 89       	ldd	r16, Y+23	; 0x17
    17ac:	18 8d       	ldd	r17, Y+24	; 0x18
    17ae:	e0 e2       	ldi	r30, 0x20	; 32
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	dc 01       	movw	r26, r24
    17b8:	aa 24       	eor	r10, r10
    17ba:	bb 24       	eor	r11, r11
    17bc:	65 01       	movw	r12, r10
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	a9 01       	movw	r20, r18
    17c4:	b3 01       	movw	r22, r6
    17c6:	61 70       	andi	r22, 0x01	; 1
    17c8:	70 70       	andi	r23, 0x00	; 0
    17ca:	61 15       	cp	r22, r1
    17cc:	71 05       	cpc	r23, r1
    17ce:	d1 f0       	breq	.+52     	; 0x1804 <__mulsf3+0xee>
    17d0:	2e 0d       	add	r18, r14
    17d2:	3f 1d       	adc	r19, r15
    17d4:	40 1f       	adc	r20, r16
    17d6:	51 1f       	adc	r21, r17
    17d8:	15 01       	movw	r2, r10
    17da:	26 01       	movw	r4, r12
    17dc:	28 0e       	add	r2, r24
    17de:	39 1e       	adc	r3, r25
    17e0:	4a 1e       	adc	r4, r26
    17e2:	5b 1e       	adc	r5, r27
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a0 e0       	ldi	r26, 0x00	; 0
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	2e 15       	cp	r18, r14
    17ee:	3f 05       	cpc	r19, r15
    17f0:	40 07       	cpc	r20, r16
    17f2:	51 07       	cpc	r21, r17
    17f4:	18 f0       	brcs	.+6      	; 0x17fc <__mulsf3+0xe6>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	dc 01       	movw	r26, r24
    17fc:	82 0d       	add	r24, r2
    17fe:	93 1d       	adc	r25, r3
    1800:	a4 1d       	adc	r26, r4
    1802:	b5 1d       	adc	r27, r5
    1804:	aa 0c       	add	r10, r10
    1806:	bb 1c       	adc	r11, r11
    1808:	cc 1c       	adc	r12, r12
    180a:	dd 1c       	adc	r13, r13
    180c:	17 ff       	sbrs	r17, 7
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <__mulsf3+0x10c>
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	26 2e       	mov	r2, r22
    1814:	31 2c       	mov	r3, r1
    1816:	41 2c       	mov	r4, r1
    1818:	51 2c       	mov	r5, r1
    181a:	a2 28       	or	r10, r2
    181c:	b3 28       	or	r11, r3
    181e:	c4 28       	or	r12, r4
    1820:	d5 28       	or	r13, r5
    1822:	31 97       	sbiw	r30, 0x01	; 1
    1824:	49 f0       	breq	.+18     	; 0x1838 <__mulsf3+0x122>
    1826:	ee 0c       	add	r14, r14
    1828:	ff 1c       	adc	r15, r15
    182a:	00 1f       	adc	r16, r16
    182c:	11 1f       	adc	r17, r17
    182e:	96 94       	lsr	r9
    1830:	87 94       	ror	r8
    1832:	77 94       	ror	r7
    1834:	67 94       	ror	r6
    1836:	c6 cf       	rjmp	.-116    	; 0x17c4 <__mulsf3+0xae>
    1838:	6b 89       	ldd	r22, Y+19	; 0x13
    183a:	7c 89       	ldd	r23, Y+20	; 0x14
    183c:	eb 85       	ldd	r30, Y+11	; 0x0b
    183e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1840:	6e 0f       	add	r22, r30
    1842:	7f 1f       	adc	r23, r31
    1844:	6e 5f       	subi	r22, 0xFE	; 254
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	7c 8f       	std	Y+28, r23	; 0x1c
    184a:	6b 8f       	std	Y+27, r22	; 0x1b
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1850:	7a 89       	ldd	r23, Y+18	; 0x12
    1852:	e7 17       	cp	r30, r23
    1854:	09 f4       	brne	.+2      	; 0x1858 <__mulsf3+0x142>
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	6a 8f       	std	Y+26, r22	; 0x1a
    185a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    185c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    185e:	10 c0       	rjmp	.+32     	; 0x1880 <__mulsf3+0x16a>
    1860:	fc 01       	movw	r30, r24
    1862:	e1 70       	andi	r30, 0x01	; 1
    1864:	f0 70       	andi	r31, 0x00	; 0
    1866:	30 97       	sbiw	r30, 0x00	; 0
    1868:	29 f0       	breq	.+10     	; 0x1874 <__mulsf3+0x15e>
    186a:	56 95       	lsr	r21
    186c:	47 95       	ror	r20
    186e:	37 95       	ror	r19
    1870:	27 95       	ror	r18
    1872:	50 68       	ori	r21, 0x80	; 128
    1874:	b6 95       	lsr	r27
    1876:	a7 95       	ror	r26
    1878:	97 95       	ror	r25
    187a:	87 95       	ror	r24
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	b7 fd       	sbrc	r27, 7
    1882:	ee cf       	rjmp	.-36     	; 0x1860 <__mulsf3+0x14a>
    1884:	0c c0       	rjmp	.+24     	; 0x189e <__mulsf3+0x188>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	aa 1f       	adc	r26, r26
    188c:	bb 1f       	adc	r27, r27
    188e:	57 fd       	sbrc	r21, 7
    1890:	81 60       	ori	r24, 0x01	; 1
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	44 1f       	adc	r20, r20
    1898:	55 1f       	adc	r21, r21
    189a:	61 50       	subi	r22, 0x01	; 1
    189c:	70 40       	sbci	r23, 0x00	; 0
    189e:	80 30       	cpi	r24, 0x00	; 0
    18a0:	e0 e0       	ldi	r30, 0x00	; 0
    18a2:	9e 07       	cpc	r25, r30
    18a4:	e0 e0       	ldi	r30, 0x00	; 0
    18a6:	ae 07       	cpc	r26, r30
    18a8:	e0 e4       	ldi	r30, 0x40	; 64
    18aa:	be 07       	cpc	r27, r30
    18ac:	60 f3       	brcs	.-40     	; 0x1886 <__mulsf3+0x170>
    18ae:	6b 8f       	std	Y+27, r22	; 0x1b
    18b0:	7c 8f       	std	Y+28, r23	; 0x1c
    18b2:	6f e7       	ldi	r22, 0x7F	; 127
    18b4:	e6 2e       	mov	r14, r22
    18b6:	f1 2c       	mov	r15, r1
    18b8:	01 2d       	mov	r16, r1
    18ba:	11 2d       	mov	r17, r1
    18bc:	e8 22       	and	r14, r24
    18be:	f9 22       	and	r15, r25
    18c0:	0a 23       	and	r16, r26
    18c2:	1b 23       	and	r17, r27
    18c4:	60 e4       	ldi	r22, 0x40	; 64
    18c6:	e6 16       	cp	r14, r22
    18c8:	f1 04       	cpc	r15, r1
    18ca:	01 05       	cpc	r16, r1
    18cc:	11 05       	cpc	r17, r1
    18ce:	61 f4       	brne	.+24     	; 0x18e8 <__mulsf3+0x1d2>
    18d0:	87 fd       	sbrc	r24, 7
    18d2:	0a c0       	rjmp	.+20     	; 0x18e8 <__mulsf3+0x1d2>
    18d4:	21 15       	cp	r18, r1
    18d6:	31 05       	cpc	r19, r1
    18d8:	41 05       	cpc	r20, r1
    18da:	51 05       	cpc	r21, r1
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <__mulsf3+0x1d2>
    18de:	80 5c       	subi	r24, 0xC0	; 192
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	af 4f       	sbci	r26, 0xFF	; 255
    18e4:	bf 4f       	sbci	r27, 0xFF	; 255
    18e6:	80 78       	andi	r24, 0x80	; 128
    18e8:	8d 8f       	std	Y+29, r24	; 0x1d
    18ea:	9e 8f       	std	Y+30, r25	; 0x1e
    18ec:	af 8f       	std	Y+31, r26	; 0x1f
    18ee:	b8 a3       	std	Y+32, r27	; 0x20
    18f0:	83 e0       	ldi	r24, 0x03	; 3
    18f2:	89 8f       	std	Y+25, r24	; 0x19
    18f4:	ce 01       	movw	r24, r28
    18f6:	49 96       	adiw	r24, 0x19	; 25
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <__mulsf3+0x1e8>
    18fa:	83 e5       	ldi	r24, 0x53	; 83
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__pack_f>
    1902:	a0 96       	adiw	r28, 0x20	; 32
    1904:	e2 e1       	ldi	r30, 0x12	; 18
    1906:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__epilogue_restores__>

0000190a <__gtsf2>:
    190a:	a8 e1       	ldi	r26, 0x18	; 24
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	eb e8       	ldi	r30, 0x8B	; 139
    1910:	fc e0       	ldi	r31, 0x0C	; 12
    1912:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__prologue_saves__+0x18>
    1916:	69 83       	std	Y+1, r22	; 0x01
    1918:	7a 83       	std	Y+2, r23	; 0x02
    191a:	8b 83       	std	Y+3, r24	; 0x03
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	2d 83       	std	Y+5, r18	; 0x05
    1920:	3e 83       	std	Y+6, r19	; 0x06
    1922:	4f 83       	std	Y+7, r20	; 0x07
    1924:	58 87       	std	Y+8, r21	; 0x08
    1926:	8e 01       	movw	r16, r28
    1928:	07 5f       	subi	r16, 0xF7	; 247
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	ce 01       	movw	r24, r28
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	b8 01       	movw	r22, r16
    1932:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    1936:	81 e1       	ldi	r24, 0x11	; 17
    1938:	e8 2e       	mov	r14, r24
    193a:	f1 2c       	mov	r15, r1
    193c:	ec 0e       	add	r14, r28
    193e:	fd 1e       	adc	r15, r29
    1940:	ce 01       	movw	r24, r28
    1942:	05 96       	adiw	r24, 0x05	; 5
    1944:	b7 01       	movw	r22, r14
    1946:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	40 f0       	brcs	.+16     	; 0x1960 <__gtsf2+0x56>
    1950:	89 89       	ldd	r24, Y+17	; 0x11
    1952:	82 30       	cpi	r24, 0x02	; 2
    1954:	28 f0       	brcs	.+10     	; 0x1960 <__gtsf2+0x56>
    1956:	c8 01       	movw	r24, r16
    1958:	b7 01       	movw	r22, r14
    195a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fpcmp_parts_f>
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <__gtsf2+0x58>
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	68 96       	adiw	r28, 0x18	; 24
    1964:	e6 e0       	ldi	r30, 0x06	; 6
    1966:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

0000196a <__gesf2>:
    196a:	a8 e1       	ldi	r26, 0x18	; 24
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	eb eb       	ldi	r30, 0xBB	; 187
    1970:	fc e0       	ldi	r31, 0x0C	; 12
    1972:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__prologue_saves__+0x18>
    1976:	69 83       	std	Y+1, r22	; 0x01
    1978:	7a 83       	std	Y+2, r23	; 0x02
    197a:	8b 83       	std	Y+3, r24	; 0x03
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	2d 83       	std	Y+5, r18	; 0x05
    1980:	3e 83       	std	Y+6, r19	; 0x06
    1982:	4f 83       	std	Y+7, r20	; 0x07
    1984:	58 87       	std	Y+8, r21	; 0x08
    1986:	8e 01       	movw	r16, r28
    1988:	07 5f       	subi	r16, 0xF7	; 247
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	b8 01       	movw	r22, r16
    1992:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    1996:	81 e1       	ldi	r24, 0x11	; 17
    1998:	e8 2e       	mov	r14, r24
    199a:	f1 2c       	mov	r15, r1
    199c:	ec 0e       	add	r14, r28
    199e:	fd 1e       	adc	r15, r29
    19a0:	ce 01       	movw	r24, r28
    19a2:	05 96       	adiw	r24, 0x05	; 5
    19a4:	b7 01       	movw	r22, r14
    19a6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	82 30       	cpi	r24, 0x02	; 2
    19ae:	40 f0       	brcs	.+16     	; 0x19c0 <__gesf2+0x56>
    19b0:	89 89       	ldd	r24, Y+17	; 0x11
    19b2:	82 30       	cpi	r24, 0x02	; 2
    19b4:	28 f0       	brcs	.+10     	; 0x19c0 <__gesf2+0x56>
    19b6:	c8 01       	movw	r24, r16
    19b8:	b7 01       	movw	r22, r14
    19ba:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fpcmp_parts_f>
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <__gesf2+0x58>
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	68 96       	adiw	r28, 0x18	; 24
    19c4:	e6 e0       	ldi	r30, 0x06	; 6
    19c6:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

000019ca <__ltsf2>:
    19ca:	a8 e1       	ldi	r26, 0x18	; 24
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	eb ee       	ldi	r30, 0xEB	; 235
    19d0:	fc e0       	ldi	r31, 0x0C	; 12
    19d2:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__prologue_saves__+0x18>
    19d6:	69 83       	std	Y+1, r22	; 0x01
    19d8:	7a 83       	std	Y+2, r23	; 0x02
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	9c 83       	std	Y+4, r25	; 0x04
    19de:	2d 83       	std	Y+5, r18	; 0x05
    19e0:	3e 83       	std	Y+6, r19	; 0x06
    19e2:	4f 83       	std	Y+7, r20	; 0x07
    19e4:	58 87       	std	Y+8, r21	; 0x08
    19e6:	8e 01       	movw	r16, r28
    19e8:	07 5f       	subi	r16, 0xF7	; 247
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	ce 01       	movw	r24, r28
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	b8 01       	movw	r22, r16
    19f2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    19f6:	81 e1       	ldi	r24, 0x11	; 17
    19f8:	e8 2e       	mov	r14, r24
    19fa:	f1 2c       	mov	r15, r1
    19fc:	ec 0e       	add	r14, r28
    19fe:	fd 1e       	adc	r15, r29
    1a00:	ce 01       	movw	r24, r28
    1a02:	05 96       	adiw	r24, 0x05	; 5
    1a04:	b7 01       	movw	r22, r14
    1a06:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	40 f0       	brcs	.+16     	; 0x1a20 <__ltsf2+0x56>
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	82 30       	cpi	r24, 0x02	; 2
    1a14:	28 f0       	brcs	.+10     	; 0x1a20 <__ltsf2+0x56>
    1a16:	c8 01       	movw	r24, r16
    1a18:	b7 01       	movw	r22, r14
    1a1a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fpcmp_parts_f>
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <__ltsf2+0x58>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	68 96       	adiw	r28, 0x18	; 24
    1a24:	e6 e0       	ldi	r30, 0x06	; 6
    1a26:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

00001a2a <__fixsfsi>:
    1a2a:	ac e0       	ldi	r26, 0x0C	; 12
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	eb e1       	ldi	r30, 0x1B	; 27
    1a30:	fd e0       	ldi	r31, 0x0D	; 13
    1a32:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__prologue_saves__+0x20>
    1a36:	69 83       	std	Y+1, r22	; 0x01
    1a38:	7a 83       	std	Y+2, r23	; 0x02
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	be 01       	movw	r22, r28
    1a44:	6b 5f       	subi	r22, 0xFB	; 251
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__unpack_f>
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	81 f1       	breq	.+96     	; 0x1ab2 <__fixsfsi+0x88>
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	70 f1       	brcs	.+92     	; 0x1ab2 <__fixsfsi+0x88>
    1a56:	84 30       	cpi	r24, 0x04	; 4
    1a58:	21 f4       	brne	.+8      	; 0x1a62 <__fixsfsi+0x38>
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	88 23       	and	r24, r24
    1a5e:	69 f1       	breq	.+90     	; 0x1aba <__fixsfsi+0x90>
    1a60:	0a c0       	rjmp	.+20     	; 0x1a76 <__fixsfsi+0x4c>
    1a62:	2f 81       	ldd	r18, Y+7	; 0x07
    1a64:	38 85       	ldd	r19, Y+8	; 0x08
    1a66:	37 fd       	sbrc	r19, 7
    1a68:	24 c0       	rjmp	.+72     	; 0x1ab2 <__fixsfsi+0x88>
    1a6a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a6c:	2f 31       	cpi	r18, 0x1F	; 31
    1a6e:	31 05       	cpc	r19, r1
    1a70:	3c f0       	brlt	.+14     	; 0x1a80 <__fixsfsi+0x56>
    1a72:	66 23       	and	r22, r22
    1a74:	11 f1       	breq	.+68     	; 0x1aba <__fixsfsi+0x90>
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e8       	ldi	r21, 0x80	; 128
    1a7e:	21 c0       	rjmp	.+66     	; 0x1ac2 <__fixsfsi+0x98>
    1a80:	8e e1       	ldi	r24, 0x1E	; 30
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	82 1b       	sub	r24, r18
    1a86:	93 0b       	sbc	r25, r19
    1a88:	29 85       	ldd	r18, Y+9	; 0x09
    1a8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a8c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a8e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <__fixsfsi+0x70>
    1a92:	56 95       	lsr	r21
    1a94:	47 95       	ror	r20
    1a96:	37 95       	ror	r19
    1a98:	27 95       	ror	r18
    1a9a:	8a 95       	dec	r24
    1a9c:	d2 f7       	brpl	.-12     	; 0x1a92 <__fixsfsi+0x68>
    1a9e:	66 23       	and	r22, r22
    1aa0:	81 f0       	breq	.+32     	; 0x1ac2 <__fixsfsi+0x98>
    1aa2:	50 95       	com	r21
    1aa4:	40 95       	com	r20
    1aa6:	30 95       	com	r19
    1aa8:	21 95       	neg	r18
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	4f 4f       	sbci	r20, 0xFF	; 255
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <__fixsfsi+0x98>
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <__fixsfsi+0x98>
    1aba:	2f ef       	ldi	r18, 0xFF	; 255
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f ef       	ldi	r20, 0xFF	; 255
    1ac0:	5f e7       	ldi	r21, 0x7F	; 127
    1ac2:	b9 01       	movw	r22, r18
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	2c 96       	adiw	r28, 0x0c	; 12
    1ac8:	e2 e0       	ldi	r30, 0x02	; 2
    1aca:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__epilogue_restores__+0x20>

00001ace <__pack_f>:
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	fc 01       	movw	r30, r24
    1adc:	24 81       	ldd	r18, Z+4	; 0x04
    1ade:	35 81       	ldd	r19, Z+5	; 0x05
    1ae0:	46 81       	ldd	r20, Z+6	; 0x06
    1ae2:	57 81       	ldd	r21, Z+7	; 0x07
    1ae4:	61 81       	ldd	r22, Z+1	; 0x01
    1ae6:	80 81       	ld	r24, Z
    1ae8:	82 30       	cpi	r24, 0x02	; 2
    1aea:	20 f4       	brcc	.+8      	; 0x1af4 <__pack_f+0x26>
    1aec:	40 61       	ori	r20, 0x10	; 16
    1aee:	ef ef       	ldi	r30, 0xFF	; 255
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	a3 c0       	rjmp	.+326    	; 0x1c3a <__pack_f+0x16c>
    1af4:	84 30       	cpi	r24, 0x04	; 4
    1af6:	09 f4       	brne	.+2      	; 0x1afa <__pack_f+0x2c>
    1af8:	9b c0       	rjmp	.+310    	; 0x1c30 <__pack_f+0x162>
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <__pack_f+0x32>
    1afe:	92 c0       	rjmp	.+292    	; 0x1c24 <__pack_f+0x156>
    1b00:	21 15       	cp	r18, r1
    1b02:	31 05       	cpc	r19, r1
    1b04:	41 05       	cpc	r20, r1
    1b06:	51 05       	cpc	r21, r1
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <__pack_f+0x3e>
    1b0a:	8f c0       	rjmp	.+286    	; 0x1c2a <__pack_f+0x15c>
    1b0c:	02 80       	ldd	r0, Z+2	; 0x02
    1b0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1b10:	e0 2d       	mov	r30, r0
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	e2 38       	cpi	r30, 0x82	; 130
    1b16:	f8 07       	cpc	r31, r24
    1b18:	0c f0       	brlt	.+2      	; 0x1b1c <__pack_f+0x4e>
    1b1a:	5a c0       	rjmp	.+180    	; 0x1bd0 <__pack_f+0x102>
    1b1c:	c2 e8       	ldi	r28, 0x82	; 130
    1b1e:	df ef       	ldi	r29, 0xFF	; 255
    1b20:	ce 1b       	sub	r28, r30
    1b22:	df 0b       	sbc	r29, r31
    1b24:	ca 31       	cpi	r28, 0x1A	; 26
    1b26:	d1 05       	cpc	r29, r1
    1b28:	6c f5       	brge	.+90     	; 0x1b84 <__pack_f+0xb6>
    1b2a:	79 01       	movw	r14, r18
    1b2c:	8a 01       	movw	r16, r20
    1b2e:	0c 2e       	mov	r0, r28
    1b30:	04 c0       	rjmp	.+8      	; 0x1b3a <__pack_f+0x6c>
    1b32:	16 95       	lsr	r17
    1b34:	07 95       	ror	r16
    1b36:	f7 94       	ror	r15
    1b38:	e7 94       	ror	r14
    1b3a:	0a 94       	dec	r0
    1b3c:	d2 f7       	brpl	.-12     	; 0x1b32 <__pack_f+0x64>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e0       	ldi	r26, 0x00	; 0
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	0c 2e       	mov	r0, r28
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__pack_f+0x84>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	aa 1f       	adc	r26, r26
    1b50:	bb 1f       	adc	r27, r27
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__pack_f+0x7c>
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	a1 09       	sbc	r26, r1
    1b5a:	b1 09       	sbc	r27, r1
    1b5c:	82 23       	and	r24, r18
    1b5e:	93 23       	and	r25, r19
    1b60:	a4 23       	and	r26, r20
    1b62:	b5 23       	and	r27, r21
    1b64:	21 e0       	ldi	r18, 0x01	; 1
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	a1 05       	cpc	r26, r1
    1b70:	b1 05       	cpc	r27, r1
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <__pack_f+0xac>
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	a9 01       	movw	r20, r18
    1b7a:	2e 29       	or	r18, r14
    1b7c:	3f 29       	or	r19, r15
    1b7e:	40 2b       	or	r20, r16
    1b80:	51 2b       	or	r21, r17
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <__pack_f+0xbc>
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	a9 01       	movw	r20, r18
    1b8a:	da 01       	movw	r26, r20
    1b8c:	c9 01       	movw	r24, r18
    1b8e:	8f 77       	andi	r24, 0x7F	; 127
    1b90:	90 70       	andi	r25, 0x00	; 0
    1b92:	a0 70       	andi	r26, 0x00	; 0
    1b94:	b0 70       	andi	r27, 0x00	; 0
    1b96:	80 34       	cpi	r24, 0x40	; 64
    1b98:	91 05       	cpc	r25, r1
    1b9a:	a1 05       	cpc	r26, r1
    1b9c:	b1 05       	cpc	r27, r1
    1b9e:	39 f4       	brne	.+14     	; 0x1bae <__pack_f+0xe0>
    1ba0:	27 ff       	sbrs	r18, 7
    1ba2:	09 c0       	rjmp	.+18     	; 0x1bb6 <__pack_f+0xe8>
    1ba4:	20 5c       	subi	r18, 0xC0	; 192
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	4f 4f       	sbci	r20, 0xFF	; 255
    1baa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bac:	04 c0       	rjmp	.+8      	; 0x1bb6 <__pack_f+0xe8>
    1bae:	21 5c       	subi	r18, 0xC1	; 193
    1bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb2:	4f 4f       	sbci	r20, 0xFF	; 255
    1bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb6:	e1 e0       	ldi	r30, 0x01	; 1
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	20 30       	cpi	r18, 0x00	; 0
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	38 07       	cpc	r19, r24
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	48 07       	cpc	r20, r24
    1bc4:	80 e4       	ldi	r24, 0x40	; 64
    1bc6:	58 07       	cpc	r21, r24
    1bc8:	28 f5       	brcc	.+74     	; 0x1c14 <__pack_f+0x146>
    1bca:	e0 e0       	ldi	r30, 0x00	; 0
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	22 c0       	rjmp	.+68     	; 0x1c14 <__pack_f+0x146>
    1bd0:	e0 38       	cpi	r30, 0x80	; 128
    1bd2:	f1 05       	cpc	r31, r1
    1bd4:	6c f5       	brge	.+90     	; 0x1c30 <__pack_f+0x162>
    1bd6:	e1 58       	subi	r30, 0x81	; 129
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	da 01       	movw	r26, r20
    1bdc:	c9 01       	movw	r24, r18
    1bde:	8f 77       	andi	r24, 0x7F	; 127
    1be0:	90 70       	andi	r25, 0x00	; 0
    1be2:	a0 70       	andi	r26, 0x00	; 0
    1be4:	b0 70       	andi	r27, 0x00	; 0
    1be6:	80 34       	cpi	r24, 0x40	; 64
    1be8:	91 05       	cpc	r25, r1
    1bea:	a1 05       	cpc	r26, r1
    1bec:	b1 05       	cpc	r27, r1
    1bee:	39 f4       	brne	.+14     	; 0x1bfe <__pack_f+0x130>
    1bf0:	27 ff       	sbrs	r18, 7
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <__pack_f+0x138>
    1bf4:	20 5c       	subi	r18, 0xC0	; 192
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	04 c0       	rjmp	.+8      	; 0x1c06 <__pack_f+0x138>
    1bfe:	21 5c       	subi	r18, 0xC1	; 193
    1c00:	3f 4f       	sbci	r19, 0xFF	; 255
    1c02:	4f 4f       	sbci	r20, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	57 ff       	sbrs	r21, 7
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <__pack_f+0x146>
    1c0a:	56 95       	lsr	r21
    1c0c:	47 95       	ror	r20
    1c0e:	37 95       	ror	r19
    1c10:	27 95       	ror	r18
    1c12:	31 96       	adiw	r30, 0x01	; 1
    1c14:	87 e0       	ldi	r24, 0x07	; 7
    1c16:	56 95       	lsr	r21
    1c18:	47 95       	ror	r20
    1c1a:	37 95       	ror	r19
    1c1c:	27 95       	ror	r18
    1c1e:	8a 95       	dec	r24
    1c20:	d1 f7       	brne	.-12     	; 0x1c16 <__pack_f+0x148>
    1c22:	0b c0       	rjmp	.+22     	; 0x1c3a <__pack_f+0x16c>
    1c24:	e0 e0       	ldi	r30, 0x00	; 0
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <__pack_f+0x166>
    1c2a:	e0 e0       	ldi	r30, 0x00	; 0
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	05 c0       	rjmp	.+10     	; 0x1c3a <__pack_f+0x16c>
    1c30:	ef ef       	ldi	r30, 0xFF	; 255
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	a9 01       	movw	r20, r18
    1c3a:	8e 2f       	mov	r24, r30
    1c3c:	87 95       	ror	r24
    1c3e:	88 27       	eor	r24, r24
    1c40:	87 95       	ror	r24
    1c42:	94 2f       	mov	r25, r20
    1c44:	9f 77       	andi	r25, 0x7F	; 127
    1c46:	67 95       	ror	r22
    1c48:	66 27       	eor	r22, r22
    1c4a:	67 95       	ror	r22
    1c4c:	e6 95       	lsr	r30
    1c4e:	e2 2e       	mov	r14, r18
    1c50:	a9 2f       	mov	r26, r25
    1c52:	a8 2b       	or	r26, r24
    1c54:	fe 2f       	mov	r31, r30
    1c56:	f6 2b       	or	r31, r22
    1c58:	62 2f       	mov	r22, r18
    1c5a:	73 2f       	mov	r23, r19
    1c5c:	8a 2f       	mov	r24, r26
    1c5e:	9f 2f       	mov	r25, r31
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	e6 e0       	ldi	r30, 0x06	; 6
    1c66:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

00001c6a <__unpack_f>:
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	fb 01       	movw	r30, r22
    1c6e:	2c 91       	ld	r18, X
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	3c 91       	ld	r19, X
    1c74:	11 97       	sbiw	r26, 0x01	; 1
    1c76:	12 96       	adiw	r26, 0x02	; 2
    1c78:	8c 91       	ld	r24, X
    1c7a:	12 97       	sbiw	r26, 0x02	; 2
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	4f 77       	andi	r20, 0x7F	; 127
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	98 2f       	mov	r25, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	99 27       	eor	r25, r25
    1c88:	99 1f       	adc	r25, r25
    1c8a:	13 96       	adiw	r26, 0x03	; 3
    1c8c:	6c 91       	ld	r22, X
    1c8e:	13 97       	sbiw	r26, 0x03	; 3
    1c90:	86 2f       	mov	r24, r22
    1c92:	88 0f       	add	r24, r24
    1c94:	89 2b       	or	r24, r25
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	66 1f       	adc	r22, r22
    1c9a:	66 27       	eor	r22, r22
    1c9c:	66 1f       	adc	r22, r22
    1c9e:	61 83       	std	Z+1, r22	; 0x01
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	39 f5       	brne	.+78     	; 0x1cf2 <__unpack_f+0x88>
    1ca4:	21 15       	cp	r18, r1
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	41 05       	cpc	r20, r1
    1caa:	51 05       	cpc	r21, r1
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <__unpack_f+0x48>
    1cae:	82 e0       	ldi	r24, 0x02	; 2
    1cb0:	29 c0       	rjmp	.+82     	; 0x1d04 <__unpack_f+0x9a>
    1cb2:	82 e8       	ldi	r24, 0x82	; 130
    1cb4:	9f ef       	ldi	r25, 0xFF	; 255
    1cb6:	93 83       	std	Z+3, r25	; 0x03
    1cb8:	82 83       	std	Z+2, r24	; 0x02
    1cba:	67 e0       	ldi	r22, 0x07	; 7
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	44 1f       	adc	r20, r20
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	6a 95       	dec	r22
    1cc6:	d1 f7       	brne	.-12     	; 0x1cbc <__unpack_f+0x52>
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	80 83       	st	Z, r24
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <__unpack_f+0x76>
    1cce:	22 0f       	add	r18, r18
    1cd0:	33 1f       	adc	r19, r19
    1cd2:	44 1f       	adc	r20, r20
    1cd4:	55 1f       	adc	r21, r21
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	93 83       	std	Z+3, r25	; 0x03
    1cde:	82 83       	std	Z+2, r24	; 0x02
    1ce0:	20 30       	cpi	r18, 0x00	; 0
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	38 07       	cpc	r19, r24
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	48 07       	cpc	r20, r24
    1cea:	80 e4       	ldi	r24, 0x40	; 64
    1cec:	58 07       	cpc	r21, r24
    1cee:	78 f3       	brcs	.-34     	; 0x1cce <__unpack_f+0x64>
    1cf0:	20 c0       	rjmp	.+64     	; 0x1d32 <__unpack_f+0xc8>
    1cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	79 f4       	brne	.+30     	; 0x1d16 <__unpack_f+0xac>
    1cf8:	21 15       	cp	r18, r1
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	41 05       	cpc	r20, r1
    1cfe:	51 05       	cpc	r21, r1
    1d00:	19 f4       	brne	.+6      	; 0x1d08 <__unpack_f+0x9e>
    1d02:	84 e0       	ldi	r24, 0x04	; 4
    1d04:	80 83       	st	Z, r24
    1d06:	08 95       	ret
    1d08:	44 ff       	sbrs	r20, 4
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <__unpack_f+0xa8>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	80 83       	st	Z, r24
    1d10:	10 c0       	rjmp	.+32     	; 0x1d32 <__unpack_f+0xc8>
    1d12:	10 82       	st	Z, r1
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <__unpack_f+0xc8>
    1d16:	8f 57       	subi	r24, 0x7F	; 127
    1d18:	90 40       	sbci	r25, 0x00	; 0
    1d1a:	93 83       	std	Z+3, r25	; 0x03
    1d1c:	82 83       	std	Z+2, r24	; 0x02
    1d1e:	83 e0       	ldi	r24, 0x03	; 3
    1d20:	80 83       	st	Z, r24
    1d22:	87 e0       	ldi	r24, 0x07	; 7
    1d24:	22 0f       	add	r18, r18
    1d26:	33 1f       	adc	r19, r19
    1d28:	44 1f       	adc	r20, r20
    1d2a:	55 1f       	adc	r21, r21
    1d2c:	8a 95       	dec	r24
    1d2e:	d1 f7       	brne	.-12     	; 0x1d24 <__unpack_f+0xba>
    1d30:	50 64       	ori	r21, 0x40	; 64
    1d32:	24 83       	std	Z+4, r18	; 0x04
    1d34:	35 83       	std	Z+5, r19	; 0x05
    1d36:	46 83       	std	Z+6, r20	; 0x06
    1d38:	57 83       	std	Z+7, r21	; 0x07
    1d3a:	08 95       	ret

00001d3c <__fpcmp_parts_f>:
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	db 01       	movw	r26, r22
    1d40:	90 81       	ld	r25, Z
    1d42:	92 30       	cpi	r25, 0x02	; 2
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <__fpcmp_parts_f+0xc>
    1d46:	49 c0       	rjmp	.+146    	; 0x1dda <__fpcmp_parts_f+0x9e>
    1d48:	8c 91       	ld	r24, X
    1d4a:	82 30       	cpi	r24, 0x02	; 2
    1d4c:	08 f4       	brcc	.+2      	; 0x1d50 <__fpcmp_parts_f+0x14>
    1d4e:	45 c0       	rjmp	.+138    	; 0x1dda <__fpcmp_parts_f+0x9e>
    1d50:	94 30       	cpi	r25, 0x04	; 4
    1d52:	51 f4       	brne	.+20     	; 0x1d68 <__fpcmp_parts_f+0x2c>
    1d54:	61 81       	ldd	r22, Z+1	; 0x01
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	b1 f5       	brne	.+108    	; 0x1dc6 <__fpcmp_parts_f+0x8a>
    1d5a:	11 96       	adiw	r26, 0x01	; 1
    1d5c:	2c 91       	ld	r18, X
    1d5e:	11 97       	sbiw	r26, 0x01	; 1
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	26 1b       	sub	r18, r22
    1d64:	31 09       	sbc	r19, r1
    1d66:	41 c0       	rjmp	.+130    	; 0x1dea <__fpcmp_parts_f+0xae>
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	21 f0       	breq	.+8      	; 0x1d74 <__fpcmp_parts_f+0x38>
    1d6c:	92 30       	cpi	r25, 0x02	; 2
    1d6e:	41 f4       	brne	.+16     	; 0x1d80 <__fpcmp_parts_f+0x44>
    1d70:	82 30       	cpi	r24, 0x02	; 2
    1d72:	b1 f1       	breq	.+108    	; 0x1de0 <__fpcmp_parts_f+0xa4>
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	8c 91       	ld	r24, X
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	88 23       	and	r24, r24
    1d7c:	a1 f1       	breq	.+104    	; 0x1de6 <__fpcmp_parts_f+0xaa>
    1d7e:	2d c0       	rjmp	.+90     	; 0x1dda <__fpcmp_parts_f+0x9e>
    1d80:	61 81       	ldd	r22, Z+1	; 0x01
    1d82:	82 30       	cpi	r24, 0x02	; 2
    1d84:	01 f1       	breq	.+64     	; 0x1dc6 <__fpcmp_parts_f+0x8a>
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	8c 91       	ld	r24, X
    1d8a:	11 97       	sbiw	r26, 0x01	; 1
    1d8c:	68 17       	cp	r22, r24
    1d8e:	d9 f4       	brne	.+54     	; 0x1dc6 <__fpcmp_parts_f+0x8a>
    1d90:	22 81       	ldd	r18, Z+2	; 0x02
    1d92:	33 81       	ldd	r19, Z+3	; 0x03
    1d94:	12 96       	adiw	r26, 0x02	; 2
    1d96:	8d 91       	ld	r24, X+
    1d98:	9c 91       	ld	r25, X
    1d9a:	13 97       	sbiw	r26, 0x03	; 3
    1d9c:	82 17       	cp	r24, r18
    1d9e:	93 07       	cpc	r25, r19
    1da0:	94 f0       	brlt	.+36     	; 0x1dc6 <__fpcmp_parts_f+0x8a>
    1da2:	28 17       	cp	r18, r24
    1da4:	39 07       	cpc	r19, r25
    1da6:	bc f0       	brlt	.+46     	; 0x1dd6 <__fpcmp_parts_f+0x9a>
    1da8:	24 81       	ldd	r18, Z+4	; 0x04
    1daa:	35 81       	ldd	r19, Z+5	; 0x05
    1dac:	46 81       	ldd	r20, Z+6	; 0x06
    1dae:	57 81       	ldd	r21, Z+7	; 0x07
    1db0:	14 96       	adiw	r26, 0x04	; 4
    1db2:	8d 91       	ld	r24, X+
    1db4:	9d 91       	ld	r25, X+
    1db6:	0d 90       	ld	r0, X+
    1db8:	bc 91       	ld	r27, X
    1dba:	a0 2d       	mov	r26, r0
    1dbc:	82 17       	cp	r24, r18
    1dbe:	93 07       	cpc	r25, r19
    1dc0:	a4 07       	cpc	r26, r20
    1dc2:	b5 07       	cpc	r27, r21
    1dc4:	18 f4       	brcc	.+6      	; 0x1dcc <__fpcmp_parts_f+0x90>
    1dc6:	66 23       	and	r22, r22
    1dc8:	41 f0       	breq	.+16     	; 0x1dda <__fpcmp_parts_f+0x9e>
    1dca:	0d c0       	rjmp	.+26     	; 0x1de6 <__fpcmp_parts_f+0xaa>
    1dcc:	28 17       	cp	r18, r24
    1dce:	39 07       	cpc	r19, r25
    1dd0:	4a 07       	cpc	r20, r26
    1dd2:	5b 07       	cpc	r21, r27
    1dd4:	28 f4       	brcc	.+10     	; 0x1de0 <__fpcmp_parts_f+0xa4>
    1dd6:	66 23       	and	r22, r22
    1dd8:	31 f0       	breq	.+12     	; 0x1de6 <__fpcmp_parts_f+0xaa>
    1dda:	21 e0       	ldi	r18, 0x01	; 1
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	05 c0       	rjmp	.+10     	; 0x1dea <__fpcmp_parts_f+0xae>
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <__fpcmp_parts_f+0xae>
    1de6:	2f ef       	ldi	r18, 0xFF	; 255
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	c9 01       	movw	r24, r18
    1dec:	08 95       	ret

00001dee <__divmodhi4>:
    1dee:	97 fb       	bst	r25, 7
    1df0:	09 2e       	mov	r0, r25
    1df2:	07 26       	eor	r0, r23
    1df4:	0a d0       	rcall	.+20     	; 0x1e0a <__divmodhi4_neg1>
    1df6:	77 fd       	sbrc	r23, 7
    1df8:	04 d0       	rcall	.+8      	; 0x1e02 <__divmodhi4_neg2>
    1dfa:	0c d0       	rcall	.+24     	; 0x1e14 <__udivmodhi4>
    1dfc:	06 d0       	rcall	.+12     	; 0x1e0a <__divmodhi4_neg1>
    1dfe:	00 20       	and	r0, r0
    1e00:	1a f4       	brpl	.+6      	; 0x1e08 <__divmodhi4_exit>

00001e02 <__divmodhi4_neg2>:
    1e02:	70 95       	com	r23
    1e04:	61 95       	neg	r22
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255

00001e08 <__divmodhi4_exit>:
    1e08:	08 95       	ret

00001e0a <__divmodhi4_neg1>:
    1e0a:	f6 f7       	brtc	.-4      	; 0x1e08 <__divmodhi4_exit>
    1e0c:	90 95       	com	r25
    1e0e:	81 95       	neg	r24
    1e10:	9f 4f       	sbci	r25, 0xFF	; 255
    1e12:	08 95       	ret

00001e14 <__udivmodhi4>:
    1e14:	aa 1b       	sub	r26, r26
    1e16:	bb 1b       	sub	r27, r27
    1e18:	51 e1       	ldi	r21, 0x11	; 17
    1e1a:	07 c0       	rjmp	.+14     	; 0x1e2a <__udivmodhi4_ep>

00001e1c <__udivmodhi4_loop>:
    1e1c:	aa 1f       	adc	r26, r26
    1e1e:	bb 1f       	adc	r27, r27
    1e20:	a6 17       	cp	r26, r22
    1e22:	b7 07       	cpc	r27, r23
    1e24:	10 f0       	brcs	.+4      	; 0x1e2a <__udivmodhi4_ep>
    1e26:	a6 1b       	sub	r26, r22
    1e28:	b7 0b       	sbc	r27, r23

00001e2a <__udivmodhi4_ep>:
    1e2a:	88 1f       	adc	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	5a 95       	dec	r21
    1e30:	a9 f7       	brne	.-22     	; 0x1e1c <__udivmodhi4_loop>
    1e32:	80 95       	com	r24
    1e34:	90 95       	com	r25
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	08 95       	ret

00001e3c <__prologue_saves__>:
    1e3c:	2f 92       	push	r2
    1e3e:	3f 92       	push	r3
    1e40:	4f 92       	push	r4
    1e42:	5f 92       	push	r5
    1e44:	6f 92       	push	r6
    1e46:	7f 92       	push	r7
    1e48:	8f 92       	push	r8
    1e4a:	9f 92       	push	r9
    1e4c:	af 92       	push	r10
    1e4e:	bf 92       	push	r11
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	ca 1b       	sub	r28, r26
    1e66:	db 0b       	sbc	r29, r27
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	09 94       	ijmp

00001e74 <__epilogue_restores__>:
    1e74:	2a 88       	ldd	r2, Y+18	; 0x12
    1e76:	39 88       	ldd	r3, Y+17	; 0x11
    1e78:	48 88       	ldd	r4, Y+16	; 0x10
    1e7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e80:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e82:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e84:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e86:	b9 84       	ldd	r11, Y+9	; 0x09
    1e88:	c8 84       	ldd	r12, Y+8	; 0x08
    1e8a:	df 80       	ldd	r13, Y+7	; 0x07
    1e8c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e8e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e90:	0c 81       	ldd	r16, Y+4	; 0x04
    1e92:	1b 81       	ldd	r17, Y+3	; 0x03
    1e94:	aa 81       	ldd	r26, Y+2	; 0x02
    1e96:	b9 81       	ldd	r27, Y+1	; 0x01
    1e98:	ce 0f       	add	r28, r30
    1e9a:	d1 1d       	adc	r29, r1
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	ed 01       	movw	r28, r26
    1ea8:	08 95       	ret

00001eaa <fdevopen>:
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	8c 01       	movw	r16, r24
    1eb4:	eb 01       	movw	r28, r22
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	11 f4       	brne	.+4      	; 0x1ebe <fdevopen+0x14>
    1eba:	20 97       	sbiw	r28, 0x00	; 0
    1ebc:	c9 f1       	breq	.+114    	; 0x1f30 <fdevopen+0x86>
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	6e e0       	ldi	r22, 0x0E	; 14
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <calloc>
    1eca:	fc 01       	movw	r30, r24
    1ecc:	9c 01       	movw	r18, r24
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	89 f1       	breq	.+98     	; 0x1f34 <fdevopen+0x8a>
    1ed2:	80 e8       	ldi	r24, 0x80	; 128
    1ed4:	83 83       	std	Z+3, r24	; 0x03
    1ed6:	20 97       	sbiw	r28, 0x00	; 0
    1ed8:	71 f0       	breq	.+28     	; 0x1ef6 <fdevopen+0x4c>
    1eda:	d3 87       	std	Z+11, r29	; 0x0b
    1edc:	c2 87       	std	Z+10, r28	; 0x0a
    1ede:	81 e8       	ldi	r24, 0x81	; 129
    1ee0:	83 83       	std	Z+3, r24	; 0x03
    1ee2:	80 91 6b 03 	lds	r24, 0x036B
    1ee6:	90 91 6c 03 	lds	r25, 0x036C
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	21 f4       	brne	.+8      	; 0x1ef6 <fdevopen+0x4c>
    1eee:	f0 93 6c 03 	sts	0x036C, r31
    1ef2:	e0 93 6b 03 	sts	0x036B, r30
    1ef6:	01 15       	cp	r16, r1
    1ef8:	11 05       	cpc	r17, r1
    1efa:	e1 f0       	breq	.+56     	; 0x1f34 <fdevopen+0x8a>
    1efc:	11 87       	std	Z+9, r17	; 0x09
    1efe:	00 87       	std	Z+8, r16	; 0x08
    1f00:	83 81       	ldd	r24, Z+3	; 0x03
    1f02:	82 60       	ori	r24, 0x02	; 2
    1f04:	83 83       	std	Z+3, r24	; 0x03
    1f06:	80 91 6d 03 	lds	r24, 0x036D
    1f0a:	90 91 6e 03 	lds	r25, 0x036E
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	89 f4       	brne	.+34     	; 0x1f34 <fdevopen+0x8a>
    1f12:	f0 93 6e 03 	sts	0x036E, r31
    1f16:	e0 93 6d 03 	sts	0x036D, r30
    1f1a:	80 91 6f 03 	lds	r24, 0x036F
    1f1e:	90 91 70 03 	lds	r25, 0x0370
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	39 f4       	brne	.+14     	; 0x1f34 <fdevopen+0x8a>
    1f26:	f0 93 70 03 	sts	0x0370, r31
    1f2a:	e0 93 6f 03 	sts	0x036F, r30
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <fdevopen+0x8a>
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	c9 01       	movw	r24, r18
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	08 95       	ret

00001f40 <printf>:
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e6 ea       	ldi	r30, 0xA6	; 166
    1f46:	ff e0       	ldi	r31, 0x0F	; 15
    1f48:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__prologue_saves__+0x20>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	35 96       	adiw	r30, 0x05	; 5
    1f50:	61 91       	ld	r22, Z+
    1f52:	71 91       	ld	r23, Z+
    1f54:	80 91 6d 03 	lds	r24, 0x036D
    1f58:	90 91 6e 03 	lds	r25, 0x036E
    1f5c:	af 01       	movw	r20, r30
    1f5e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <vfprintf>
    1f62:	20 96       	adiw	r28, 0x00	; 0
    1f64:	e2 e0       	ldi	r30, 0x02	; 2
    1f66:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__epilogue_restores__+0x20>

00001f6a <puts>:
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	8c 01       	movw	r16, r24
    1f78:	e0 91 6d 03 	lds	r30, 0x036D
    1f7c:	f0 91 6e 03 	lds	r31, 0x036E
    1f80:	83 81       	ldd	r24, Z+3	; 0x03
    1f82:	81 ff       	sbrs	r24, 1
    1f84:	1f c0       	rjmp	.+62     	; 0x1fc4 <puts+0x5a>
    1f86:	c0 e0       	ldi	r28, 0x00	; 0
    1f88:	d0 e0       	ldi	r29, 0x00	; 0
    1f8a:	0a c0       	rjmp	.+20     	; 0x1fa0 <puts+0x36>
    1f8c:	db 01       	movw	r26, r22
    1f8e:	18 96       	adiw	r26, 0x08	; 8
    1f90:	ed 91       	ld	r30, X+
    1f92:	fc 91       	ld	r31, X
    1f94:	19 97       	sbiw	r26, 0x09	; 9
    1f96:	09 95       	icall
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <puts+0x36>
    1f9c:	cf ef       	ldi	r28, 0xFF	; 255
    1f9e:	df ef       	ldi	r29, 0xFF	; 255
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	81 91       	ld	r24, Z+
    1fa4:	8f 01       	movw	r16, r30
    1fa6:	60 91 6d 03 	lds	r22, 0x036D
    1faa:	70 91 6e 03 	lds	r23, 0x036E
    1fae:	88 23       	and	r24, r24
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <puts+0x22>
    1fb2:	db 01       	movw	r26, r22
    1fb4:	18 96       	adiw	r26, 0x08	; 8
    1fb6:	ed 91       	ld	r30, X+
    1fb8:	fc 91       	ld	r31, X
    1fba:	19 97       	sbiw	r26, 0x09	; 9
    1fbc:	8a e0       	ldi	r24, 0x0A	; 10
    1fbe:	09 95       	icall
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <puts+0x5e>
    1fc4:	cf ef       	ldi	r28, 0xFF	; 255
    1fc6:	df ef       	ldi	r29, 0xFF	; 255
    1fc8:	ce 01       	movw	r24, r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	e6 e0       	ldi	r30, 0x06	; 6
    1fd0:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

00001fd4 <vfprintf>:
    1fd4:	ac e0       	ldi	r26, 0x0C	; 12
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e0 ef       	ldi	r30, 0xF0	; 240
    1fda:	ff e0       	ldi	r31, 0x0F	; 15
    1fdc:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__prologue_saves__>
    1fe0:	6c 01       	movw	r12, r24
    1fe2:	1b 01       	movw	r2, r22
    1fe4:	8a 01       	movw	r16, r20
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	17 82       	std	Z+7, r1	; 0x07
    1fea:	16 82       	std	Z+6, r1	; 0x06
    1fec:	83 81       	ldd	r24, Z+3	; 0x03
    1fee:	81 ff       	sbrs	r24, 1
    1ff0:	d1 c1       	rjmp	.+930    	; 0x2394 <vfprintf+0x3c0>
    1ff2:	2e 01       	movw	r4, r28
    1ff4:	08 94       	sec
    1ff6:	41 1c       	adc	r4, r1
    1ff8:	51 1c       	adc	r5, r1
    1ffa:	f6 01       	movw	r30, r12
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	f1 01       	movw	r30, r2
    2000:	93 fd       	sbrc	r25, 3
    2002:	85 91       	lpm	r24, Z+
    2004:	93 ff       	sbrs	r25, 3
    2006:	81 91       	ld	r24, Z+
    2008:	1f 01       	movw	r2, r30
    200a:	88 23       	and	r24, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <vfprintf+0x3c>
    200e:	be c1       	rjmp	.+892    	; 0x238c <vfprintf+0x3b8>
    2010:	85 32       	cpi	r24, 0x25	; 37
    2012:	39 f4       	brne	.+14     	; 0x2022 <vfprintf+0x4e>
    2014:	93 fd       	sbrc	r25, 3
    2016:	85 91       	lpm	r24, Z+
    2018:	93 ff       	sbrs	r25, 3
    201a:	81 91       	ld	r24, Z+
    201c:	1f 01       	movw	r2, r30
    201e:	85 32       	cpi	r24, 0x25	; 37
    2020:	29 f4       	brne	.+10     	; 0x202c <vfprintf+0x58>
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	b6 01       	movw	r22, r12
    2026:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    202a:	e7 cf       	rjmp	.-50     	; 0x1ffa <vfprintf+0x26>
    202c:	ee 24       	eor	r14, r14
    202e:	ff 24       	eor	r15, r15
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	20 32       	cpi	r18, 0x20	; 32
    2034:	b0 f4       	brcc	.+44     	; 0x2062 <vfprintf+0x8e>
    2036:	8b 32       	cpi	r24, 0x2B	; 43
    2038:	69 f0       	breq	.+26     	; 0x2054 <vfprintf+0x80>
    203a:	8c 32       	cpi	r24, 0x2C	; 44
    203c:	28 f4       	brcc	.+10     	; 0x2048 <vfprintf+0x74>
    203e:	80 32       	cpi	r24, 0x20	; 32
    2040:	51 f0       	breq	.+20     	; 0x2056 <vfprintf+0x82>
    2042:	83 32       	cpi	r24, 0x23	; 35
    2044:	71 f4       	brne	.+28     	; 0x2062 <vfprintf+0x8e>
    2046:	0b c0       	rjmp	.+22     	; 0x205e <vfprintf+0x8a>
    2048:	8d 32       	cpi	r24, 0x2D	; 45
    204a:	39 f0       	breq	.+14     	; 0x205a <vfprintf+0x86>
    204c:	80 33       	cpi	r24, 0x30	; 48
    204e:	49 f4       	brne	.+18     	; 0x2062 <vfprintf+0x8e>
    2050:	21 60       	ori	r18, 0x01	; 1
    2052:	2c c0       	rjmp	.+88     	; 0x20ac <vfprintf+0xd8>
    2054:	22 60       	ori	r18, 0x02	; 2
    2056:	24 60       	ori	r18, 0x04	; 4
    2058:	29 c0       	rjmp	.+82     	; 0x20ac <vfprintf+0xd8>
    205a:	28 60       	ori	r18, 0x08	; 8
    205c:	27 c0       	rjmp	.+78     	; 0x20ac <vfprintf+0xd8>
    205e:	20 61       	ori	r18, 0x10	; 16
    2060:	25 c0       	rjmp	.+74     	; 0x20ac <vfprintf+0xd8>
    2062:	27 fd       	sbrc	r18, 7
    2064:	2c c0       	rjmp	.+88     	; 0x20be <vfprintf+0xea>
    2066:	38 2f       	mov	r19, r24
    2068:	30 53       	subi	r19, 0x30	; 48
    206a:	3a 30       	cpi	r19, 0x0A	; 10
    206c:	98 f4       	brcc	.+38     	; 0x2094 <vfprintf+0xc0>
    206e:	26 ff       	sbrs	r18, 6
    2070:	08 c0       	rjmp	.+16     	; 0x2082 <vfprintf+0xae>
    2072:	8e 2d       	mov	r24, r14
    2074:	88 0f       	add	r24, r24
    2076:	e8 2e       	mov	r14, r24
    2078:	ee 0c       	add	r14, r14
    207a:	ee 0c       	add	r14, r14
    207c:	e8 0e       	add	r14, r24
    207e:	e3 0e       	add	r14, r19
    2080:	15 c0       	rjmp	.+42     	; 0x20ac <vfprintf+0xd8>
    2082:	8f 2d       	mov	r24, r15
    2084:	88 0f       	add	r24, r24
    2086:	f8 2e       	mov	r15, r24
    2088:	ff 0c       	add	r15, r15
    208a:	ff 0c       	add	r15, r15
    208c:	f8 0e       	add	r15, r24
    208e:	f3 0e       	add	r15, r19
    2090:	20 62       	ori	r18, 0x20	; 32
    2092:	0c c0       	rjmp	.+24     	; 0x20ac <vfprintf+0xd8>
    2094:	8e 32       	cpi	r24, 0x2E	; 46
    2096:	21 f4       	brne	.+8      	; 0x20a0 <vfprintf+0xcc>
    2098:	26 fd       	sbrc	r18, 6
    209a:	78 c1       	rjmp	.+752    	; 0x238c <vfprintf+0x3b8>
    209c:	20 64       	ori	r18, 0x40	; 64
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <vfprintf+0xd8>
    20a0:	8c 36       	cpi	r24, 0x6C	; 108
    20a2:	11 f4       	brne	.+4      	; 0x20a8 <vfprintf+0xd4>
    20a4:	20 68       	ori	r18, 0x80	; 128
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <vfprintf+0xd8>
    20a8:	88 36       	cpi	r24, 0x68	; 104
    20aa:	49 f4       	brne	.+18     	; 0x20be <vfprintf+0xea>
    20ac:	f1 01       	movw	r30, r2
    20ae:	93 fd       	sbrc	r25, 3
    20b0:	85 91       	lpm	r24, Z+
    20b2:	93 ff       	sbrs	r25, 3
    20b4:	81 91       	ld	r24, Z+
    20b6:	1f 01       	movw	r2, r30
    20b8:	88 23       	and	r24, r24
    20ba:	09 f0       	breq	.+2      	; 0x20be <vfprintf+0xea>
    20bc:	ba cf       	rjmp	.-140    	; 0x2032 <vfprintf+0x5e>
    20be:	98 2f       	mov	r25, r24
    20c0:	95 54       	subi	r25, 0x45	; 69
    20c2:	93 30       	cpi	r25, 0x03	; 3
    20c4:	18 f0       	brcs	.+6      	; 0x20cc <vfprintf+0xf8>
    20c6:	90 52       	subi	r25, 0x20	; 32
    20c8:	93 30       	cpi	r25, 0x03	; 3
    20ca:	28 f4       	brcc	.+10     	; 0x20d6 <vfprintf+0x102>
    20cc:	0c 5f       	subi	r16, 0xFC	; 252
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	ff e3       	ldi	r31, 0x3F	; 63
    20d2:	f9 83       	std	Y+1, r31	; 0x01
    20d4:	0d c0       	rjmp	.+26     	; 0x20f0 <vfprintf+0x11c>
    20d6:	83 36       	cpi	r24, 0x63	; 99
    20d8:	31 f0       	breq	.+12     	; 0x20e6 <vfprintf+0x112>
    20da:	83 37       	cpi	r24, 0x73	; 115
    20dc:	71 f0       	breq	.+28     	; 0x20fa <vfprintf+0x126>
    20de:	83 35       	cpi	r24, 0x53	; 83
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <vfprintf+0x110>
    20e2:	60 c0       	rjmp	.+192    	; 0x21a4 <vfprintf+0x1d0>
    20e4:	22 c0       	rjmp	.+68     	; 0x212a <vfprintf+0x156>
    20e6:	f8 01       	movw	r30, r16
    20e8:	80 81       	ld	r24, Z
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	0e 5f       	subi	r16, 0xFE	; 254
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	42 01       	movw	r8, r4
    20f2:	71 e0       	ldi	r23, 0x01	; 1
    20f4:	a7 2e       	mov	r10, r23
    20f6:	b1 2c       	mov	r11, r1
    20f8:	16 c0       	rjmp	.+44     	; 0x2126 <vfprintf+0x152>
    20fa:	62 e0       	ldi	r22, 0x02	; 2
    20fc:	66 2e       	mov	r6, r22
    20fe:	71 2c       	mov	r7, r1
    2100:	60 0e       	add	r6, r16
    2102:	71 1e       	adc	r7, r17
    2104:	f8 01       	movw	r30, r16
    2106:	80 80       	ld	r8, Z
    2108:	91 80       	ldd	r9, Z+1	; 0x01
    210a:	26 ff       	sbrs	r18, 6
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <vfprintf+0x140>
    210e:	6e 2d       	mov	r22, r14
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <vfprintf+0x144>
    2114:	6f ef       	ldi	r22, 0xFF	; 255
    2116:	7f ef       	ldi	r23, 0xFF	; 255
    2118:	c4 01       	movw	r24, r8
    211a:	2c 87       	std	Y+12, r18	; 0x0c
    211c:	0e 94 3a 13 	call	0x2674	; 0x2674 <strnlen>
    2120:	5c 01       	movw	r10, r24
    2122:	83 01       	movw	r16, r6
    2124:	2c 85       	ldd	r18, Y+12	; 0x0c
    2126:	2f 77       	andi	r18, 0x7F	; 127
    2128:	17 c0       	rjmp	.+46     	; 0x2158 <vfprintf+0x184>
    212a:	52 e0       	ldi	r21, 0x02	; 2
    212c:	65 2e       	mov	r6, r21
    212e:	71 2c       	mov	r7, r1
    2130:	60 0e       	add	r6, r16
    2132:	71 1e       	adc	r7, r17
    2134:	f8 01       	movw	r30, r16
    2136:	80 80       	ld	r8, Z
    2138:	91 80       	ldd	r9, Z+1	; 0x01
    213a:	26 ff       	sbrs	r18, 6
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <vfprintf+0x170>
    213e:	6e 2d       	mov	r22, r14
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <vfprintf+0x174>
    2144:	6f ef       	ldi	r22, 0xFF	; 255
    2146:	7f ef       	ldi	r23, 0xFF	; 255
    2148:	c4 01       	movw	r24, r8
    214a:	2c 87       	std	Y+12, r18	; 0x0c
    214c:	0e 94 28 13 	call	0x2650	; 0x2650 <strnlen_P>
    2150:	5c 01       	movw	r10, r24
    2152:	2c 85       	ldd	r18, Y+12	; 0x0c
    2154:	20 68       	ori	r18, 0x80	; 128
    2156:	83 01       	movw	r16, r6
    2158:	23 fd       	sbrc	r18, 3
    215a:	20 c0       	rjmp	.+64     	; 0x219c <vfprintf+0x1c8>
    215c:	08 c0       	rjmp	.+16     	; 0x216e <vfprintf+0x19a>
    215e:	80 e2       	ldi	r24, 0x20	; 32
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	b6 01       	movw	r22, r12
    2164:	2c 87       	std	Y+12, r18	; 0x0c
    2166:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    216a:	fa 94       	dec	r15
    216c:	2c 85       	ldd	r18, Y+12	; 0x0c
    216e:	8f 2d       	mov	r24, r15
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a8 16       	cp	r10, r24
    2174:	b9 06       	cpc	r11, r25
    2176:	98 f3       	brcs	.-26     	; 0x215e <vfprintf+0x18a>
    2178:	11 c0       	rjmp	.+34     	; 0x219c <vfprintf+0x1c8>
    217a:	f4 01       	movw	r30, r8
    217c:	27 fd       	sbrc	r18, 7
    217e:	85 91       	lpm	r24, Z+
    2180:	27 ff       	sbrs	r18, 7
    2182:	81 91       	ld	r24, Z+
    2184:	4f 01       	movw	r8, r30
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	b6 01       	movw	r22, r12
    218a:	2c 87       	std	Y+12, r18	; 0x0c
    218c:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    2190:	2c 85       	ldd	r18, Y+12	; 0x0c
    2192:	f1 10       	cpse	r15, r1
    2194:	fa 94       	dec	r15
    2196:	08 94       	sec
    2198:	a1 08       	sbc	r10, r1
    219a:	b1 08       	sbc	r11, r1
    219c:	a1 14       	cp	r10, r1
    219e:	b1 04       	cpc	r11, r1
    21a0:	61 f7       	brne	.-40     	; 0x217a <vfprintf+0x1a6>
    21a2:	f1 c0       	rjmp	.+482    	; 0x2386 <vfprintf+0x3b2>
    21a4:	84 36       	cpi	r24, 0x64	; 100
    21a6:	11 f0       	breq	.+4      	; 0x21ac <vfprintf+0x1d8>
    21a8:	89 36       	cpi	r24, 0x69	; 105
    21aa:	49 f5       	brne	.+82     	; 0x21fe <vfprintf+0x22a>
    21ac:	27 ff       	sbrs	r18, 7
    21ae:	08 c0       	rjmp	.+16     	; 0x21c0 <vfprintf+0x1ec>
    21b0:	f8 01       	movw	r30, r16
    21b2:	60 81       	ld	r22, Z
    21b4:	71 81       	ldd	r23, Z+1	; 0x01
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	93 81       	ldd	r25, Z+3	; 0x03
    21ba:	0c 5f       	subi	r16, 0xFC	; 252
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	09 c0       	rjmp	.+18     	; 0x21d2 <vfprintf+0x1fe>
    21c0:	f8 01       	movw	r30, r16
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	88 27       	eor	r24, r24
    21c8:	77 fd       	sbrc	r23, 7
    21ca:	80 95       	com	r24
    21cc:	98 2f       	mov	r25, r24
    21ce:	0e 5f       	subi	r16, 0xFE	; 254
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	4f e6       	ldi	r20, 0x6F	; 111
    21d4:	b4 2e       	mov	r11, r20
    21d6:	b2 22       	and	r11, r18
    21d8:	97 ff       	sbrs	r25, 7
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <vfprintf+0x21a>
    21dc:	90 95       	com	r25
    21de:	80 95       	com	r24
    21e0:	70 95       	com	r23
    21e2:	61 95       	neg	r22
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	8f 4f       	sbci	r24, 0xFF	; 255
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	f0 e8       	ldi	r31, 0x80	; 128
    21ec:	bf 2a       	or	r11, r31
    21ee:	a2 01       	movw	r20, r4
    21f0:	2a e0       	ldi	r18, 0x0A	; 10
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__ultoa_invert>
    21f8:	78 2e       	mov	r7, r24
    21fa:	74 18       	sub	r7, r4
    21fc:	45 c0       	rjmp	.+138    	; 0x2288 <vfprintf+0x2b4>
    21fe:	85 37       	cpi	r24, 0x75	; 117
    2200:	31 f4       	brne	.+12     	; 0x220e <vfprintf+0x23a>
    2202:	3f ee       	ldi	r19, 0xEF	; 239
    2204:	b3 2e       	mov	r11, r19
    2206:	b2 22       	and	r11, r18
    2208:	2a e0       	ldi	r18, 0x0A	; 10
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	25 c0       	rjmp	.+74     	; 0x2258 <vfprintf+0x284>
    220e:	99 ef       	ldi	r25, 0xF9	; 249
    2210:	b9 2e       	mov	r11, r25
    2212:	b2 22       	and	r11, r18
    2214:	8f 36       	cpi	r24, 0x6F	; 111
    2216:	c1 f0       	breq	.+48     	; 0x2248 <vfprintf+0x274>
    2218:	80 37       	cpi	r24, 0x70	; 112
    221a:	20 f4       	brcc	.+8      	; 0x2224 <vfprintf+0x250>
    221c:	88 35       	cpi	r24, 0x58	; 88
    221e:	09 f0       	breq	.+2      	; 0x2222 <vfprintf+0x24e>
    2220:	b5 c0       	rjmp	.+362    	; 0x238c <vfprintf+0x3b8>
    2222:	0d c0       	rjmp	.+26     	; 0x223e <vfprintf+0x26a>
    2224:	80 37       	cpi	r24, 0x70	; 112
    2226:	21 f0       	breq	.+8      	; 0x2230 <vfprintf+0x25c>
    2228:	88 37       	cpi	r24, 0x78	; 120
    222a:	09 f0       	breq	.+2      	; 0x222e <vfprintf+0x25a>
    222c:	af c0       	rjmp	.+350    	; 0x238c <vfprintf+0x3b8>
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <vfprintf+0x260>
    2230:	20 e1       	ldi	r18, 0x10	; 16
    2232:	b2 2a       	or	r11, r18
    2234:	b4 fe       	sbrs	r11, 4
    2236:	0b c0       	rjmp	.+22     	; 0x224e <vfprintf+0x27a>
    2238:	84 e0       	ldi	r24, 0x04	; 4
    223a:	b8 2a       	or	r11, r24
    223c:	08 c0       	rjmp	.+16     	; 0x224e <vfprintf+0x27a>
    223e:	b4 fe       	sbrs	r11, 4
    2240:	09 c0       	rjmp	.+18     	; 0x2254 <vfprintf+0x280>
    2242:	e6 e0       	ldi	r30, 0x06	; 6
    2244:	be 2a       	or	r11, r30
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <vfprintf+0x280>
    2248:	28 e0       	ldi	r18, 0x08	; 8
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	05 c0       	rjmp	.+10     	; 0x2258 <vfprintf+0x284>
    224e:	20 e1       	ldi	r18, 0x10	; 16
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <vfprintf+0x284>
    2254:	20 e1       	ldi	r18, 0x10	; 16
    2256:	32 e0       	ldi	r19, 0x02	; 2
    2258:	b7 fe       	sbrs	r11, 7
    225a:	08 c0       	rjmp	.+16     	; 0x226c <vfprintf+0x298>
    225c:	f8 01       	movw	r30, r16
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	0c 5f       	subi	r16, 0xFC	; 252
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	07 c0       	rjmp	.+14     	; 0x227a <vfprintf+0x2a6>
    226c:	f8 01       	movw	r30, r16
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 5f       	subi	r16, 0xFE	; 254
    2278:	1f 4f       	sbci	r17, 0xFF	; 255
    227a:	a2 01       	movw	r20, r4
    227c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__ultoa_invert>
    2280:	78 2e       	mov	r7, r24
    2282:	74 18       	sub	r7, r4
    2284:	ff e7       	ldi	r31, 0x7F	; 127
    2286:	bf 22       	and	r11, r31
    2288:	b6 fe       	sbrs	r11, 6
    228a:	0b c0       	rjmp	.+22     	; 0x22a2 <vfprintf+0x2ce>
    228c:	2e ef       	ldi	r18, 0xFE	; 254
    228e:	b2 22       	and	r11, r18
    2290:	7e 14       	cp	r7, r14
    2292:	38 f4       	brcc	.+14     	; 0x22a2 <vfprintf+0x2ce>
    2294:	b4 fe       	sbrs	r11, 4
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <vfprintf+0x2d2>
    2298:	b2 fc       	sbrc	r11, 2
    229a:	05 c0       	rjmp	.+10     	; 0x22a6 <vfprintf+0x2d2>
    229c:	8f ee       	ldi	r24, 0xEF	; 239
    229e:	b8 22       	and	r11, r24
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <vfprintf+0x2d2>
    22a2:	a7 2c       	mov	r10, r7
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <vfprintf+0x2d4>
    22a6:	ae 2c       	mov	r10, r14
    22a8:	8b 2d       	mov	r24, r11
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	b4 fe       	sbrs	r11, 4
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <vfprintf+0x2f6>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e7 0d       	add	r30, r7
    22b4:	f1 1d       	adc	r31, r1
    22b6:	20 81       	ld	r18, Z
    22b8:	20 33       	cpi	r18, 0x30	; 48
    22ba:	19 f4       	brne	.+6      	; 0x22c2 <vfprintf+0x2ee>
    22bc:	e9 ee       	ldi	r30, 0xE9	; 233
    22be:	be 22       	and	r11, r30
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <vfprintf+0x300>
    22c2:	a3 94       	inc	r10
    22c4:	b2 fe       	sbrs	r11, 2
    22c6:	06 c0       	rjmp	.+12     	; 0x22d4 <vfprintf+0x300>
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <vfprintf+0x2fe>
    22ca:	86 78       	andi	r24, 0x86	; 134
    22cc:	90 70       	andi	r25, 0x00	; 0
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <vfprintf+0x300>
    22d2:	a3 94       	inc	r10
    22d4:	8b 2c       	mov	r8, r11
    22d6:	99 24       	eor	r9, r9
    22d8:	b3 fc       	sbrc	r11, 3
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <vfprintf+0x330>
    22dc:	b0 fe       	sbrs	r11, 0
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <vfprintf+0x32a>
    22e0:	af 14       	cp	r10, r15
    22e2:	28 f4       	brcc	.+10     	; 0x22ee <vfprintf+0x31a>
    22e4:	e7 2c       	mov	r14, r7
    22e6:	ef 0c       	add	r14, r15
    22e8:	ea 18       	sub	r14, r10
    22ea:	af 2c       	mov	r10, r15
    22ec:	08 c0       	rjmp	.+16     	; 0x22fe <vfprintf+0x32a>
    22ee:	e7 2c       	mov	r14, r7
    22f0:	06 c0       	rjmp	.+12     	; 0x22fe <vfprintf+0x32a>
    22f2:	80 e2       	ldi	r24, 0x20	; 32
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	b6 01       	movw	r22, r12
    22f8:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    22fc:	a3 94       	inc	r10
    22fe:	af 14       	cp	r10, r15
    2300:	c0 f3       	brcs	.-16     	; 0x22f2 <vfprintf+0x31e>
    2302:	04 c0       	rjmp	.+8      	; 0x230c <vfprintf+0x338>
    2304:	af 14       	cp	r10, r15
    2306:	10 f4       	brcc	.+4      	; 0x230c <vfprintf+0x338>
    2308:	fa 18       	sub	r15, r10
    230a:	01 c0       	rjmp	.+2      	; 0x230e <vfprintf+0x33a>
    230c:	ff 24       	eor	r15, r15
    230e:	84 fe       	sbrs	r8, 4
    2310:	0f c0       	rjmp	.+30     	; 0x2330 <vfprintf+0x35c>
    2312:	80 e3       	ldi	r24, 0x30	; 48
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	b6 01       	movw	r22, r12
    2318:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    231c:	82 fe       	sbrs	r8, 2
    231e:	1f c0       	rjmp	.+62     	; 0x235e <vfprintf+0x38a>
    2320:	81 fe       	sbrs	r8, 1
    2322:	03 c0       	rjmp	.+6      	; 0x232a <vfprintf+0x356>
    2324:	88 e5       	ldi	r24, 0x58	; 88
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	10 c0       	rjmp	.+32     	; 0x234a <vfprintf+0x376>
    232a:	88 e7       	ldi	r24, 0x78	; 120
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0d c0       	rjmp	.+26     	; 0x234a <vfprintf+0x376>
    2330:	c4 01       	movw	r24, r8
    2332:	86 78       	andi	r24, 0x86	; 134
    2334:	90 70       	andi	r25, 0x00	; 0
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	91 f0       	breq	.+36     	; 0x235e <vfprintf+0x38a>
    233a:	81 fc       	sbrc	r8, 1
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <vfprintf+0x36e>
    233e:	80 e2       	ldi	r24, 0x20	; 32
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <vfprintf+0x370>
    2342:	8b e2       	ldi	r24, 0x2B	; 43
    2344:	b7 fc       	sbrc	r11, 7
    2346:	8d e2       	ldi	r24, 0x2D	; 45
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	b6 01       	movw	r22, r12
    234c:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    2350:	06 c0       	rjmp	.+12     	; 0x235e <vfprintf+0x38a>
    2352:	80 e3       	ldi	r24, 0x30	; 48
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	b6 01       	movw	r22, r12
    2358:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    235c:	ea 94       	dec	r14
    235e:	7e 14       	cp	r7, r14
    2360:	c0 f3       	brcs	.-16     	; 0x2352 <vfprintf+0x37e>
    2362:	7a 94       	dec	r7
    2364:	f2 01       	movw	r30, r4
    2366:	e7 0d       	add	r30, r7
    2368:	f1 1d       	adc	r31, r1
    236a:	80 81       	ld	r24, Z
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	b6 01       	movw	r22, r12
    2370:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    2374:	77 20       	and	r7, r7
    2376:	a9 f7       	brne	.-22     	; 0x2362 <vfprintf+0x38e>
    2378:	06 c0       	rjmp	.+12     	; 0x2386 <vfprintf+0x3b2>
    237a:	80 e2       	ldi	r24, 0x20	; 32
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	b6 01       	movw	r22, r12
    2380:	0e 94 45 13 	call	0x268a	; 0x268a <fputc>
    2384:	fa 94       	dec	r15
    2386:	ff 20       	and	r15, r15
    2388:	c1 f7       	brne	.-16     	; 0x237a <vfprintf+0x3a6>
    238a:	37 ce       	rjmp	.-914    	; 0x1ffa <vfprintf+0x26>
    238c:	f6 01       	movw	r30, r12
    238e:	26 81       	ldd	r18, Z+6	; 0x06
    2390:	37 81       	ldd	r19, Z+7	; 0x07
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <vfprintf+0x3c4>
    2394:	2f ef       	ldi	r18, 0xFF	; 255
    2396:	3f ef       	ldi	r19, 0xFF	; 255
    2398:	c9 01       	movw	r24, r18
    239a:	2c 96       	adiw	r28, 0x0c	; 12
    239c:	e2 e1       	ldi	r30, 0x12	; 18
    239e:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__epilogue_restores__>

000023a2 <calloc>:
    23a2:	ef 92       	push	r14
    23a4:	ff 92       	push	r15
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	68 9f       	mul	r22, r24
    23b0:	80 01       	movw	r16, r0
    23b2:	69 9f       	mul	r22, r25
    23b4:	10 0d       	add	r17, r0
    23b6:	78 9f       	mul	r23, r24
    23b8:	10 0d       	add	r17, r0
    23ba:	11 24       	eor	r1, r1
    23bc:	c8 01       	movw	r24, r16
    23be:	0e 94 f5 11 	call	0x23ea	; 0x23ea <malloc>
    23c2:	e8 2e       	mov	r14, r24
    23c4:	e7 01       	movw	r28, r14
    23c6:	7e 01       	movw	r14, r28
    23c8:	f9 2e       	mov	r15, r25
    23ca:	e7 01       	movw	r28, r14
    23cc:	20 97       	sbiw	r28, 0x00	; 0
    23ce:	31 f0       	breq	.+12     	; 0x23dc <calloc+0x3a>
    23d0:	8e 2d       	mov	r24, r14
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	a8 01       	movw	r20, r16
    23d8:	0e 94 33 13 	call	0x2666	; 0x2666 <memset>
    23dc:	7e 01       	movw	r14, r28
    23de:	ce 01       	movw	r24, r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	e6 e0       	ldi	r30, 0x06	; 6
    23e6:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__epilogue_restores__+0x18>

000023ea <malloc>:
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	82 30       	cpi	r24, 0x02	; 2
    23f0:	91 05       	cpc	r25, r1
    23f2:	10 f4       	brcc	.+4      	; 0x23f8 <malloc+0xe>
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	e0 91 73 03 	lds	r30, 0x0373
    23fc:	f0 91 74 03 	lds	r31, 0x0374
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	26 c0       	rjmp	.+76     	; 0x2456 <malloc+0x6c>
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	68 17       	cp	r22, r24
    2410:	79 07       	cpc	r23, r25
    2412:	e0 f0       	brcs	.+56     	; 0x244c <malloc+0x62>
    2414:	68 17       	cp	r22, r24
    2416:	79 07       	cpc	r23, r25
    2418:	81 f4       	brne	.+32     	; 0x243a <malloc+0x50>
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	21 15       	cp	r18, r1
    2420:	31 05       	cpc	r19, r1
    2422:	31 f0       	breq	.+12     	; 0x2430 <malloc+0x46>
    2424:	d9 01       	movw	r26, r18
    2426:	13 96       	adiw	r26, 0x03	; 3
    2428:	9c 93       	st	X, r25
    242a:	8e 93       	st	-X, r24
    242c:	12 97       	sbiw	r26, 0x02	; 2
    242e:	2b c0       	rjmp	.+86     	; 0x2486 <malloc+0x9c>
    2430:	90 93 74 03 	sts	0x0374, r25
    2434:	80 93 73 03 	sts	0x0373, r24
    2438:	26 c0       	rjmp	.+76     	; 0x2486 <malloc+0x9c>
    243a:	41 15       	cp	r20, r1
    243c:	51 05       	cpc	r21, r1
    243e:	19 f0       	breq	.+6      	; 0x2446 <malloc+0x5c>
    2440:	64 17       	cp	r22, r20
    2442:	75 07       	cpc	r23, r21
    2444:	18 f4       	brcc	.+6      	; 0x244c <malloc+0x62>
    2446:	ab 01       	movw	r20, r22
    2448:	e9 01       	movw	r28, r18
    244a:	df 01       	movw	r26, r30
    244c:	9f 01       	movw	r18, r30
    244e:	72 81       	ldd	r23, Z+2	; 0x02
    2450:	63 81       	ldd	r22, Z+3	; 0x03
    2452:	e7 2f       	mov	r30, r23
    2454:	f6 2f       	mov	r31, r22
    2456:	30 97       	sbiw	r30, 0x00	; 0
    2458:	c1 f6       	brne	.-80     	; 0x240a <malloc+0x20>
    245a:	41 15       	cp	r20, r1
    245c:	51 05       	cpc	r21, r1
    245e:	01 f1       	breq	.+64     	; 0x24a0 <malloc+0xb6>
    2460:	48 1b       	sub	r20, r24
    2462:	59 0b       	sbc	r21, r25
    2464:	44 30       	cpi	r20, 0x04	; 4
    2466:	51 05       	cpc	r21, r1
    2468:	80 f4       	brcc	.+32     	; 0x248a <malloc+0xa0>
    246a:	12 96       	adiw	r26, 0x02	; 2
    246c:	8d 91       	ld	r24, X+
    246e:	9c 91       	ld	r25, X
    2470:	13 97       	sbiw	r26, 0x03	; 3
    2472:	20 97       	sbiw	r28, 0x00	; 0
    2474:	19 f0       	breq	.+6      	; 0x247c <malloc+0x92>
    2476:	9b 83       	std	Y+3, r25	; 0x03
    2478:	8a 83       	std	Y+2, r24	; 0x02
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <malloc+0x9a>
    247c:	90 93 74 03 	sts	0x0374, r25
    2480:	80 93 73 03 	sts	0x0373, r24
    2484:	fd 01       	movw	r30, r26
    2486:	32 96       	adiw	r30, 0x02	; 2
    2488:	46 c0       	rjmp	.+140    	; 0x2516 <malloc+0x12c>
    248a:	fd 01       	movw	r30, r26
    248c:	e4 0f       	add	r30, r20
    248e:	f5 1f       	adc	r31, r21
    2490:	81 93       	st	Z+, r24
    2492:	91 93       	st	Z+, r25
    2494:	42 50       	subi	r20, 0x02	; 2
    2496:	50 40       	sbci	r21, 0x00	; 0
    2498:	11 96       	adiw	r26, 0x01	; 1
    249a:	5c 93       	st	X, r21
    249c:	4e 93       	st	-X, r20
    249e:	3b c0       	rjmp	.+118    	; 0x2516 <malloc+0x12c>
    24a0:	20 91 71 03 	lds	r18, 0x0371
    24a4:	30 91 72 03 	lds	r19, 0x0372
    24a8:	21 15       	cp	r18, r1
    24aa:	31 05       	cpc	r19, r1
    24ac:	41 f4       	brne	.+16     	; 0x24be <malloc+0xd4>
    24ae:	20 91 5d 03 	lds	r18, 0x035D
    24b2:	30 91 5e 03 	lds	r19, 0x035E
    24b6:	30 93 72 03 	sts	0x0372, r19
    24ba:	20 93 71 03 	sts	0x0371, r18
    24be:	20 91 5f 03 	lds	r18, 0x035F
    24c2:	30 91 60 03 	lds	r19, 0x0360
    24c6:	21 15       	cp	r18, r1
    24c8:	31 05       	cpc	r19, r1
    24ca:	41 f4       	brne	.+16     	; 0x24dc <malloc+0xf2>
    24cc:	2d b7       	in	r18, 0x3d	; 61
    24ce:	3e b7       	in	r19, 0x3e	; 62
    24d0:	40 91 5b 03 	lds	r20, 0x035B
    24d4:	50 91 5c 03 	lds	r21, 0x035C
    24d8:	24 1b       	sub	r18, r20
    24da:	35 0b       	sbc	r19, r21
    24dc:	e0 91 71 03 	lds	r30, 0x0371
    24e0:	f0 91 72 03 	lds	r31, 0x0372
    24e4:	e2 17       	cp	r30, r18
    24e6:	f3 07       	cpc	r31, r19
    24e8:	a0 f4       	brcc	.+40     	; 0x2512 <malloc+0x128>
    24ea:	2e 1b       	sub	r18, r30
    24ec:	3f 0b       	sbc	r19, r31
    24ee:	28 17       	cp	r18, r24
    24f0:	39 07       	cpc	r19, r25
    24f2:	78 f0       	brcs	.+30     	; 0x2512 <malloc+0x128>
    24f4:	ac 01       	movw	r20, r24
    24f6:	4e 5f       	subi	r20, 0xFE	; 254
    24f8:	5f 4f       	sbci	r21, 0xFF	; 255
    24fa:	24 17       	cp	r18, r20
    24fc:	35 07       	cpc	r19, r21
    24fe:	48 f0       	brcs	.+18     	; 0x2512 <malloc+0x128>
    2500:	4e 0f       	add	r20, r30
    2502:	5f 1f       	adc	r21, r31
    2504:	50 93 72 03 	sts	0x0372, r21
    2508:	40 93 71 03 	sts	0x0371, r20
    250c:	81 93       	st	Z+, r24
    250e:	91 93       	st	Z+, r25
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <malloc+0x12c>
    2512:	e0 e0       	ldi	r30, 0x00	; 0
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	cf 01       	movw	r24, r30
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	08 95       	ret

0000251e <free>:
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	09 f4       	brne	.+2      	; 0x2528 <free+0xa>
    2526:	91 c0       	rjmp	.+290    	; 0x264a <free+0x12c>
    2528:	fc 01       	movw	r30, r24
    252a:	32 97       	sbiw	r30, 0x02	; 2
    252c:	13 82       	std	Z+3, r1	; 0x03
    252e:	12 82       	std	Z+2, r1	; 0x02
    2530:	60 91 73 03 	lds	r22, 0x0373
    2534:	70 91 74 03 	lds	r23, 0x0374
    2538:	61 15       	cp	r22, r1
    253a:	71 05       	cpc	r23, r1
    253c:	81 f4       	brne	.+32     	; 0x255e <free+0x40>
    253e:	20 81       	ld	r18, Z
    2540:	31 81       	ldd	r19, Z+1	; 0x01
    2542:	28 0f       	add	r18, r24
    2544:	39 1f       	adc	r19, r25
    2546:	80 91 71 03 	lds	r24, 0x0371
    254a:	90 91 72 03 	lds	r25, 0x0372
    254e:	82 17       	cp	r24, r18
    2550:	93 07       	cpc	r25, r19
    2552:	99 f5       	brne	.+102    	; 0x25ba <free+0x9c>
    2554:	f0 93 72 03 	sts	0x0372, r31
    2558:	e0 93 71 03 	sts	0x0371, r30
    255c:	76 c0       	rjmp	.+236    	; 0x264a <free+0x12c>
    255e:	db 01       	movw	r26, r22
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	02 c0       	rjmp	.+4      	; 0x256a <free+0x4c>
    2566:	cd 01       	movw	r24, r26
    2568:	d9 01       	movw	r26, r18
    256a:	ae 17       	cp	r26, r30
    256c:	bf 07       	cpc	r27, r31
    256e:	48 f4       	brcc	.+18     	; 0x2582 <free+0x64>
    2570:	12 96       	adiw	r26, 0x02	; 2
    2572:	2d 91       	ld	r18, X+
    2574:	3c 91       	ld	r19, X
    2576:	13 97       	sbiw	r26, 0x03	; 3
    2578:	21 15       	cp	r18, r1
    257a:	31 05       	cpc	r19, r1
    257c:	a1 f7       	brne	.-24     	; 0x2566 <free+0x48>
    257e:	cd 01       	movw	r24, r26
    2580:	21 c0       	rjmp	.+66     	; 0x25c4 <free+0xa6>
    2582:	b3 83       	std	Z+3, r27	; 0x03
    2584:	a2 83       	std	Z+2, r26	; 0x02
    2586:	ef 01       	movw	r28, r30
    2588:	49 91       	ld	r20, Y+
    258a:	59 91       	ld	r21, Y+
    258c:	9e 01       	movw	r18, r28
    258e:	24 0f       	add	r18, r20
    2590:	35 1f       	adc	r19, r21
    2592:	a2 17       	cp	r26, r18
    2594:	b3 07       	cpc	r27, r19
    2596:	79 f4       	brne	.+30     	; 0x25b6 <free+0x98>
    2598:	2d 91       	ld	r18, X+
    259a:	3c 91       	ld	r19, X
    259c:	11 97       	sbiw	r26, 0x01	; 1
    259e:	24 0f       	add	r18, r20
    25a0:	35 1f       	adc	r19, r21
    25a2:	2e 5f       	subi	r18, 0xFE	; 254
    25a4:	3f 4f       	sbci	r19, 0xFF	; 255
    25a6:	31 83       	std	Z+1, r19	; 0x01
    25a8:	20 83       	st	Z, r18
    25aa:	12 96       	adiw	r26, 0x02	; 2
    25ac:	2d 91       	ld	r18, X+
    25ae:	3c 91       	ld	r19, X
    25b0:	13 97       	sbiw	r26, 0x03	; 3
    25b2:	33 83       	std	Z+3, r19	; 0x03
    25b4:	22 83       	std	Z+2, r18	; 0x02
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	29 f4       	brne	.+10     	; 0x25c4 <free+0xa6>
    25ba:	f0 93 74 03 	sts	0x0374, r31
    25be:	e0 93 73 03 	sts	0x0373, r30
    25c2:	43 c0       	rjmp	.+134    	; 0x264a <free+0x12c>
    25c4:	dc 01       	movw	r26, r24
    25c6:	13 96       	adiw	r26, 0x03	; 3
    25c8:	fc 93       	st	X, r31
    25ca:	ee 93       	st	-X, r30
    25cc:	12 97       	sbiw	r26, 0x02	; 2
    25ce:	4d 91       	ld	r20, X+
    25d0:	5d 91       	ld	r21, X+
    25d2:	a4 0f       	add	r26, r20
    25d4:	b5 1f       	adc	r27, r21
    25d6:	ea 17       	cp	r30, r26
    25d8:	fb 07       	cpc	r31, r27
    25da:	69 f4       	brne	.+26     	; 0x25f6 <free+0xd8>
    25dc:	20 81       	ld	r18, Z
    25de:	31 81       	ldd	r19, Z+1	; 0x01
    25e0:	24 0f       	add	r18, r20
    25e2:	35 1f       	adc	r19, r21
    25e4:	2e 5f       	subi	r18, 0xFE	; 254
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	ec 01       	movw	r28, r24
    25ea:	39 83       	std	Y+1, r19	; 0x01
    25ec:	28 83       	st	Y, r18
    25ee:	22 81       	ldd	r18, Z+2	; 0x02
    25f0:	33 81       	ldd	r19, Z+3	; 0x03
    25f2:	3b 83       	std	Y+3, r19	; 0x03
    25f4:	2a 83       	std	Y+2, r18	; 0x02
    25f6:	e0 e0       	ldi	r30, 0x00	; 0
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <free+0xe2>
    25fc:	fb 01       	movw	r30, r22
    25fe:	bc 01       	movw	r22, r24
    2600:	db 01       	movw	r26, r22
    2602:	12 96       	adiw	r26, 0x02	; 2
    2604:	8d 91       	ld	r24, X+
    2606:	9c 91       	ld	r25, X
    2608:	13 97       	sbiw	r26, 0x03	; 3
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	b9 f7       	brne	.-18     	; 0x25fc <free+0xde>
    260e:	9b 01       	movw	r18, r22
    2610:	2e 5f       	subi	r18, 0xFE	; 254
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	8d 91       	ld	r24, X+
    2616:	9c 91       	ld	r25, X
    2618:	11 97       	sbiw	r26, 0x01	; 1
    261a:	82 0f       	add	r24, r18
    261c:	93 1f       	adc	r25, r19
    261e:	40 91 71 03 	lds	r20, 0x0371
    2622:	50 91 72 03 	lds	r21, 0x0372
    2626:	48 17       	cp	r20, r24
    2628:	59 07       	cpc	r21, r25
    262a:	79 f4       	brne	.+30     	; 0x264a <free+0x12c>
    262c:	30 97       	sbiw	r30, 0x00	; 0
    262e:	29 f4       	brne	.+10     	; 0x263a <free+0x11c>
    2630:	10 92 74 03 	sts	0x0374, r1
    2634:	10 92 73 03 	sts	0x0373, r1
    2638:	02 c0       	rjmp	.+4      	; 0x263e <free+0x120>
    263a:	13 82       	std	Z+3, r1	; 0x03
    263c:	12 82       	std	Z+2, r1	; 0x02
    263e:	22 50       	subi	r18, 0x02	; 2
    2640:	30 40       	sbci	r19, 0x00	; 0
    2642:	30 93 72 03 	sts	0x0372, r19
    2646:	20 93 71 03 	sts	0x0371, r18
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <strnlen_P>:
    2650:	fc 01       	movw	r30, r24
    2652:	05 90       	lpm	r0, Z+
    2654:	61 50       	subi	r22, 0x01	; 1
    2656:	70 40       	sbci	r23, 0x00	; 0
    2658:	01 10       	cpse	r0, r1
    265a:	d8 f7       	brcc	.-10     	; 0x2652 <strnlen_P+0x2>
    265c:	80 95       	com	r24
    265e:	90 95       	com	r25
    2660:	8e 0f       	add	r24, r30
    2662:	9f 1f       	adc	r25, r31
    2664:	08 95       	ret

00002666 <memset>:
    2666:	dc 01       	movw	r26, r24
    2668:	01 c0       	rjmp	.+2      	; 0x266c <memset+0x6>
    266a:	6d 93       	st	X+, r22
    266c:	41 50       	subi	r20, 0x01	; 1
    266e:	50 40       	sbci	r21, 0x00	; 0
    2670:	e0 f7       	brcc	.-8      	; 0x266a <memset+0x4>
    2672:	08 95       	ret

00002674 <strnlen>:
    2674:	fc 01       	movw	r30, r24
    2676:	61 50       	subi	r22, 0x01	; 1
    2678:	70 40       	sbci	r23, 0x00	; 0
    267a:	01 90       	ld	r0, Z+
    267c:	01 10       	cpse	r0, r1
    267e:	d8 f7       	brcc	.-10     	; 0x2676 <strnlen+0x2>
    2680:	80 95       	com	r24
    2682:	90 95       	com	r25
    2684:	8e 0f       	add	r24, r30
    2686:	9f 1f       	adc	r25, r31
    2688:	08 95       	ret

0000268a <fputc>:
    268a:	0f 93       	push	r16
    268c:	1f 93       	push	r17
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	8c 01       	movw	r16, r24
    2694:	eb 01       	movw	r28, r22
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	81 ff       	sbrs	r24, 1
    269a:	1b c0       	rjmp	.+54     	; 0x26d2 <fputc+0x48>
    269c:	82 ff       	sbrs	r24, 2
    269e:	0d c0       	rjmp	.+26     	; 0x26ba <fputc+0x30>
    26a0:	2e 81       	ldd	r18, Y+6	; 0x06
    26a2:	3f 81       	ldd	r19, Y+7	; 0x07
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	9d 81       	ldd	r25, Y+5	; 0x05
    26a8:	28 17       	cp	r18, r24
    26aa:	39 07       	cpc	r19, r25
    26ac:	64 f4       	brge	.+24     	; 0x26c6 <fputc+0x3c>
    26ae:	e8 81       	ld	r30, Y
    26b0:	f9 81       	ldd	r31, Y+1	; 0x01
    26b2:	01 93       	st	Z+, r16
    26b4:	f9 83       	std	Y+1, r31	; 0x01
    26b6:	e8 83       	st	Y, r30
    26b8:	06 c0       	rjmp	.+12     	; 0x26c6 <fputc+0x3c>
    26ba:	e8 85       	ldd	r30, Y+8	; 0x08
    26bc:	f9 85       	ldd	r31, Y+9	; 0x09
    26be:	80 2f       	mov	r24, r16
    26c0:	09 95       	icall
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	31 f4       	brne	.+12     	; 0x26d2 <fputc+0x48>
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	9f 83       	std	Y+7, r25	; 0x07
    26ce:	8e 83       	std	Y+6, r24	; 0x06
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <fputc+0x4c>
    26d2:	0f ef       	ldi	r16, 0xFF	; 255
    26d4:	1f ef       	ldi	r17, 0xFF	; 255
    26d6:	c8 01       	movw	r24, r16
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	08 95       	ret

000026e2 <__ultoa_invert>:
    26e2:	fa 01       	movw	r30, r20
    26e4:	aa 27       	eor	r26, r26
    26e6:	28 30       	cpi	r18, 0x08	; 8
    26e8:	51 f1       	breq	.+84     	; 0x273e <__ultoa_invert+0x5c>
    26ea:	20 31       	cpi	r18, 0x10	; 16
    26ec:	81 f1       	breq	.+96     	; 0x274e <__ultoa_invert+0x6c>
    26ee:	e8 94       	clt
    26f0:	6f 93       	push	r22
    26f2:	6e 7f       	andi	r22, 0xFE	; 254
    26f4:	6e 5f       	subi	r22, 0xFE	; 254
    26f6:	7f 4f       	sbci	r23, 0xFF	; 255
    26f8:	8f 4f       	sbci	r24, 0xFF	; 255
    26fa:	9f 4f       	sbci	r25, 0xFF	; 255
    26fc:	af 4f       	sbci	r26, 0xFF	; 255
    26fe:	b1 e0       	ldi	r27, 0x01	; 1
    2700:	3e d0       	rcall	.+124    	; 0x277e <__ultoa_invert+0x9c>
    2702:	b4 e0       	ldi	r27, 0x04	; 4
    2704:	3c d0       	rcall	.+120    	; 0x277e <__ultoa_invert+0x9c>
    2706:	67 0f       	add	r22, r23
    2708:	78 1f       	adc	r23, r24
    270a:	89 1f       	adc	r24, r25
    270c:	9a 1f       	adc	r25, r26
    270e:	a1 1d       	adc	r26, r1
    2710:	68 0f       	add	r22, r24
    2712:	79 1f       	adc	r23, r25
    2714:	8a 1f       	adc	r24, r26
    2716:	91 1d       	adc	r25, r1
    2718:	a1 1d       	adc	r26, r1
    271a:	6a 0f       	add	r22, r26
    271c:	71 1d       	adc	r23, r1
    271e:	81 1d       	adc	r24, r1
    2720:	91 1d       	adc	r25, r1
    2722:	a1 1d       	adc	r26, r1
    2724:	20 d0       	rcall	.+64     	; 0x2766 <__ultoa_invert+0x84>
    2726:	09 f4       	brne	.+2      	; 0x272a <__ultoa_invert+0x48>
    2728:	68 94       	set
    272a:	3f 91       	pop	r19
    272c:	2a e0       	ldi	r18, 0x0A	; 10
    272e:	26 9f       	mul	r18, r22
    2730:	11 24       	eor	r1, r1
    2732:	30 19       	sub	r19, r0
    2734:	30 5d       	subi	r19, 0xD0	; 208
    2736:	31 93       	st	Z+, r19
    2738:	de f6       	brtc	.-74     	; 0x26f0 <__ultoa_invert+0xe>
    273a:	cf 01       	movw	r24, r30
    273c:	08 95       	ret
    273e:	46 2f       	mov	r20, r22
    2740:	47 70       	andi	r20, 0x07	; 7
    2742:	40 5d       	subi	r20, 0xD0	; 208
    2744:	41 93       	st	Z+, r20
    2746:	b3 e0       	ldi	r27, 0x03	; 3
    2748:	0f d0       	rcall	.+30     	; 0x2768 <__ultoa_invert+0x86>
    274a:	c9 f7       	brne	.-14     	; 0x273e <__ultoa_invert+0x5c>
    274c:	f6 cf       	rjmp	.-20     	; 0x273a <__ultoa_invert+0x58>
    274e:	46 2f       	mov	r20, r22
    2750:	4f 70       	andi	r20, 0x0F	; 15
    2752:	40 5d       	subi	r20, 0xD0	; 208
    2754:	4a 33       	cpi	r20, 0x3A	; 58
    2756:	18 f0       	brcs	.+6      	; 0x275e <__ultoa_invert+0x7c>
    2758:	49 5d       	subi	r20, 0xD9	; 217
    275a:	31 fd       	sbrc	r19, 1
    275c:	40 52       	subi	r20, 0x20	; 32
    275e:	41 93       	st	Z+, r20
    2760:	02 d0       	rcall	.+4      	; 0x2766 <__ultoa_invert+0x84>
    2762:	a9 f7       	brne	.-22     	; 0x274e <__ultoa_invert+0x6c>
    2764:	ea cf       	rjmp	.-44     	; 0x273a <__ultoa_invert+0x58>
    2766:	b4 e0       	ldi	r27, 0x04	; 4
    2768:	a6 95       	lsr	r26
    276a:	97 95       	ror	r25
    276c:	87 95       	ror	r24
    276e:	77 95       	ror	r23
    2770:	67 95       	ror	r22
    2772:	ba 95       	dec	r27
    2774:	c9 f7       	brne	.-14     	; 0x2768 <__ultoa_invert+0x86>
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	61 05       	cpc	r22, r1
    277a:	71 05       	cpc	r23, r1
    277c:	08 95       	ret
    277e:	9b 01       	movw	r18, r22
    2780:	ac 01       	movw	r20, r24
    2782:	0a 2e       	mov	r0, r26
    2784:	06 94       	lsr	r0
    2786:	57 95       	ror	r21
    2788:	47 95       	ror	r20
    278a:	37 95       	ror	r19
    278c:	27 95       	ror	r18
    278e:	ba 95       	dec	r27
    2790:	c9 f7       	brne	.-14     	; 0x2784 <__ultoa_invert+0xa2>
    2792:	62 0f       	add	r22, r18
    2794:	73 1f       	adc	r23, r19
    2796:	84 1f       	adc	r24, r20
    2798:	95 1f       	adc	r25, r21
    279a:	a0 1d       	adc	r26, r0
    279c:	08 95       	ret

0000279e <_exit>:
    279e:	f8 94       	cli

000027a0 <__stop_program>:
    27a0:	ff cf       	rjmp	.-2      	; 0x27a0 <__stop_program>
