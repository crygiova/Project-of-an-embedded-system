
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000240  00800100  0000245c  000024f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000245c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800340  00800340  00002730  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00002730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003f3  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031e2  00000000  00000000  00003cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019a2  00000000  00000000  00006eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002e82  00000000  00000000  00008857  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000390  00000000  00000000  0000b6dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008b5  00000000  00000000  0000ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000171a  00000000  00000000  0000c321  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007c7  00000000  00000000  0000da3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f0  00000000  00000000  0000e202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e5       	ldi	r30, 0x5C	; 92
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 34       	cpi	r26, 0x40	; 64
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a0 e4       	ldi	r26, 0x40	; 64
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 34       	cpi	r26, 0x4B	; 75
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 9c 01 	call	0x338	; 0x338 <main>
      c6:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initCAN>:
#include "can.h"


volatile uint8_t flagMCP; //FLAG for MCP 

void initCAN(enum canMode mode){
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <initCAN+0x6>
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t t;
	switch (mode){
      da:	8a 81       	ldd	r24, Y+2	; 0x02
      dc:	88 2f       	mov	r24, r24
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	91 05       	cpc	r25, r1
      e4:	a9 f0       	breq	.+42     	; 0x110 <initCAN+0x42>
      e6:	83 30       	cpi	r24, 0x03	; 3
      e8:	91 05       	cpc	r25, r1
      ea:	34 f4       	brge	.+12     	; 0xf8 <initCAN+0x2a>
      ec:	00 97       	sbiw	r24, 0x00	; 0
      ee:	59 f0       	breq	.+22     	; 0x106 <initCAN+0x38>
      f0:	81 30       	cpi	r24, 0x01	; 1
      f2:	91 05       	cpc	r25, r1
      f4:	51 f0       	breq	.+20     	; 0x10a <initCAN+0x3c>
      f6:	15 c0       	rjmp	.+42     	; 0x122 <initCAN+0x54>
      f8:	83 30       	cpi	r24, 0x03	; 3
      fa:	91 05       	cpc	r25, r1
      fc:	61 f0       	breq	.+24     	; 0x116 <initCAN+0x48>
      fe:	84 30       	cpi	r24, 0x04	; 4
     100:	91 05       	cpc	r25, r1
     102:	61 f0       	breq	.+24     	; 0x11c <initCAN+0x4e>
     104:	0e c0       	rjmp	.+28     	; 0x122 <initCAN+0x54>
		case(NORMAL):
			t = 0x00;			
     106:	19 82       	std	Y+1, r1	; 0x01
			break;
     108:	0c c0       	rjmp	.+24     	; 0x122 <initCAN+0x54>
		case(SLEEP):
			t = 0x20;
     10a:	80 e2       	ldi	r24, 0x20	; 32
     10c:	89 83       	std	Y+1, r24	; 0x01
			break;
     10e:	09 c0       	rjmp	.+18     	; 0x122 <initCAN+0x54>
		case(LOOPBACK):
			t = 0x40;			
     110:	80 e4       	ldi	r24, 0x40	; 64
     112:	89 83       	std	Y+1, r24	; 0x01
			break;
     114:	06 c0       	rjmp	.+12     	; 0x122 <initCAN+0x54>
		case(LISTEN):
			t = 0x60;
     116:	80 e6       	ldi	r24, 0x60	; 96
     118:	89 83       	std	Y+1, r24	; 0x01
			break;		
     11a:	03 c0       	rjmp	.+6      	; 0x122 <initCAN+0x54>
		case(CONFIG):
			t = 0x80;
     11c:	80 e8       	ldi	r24, 0x80	; 128
     11e:	89 83       	std	Y+1, r24	; 0x01
			break;
     120:	00 00       	nop
	};
	
	writeMCP(MCP_CANCTRL,t); //Sets mode
     122:	8f e0       	ldi	r24, 0x0F	; 15
     124:	69 81       	ldd	r22, Y+1	; 0x01
     126:	0e 94 2b 05 	call	0xa56	; 0xa56 <writeMCP>
	writeMCP(MCP_RXB0CTRL, 0b01100000); //Disable all Filters buffer 0 //Todo, by names
     12a:	80 e6       	ldi	r24, 0x60	; 96
     12c:	60 e6       	ldi	r22, 0x60	; 96
     12e:	0e 94 2b 05 	call	0xa56	; 0xa56 <writeMCP>
	writeMCP(MCP_RXB1CTRL, 0b01100000); //Disable all Filters buffer 1
     132:	80 e7       	ldi	r24, 0x70	; 112
     134:	60 e6       	ldi	r22, 0x60	; 96
     136:	0e 94 2b 05 	call	0xa56	; 0xa56 <writeMCP>
	writeMCP(MCP_CANINTF,0x00); //Clear Pending Interrupts
     13a:	8c e2       	ldi	r24, 0x2C	; 44
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	0e 94 2b 05 	call	0xa56	; 0xa56 <writeMCP>
	writeMCP(MCP_CANINTE, 0x1F); //Enable reception interrupts on both buffers
     142:	8b e2       	ldi	r24, 0x2B	; 43
     144:	6f e1       	ldi	r22, 0x1F	; 31
     146:	0e 94 2b 05 	call	0xa56	; 0xa56 <writeMCP>
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <__vector_5>:
 */ 

#include "globals.h"

ISR(INT4_vect) //Interrupt routine for the CAN Transciver
{
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	00 90 5b 00 	lds	r0, 0x005B
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	2f 93       	push	r18
     166:	3f 93       	push	r19
     168:	4f 93       	push	r20
     16a:	5f 93       	push	r21
     16c:	6f 93       	push	r22
     16e:	7f 93       	push	r23
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	0f 92       	push	r0
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
	uint8_t mcp_flags;
	mcp_flags = readMCP(MCP_CANINTF);
     186:	8c e2       	ldi	r24, 0x2C	; 44
     188:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <readMCP>
     18c:	89 83       	std	Y+1, r24	; 0x01
	writeMCP(MCP_CANINTF,0x00); //Clear Flags
     18e:	8c e2       	ldi	r24, 0x2C	; 44
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	0e 94 2b 05 	call	0xa56	; 0xa56 <writeMCP>
	
	printf("CAN MCP General interrupt handler \r\n");
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
	
    if(mcp_flags & 1 << 0) {  //RX0IF
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	81 70       	andi	r24, 0x01	; 1
     1a6:	90 70       	andi	r25, 0x00	; 0
     1a8:	88 23       	and	r24, r24
     1aa:	49 f0       	breq	.+18     	; 0x1be <__vector_5+0x6a>
		printf("CAN MCP Interrupt RX0IF Triggered \r\n");	
     1ac:	84 e2       	ldi	r24, 0x24	; 36
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
		flagMCP |= 	(1 << 0);
     1b4:	80 91 40 03 	lds	r24, 0x0340
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	80 93 40 03 	sts	0x0340, r24
		
	}  if(mcp_flags & 1 << 1) { //RX1IF
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	88 2f       	mov	r24, r24
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	82 70       	andi	r24, 0x02	; 2
     1c6:	90 70       	andi	r25, 0x00	; 0
     1c8:	00 97       	sbiw	r24, 0x00	; 0
     1ca:	49 f0       	breq	.+18     	; 0x1de <__vector_5+0x8a>
		printf("CAN MCP Interrupt RX1IF Triggered \r\n");
     1cc:	88 e4       	ldi	r24, 0x48	; 72
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
		flagMCP |= 	(1 << 1);
     1d4:	80 91 40 03 	lds	r24, 0x0340
     1d8:	82 60       	ori	r24, 0x02	; 2
     1da:	80 93 40 03 	sts	0x0340, r24
		
	}  if(mcp_flags & 1 << 2) { //TX0IF
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	88 2f       	mov	r24, r24
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	84 70       	andi	r24, 0x04	; 4
     1e6:	90 70       	andi	r25, 0x00	; 0
     1e8:	00 97       	sbiw	r24, 0x00	; 0
     1ea:	49 f0       	breq	.+18     	; 0x1fe <__vector_5+0xaa>
		printf("CAN MCP Interrupt TX0IF Triggered \r\n");
     1ec:	8c e6       	ldi	r24, 0x6C	; 108
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
		flagMCP |= 	(1 << 2);
     1f4:	80 91 40 03 	lds	r24, 0x0340
     1f8:	84 60       	ori	r24, 0x04	; 4
     1fa:	80 93 40 03 	sts	0x0340, r24
		
	}  if(mcp_flags & 1 << 3) { //TX1IF
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	88 70       	andi	r24, 0x08	; 8
     206:	90 70       	andi	r25, 0x00	; 0
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	49 f0       	breq	.+18     	; 0x21e <__vector_5+0xca>
		printf("CAN MCP Interrupt TX1IF Triggered \r\n");
     20c:	80 e9       	ldi	r24, 0x90	; 144
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
		flagMCP |= 	(1 << 3);
     214:	80 91 40 03 	lds	r24, 0x0340
     218:	88 60       	ori	r24, 0x08	; 8
     21a:	80 93 40 03 	sts	0x0340, r24
		
	}  if(mcp_flags & 1 << 4) { //TX2IF
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	88 2f       	mov	r24, r24
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	80 71       	andi	r24, 0x10	; 16
     226:	90 70       	andi	r25, 0x00	; 0
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	49 f0       	breq	.+18     	; 0x23e <__vector_5+0xea>
		printf("CAN MCP Interrupt TX2IF Triggered \r\n");
     22c:	84 eb       	ldi	r24, 0xB4	; 180
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
		flagMCP |= 	(1 << 4);
     234:	80 91 40 03 	lds	r24, 0x0340
     238:	80 61       	ori	r24, 0x10	; 16
     23a:	80 93 40 03 	sts	0x0340, r24
		
	}  if(mcp_flags & 1 << 5) { //ERRIF
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	80 72       	andi	r24, 0x20	; 32
     246:	90 70       	andi	r25, 0x00	; 0
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	c1 f0       	breq	.+48     	; 0x27c <__vector_5+0x128>
		printf("CAN MCP Interrupt ERRIF Triggered  with error code 0x%x\r\n", readMCP(MCP_EFLG));
     24c:	8d e2       	ldi	r24, 0x2D	; 45
     24e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <readMCP>
     252:	28 2f       	mov	r18, r24
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	00 d0       	rcall	.+0      	; 0x258 <__vector_5+0x104>
     258:	00 d0       	rcall	.+0      	; 0x25a <__vector_5+0x106>
     25a:	8d b7       	in	r24, 0x3d	; 61
     25c:	9e b7       	in	r25, 0x3e	; 62
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	48 ed       	ldi	r20, 0xD8	; 216
     262:	51 e0       	ldi	r21, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	51 83       	std	Z+1, r21	; 0x01
     268:	40 83       	st	Z, r20
     26a:	fc 01       	movw	r30, r24
     26c:	33 83       	std	Z+3, r19	; 0x03
     26e:	22 83       	std	Z+2, r18	; 0x02
     270:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <printf>
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
		
		
	}  if(mcp_flags & 1 << 6) { //WAKIF
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	88 2f       	mov	r24, r24
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	80 74       	andi	r24, 0x40	; 64
     284:	90 70       	andi	r25, 0x00	; 0
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	21 f0       	breq	.+8      	; 0x292 <__vector_5+0x13e>
		printf("CAN MCP Interrupt WAKIF\r\n");
     28a:	82 e1       	ldi	r24, 0x12	; 18
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
		
		
	}  if(mcp_flags & 1 << 7) { //MERRF
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	88 23       	and	r24, r24
     296:	24 f4       	brge	.+8      	; 0x2a0 <__vector_5+0x14c>
		printf("CAN MCP Interrupt MERRF\r\n");
     298:	8b e2       	ldi	r24, 0x2B	; 43
     29a:	92 e0       	ldi	r25, 0x02	; 2
     29c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
	} 

		


}	
     2a0:	0f 90       	pop	r0
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	bf 91       	pop	r27
     2ac:	af 91       	pop	r26
     2ae:	9f 91       	pop	r25
     2b0:	8f 91       	pop	r24
     2b2:	7f 91       	pop	r23
     2b4:	6f 91       	pop	r22
     2b6:	5f 91       	pop	r21
     2b8:	4f 91       	pop	r20
     2ba:	3f 91       	pop	r19
     2bc:	2f 91       	pop	r18
     2be:	0f 90       	pop	r0
     2c0:	00 92 5b 00 	sts	0x005B, r0
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <initInterrupts>:
 
void initInterrupts(){
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
// 	EMCUCR &= ~(1<<ISC2); //Set interrupt on 0 at INT2
// 	GICR |= (1<<INT1);
// 	GICR |= (1<<INT0); 
// 	GICR |= (1<<INT2); 
//TODO: Configure to our interrupts
	DDRE &= ~(1<<PE4); //Set PE5 as Input
     2d6:	82 e2       	ldi	r24, 0x22	; 34
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	22 e2       	ldi	r18, 0x22	; 34
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	f9 01       	movw	r30, r18
     2e0:	20 81       	ld	r18, Z
     2e2:	2f 7e       	andi	r18, 0xEF	; 239
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
	PORTD |= (1<<PE4); //Set pullup for PE5
     2e8:	82 e3       	ldi	r24, 0x32	; 50
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	22 e3       	ldi	r18, 0x32	; 50
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	20 61       	ori	r18, 0x10	; 16
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
	EICRB |= (1<<ISC41);
     2fa:	8a e5       	ldi	r24, 0x5A	; 90
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	2a e5       	ldi	r18, 0x5A	; 90
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	f9 01       	movw	r30, r18
     304:	20 81       	ld	r18, Z
     306:	22 60       	ori	r18, 0x02	; 2
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
	EICRB &= ~(1<<ISC40); //Set interrupts on falling edge at PE5
     30c:	8a e5       	ldi	r24, 0x5A	; 90
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	2a e5       	ldi	r18, 0x5A	; 90
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	2e 7f       	andi	r18, 0xFE	; 254
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
	EIMSK |= (1<<INT4); //Enable interrupt on PE5
     31e:	89 e5       	ldi	r24, 0x59	; 89
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	29 e5       	ldi	r18, 0x59	; 89
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	f9 01       	movw	r30, r18
     328:	20 81       	ld	r18, Z
     32a:	20 61       	ori	r18, 0x10	; 16
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
	sei();
     330:	78 94       	sei
}
     332:	cf 91       	pop	r28
     334:	df 91       	pop	r29
     336:	08 95       	ret

00000338 <main>:




int main(void)
{
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	df 93       	push	r29
     33e:	cf 93       	push	r28
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	cf 55       	subi	r28, 0x5F	; 95
     346:	d0 40       	sbci	r29, 0x00	; 0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
	struct canMessage m2s,rm;
	initUART(UBBR);
     352:	8b e1       	ldi	r24, 0x1B	; 27
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 a9 07 	call	0xf52	; 0xf52 <initUART>
	initInterrupts();
     35a:	0e 94 67 01 	call	0x2ce	; 0x2ce <initInterrupts>
	initSPI();
     35e:	0e 94 16 04 	call	0x82c	; 0x82c <initSPI>
	printf("\r\n \r\n Hi, I am NODE 2 and this is NOT jackass, but we are getting there\r\n");
     362:	84 e4       	ldi	r24, 0x44	; 68
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <puts>
	resetMCP();
     36a:	0e 94 34 04 	call	0x868	; 0x868 <resetMCP>
	initCAN(NORMAL);	
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 67 00 	call	0xce	; 0xce <initCAN>
	writeMCP(MCP_CANINTF, 0x01);
     374:	8c e2       	ldi	r24, 0x2C	; 44
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	0e 94 2b 05 	call	0xa56	; 0xa56 <writeMCP>
	char newCurrent = 0;
     37c:	19 82       	std	Y+1, r1	; 0x01
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	a0 ea       	ldi	r26, 0xA0	; 160
     384:	b0 e4       	ldi	r27, 0x40	; 64
     386:	8a 83       	std	Y+2, r24	; 0x02
     388:	9b 83       	std	Y+3, r25	; 0x03
     38a:	ac 83       	std	Y+4, r26	; 0x04
     38c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     38e:	6a 81       	ldd	r22, Y+2	; 0x02
     390:	7b 81       	ldd	r23, Y+3	; 0x03
     392:	8c 81       	ldd	r24, Y+4	; 0x04
     394:	9d 81       	ldd	r25, Y+5	; 0x05
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	4a e7       	ldi	r20, 0x7A	; 122
     39c:	54 e4       	ldi	r21, 0x44	; 68
     39e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     3a2:	dc 01       	movw	r26, r24
     3a4:	cb 01       	movw	r24, r22
     3a6:	8e 83       	std	Y+6, r24	; 0x06
     3a8:	9f 83       	std	Y+7, r25	; 0x07
     3aa:	a8 87       	std	Y+8, r26	; 0x08
     3ac:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     3ae:	11 e0       	ldi	r17, 0x01	; 1
     3b0:	6e 81       	ldd	r22, Y+6	; 0x06
     3b2:	7f 81       	ldd	r23, Y+7	; 0x07
     3b4:	88 85       	ldd	r24, Y+8	; 0x08
     3b6:	99 85       	ldd	r25, Y+9	; 0x09
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e8       	ldi	r20, 0x80	; 128
     3be:	5f e3       	ldi	r21, 0x3F	; 63
     3c0:	0e 94 40 0b 	call	0x1680	; 0x1680 <__ltsf2>
     3c4:	88 23       	and	r24, r24
     3c6:	0c f0       	brlt	.+2      	; 0x3ca <main+0x92>
     3c8:	10 e0       	ldi	r17, 0x00	; 0
     3ca:	11 23       	and	r17, r17
     3cc:	29 f0       	breq	.+10     	; 0x3d8 <main+0xa0>
		__ticks = 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	9b 87       	std	Y+11, r25	; 0x0b
     3d4:	8a 87       	std	Y+10, r24	; 0x0a
     3d6:	46 c0       	rjmp	.+140    	; 0x464 <main+0x12c>
	else if (__tmp > 65535)
     3d8:	11 e0       	ldi	r17, 0x01	; 1
     3da:	6e 81       	ldd	r22, Y+6	; 0x06
     3dc:	7f 81       	ldd	r23, Y+7	; 0x07
     3de:	88 85       	ldd	r24, Y+8	; 0x08
     3e0:	99 85       	ldd	r25, Y+9	; 0x09
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	3f ef       	ldi	r19, 0xFF	; 255
     3e6:	4f e7       	ldi	r20, 0x7F	; 127
     3e8:	57 e4       	ldi	r21, 0x47	; 71
     3ea:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__gtsf2>
     3ee:	18 16       	cp	r1, r24
     3f0:	0c f0       	brlt	.+2      	; 0x3f4 <main+0xbc>
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	11 23       	and	r17, r17
     3f6:	61 f1       	breq	.+88     	; 0x450 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f8:	6a 81       	ldd	r22, Y+2	; 0x02
     3fa:	7b 81       	ldd	r23, Y+3	; 0x03
     3fc:	8c 81       	ldd	r24, Y+4	; 0x04
     3fe:	9d 81       	ldd	r25, Y+5	; 0x05
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e2       	ldi	r20, 0x20	; 32
     406:	51 e4       	ldi	r21, 0x41	; 65
     408:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	bc 01       	movw	r22, r24
     412:	cd 01       	movw	r24, r26
     414:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixunssfsi>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	9b 87       	std	Y+11, r25	; 0x0b
     41e:	8a 87       	std	Y+10, r24	; 0x0a
     420:	12 c0       	rjmp	.+36     	; 0x446 <main+0x10e>
     422:	84 e6       	ldi	r24, 0x64	; 100
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	9d 87       	std	Y+13, r25	; 0x0d
     428:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     42a:	8c 85       	ldd	r24, Y+12	; 0x0c
     42c:	9d 85       	ldd	r25, Y+13	; 0x0d
     42e:	8c 01       	movw	r16, r24
     430:	c8 01       	movw	r24, r16
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <main+0xfa>
     436:	8c 01       	movw	r16, r24
     438:	1d 87       	std	Y+13, r17	; 0x0d
     43a:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43c:	8a 85       	ldd	r24, Y+10	; 0x0a
     43e:	9b 85       	ldd	r25, Y+11	; 0x0b
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	9b 87       	std	Y+11, r25	; 0x0b
     444:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     446:	8a 85       	ldd	r24, Y+10	; 0x0a
     448:	9b 85       	ldd	r25, Y+11	; 0x0b
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	51 f7       	brne	.-44     	; 0x422 <main+0xea>
     44e:	17 c0       	rjmp	.+46     	; 0x47e <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     450:	6e 81       	ldd	r22, Y+6	; 0x06
     452:	7f 81       	ldd	r23, Y+7	; 0x07
     454:	88 85       	ldd	r24, Y+8	; 0x08
     456:	99 85       	ldd	r25, Y+9	; 0x09
     458:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixunssfsi>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	9b 87       	std	Y+11, r25	; 0x0b
     462:	8a 87       	std	Y+10, r24	; 0x0a
     464:	8a 85       	ldd	r24, Y+10	; 0x0a
     466:	9b 85       	ldd	r25, Y+11	; 0x0b
     468:	9f 87       	std	Y+15, r25	; 0x0f
     46a:	8e 87       	std	Y+14, r24	; 0x0e
     46c:	8e 85       	ldd	r24, Y+14	; 0x0e
     46e:	9f 85       	ldd	r25, Y+15	; 0x0f
     470:	8c 01       	movw	r16, r24
     472:	d8 01       	movw	r26, r16
     474:	11 97       	sbiw	r26, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <main+0x13c>
     478:	8d 01       	movw	r16, r26
     47a:	1f 87       	std	Y+15, r17	; 0x0f
     47c:	0e 87       	std	Y+14, r16	; 0x0e
		struct canMessage m0,m1, current;
	
	 while(1){
		
		//receiving
		if(flagMCP & 1 << 0) {
     47e:	80 91 40 03 	lds	r24, 0x0340
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	81 70       	andi	r24, 0x01	; 1
     488:	90 70       	andi	r25, 0x00	; 0
     48a:	88 23       	and	r24, r24
     48c:	09 f4       	brne	.+2      	; 0x490 <main+0x158>
     48e:	5e c0       	rjmp	.+188    	; 0x54c <main+0x214>
			flagMCP &= ~(1 << 0);
     490:	80 91 40 03 	lds	r24, 0x0340
     494:	8e 7f       	andi	r24, 0xFE	; 254
     496:	80 93 40 03 	sts	0x0340, r24
			m0 = readRxBufferMCP(0);
     49a:	ce 01       	movw	r24, r28
     49c:	8b 5a       	subi	r24, 0xAB	; 171
     49e:	9f 4f       	sbci	r25, 0xFF	; 255
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	0e 94 2c 06 	call	0xc58	; 0xc58 <readRxBufferMCP>
     4a6:	9e 01       	movw	r18, r28
     4a8:	2b 5a       	subi	r18, 0xAB	; 171
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	ce 01       	movw	r24, r28
     4ae:	c4 96       	adiw	r24, 0x34	; 52
     4b0:	4b e0       	ldi	r20, 0x0B	; 11
     4b2:	f9 01       	movw	r30, r18
     4b4:	00 80       	ld	r0, Z
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	dc 01       	movw	r26, r24
     4bc:	0c 92       	st	X, r0
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	41 50       	subi	r20, 0x01	; 1
     4c2:	44 23       	and	r20, r20
     4c4:	b1 f7       	brne	.-20     	; 0x4b2 <main+0x17a>
			current = m0;
     4c6:	ce 01       	movw	r24, r28
     4c8:	86 5b       	subi	r24, 0xB6	; 182
     4ca:	9f 4f       	sbci	r25, 0xFF	; 255
     4cc:	9e 01       	movw	r18, r28
     4ce:	2c 5c       	subi	r18, 0xCC	; 204
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	4b e0       	ldi	r20, 0x0B	; 11
     4d4:	f9 01       	movw	r30, r18
     4d6:	00 80       	ld	r0, Z
     4d8:	2f 5f       	subi	r18, 0xFF	; 255
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	dc 01       	movw	r26, r24
     4de:	0c 92       	st	X, r0
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	41 50       	subi	r20, 0x01	; 1
     4e4:	44 23       	and	r20, r20
     4e6:	b1 f7       	brne	.-20     	; 0x4d4 <main+0x19c>
			printf ("Buffer 0 ID: %d, Size: %d, Data: %s \r\n", m0.id, m0.size, m0.data);
     4e8:	4c a9       	ldd	r20, Y+52	; 0x34
     4ea:	5d a9       	ldd	r21, Y+53	; 0x35
     4ec:	8e a9       	ldd	r24, Y+54	; 0x36
     4ee:	28 2f       	mov	r18, r24
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	ed b7       	in	r30, 0x3d	; 61
     4f4:	fe b7       	in	r31, 0x3e	; 62
     4f6:	38 97       	sbiw	r30, 0x08	; 8
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	fe bf       	out	0x3e, r31	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	ed bf       	out	0x3d, r30	; 61
     502:	8d b7       	in	r24, 0x3d	; 61
     504:	9e b7       	in	r25, 0x3e	; 62
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	6d e8       	ldi	r22, 0x8D	; 141
     50a:	72 e0       	ldi	r23, 0x02	; 2
     50c:	dc 01       	movw	r26, r24
     50e:	6d 93       	st	X+, r22
     510:	7c 93       	st	X, r23
     512:	fc 01       	movw	r30, r24
     514:	53 83       	std	Z+3, r21	; 0x03
     516:	42 83       	std	Z+2, r20	; 0x02
     518:	dc 01       	movw	r26, r24
     51a:	15 96       	adiw	r26, 0x05	; 5
     51c:	3c 93       	st	X, r19
     51e:	2e 93       	st	-X, r18
     520:	14 97       	sbiw	r26, 0x04	; 4
     522:	9e 01       	movw	r18, r28
     524:	2c 5c       	subi	r18, 0xCC	; 204
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	2d 5f       	subi	r18, 0xFD	; 253
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	fc 01       	movw	r30, r24
     52e:	37 83       	std	Z+7, r19	; 0x07
     530:	26 83       	std	Z+6, r18	; 0x06
     532:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <printf>
     536:	8d b7       	in	r24, 0x3d	; 61
     538:	9e b7       	in	r25, 0x3e	; 62
     53a:	08 96       	adiw	r24, 0x08	; 8
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	9e bf       	out	0x3e, r25	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	8d bf       	out	0x3d, r24	; 61
			newCurrent = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	6d c0       	rjmp	.+218    	; 0x626 <main+0x2ee>
		}
		
		else if(flagMCP & 1 << 1) {
     54c:	80 91 40 03 	lds	r24, 0x0340
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	82 70       	andi	r24, 0x02	; 2
     556:	90 70       	andi	r25, 0x00	; 0
     558:	00 97       	sbiw	r24, 0x00	; 0
     55a:	09 f4       	brne	.+2      	; 0x55e <main+0x226>
     55c:	64 c0       	rjmp	.+200    	; 0x626 <main+0x2ee>
			flagMCP &= ~(1 << 1);
     55e:	80 91 40 03 	lds	r24, 0x0340
     562:	8d 7f       	andi	r24, 0xFD	; 253
     564:	80 93 40 03 	sts	0x0340, r24
			m1 = readRxBufferMCP(1);
     568:	ce 01       	movw	r24, r28
     56a:	8b 5a       	subi	r24, 0xAB	; 171
     56c:	9f 4f       	sbci	r25, 0xFF	; 255
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	0e 94 2c 06 	call	0xc58	; 0xc58 <readRxBufferMCP>
     574:	9e 01       	movw	r18, r28
     576:	2b 5a       	subi	r18, 0xAB	; 171
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	ce 01       	movw	r24, r28
     57c:	cf 96       	adiw	r24, 0x3f	; 63
     57e:	4b e0       	ldi	r20, 0x0B	; 11
     580:	d9 01       	movw	r26, r18
     582:	0c 90       	ld	r0, X
     584:	2f 5f       	subi	r18, 0xFF	; 255
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	fc 01       	movw	r30, r24
     58a:	00 82       	st	Z, r0
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	41 50       	subi	r20, 0x01	; 1
     590:	44 23       	and	r20, r20
     592:	b1 f7       	brne	.-20     	; 0x580 <main+0x248>
			current = m1;
     594:	ce 01       	movw	r24, r28
     596:	86 5b       	subi	r24, 0xB6	; 182
     598:	9f 4f       	sbci	r25, 0xFF	; 255
     59a:	9e 01       	movw	r18, r28
     59c:	21 5c       	subi	r18, 0xC1	; 193
     59e:	3f 4f       	sbci	r19, 0xFF	; 255
     5a0:	4b e0       	ldi	r20, 0x0B	; 11
     5a2:	d9 01       	movw	r26, r18
     5a4:	0c 90       	ld	r0, X
     5a6:	2f 5f       	subi	r18, 0xFF	; 255
     5a8:	3f 4f       	sbci	r19, 0xFF	; 255
     5aa:	fc 01       	movw	r30, r24
     5ac:	00 82       	st	Z, r0
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	41 50       	subi	r20, 0x01	; 1
     5b2:	44 23       	and	r20, r20
     5b4:	b1 f7       	brne	.-20     	; 0x5a2 <main+0x26a>
			printf ("Buffer 1 ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
     5b6:	ce 01       	movw	r24, r28
     5b8:	cf 96       	adiw	r24, 0x3f	; 63
     5ba:	dc 01       	movw	r26, r24
     5bc:	4d 91       	ld	r20, X+
     5be:	5c 91       	ld	r21, X
     5c0:	ce 01       	movw	r24, r28
     5c2:	8f 5b       	subi	r24, 0xBF	; 191
     5c4:	9f 4f       	sbci	r25, 0xFF	; 255
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	28 2f       	mov	r18, r24
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	8d b7       	in	r24, 0x3d	; 61
     5d0:	9e b7       	in	r25, 0x3e	; 62
     5d2:	08 97       	sbiw	r24, 0x08	; 8
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	9e bf       	out	0x3e, r25	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	8d bf       	out	0x3d, r24	; 61
     5de:	8d b7       	in	r24, 0x3d	; 61
     5e0:	9e b7       	in	r25, 0x3e	; 62
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	64 eb       	ldi	r22, 0xB4	; 180
     5e6:	72 e0       	ldi	r23, 0x02	; 2
     5e8:	dc 01       	movw	r26, r24
     5ea:	6d 93       	st	X+, r22
     5ec:	7c 93       	st	X, r23
     5ee:	fc 01       	movw	r30, r24
     5f0:	53 83       	std	Z+3, r21	; 0x03
     5f2:	42 83       	std	Z+2, r20	; 0x02
     5f4:	dc 01       	movw	r26, r24
     5f6:	15 96       	adiw	r26, 0x05	; 5
     5f8:	3c 93       	st	X, r19
     5fa:	2e 93       	st	-X, r18
     5fc:	14 97       	sbiw	r26, 0x04	; 4
     5fe:	9e 01       	movw	r18, r28
     600:	21 5c       	subi	r18, 0xC1	; 193
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	2d 5f       	subi	r18, 0xFD	; 253
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	fc 01       	movw	r30, r24
     60a:	37 83       	std	Z+7, r19	; 0x07
     60c:	26 83       	std	Z+6, r18	; 0x06
     60e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <printf>
     612:	8d b7       	in	r24, 0x3d	; 61
     614:	9e b7       	in	r25, 0x3e	; 62
     616:	08 96       	adiw	r24, 0x08	; 8
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	9e bf       	out	0x3e, r25	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	8d bf       	out	0x3d, r24	; 61
			newCurrent = 1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(newCurrent) {
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	88 23       	and	r24, r24
     62a:	09 f4       	brne	.+2      	; 0x62e <main+0x2f6>
     62c:	7e c0       	rjmp	.+252    	; 0x72a <main+0x3f2>
		
			switch (current.id){
     62e:	ce 01       	movw	r24, r28
     630:	86 5b       	subi	r24, 0xB6	; 182
     632:	9f 4f       	sbci	r25, 0xFF	; 255
     634:	dc 01       	movw	r26, r24
     636:	8d 91       	ld	r24, X+
     638:	9c 91       	ld	r25, X
     63a:	11 97       	sbiw	r26, 0x01	; 1
     63c:	8a 30       	cpi	r24, 0x0A	; 10
     63e:	91 05       	cpc	r25, r1
     640:	e9 f5       	brne	.+122    	; 0x6bc <main+0x384>
				case JOY_MESSAGE:
					printf("Joystick X: %d    Y: %d   DIR: %d \r\n", current.data[0],current.data[1],current.data[2]);
     642:	ce 01       	movw	r24, r28
     644:	86 5b       	subi	r24, 0xB6	; 182
     646:	9f 4f       	sbci	r25, 0xFF	; 255
     648:	fc 01       	movw	r30, r24
     64a:	83 81       	ldd	r24, Z+3	; 0x03
     64c:	68 2f       	mov	r22, r24
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	ce 01       	movw	r24, r28
     652:	86 5b       	subi	r24, 0xB6	; 182
     654:	9f 4f       	sbci	r25, 0xFF	; 255
     656:	dc 01       	movw	r26, r24
     658:	14 96       	adiw	r26, 0x04	; 4
     65a:	8c 91       	ld	r24, X
     65c:	48 2f       	mov	r20, r24
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	ce 01       	movw	r24, r28
     662:	86 5b       	subi	r24, 0xB6	; 182
     664:	9f 4f       	sbci	r25, 0xFF	; 255
     666:	fc 01       	movw	r30, r24
     668:	85 81       	ldd	r24, Z+5	; 0x05
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	8d b7       	in	r24, 0x3d	; 61
     670:	9e b7       	in	r25, 0x3e	; 62
     672:	08 97       	sbiw	r24, 0x08	; 8
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	9e bf       	out	0x3e, r25	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	8d bf       	out	0x3d, r24	; 61
     67e:	8d b7       	in	r24, 0x3d	; 61
     680:	9e b7       	in	r25, 0x3e	; 62
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	eb ed       	ldi	r30, 0xDB	; 219
     686:	f2 e0       	ldi	r31, 0x02	; 2
     688:	dc 01       	movw	r26, r24
     68a:	ed 93       	st	X+, r30
     68c:	fc 93       	st	X, r31
     68e:	fc 01       	movw	r30, r24
     690:	73 83       	std	Z+3, r23	; 0x03
     692:	62 83       	std	Z+2, r22	; 0x02
     694:	dc 01       	movw	r26, r24
     696:	15 96       	adiw	r26, 0x05	; 5
     698:	5c 93       	st	X, r21
     69a:	4e 93       	st	-X, r20
     69c:	14 97       	sbiw	r26, 0x04	; 4
     69e:	fc 01       	movw	r30, r24
     6a0:	37 83       	std	Z+7, r19	; 0x07
     6a2:	26 83       	std	Z+6, r18	; 0x06
     6a4:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <printf>
     6a8:	8d b7       	in	r24, 0x3d	; 61
     6aa:	9e b7       	in	r25, 0x3e	; 62
     6ac:	08 96       	adiw	r24, 0x08	; 8
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	9e bf       	out	0x3e, r25	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	8d bf       	out	0x3d, r24	; 61
					newCurrent = 0;
     6b8:	19 82       	std	Y+1, r1	; 0x01
					break;
     6ba:	37 c0       	rjmp	.+110    	; 0x72a <main+0x3f2>
				default:
					newCurrent = 0;
     6bc:	19 82       	std	Y+1, r1	; 0x01
					printf ("Current CAN message ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
     6be:	ce 01       	movw	r24, r28
     6c0:	cf 96       	adiw	r24, 0x3f	; 63
     6c2:	dc 01       	movw	r26, r24
     6c4:	4d 91       	ld	r20, X+
     6c6:	5c 91       	ld	r21, X
     6c8:	ce 01       	movw	r24, r28
     6ca:	8f 5b       	subi	r24, 0xBF	; 191
     6cc:	9f 4f       	sbci	r25, 0xFF	; 255
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	8d b7       	in	r24, 0x3d	; 61
     6d8:	9e b7       	in	r25, 0x3e	; 62
     6da:	08 97       	sbiw	r24, 0x08	; 8
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	9e bf       	out	0x3e, r25	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	8d bf       	out	0x3d, r24	; 61
     6e6:	8d b7       	in	r24, 0x3d	; 61
     6e8:	9e b7       	in	r25, 0x3e	; 62
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	73 e0       	ldi	r23, 0x03	; 3
     6f0:	dc 01       	movw	r26, r24
     6f2:	6d 93       	st	X+, r22
     6f4:	7c 93       	st	X, r23
     6f6:	fc 01       	movw	r30, r24
     6f8:	53 83       	std	Z+3, r21	; 0x03
     6fa:	42 83       	std	Z+2, r20	; 0x02
     6fc:	dc 01       	movw	r26, r24
     6fe:	15 96       	adiw	r26, 0x05	; 5
     700:	3c 93       	st	X, r19
     702:	2e 93       	st	-X, r18
     704:	14 97       	sbiw	r26, 0x04	; 4
     706:	9e 01       	movw	r18, r28
     708:	21 5c       	subi	r18, 0xC1	; 193
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	2d 5f       	subi	r18, 0xFD	; 253
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	fc 01       	movw	r30, r24
     712:	37 83       	std	Z+7, r19	; 0x07
     714:	26 83       	std	Z+6, r18	; 0x06
     716:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <printf>
     71a:	8d b7       	in	r24, 0x3d	; 61
     71c:	9e b7       	in	r25, 0x3e	; 62
     71e:	08 96       	adiw	r24, 0x08	; 8
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	9e bf       	out	0x3e, r25	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	8d bf       	out	0x3d, r24	; 61
					break;
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	a8 e4       	ldi	r26, 0x48	; 72
     730:	b2 e4       	ldi	r27, 0x42	; 66
     732:	88 8b       	std	Y+16, r24	; 0x10
     734:	99 8b       	std	Y+17, r25	; 0x11
     736:	aa 8b       	std	Y+18, r26	; 0x12
     738:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     73a:	68 89       	ldd	r22, Y+16	; 0x10
     73c:	79 89       	ldd	r23, Y+17	; 0x11
     73e:	8a 89       	ldd	r24, Y+18	; 0x12
     740:	9b 89       	ldd	r25, Y+19	; 0x13
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	4a e7       	ldi	r20, 0x7A	; 122
     748:	54 e4       	ldi	r21, 0x44	; 68
     74a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	8c 8b       	std	Y+20, r24	; 0x14
     754:	9d 8b       	std	Y+21, r25	; 0x15
     756:	ae 8b       	std	Y+22, r26	; 0x16
     758:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     75a:	11 e0       	ldi	r17, 0x01	; 1
     75c:	6c 89       	ldd	r22, Y+20	; 0x14
     75e:	7d 89       	ldd	r23, Y+21	; 0x15
     760:	8e 89       	ldd	r24, Y+22	; 0x16
     762:	9f 89       	ldd	r25, Y+23	; 0x17
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e8       	ldi	r20, 0x80	; 128
     76a:	5f e3       	ldi	r21, 0x3F	; 63
     76c:	0e 94 40 0b 	call	0x1680	; 0x1680 <__ltsf2>
     770:	88 23       	and	r24, r24
     772:	0c f0       	brlt	.+2      	; 0x776 <main+0x43e>
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	11 23       	and	r17, r17
     778:	29 f0       	breq	.+10     	; 0x784 <main+0x44c>
		__ticks = 1;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	99 8f       	std	Y+25, r25	; 0x19
     780:	88 8f       	std	Y+24, r24	; 0x18
     782:	46 c0       	rjmp	.+140    	; 0x810 <main+0x4d8>
	else if (__tmp > 65535)
     784:	11 e0       	ldi	r17, 0x01	; 1
     786:	6c 89       	ldd	r22, Y+20	; 0x14
     788:	7d 89       	ldd	r23, Y+21	; 0x15
     78a:	8e 89       	ldd	r24, Y+22	; 0x16
     78c:	9f 89       	ldd	r25, Y+23	; 0x17
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	3f ef       	ldi	r19, 0xFF	; 255
     792:	4f e7       	ldi	r20, 0x7F	; 127
     794:	57 e4       	ldi	r21, 0x47	; 71
     796:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__gtsf2>
     79a:	18 16       	cp	r1, r24
     79c:	0c f0       	brlt	.+2      	; 0x7a0 <main+0x468>
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	11 23       	and	r17, r17
     7a2:	61 f1       	breq	.+88     	; 0x7fc <main+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a4:	68 89       	ldd	r22, Y+16	; 0x10
     7a6:	79 89       	ldd	r23, Y+17	; 0x11
     7a8:	8a 89       	ldd	r24, Y+18	; 0x12
     7aa:	9b 89       	ldd	r25, Y+19	; 0x13
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	40 e2       	ldi	r20, 0x20	; 32
     7b2:	51 e4       	ldi	r21, 0x41	; 65
     7b4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	bc 01       	movw	r22, r24
     7be:	cd 01       	movw	r24, r26
     7c0:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixunssfsi>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	99 8f       	std	Y+25, r25	; 0x19
     7ca:	88 8f       	std	Y+24, r24	; 0x18
     7cc:	12 c0       	rjmp	.+36     	; 0x7f2 <main+0x4ba>
     7ce:	84 e6       	ldi	r24, 0x64	; 100
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9b 8f       	std	Y+27, r25	; 0x1b
     7d4:	8a 8f       	std	Y+26, r24	; 0x1a
     7d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7da:	8c 01       	movw	r16, r24
     7dc:	d8 01       	movw	r26, r16
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <main+0x4a6>
     7e2:	8d 01       	movw	r16, r26
     7e4:	1b 8f       	std	Y+27, r17	; 0x1b
     7e6:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e8:	88 8d       	ldd	r24, Y+24	; 0x18
     7ea:	99 8d       	ldd	r25, Y+25	; 0x19
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	99 8f       	std	Y+25, r25	; 0x19
     7f0:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f2:	88 8d       	ldd	r24, Y+24	; 0x18
     7f4:	99 8d       	ldd	r25, Y+25	; 0x19
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	51 f7       	brne	.-44     	; 0x7ce <main+0x496>
// 		fillTxBufferMCP(2,m2s);
// 		requestToSendMCP(2);
	
	_delay_ms(50);
	
	}
     7fa:	41 ce       	rjmp	.-894    	; 0x47e <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fc:	6c 89       	ldd	r22, Y+20	; 0x14
     7fe:	7d 89       	ldd	r23, Y+21	; 0x15
     800:	8e 89       	ldd	r24, Y+22	; 0x16
     802:	9f 89       	ldd	r25, Y+23	; 0x17
     804:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixunssfsi>
     808:	dc 01       	movw	r26, r24
     80a:	cb 01       	movw	r24, r22
     80c:	99 8f       	std	Y+25, r25	; 0x19
     80e:	88 8f       	std	Y+24, r24	; 0x18
     810:	88 8d       	ldd	r24, Y+24	; 0x18
     812:	99 8d       	ldd	r25, Y+25	; 0x19
     814:	9d 8f       	std	Y+29, r25	; 0x1d
     816:	8c 8f       	std	Y+28, r24	; 0x1c
     818:	8c 8d       	ldd	r24, Y+28	; 0x1c
     81a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     81c:	8c 01       	movw	r16, r24
     81e:	f8 01       	movw	r30, r16
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <main+0x4e8>
     824:	8f 01       	movw	r16, r30
     826:	1d 8f       	std	Y+29, r17	; 0x1d
     828:	0c 8f       	std	Y+28, r16	; 0x1c
     82a:	29 ce       	rjmp	.-942    	; 0x47e <main+0x146>

0000082c <initSPI>:
 */ 


#include "spi.h"

void initSPI(){
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
	//Setting pins and directions 
	//MOSI, SCK, !SS as output
	DDRB = (1 << DDB2) | (1 << DDB1)  | (1 << DDB0);
     834:	87 e3       	ldi	r24, 0x37	; 55
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	27 e0       	ldi	r18, 0x07	; 7
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18
	//DDRB &= ~(1 << PB6);
	PORTB |=  (1 << PB0); //Pullup to avoid wrong fallback to slave mode
     83e:	88 e3       	ldi	r24, 0x38	; 56
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	28 e3       	ldi	r18, 0x38	; 56
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	21 60       	ori	r18, 0x01	; 1
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
	//MISO is Overriden as input, TODO: check if it work
	SPCR |=   (1 << SPE) | (1 << MSTR) | (1<<SPR0) ; // fosc/16
     850:	8d e2       	ldi	r24, 0x2D	; 45
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	2d e2       	ldi	r18, 0x2D	; 45
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	21 65       	ori	r18, 0x51	; 81
     85e:	fc 01       	movw	r30, r24
     860:	20 83       	st	Z, r18
	//configured as Master, NOT producing interrupts
	
}
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <resetMCP>:

void resetMCP(){
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	2e 97       	sbiw	r28, 0x0e	; 14
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
	select_mcp();
     880:	88 e3       	ldi	r24, 0x38	; 56
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	28 e3       	ldi	r18, 0x38	; 56
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	f9 01       	movw	r30, r18
     88a:	20 81       	ld	r18, Z
     88c:	2e 7f       	andi	r18, 0xFE	; 254
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
	SPDR = MCP_RESET;
     892:	8f e2       	ldi	r24, 0x2F	; 47
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	20 ec       	ldi	r18, 0xC0	; 192
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     wait_spi();
     89c:	8e e2       	ldi	r24, 0x2E	; 46
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	fc 01       	movw	r30, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	88 23       	and	r24, r24
     8a6:	d4 f7       	brge	.-12     	; 0x89c <resetMCP+0x34>
	deselect_mcp();
     8a8:	88 e3       	ldi	r24, 0x38	; 56
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	28 e3       	ldi	r18, 0x38	; 56
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	21 60       	ori	r18, 0x01	; 1
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a0 e2       	ldi	r26, 0x20	; 32
     8c0:	b1 e4       	ldi	r27, 0x41	; 65
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	ab 83       	std	Y+3, r26	; 0x03
     8c8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ca:	69 81       	ldd	r22, Y+1	; 0x01
     8cc:	7a 81       	ldd	r23, Y+2	; 0x02
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	9c 81       	ldd	r25, Y+4	; 0x04
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	4a e7       	ldi	r20, 0x7A	; 122
     8d8:	54 e4       	ldi	r21, 0x44	; 68
     8da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	8d 83       	std	Y+5, r24	; 0x05
     8e4:	9e 83       	std	Y+6, r25	; 0x06
     8e6:	af 83       	std	Y+7, r26	; 0x07
     8e8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	6d 81       	ldd	r22, Y+5	; 0x05
     8ee:	7e 81       	ldd	r23, Y+6	; 0x06
     8f0:	8f 81       	ldd	r24, Y+7	; 0x07
     8f2:	98 85       	ldd	r25, Y+8	; 0x08
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	5f e3       	ldi	r21, 0x3F	; 63
     8fc:	0e 94 40 0b 	call	0x1680	; 0x1680 <__ltsf2>
     900:	88 23       	and	r24, r24
     902:	0c f0       	brlt	.+2      	; 0x906 <resetMCP+0x9e>
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	11 23       	and	r17, r17
     908:	29 f0       	breq	.+10     	; 0x914 <resetMCP+0xac>
		__ticks = 1;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	9a 87       	std	Y+10, r25	; 0x0a
     910:	89 87       	std	Y+9, r24	; 0x09
     912:	46 c0       	rjmp	.+140    	; 0x9a0 <resetMCP+0x138>
	else if (__tmp > 65535)
     914:	11 e0       	ldi	r17, 0x01	; 1
     916:	6d 81       	ldd	r22, Y+5	; 0x05
     918:	7e 81       	ldd	r23, Y+6	; 0x06
     91a:	8f 81       	ldd	r24, Y+7	; 0x07
     91c:	98 85       	ldd	r25, Y+8	; 0x08
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	3f ef       	ldi	r19, 0xFF	; 255
     922:	4f e7       	ldi	r20, 0x7F	; 127
     924:	57 e4       	ldi	r21, 0x47	; 71
     926:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__gtsf2>
     92a:	18 16       	cp	r1, r24
     92c:	0c f0       	brlt	.+2      	; 0x930 <resetMCP+0xc8>
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	11 23       	and	r17, r17
     932:	61 f1       	breq	.+88     	; 0x98c <resetMCP+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     934:	69 81       	ldd	r22, Y+1	; 0x01
     936:	7a 81       	ldd	r23, Y+2	; 0x02
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e2       	ldi	r20, 0x20	; 32
     942:	51 e4       	ldi	r21, 0x41	; 65
     944:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixunssfsi>
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	9a 87       	std	Y+10, r25	; 0x0a
     95a:	89 87       	std	Y+9, r24	; 0x09
     95c:	12 c0       	rjmp	.+36     	; 0x982 <resetMCP+0x11a>
     95e:	84 e6       	ldi	r24, 0x64	; 100
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	9c 87       	std	Y+12, r25	; 0x0c
     964:	8b 87       	std	Y+11, r24	; 0x0b
     966:	8b 85       	ldd	r24, Y+11	; 0x0b
     968:	9c 85       	ldd	r25, Y+12	; 0x0c
     96a:	8c 01       	movw	r16, r24
     96c:	c8 01       	movw	r24, r16
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <resetMCP+0x106>
     972:	8c 01       	movw	r16, r24
     974:	1c 87       	std	Y+12, r17	; 0x0c
     976:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     978:	89 85       	ldd	r24, Y+9	; 0x09
     97a:	9a 85       	ldd	r25, Y+10	; 0x0a
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	9a 87       	std	Y+10, r25	; 0x0a
     980:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	9a 85       	ldd	r25, Y+10	; 0x0a
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	51 f7       	brne	.-44     	; 0x95e <resetMCP+0xf6>
     98a:	17 c0       	rjmp	.+46     	; 0x9ba <resetMCP+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     98c:	6d 81       	ldd	r22, Y+5	; 0x05
     98e:	7e 81       	ldd	r23, Y+6	; 0x06
     990:	8f 81       	ldd	r24, Y+7	; 0x07
     992:	98 85       	ldd	r25, Y+8	; 0x08
     994:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixunssfsi>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	9a 87       	std	Y+10, r25	; 0x0a
     99e:	89 87       	std	Y+9, r24	; 0x09
     9a0:	89 85       	ldd	r24, Y+9	; 0x09
     9a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a4:	9e 87       	std	Y+14, r25	; 0x0e
     9a6:	8d 87       	std	Y+13, r24	; 0x0d
     9a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ac:	8c 01       	movw	r16, r24
     9ae:	f8 01       	movw	r30, r16
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <resetMCP+0x148>
     9b4:	8f 01       	movw	r16, r30
     9b6:	1e 87       	std	Y+14, r17	; 0x0e
     9b8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	//Resets the SPI-CAN controller and waits for it to be ready
}
     9ba:	2e 96       	adiw	r28, 0x0e	; 14
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <readMCP>:

uint8_t readMCP(char address){
     9d0:	df 93       	push	r29
     9d2:	cf 93       	push	r28
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <readMCP+0x6>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t r;
	select_mcp();
     9dc:	88 e3       	ldi	r24, 0x38	; 56
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	28 e3       	ldi	r18, 0x38	; 56
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	f9 01       	movw	r30, r18
     9e6:	20 81       	ld	r18, Z
     9e8:	2e 7f       	andi	r18, 0xFE	; 254
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
	SPDR = MCP_READ;
     9ee:	8f e2       	ldi	r24, 0x2F	; 47
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	23 e0       	ldi	r18, 0x03	; 3
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
    wait_spi();
     9f8:	8e e2       	ldi	r24, 0x2E	; 46
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	fc 01       	movw	r30, r24
     9fe:	80 81       	ld	r24, Z
     a00:	88 23       	and	r24, r24
     a02:	d4 f7       	brge	.-12     	; 0x9f8 <readMCP+0x28>
	SPDR = address;
     a04:	8f e2       	ldi	r24, 0x2F	; 47
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	2a 81       	ldd	r18, Y+2	; 0x02
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
    wait_spi();
     a0e:	8e e2       	ldi	r24, 0x2E	; 46
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	88 23       	and	r24, r24
     a18:	d4 f7       	brge	.-12     	; 0xa0e <readMCP+0x3e>
	SPDR = MCP_DUMMY;
     a1a:	8f e2       	ldi	r24, 0x2F	; 47
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	fc 01       	movw	r30, r24
     a20:	10 82       	st	Z, r1
    wait_spi();
     a22:	8e e2       	ldi	r24, 0x2E	; 46
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	fc 01       	movw	r30, r24
     a28:	80 81       	ld	r24, Z
     a2a:	88 23       	and	r24, r24
     a2c:	d4 f7       	brge	.-12     	; 0xa22 <readMCP+0x52>
	r = SPDR;
     a2e:	8f e2       	ldi	r24, 0x2F	; 47
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	fc 01       	movw	r30, r24
     a34:	80 81       	ld	r24, Z
     a36:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
     a38:	88 e3       	ldi	r24, 0x38	; 56
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	28 e3       	ldi	r18, 0x38	; 56
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	f9 01       	movw	r30, r18
     a42:	20 81       	ld	r18, Z
     a44:	21 60       	ori	r18, 0x01	; 1
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
	return r;
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	cf 91       	pop	r28
     a52:	df 91       	pop	r29
     a54:	08 95       	ret

00000a56 <writeMCP>:

void writeMCP(char address, char data){
     a56:	df 93       	push	r29
     a58:	cf 93       	push	r28
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <writeMCP+0x6>
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	6a 83       	std	Y+2, r22	; 0x02
	select_mcp();
     a64:	88 e3       	ldi	r24, 0x38	; 56
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	28 e3       	ldi	r18, 0x38	; 56
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	f9 01       	movw	r30, r18
     a6e:	20 81       	ld	r18, Z
     a70:	2e 7f       	andi	r18, 0xFE	; 254
     a72:	fc 01       	movw	r30, r24
     a74:	20 83       	st	Z, r18
	SPDR = MCP_WRITE;
     a76:	8f e2       	ldi	r24, 0x2F	; 47
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	22 e0       	ldi	r18, 0x02	; 2
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 83       	st	Z, r18
    wait_spi();
     a80:	8e e2       	ldi	r24, 0x2E	; 46
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	fc 01       	movw	r30, r24
     a86:	80 81       	ld	r24, Z
     a88:	88 23       	and	r24, r24
     a8a:	d4 f7       	brge	.-12     	; 0xa80 <writeMCP+0x2a>
	SPDR = address;
     a8c:	8f e2       	ldi	r24, 0x2F	; 47
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	29 81       	ldd	r18, Y+1	; 0x01
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
    wait_spi();
     a96:	8e e2       	ldi	r24, 0x2E	; 46
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	fc 01       	movw	r30, r24
     a9c:	80 81       	ld	r24, Z
     a9e:	88 23       	and	r24, r24
     aa0:	d4 f7       	brge	.-12     	; 0xa96 <writeMCP+0x40>
	SPDR = data;
     aa2:	8f e2       	ldi	r24, 0x2F	; 47
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	2a 81       	ldd	r18, Y+2	; 0x02
     aa8:	fc 01       	movw	r30, r24
     aaa:	20 83       	st	Z, r18
    wait_spi();
     aac:	8e e2       	ldi	r24, 0x2E	; 46
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	88 23       	and	r24, r24
     ab6:	d4 f7       	brge	.-12     	; 0xaac <writeMCP+0x56>
	deselect_mcp();
     ab8:	88 e3       	ldi	r24, 0x38	; 56
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	28 e3       	ldi	r18, 0x38	; 56
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	21 60       	ori	r18, 0x01	; 1
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
}
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	cf 91       	pop	r28
     ad0:	df 91       	pop	r29
     ad2:	08 95       	ret

00000ad4 <requestToSendMCP>:


void requestToSendMCP(char buffer){
     ad4:	df 93       	push	r29
     ad6:	cf 93       	push	r28
     ad8:	0f 92       	push	r0
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	89 83       	std	Y+1, r24	; 0x01
	select_mcp();
     ae0:	88 e3       	ldi	r24, 0x38	; 56
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	28 e3       	ldi	r18, 0x38	; 56
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	f9 01       	movw	r30, r18
     aea:	20 81       	ld	r18, Z
     aec:	2e 7f       	andi	r18, 0xFE	; 254
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
	switch(buffer) {
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	91 05       	cpc	r25, r1
     afc:	59 f0       	breq	.+22     	; 0xb14 <requestToSendMCP+0x40>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	91 05       	cpc	r25, r1
     b02:	71 f0       	breq	.+28     	; 0xb20 <requestToSendMCP+0x4c>
     b04:	00 97       	sbiw	r24, 0x00	; 0
     b06:	91 f4       	brne	.+36     	; 0xb2c <requestToSendMCP+0x58>
		case 0:
			SPDR = MCP_RTS_TX0;
     b08:	8f e2       	ldi	r24, 0x2F	; 47
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	21 e8       	ldi	r18, 0x81	; 129
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18
			break;
     b12:	0c c0       	rjmp	.+24     	; 0xb2c <requestToSendMCP+0x58>
		case 1:
		    SPDR = MCP_RTS_TX1;
     b14:	8f e2       	ldi	r24, 0x2F	; 47
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	22 e8       	ldi	r18, 0x82	; 130
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
			break;
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <requestToSendMCP+0x58>
		case 2:	
		    SPDR = MCP_RTS_TX2;
     b20:	8f e2       	ldi	r24, 0x2F	; 47
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	24 e8       	ldi	r18, 0x84	; 132
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
			break;
     b2a:	00 00       	nop
	}
	wait_spi();
     b2c:	8e e2       	ldi	r24, 0x2E	; 46
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	88 23       	and	r24, r24
     b36:	d4 f7       	brge	.-12     	; 0xb2c <requestToSendMCP+0x58>
	deselect_mcp();
     b38:	88 e3       	ldi	r24, 0x38	; 56
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	28 e3       	ldi	r18, 0x38	; 56
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	f9 01       	movw	r30, r18
     b42:	20 81       	ld	r18, Z
     b44:	21 60       	ori	r18, 0x01	; 1
     b46:	fc 01       	movw	r30, r24
     b48:	20 83       	st	Z, r18
}
     b4a:	0f 90       	pop	r0
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <bitModifyMCP>:


void bitModifyMCP(char address, char mask, char data){
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	00 d0       	rcall	.+0      	; 0xb58 <bitModifyMCP+0x6>
     b58:	0f 92       	push	r0
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	6a 83       	std	Y+2, r22	; 0x02
     b62:	4b 83       	std	Y+3, r20	; 0x03
	select_mcp();
     b64:	88 e3       	ldi	r24, 0x38	; 56
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	28 e3       	ldi	r18, 0x38	; 56
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	f9 01       	movw	r30, r18
     b6e:	20 81       	ld	r18, Z
     b70:	2e 7f       	andi	r18, 0xFE	; 254
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
    SPDR = MCP_BITMOD;
     b76:	8f e2       	ldi	r24, 0x2F	; 47
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	25 e0       	ldi	r18, 0x05	; 5
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
    wait_spi();
     b80:	8e e2       	ldi	r24, 0x2E	; 46
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	fc 01       	movw	r30, r24
     b86:	80 81       	ld	r24, Z
     b88:	88 23       	and	r24, r24
     b8a:	d4 f7       	brge	.-12     	; 0xb80 <bitModifyMCP+0x2e>
	SPDR = address;
     b8c:	8f e2       	ldi	r24, 0x2F	; 47
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	29 81       	ldd	r18, Y+1	; 0x01
     b92:	fc 01       	movw	r30, r24
     b94:	20 83       	st	Z, r18
    wait_spi();
     b96:	8e e2       	ldi	r24, 0x2E	; 46
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	fc 01       	movw	r30, r24
     b9c:	80 81       	ld	r24, Z
     b9e:	88 23       	and	r24, r24
     ba0:	d4 f7       	brge	.-12     	; 0xb96 <bitModifyMCP+0x44>
	SPDR = mask;
     ba2:	8f e2       	ldi	r24, 0x2F	; 47
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	2a 81       	ldd	r18, Y+2	; 0x02
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
    wait_spi();
     bac:	8e e2       	ldi	r24, 0x2E	; 46
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	fc 01       	movw	r30, r24
     bb2:	80 81       	ld	r24, Z
     bb4:	88 23       	and	r24, r24
     bb6:	d4 f7       	brge	.-12     	; 0xbac <bitModifyMCP+0x5a>
	SPDR = data;
     bb8:	8f e2       	ldi	r24, 0x2F	; 47
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	2b 81       	ldd	r18, Y+3	; 0x03
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
    wait_spi();
     bc2:	8e e2       	ldi	r24, 0x2E	; 46
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	88 23       	and	r24, r24
     bcc:	d4 f7       	brge	.-12     	; 0xbc2 <bitModifyMCP+0x70>
	deselect_mcp();
     bce:	88 e3       	ldi	r24, 0x38	; 56
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	28 e3       	ldi	r18, 0x38	; 56
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	20 81       	ld	r18, Z
     bda:	21 60       	ori	r18, 0x01	; 1
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <readStatus>:

uint8_t readStatus(){
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	0f 92       	push	r0
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	uint8_t r;
	select_mcp();
     bf6:	88 e3       	ldi	r24, 0x38	; 56
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	28 e3       	ldi	r18, 0x38	; 56
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	f9 01       	movw	r30, r18
     c00:	20 81       	ld	r18, Z
     c02:	2e 7f       	andi	r18, 0xFE	; 254
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
    SPDR = MCP_READ_STATUS;
     c08:	8f e2       	ldi	r24, 0x2F	; 47
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	20 ea       	ldi	r18, 0xA0	; 160
     c0e:	fc 01       	movw	r30, r24
     c10:	20 83       	st	Z, r18
    wait_spi();
     c12:	8e e2       	ldi	r24, 0x2E	; 46
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	d4 f7       	brge	.-12     	; 0xc12 <readStatus+0x26>
	SPDR = MCP_DUMMY;
     c1e:	8f e2       	ldi	r24, 0x2F	; 47
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	10 82       	st	Z, r1
    wait_spi();
     c26:	8e e2       	ldi	r24, 0x2E	; 46
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	d4 f7       	brge	.-12     	; 0xc26 <readStatus+0x3a>
	r = SPDR;
     c32:	8f e2       	ldi	r24, 0x2F	; 47
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	fc 01       	movw	r30, r24
     c38:	80 81       	ld	r24, Z
     c3a:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
     c3c:	88 e3       	ldi	r24, 0x38	; 56
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	28 e3       	ldi	r18, 0x38	; 56
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	f9 01       	movw	r30, r18
     c46:	20 81       	ld	r18, Z
     c48:	21 60       	ori	r18, 0x01	; 1
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
	return r;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <readRxBufferMCP>:

struct canMessage readRxBufferMCP(char buffer){
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	2d 97       	sbiw	r28, 0x0d	; 13
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	ac 01       	movw	r20, r24
     c6e:	6d 87       	std	Y+13, r22	; 0x0d
	//Adresses are relative to Buffer 0
	struct canMessage m;
	
	select_mcp();
     c70:	88 e3       	ldi	r24, 0x38	; 56
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	28 e3       	ldi	r18, 0x38	; 56
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	2e 7f       	andi	r18, 0xFE	; 254
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
     c82:	8d 85       	ldd	r24, Y+13	; 0x0d
     c84:	88 23       	and	r24, r24
     c86:	31 f4       	brne	.+12     	; 0xc94 <readRxBufferMCP+0x3c>
     c88:	8f e2       	ldi	r24, 0x2F	; 47
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	20 e9       	ldi	r18, 0x90	; 144
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
	else SPDR = MCP_READ_RX1;
	wait_spi();
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <readRxBufferMCP+0x46>
	struct canMessage m;
	
	select_mcp();
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
	else SPDR = MCP_READ_RX1;
     c94:	8f e2       	ldi	r24, 0x2F	; 47
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	24 e9       	ldi	r18, 0x94	; 148
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 83       	st	Z, r18
	wait_spi();
     c9e:	8e e2       	ldi	r24, 0x2E	; 46
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	d4 f7       	brge	.-12     	; 0xc9e <readRxBufferMCP+0x46>
	
	SPDR = MCP_DUMMY;
     caa:	8f e2       	ldi	r24, 0x2F	; 47
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	10 82       	st	Z, r1
	wait_spi();
     cb2:	8e e2       	ldi	r24, 0x2E	; 46
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	fc 01       	movw	r30, r24
     cb8:	80 81       	ld	r24, Z
     cba:	88 23       	and	r24, r24
     cbc:	d4 f7       	brge	.-12     	; 0xcb2 <readRxBufferMCP+0x5a>
	
	m.id = SPDR<<3; //8 high bits recived and shifted to fit the 11bit format (0x61)
     cbe:	8f e2       	ldi	r24, 0x2F	; 47
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	9b 83       	std	Y+3, r25	; 0x03
     cd8:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
     cda:	8f e2       	ldi	r24, 0x2F	; 47
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	10 82       	st	Z, r1
	wait_spi();    //Recive lower 3 bits of id
     ce2:	8e e2       	ldi	r24, 0x2E	; 46
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	d4 f7       	brge	.-12     	; 0xce2 <readRxBufferMCP+0x8a>
	
	m.id |= (SPDR & 0xE0)>>5;  //Id is received, cleansed and constructed  (0x62)
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	8f e2       	ldi	r24, 0x2F	; 47
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	80 81       	ld	r24, Z
     cfa:	82 95       	swap	r24
     cfc:	86 95       	lsr	r24
     cfe:	87 70       	andi	r24, 0x07	; 7
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 70       	andi	r25, 0x00	; 0
     d06:	82 2b       	or	r24, r18
     d08:	93 2b       	or	r25, r19
     d0a:	9b 83       	std	Y+3, r25	; 0x03
     d0c:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
     d0e:	8f e2       	ldi	r24, 0x2F	; 47
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	fc 01       	movw	r30, r24
     d14:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x63)
     d16:	8e e2       	ldi	r24, 0x2E	; 46
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	fc 01       	movw	r30, r24
     d1c:	80 81       	ld	r24, Z
     d1e:	88 23       	and	r24, r24
     d20:	d4 f7       	brge	.-12     	; 0xd16 <readRxBufferMCP+0xbe>
	
	SPDR = MCP_DUMMY;  
     d22:	8f e2       	ldi	r24, 0x2F	; 47
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	fc 01       	movw	r30, r24
     d28:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x64)
     d2a:	8e e2       	ldi	r24, 0x2E	; 46
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	fc 01       	movw	r30, r24
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	d4 f7       	brge	.-12     	; 0xd2a <readRxBufferMCP+0xd2>
	
	SPDR = MCP_DUMMY;  
     d36:	8f e2       	ldi	r24, 0x2F	; 47
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	10 82       	st	Z, r1
	wait_spi();    //Reads DLC (size) (0x65)
     d3e:	8e e2       	ldi	r24, 0x2E	; 46
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	88 23       	and	r24, r24
     d48:	d4 f7       	brge	.-12     	; 0xd3e <readRxBufferMCP+0xe6>
	
	m.size = SPDR & 0x0F;
     d4a:	8f e2       	ldi	r24, 0x2F	; 47
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	fc 01       	movw	r30, r24
     d50:	80 81       	ld	r24, Z
     d52:	8f 70       	andi	r24, 0x0F	; 15
     d54:	8c 83       	std	Y+4, r24	; 0x04
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	1b c0       	rjmp	.+54     	; 0xd90 <readRxBufferMCP+0x138>
		SPDR = MCP_DUMMY;  
     d5a:	8f e2       	ldi	r24, 0x2F	; 47
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	fc 01       	movw	r30, r24
     d60:	10 82       	st	Z, r1
		wait_spi();    //Reads data (0x66..0x6D) 
     d62:	8e e2       	ldi	r24, 0x2E	; 46
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	fc 01       	movw	r30, r24
     d68:	80 81       	ld	r24, Z
     d6a:	88 23       	and	r24, r24
     d6c:	d4 f7       	brge	.-12     	; 0xd62 <readRxBufferMCP+0x10a>
		m.data[c] = SPDR;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	2f e2       	ldi	r18, 0x2F	; 47
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	60 81       	ld	r22, Z
     d7c:	9e 01       	movw	r18, r28
     d7e:	2b 5f       	subi	r18, 0xFB	; 251
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	fc 01       	movw	r30, r24
     d88:	60 83       	st	Z, r22
	
	m.size = SPDR & 0x0F;
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	89 17       	cp	r24, r25
     d96:	08 f3       	brcs	.-62     	; 0xd5a <readRxBufferMCP+0x102>
		SPDR = MCP_DUMMY;  
		wait_spi();    //Reads data (0x66..0x6D) 
		m.data[c] = SPDR;
	}
	
	deselect_mcp();
     d98:	88 e3       	ldi	r24, 0x38	; 56
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	28 e3       	ldi	r18, 0x38	; 56
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	f9 01       	movw	r30, r18
     da2:	20 81       	ld	r18, Z
     da4:	21 60       	ori	r18, 0x01	; 1
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18
	
	return m;
     daa:	ca 01       	movw	r24, r20
     dac:	9e 01       	movw	r18, r28
     dae:	2e 5f       	subi	r18, 0xFE	; 254
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	6b e0       	ldi	r22, 0x0B	; 11
     db4:	f9 01       	movw	r30, r18
     db6:	00 80       	ld	r0, Z
     db8:	2f 5f       	subi	r18, 0xFF	; 255
     dba:	3f 4f       	sbci	r19, 0xFF	; 255
     dbc:	fc 01       	movw	r30, r24
     dbe:	00 82       	st	Z, r0
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	61 50       	subi	r22, 0x01	; 1
     dc4:	66 23       	and	r22, r22
     dc6:	b1 f7       	brne	.-20     	; 0xdb4 <readRxBufferMCP+0x15c>
}
     dc8:	ca 01       	movw	r24, r20
     dca:	2d 96       	adiw	r28, 0x0d	; 13
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <fillTxBufferMCP>:


void fillTxBufferMCP(char buffer, struct canMessage m){
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	2e 97       	sbiw	r28, 0x0e	; 14
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	cc 82       	std	Y+4, r12	; 0x04
     e00:	dd 82       	std	Y+5, r13	; 0x05
     e02:	ee 82       	std	Y+6, r14	; 0x06
     e04:	ff 82       	std	Y+7, r15	; 0x07
     e06:	08 87       	std	Y+8, r16	; 0x08
     e08:	19 87       	std	Y+9, r17	; 0x09
     e0a:	2a 87       	std	Y+10, r18	; 0x0a
     e0c:	3b 87       	std	Y+11, r19	; 0x0b
     e0e:	4c 87       	std	Y+12, r20	; 0x0c
     e10:	5d 87       	std	Y+13, r21	; 0x0d
     e12:	6e 87       	std	Y+14, r22	; 0x0e
	//Adresses are relative to Buffer 0
	select_mcp();
     e14:	88 e3       	ldi	r24, 0x38	; 56
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	28 e3       	ldi	r18, 0x38	; 56
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	f9 01       	movw	r30, r18
     e1e:	20 81       	ld	r18, Z
     e20:	2e 7f       	andi	r18, 0xFE	; 254
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	88 23       	and	r24, r24
     e2a:	29 f4       	brne	.+10     	; 0xe36 <fillTxBufferMCP+0x5a>
     e2c:	8f e2       	ldi	r24, 0x2F	; 47
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	20 e4       	ldi	r18, 0x40	; 64
     e32:	fc 01       	movw	r30, r24
     e34:	20 83       	st	Z, r18
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	31 f4       	brne	.+12     	; 0xe48 <fillTxBufferMCP+0x6c>
     e3c:	8f e2       	ldi	r24, 0x2F	; 47
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	22 e4       	ldi	r18, 0x42	; 66
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
	else SPDR = MCP_LOAD_TX2;
	wait_spi();
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <fillTxBufferMCP+0x76>
void fillTxBufferMCP(char buffer, struct canMessage m){
	//Adresses are relative to Buffer 0
	select_mcp();
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
	else SPDR = MCP_LOAD_TX2;
     e48:	8f e2       	ldi	r24, 0x2F	; 47
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	24 e4       	ldi	r18, 0x44	; 68
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
	wait_spi();
     e52:	8e e2       	ldi	r24, 0x2E	; 46
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	fc 01       	movw	r30, r24
     e58:	80 81       	ld	r24, Z
     e5a:	88 23       	and	r24, r24
     e5c:	d4 f7       	brge	.-12     	; 0xe52 <fillTxBufferMCP+0x76>
	
	uint8_t t;
	
	t = m.id >> 3;
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	96 95       	lsr	r25
     e68:	87 95       	ror	r24
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
     e70:	8f e2       	ldi	r24, 0x2F	; 47
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	2a 81       	ldd	r18, Y+2	; 0x02
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
	wait_spi();  //sends higher 8 bits of ID to 0x31
     e7a:	8e e2       	ldi	r24, 0x2E	; 46
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	80 81       	ld	r24, Z
     e82:	88 23       	and	r24, r24
     e84:	d4 f7       	brge	.-12     	; 0xe7a <fillTxBufferMCP+0x9e>
	
	t = (m.id << 5) & 0xE0;
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	82 95       	swap	r24
     e8c:	88 0f       	add	r24, r24
     e8e:	80 7e       	andi	r24, 0xE0	; 224
     e90:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
     e92:	8f e2       	ldi	r24, 0x2F	; 47
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	2a 81       	ldd	r18, Y+2	; 0x02
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
	wait_spi(); //sends lower 3 bits to higher bits of 0x32
     e9c:	8e e2       	ldi	r24, 0x2E	; 46
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	88 23       	and	r24, r24
     ea6:	d4 f7       	brge	.-12     	; 0xe9c <fillTxBufferMCP+0xc0>
		
	SPDR = MCP_DUMMY;  
     ea8:	8f e2       	ldi	r24, 0x2F	; 47
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	fc 01       	movw	r30, r24
     eae:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill (0x33)
     eb0:	8e e2       	ldi	r24, 0x2E	; 46
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 81       	ld	r24, Z
     eb8:	88 23       	and	r24, r24
     eba:	d4 f7       	brge	.-12     	; 0xeb0 <fillTxBufferMCP+0xd4>
	
	SPDR = MCP_DUMMY;  
     ebc:	8f e2       	ldi	r24, 0x2F	; 47
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	fc 01       	movw	r30, r24
     ec2:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill(0x34)
     ec4:	8e e2       	ldi	r24, 0x2E	; 46
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	fc 01       	movw	r30, r24
     eca:	80 81       	ld	r24, Z
     ecc:	88 23       	and	r24, r24
     ece:	d4 f7       	brge	.-12     	; 0xec4 <fillTxBufferMCP+0xe8>
	
	
	SPDR = m.size & 0x0F;  
     ed0:	8f e2       	ldi	r24, 0x2F	; 47
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	2e 81       	ldd	r18, Y+6	; 0x06
     ed6:	2f 70       	andi	r18, 0x0F	; 15
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
     edc:	8e e2       	ldi	r24, 0x2E	; 46
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	fc 01       	movw	r30, r24
     ee2:	80 81       	ld	r24, Z
     ee4:	88 23       	and	r24, r24
     ee6:	d4 f7       	brge	.-12     	; 0xedc <fillTxBufferMCP+0x100>
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     ee8:	19 82       	std	Y+1, r1	; 0x01
     eea:	17 c0       	rjmp	.+46     	; 0xf1a <fillTxBufferMCP+0x13e>
		SPDR = m.data[c];  
     eec:	8f e2       	ldi	r24, 0x2F	; 47
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	29 81       	ldd	r18, Y+1	; 0x01
     ef2:	22 2f       	mov	r18, r18
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	ae 01       	movw	r20, r28
     ef8:	49 5f       	subi	r20, 0xF9	; 249
     efa:	5f 4f       	sbci	r21, 0xFF	; 255
     efc:	24 0f       	add	r18, r20
     efe:	35 1f       	adc	r19, r21
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
		wait_spi();    //fills in data (0x36..0x40) 
     f08:	8e e2       	ldi	r24, 0x2E	; 46
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fc 01       	movw	r30, r24
     f0e:	80 81       	ld	r24, Z
     f10:	88 23       	and	r24, r24
     f12:	d4 f7       	brge	.-12     	; 0xf08 <fillTxBufferMCP+0x12c>
	SPDR = m.size & 0x0F;  
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	89 17       	cp	r24, r25
     f20:	28 f3       	brcs	.-54     	; 0xeec <fillTxBufferMCP+0x110>
		SPDR = m.data[c];  
		wait_spi();    //fills in data (0x36..0x40) 
	}
	
	deselect_mcp();
     f22:	88 e3       	ldi	r24, 0x38	; 56
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	28 e3       	ldi	r18, 0x38	; 56
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	21 60       	ori	r18, 0x01	; 1
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
     f34:	2e 96       	adiw	r28, 0x0e	; 14
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	08 95       	ret

00000f52 <initUART>:
 */ 


#include "uart.h"

void initUART(uint16_t ubrr ){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <initUART+0x6>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
	
	//Init clock generator reg
	UBRR1H = (unsigned char) (ubrr >> 8);
     f60:	88 e9       	ldi	r24, 0x98	; 152
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	29 81       	ldd	r18, Y+1	; 0x01
     f66:	3a 81       	ldd	r19, Y+2	; 0x02
     f68:	23 2f       	mov	r18, r19
     f6a:	33 27       	eor	r19, r19
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
	UBRR1L = (unsigned char) ubrr;
     f70:	89 e9       	ldi	r24, 0x99	; 153
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	29 81       	ldd	r18, Y+1	; 0x01
     f76:	fc 01       	movw	r30, r24
     f78:	20 83       	st	Z, r18
	//UCSR0A = 0b00000000 //TODO: Rx & Tx "polling"
	UCSR1B = 0b00011000;
     f7a:	8a e9       	ldi	r24, 0x9A	; 154
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	28 e1       	ldi	r18, 0x18	; 24
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
	UCSR1C = 0b10000110;	
     f84:	8d e9       	ldi	r24, 0x9D	; 157
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	26 e8       	ldi	r18, 0x86	; 134
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 83       	st	Z, r18
	fdevopen(putC,getC);
     f8e:	8b ee       	ldi	r24, 0xEB	; 235
     f90:	97 e0       	ldi	r25, 0x07	; 7
     f92:	23 ed       	ldi	r18, 0xD3	; 211
     f94:	37 e0       	ldi	r19, 0x07	; 7
     f96:	b9 01       	movw	r22, r18
     f98:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <fdevopen>
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <getC>:

int getC()
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while( !(UCSR1A & 1 << RXC1) );
     fb0:	00 00       	nop
     fb2:	8b e9       	ldi	r24, 0x9B	; 155
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	fc 01       	movw	r30, r24
     fb8:	80 81       	ld	r24, Z
     fba:	88 23       	and	r24, r24
     fbc:	d4 f7       	brge	.-12     	; 0xfb2 <getC+0xc>
	c = UDR1;
     fbe:	8c e9       	ldi	r24, 0x9C	; 156
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	89 83       	std	Y+1, r24	; 0x01
	return c;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
}
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <putC>:

int putC(char data){
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR1A & 1 << UDRE1) );
     fe2:	00 00       	nop
     fe4:	8b e9       	ldi	r24, 0x9B	; 155
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	80 72       	andi	r24, 0x20	; 32
     ff2:	90 70       	andi	r25, 0x00	; 0
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	b1 f3       	breq	.-20     	; 0xfe4 <putC+0xe>
	UDR1 = data;
     ff8:	8c e9       	ldi	r24, 0x9C	; 156
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	29 81       	ldd	r18, Y+1	; 0x01
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18
	while( !(UCSR1A & 1 << TXC1) );
    1002:	00 00       	nop
    1004:	8b e9       	ldi	r24, 0x9B	; 155
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	fc 01       	movw	r30, r24
    100a:	80 81       	ld	r24, Z
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	80 74       	andi	r24, 0x40	; 64
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	b1 f3       	breq	.-20     	; 0x1004 <putC+0x2e>
	return 0;
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <__fixunssfsi>:
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	7b 01       	movw	r14, r22
    102e:	8c 01       	movw	r16, r24
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	5f e4       	ldi	r21, 0x4F	; 79
    1038:	0e 94 10 0b 	call	0x1620	; 0x1620 <__gesf2>
    103c:	87 fd       	sbrc	r24, 7
    103e:	11 c0       	rjmp	.+34     	; 0x1062 <__fixunssfsi+0x3e>
    1040:	c8 01       	movw	r24, r16
    1042:	b7 01       	movw	r22, r14
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	5f e4       	ldi	r21, 0x4F	; 79
    104c:	0e 94 b5 09 	call	0x136a	; 0x136a <__subsf3>
    1050:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
    1054:	9b 01       	movw	r18, r22
    1056:	ac 01       	movw	r20, r24
    1058:	20 50       	subi	r18, 0x00	; 0
    105a:	30 40       	sbci	r19, 0x00	; 0
    105c:	40 40       	sbci	r20, 0x00	; 0
    105e:	50 48       	sbci	r21, 0x80	; 128
    1060:	06 c0       	rjmp	.+12     	; 0x106e <__fixunssfsi+0x4a>
    1062:	c8 01       	movw	r24, r16
    1064:	b7 01       	movw	r22, r14
    1066:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	b9 01       	movw	r22, r18
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <_fpadd_parts>:
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 e4       	ldi	r30, 0x44	; 68
    1082:	f8 e0       	ldi	r31, 0x08	; 8
    1084:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__prologue_saves__+0x8>
    1088:	fc 01       	movw	r30, r24
    108a:	ea 01       	movw	r28, r20
    108c:	80 81       	ld	r24, Z
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	08 f4       	brcc	.+2      	; 0x1094 <_fpadd_parts+0x18>
    1092:	38 c1       	rjmp	.+624    	; 0x1304 <__stack+0x205>
    1094:	db 01       	movw	r26, r22
    1096:	9c 91       	ld	r25, X
    1098:	92 30       	cpi	r25, 0x02	; 2
    109a:	08 f4       	brcc	.+2      	; 0x109e <_fpadd_parts+0x22>
    109c:	30 c1       	rjmp	.+608    	; 0x12fe <__stack+0x1ff>
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	59 f4       	brne	.+22     	; 0x10b8 <_fpadd_parts+0x3c>
    10a2:	94 30       	cpi	r25, 0x04	; 4
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <_fpadd_parts+0x2c>
    10a6:	2e c1       	rjmp	.+604    	; 0x1304 <__stack+0x205>
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	8c 91       	ld	r24, X
    10ae:	11 97       	sbiw	r26, 0x01	; 1
    10b0:	98 17       	cp	r25, r24
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <_fpadd_parts+0x3a>
    10b4:	21 c1       	rjmp	.+578    	; 0x12f8 <__stack+0x1f9>
    10b6:	26 c1       	rjmp	.+588    	; 0x1304 <__stack+0x205>
    10b8:	94 30       	cpi	r25, 0x04	; 4
    10ba:	09 f4       	brne	.+2      	; 0x10be <_fpadd_parts+0x42>
    10bc:	20 c1       	rjmp	.+576    	; 0x12fe <__stack+0x1ff>
    10be:	92 30       	cpi	r25, 0x02	; 2
    10c0:	b1 f4       	brne	.+44     	; 0x10ee <_fpadd_parts+0x72>
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <_fpadd_parts+0x4c>
    10c6:	1e c1       	rjmp	.+572    	; 0x1304 <__stack+0x205>
    10c8:	ca 01       	movw	r24, r20
    10ca:	af 01       	movw	r20, r30
    10cc:	28 e0       	ldi	r18, 0x08	; 8
    10ce:	da 01       	movw	r26, r20
    10d0:	0d 90       	ld	r0, X+
    10d2:	ad 01       	movw	r20, r26
    10d4:	dc 01       	movw	r26, r24
    10d6:	0d 92       	st	X+, r0
    10d8:	cd 01       	movw	r24, r26
    10da:	21 50       	subi	r18, 0x01	; 1
    10dc:	c1 f7       	brne	.-16     	; 0x10ce <_fpadd_parts+0x52>
    10de:	db 01       	movw	r26, r22
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	8c 91       	ld	r24, X
    10e4:	11 97       	sbiw	r26, 0x01	; 1
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	89 23       	and	r24, r25
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	0a c1       	rjmp	.+532    	; 0x1302 <__stack+0x203>
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <_fpadd_parts+0x78>
    10f2:	05 c1       	rjmp	.+522    	; 0x12fe <__stack+0x1ff>
    10f4:	c2 80       	ldd	r12, Z+2	; 0x02
    10f6:	d3 80       	ldd	r13, Z+3	; 0x03
    10f8:	db 01       	movw	r26, r22
    10fa:	12 96       	adiw	r26, 0x02	; 2
    10fc:	6d 90       	ld	r6, X+
    10fe:	7c 90       	ld	r7, X
    1100:	13 97       	sbiw	r26, 0x03	; 3
    1102:	24 81       	ldd	r18, Z+4	; 0x04
    1104:	35 81       	ldd	r19, Z+5	; 0x05
    1106:	46 81       	ldd	r20, Z+6	; 0x06
    1108:	57 81       	ldd	r21, Z+7	; 0x07
    110a:	14 96       	adiw	r26, 0x04	; 4
    110c:	ed 90       	ld	r14, X+
    110e:	fd 90       	ld	r15, X+
    1110:	0d 91       	ld	r16, X+
    1112:	1c 91       	ld	r17, X
    1114:	17 97       	sbiw	r26, 0x07	; 7
    1116:	c6 01       	movw	r24, r12
    1118:	86 19       	sub	r24, r6
    111a:	97 09       	sbc	r25, r7
    111c:	5c 01       	movw	r10, r24
    111e:	97 ff       	sbrs	r25, 7
    1120:	04 c0       	rjmp	.+8      	; 0x112a <__stack+0x2b>
    1122:	aa 24       	eor	r10, r10
    1124:	bb 24       	eor	r11, r11
    1126:	a8 1a       	sub	r10, r24
    1128:	b9 0a       	sbc	r11, r25
    112a:	b0 e2       	ldi	r27, 0x20	; 32
    112c:	ab 16       	cp	r10, r27
    112e:	b1 04       	cpc	r11, r1
    1130:	0c f0       	brlt	.+2      	; 0x1134 <__stack+0x35>
    1132:	61 c0       	rjmp	.+194    	; 0x11f6 <__stack+0xf7>
    1134:	18 16       	cp	r1, r24
    1136:	19 06       	cpc	r1, r25
    1138:	6c f5       	brge	.+90     	; 0x1194 <__stack+0x95>
    113a:	37 01       	movw	r6, r14
    113c:	48 01       	movw	r8, r16
    113e:	0a 2c       	mov	r0, r10
    1140:	04 c0       	rjmp	.+8      	; 0x114a <__stack+0x4b>
    1142:	96 94       	lsr	r9
    1144:	87 94       	ror	r8
    1146:	77 94       	ror	r7
    1148:	67 94       	ror	r6
    114a:	0a 94       	dec	r0
    114c:	d2 f7       	brpl	.-12     	; 0x1142 <__stack+0x43>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	0a 2c       	mov	r0, r10
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <__stack+0x63>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	aa 1f       	adc	r26, r26
    1160:	bb 1f       	adc	r27, r27
    1162:	0a 94       	dec	r0
    1164:	d2 f7       	brpl	.-12     	; 0x115a <__stack+0x5b>
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	a1 09       	sbc	r26, r1
    116a:	b1 09       	sbc	r27, r1
    116c:	8e 21       	and	r24, r14
    116e:	9f 21       	and	r25, r15
    1170:	a0 23       	and	r26, r16
    1172:	b1 23       	and	r27, r17
    1174:	ee 24       	eor	r14, r14
    1176:	ff 24       	eor	r15, r15
    1178:	87 01       	movw	r16, r14
    117a:	e3 94       	inc	r14
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	a1 05       	cpc	r26, r1
    1180:	b1 05       	cpc	r27, r1
    1182:	19 f4       	brne	.+6      	; 0x118a <__stack+0x8b>
    1184:	ee 24       	eor	r14, r14
    1186:	ff 24       	eor	r15, r15
    1188:	87 01       	movw	r16, r14
    118a:	e6 28       	or	r14, r6
    118c:	f7 28       	or	r15, r7
    118e:	08 29       	or	r16, r8
    1190:	19 29       	or	r17, r9
    1192:	3c c0       	rjmp	.+120    	; 0x120c <__stack+0x10d>
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	d1 f1       	breq	.+116    	; 0x120c <__stack+0x10d>
    1198:	ca 0c       	add	r12, r10
    119a:	db 1c       	adc	r13, r11
    119c:	39 01       	movw	r6, r18
    119e:	4a 01       	movw	r8, r20
    11a0:	0a 2c       	mov	r0, r10
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <__stack+0xad>
    11a4:	96 94       	lsr	r9
    11a6:	87 94       	ror	r8
    11a8:	77 94       	ror	r7
    11aa:	67 94       	ror	r6
    11ac:	0a 94       	dec	r0
    11ae:	d2 f7       	brpl	.-12     	; 0x11a4 <__stack+0xa5>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	0a 2c       	mov	r0, r10
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <__stack+0xc5>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	aa 1f       	adc	r26, r26
    11c2:	bb 1f       	adc	r27, r27
    11c4:	0a 94       	dec	r0
    11c6:	d2 f7       	brpl	.-12     	; 0x11bc <__stack+0xbd>
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	a1 09       	sbc	r26, r1
    11cc:	b1 09       	sbc	r27, r1
    11ce:	82 23       	and	r24, r18
    11d0:	93 23       	and	r25, r19
    11d2:	a4 23       	and	r26, r20
    11d4:	b5 23       	and	r27, r21
    11d6:	21 e0       	ldi	r18, 0x01	; 1
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	a1 05       	cpc	r26, r1
    11e2:	b1 05       	cpc	r27, r1
    11e4:	19 f4       	brne	.+6      	; 0x11ec <__stack+0xed>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	26 29       	or	r18, r6
    11ee:	37 29       	or	r19, r7
    11f0:	48 29       	or	r20, r8
    11f2:	59 29       	or	r21, r9
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <__stack+0x10d>
    11f6:	6c 14       	cp	r6, r12
    11f8:	7d 04       	cpc	r7, r13
    11fa:	24 f4       	brge	.+8      	; 0x1204 <__stack+0x105>
    11fc:	ee 24       	eor	r14, r14
    11fe:	ff 24       	eor	r15, r15
    1200:	87 01       	movw	r16, r14
    1202:	04 c0       	rjmp	.+8      	; 0x120c <__stack+0x10d>
    1204:	63 01       	movw	r12, r6
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	fb 01       	movw	r30, r22
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	89 17       	cp	r24, r25
    1214:	09 f4       	brne	.+2      	; 0x1218 <__stack+0x119>
    1216:	45 c0       	rjmp	.+138    	; 0x12a2 <__stack+0x1a3>
    1218:	88 23       	and	r24, r24
    121a:	49 f0       	breq	.+18     	; 0x122e <__stack+0x12f>
    121c:	d8 01       	movw	r26, r16
    121e:	c7 01       	movw	r24, r14
    1220:	82 1b       	sub	r24, r18
    1222:	93 0b       	sbc	r25, r19
    1224:	a4 0b       	sbc	r26, r20
    1226:	b5 0b       	sbc	r27, r21
    1228:	9c 01       	movw	r18, r24
    122a:	ad 01       	movw	r20, r26
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <__stack+0x137>
    122e:	2e 19       	sub	r18, r14
    1230:	3f 09       	sbc	r19, r15
    1232:	40 0b       	sbc	r20, r16
    1234:	51 0b       	sbc	r21, r17
    1236:	57 fd       	sbrc	r21, 7
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__stack+0x143>
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	db 82       	std	Y+3, r13	; 0x03
    123e:	ca 82       	std	Y+2, r12	; 0x02
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <__stack+0x159>
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	db 82       	std	Y+3, r13	; 0x03
    1248:	ca 82       	std	Y+2, r12	; 0x02
    124a:	50 95       	com	r21
    124c:	40 95       	com	r20
    124e:	30 95       	com	r19
    1250:	21 95       	neg	r18
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	4f 4f       	sbci	r20, 0xFF	; 255
    1256:	5f 4f       	sbci	r21, 0xFF	; 255
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	3d 83       	std	Y+5, r19	; 0x05
    125c:	4e 83       	std	Y+6, r20	; 0x06
    125e:	5f 83       	std	Y+7, r21	; 0x07
    1260:	0d c0       	rjmp	.+26     	; 0x127c <__stack+0x17d>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	8c 83       	std	Y+4, r24	; 0x04
    126c:	9d 83       	std	Y+5, r25	; 0x05
    126e:	ae 83       	std	Y+6, r26	; 0x06
    1270:	bf 83       	std	Y+7, r27	; 0x07
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	9b 81       	ldd	r25, Y+3	; 0x03
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	9b 83       	std	Y+3, r25	; 0x03
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	ae 81       	ldd	r26, Y+6	; 0x06
    1282:	bf 81       	ldd	r27, Y+7	; 0x07
    1284:	9c 01       	movw	r18, r24
    1286:	ad 01       	movw	r20, r26
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	30 40       	sbci	r19, 0x00	; 0
    128c:	40 40       	sbci	r20, 0x00	; 0
    128e:	50 40       	sbci	r21, 0x00	; 0
    1290:	2f 3f       	cpi	r18, 0xFF	; 255
    1292:	ef ef       	ldi	r30, 0xFF	; 255
    1294:	3e 07       	cpc	r19, r30
    1296:	ef ef       	ldi	r30, 0xFF	; 255
    1298:	4e 07       	cpc	r20, r30
    129a:	ef e3       	ldi	r30, 0x3F	; 63
    129c:	5e 07       	cpc	r21, r30
    129e:	08 f3       	brcs	.-62     	; 0x1262 <__stack+0x163>
    12a0:	0b c0       	rjmp	.+22     	; 0x12b8 <__stack+0x1b9>
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	db 82       	std	Y+3, r13	; 0x03
    12a6:	ca 82       	std	Y+2, r12	; 0x02
    12a8:	2e 0d       	add	r18, r14
    12aa:	3f 1d       	adc	r19, r15
    12ac:	40 1f       	adc	r20, r16
    12ae:	51 1f       	adc	r21, r17
    12b0:	2c 83       	std	Y+4, r18	; 0x04
    12b2:	3d 83       	std	Y+5, r19	; 0x05
    12b4:	4e 83       	std	Y+6, r20	; 0x06
    12b6:	5f 83       	std	Y+7, r21	; 0x07
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	88 83       	st	Y, r24
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	4e 81       	ldd	r20, Y+6	; 0x06
    12c2:	5f 81       	ldd	r21, Y+7	; 0x07
    12c4:	57 ff       	sbrs	r21, 7
    12c6:	1d c0       	rjmp	.+58     	; 0x1302 <__stack+0x203>
    12c8:	da 01       	movw	r26, r20
    12ca:	c9 01       	movw	r24, r18
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	a0 70       	andi	r26, 0x00	; 0
    12d2:	b0 70       	andi	r27, 0x00	; 0
    12d4:	56 95       	lsr	r21
    12d6:	47 95       	ror	r20
    12d8:	37 95       	ror	r19
    12da:	27 95       	ror	r18
    12dc:	82 2b       	or	r24, r18
    12de:	93 2b       	or	r25, r19
    12e0:	a4 2b       	or	r26, r20
    12e2:	b5 2b       	or	r27, r21
    12e4:	8c 83       	std	Y+4, r24	; 0x04
    12e6:	9d 83       	std	Y+5, r25	; 0x05
    12e8:	ae 83       	std	Y+6, r26	; 0x06
    12ea:	bf 83       	std	Y+7, r27	; 0x07
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <__stack+0x203>
    12f8:	e2 e3       	ldi	r30, 0x32	; 50
    12fa:	f3 e0       	ldi	r31, 0x03	; 3
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <__stack+0x205>
    12fe:	fb 01       	movw	r30, r22
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <__stack+0x205>
    1302:	fe 01       	movw	r30, r28
    1304:	cf 01       	movw	r24, r30
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	ee e0       	ldi	r30, 0x0E	; 14
    130c:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__epilogue_restores__+0x8>

00001310 <__addsf3>:
    1310:	a0 e2       	ldi	r26, 0x20	; 32
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ee e8       	ldi	r30, 0x8E	; 142
    1316:	f9 e0       	ldi	r31, 0x09	; 9
    1318:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x18>
    131c:	69 83       	std	Y+1, r22	; 0x01
    131e:	7a 83       	std	Y+2, r23	; 0x02
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	2d 83       	std	Y+5, r18	; 0x05
    1326:	3e 83       	std	Y+6, r19	; 0x06
    1328:	4f 83       	std	Y+7, r20	; 0x07
    132a:	58 87       	std	Y+8, r21	; 0x08
    132c:	89 e0       	ldi	r24, 0x09	; 9
    132e:	e8 2e       	mov	r14, r24
    1330:	f1 2c       	mov	r15, r1
    1332:	ec 0e       	add	r14, r28
    1334:	fd 1e       	adc	r15, r29
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	b7 01       	movw	r22, r14
    133c:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    1340:	8e 01       	movw	r16, r28
    1342:	0f 5e       	subi	r16, 0xEF	; 239
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	ce 01       	movw	r24, r28
    1348:	05 96       	adiw	r24, 0x05	; 5
    134a:	b8 01       	movw	r22, r16
    134c:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    1350:	c7 01       	movw	r24, r14
    1352:	b8 01       	movw	r22, r16
    1354:	ae 01       	movw	r20, r28
    1356:	47 5e       	subi	r20, 0xE7	; 231
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	0e 94 3e 08 	call	0x107c	; 0x107c <_fpadd_parts>
    135e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__pack_f>
    1362:	a0 96       	adiw	r28, 0x20	; 32
    1364:	e6 e0       	ldi	r30, 0x06	; 6
    1366:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x18>

0000136a <__subsf3>:
    136a:	a0 e2       	ldi	r26, 0x20	; 32
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb eb       	ldi	r30, 0xBB	; 187
    1370:	f9 e0       	ldi	r31, 0x09	; 9
    1372:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x18>
    1376:	69 83       	std	Y+1, r22	; 0x01
    1378:	7a 83       	std	Y+2, r23	; 0x02
    137a:	8b 83       	std	Y+3, r24	; 0x03
    137c:	9c 83       	std	Y+4, r25	; 0x04
    137e:	2d 83       	std	Y+5, r18	; 0x05
    1380:	3e 83       	std	Y+6, r19	; 0x06
    1382:	4f 83       	std	Y+7, r20	; 0x07
    1384:	58 87       	std	Y+8, r21	; 0x08
    1386:	8e 01       	movw	r16, r28
    1388:	07 5f       	subi	r16, 0xF7	; 247
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	b8 01       	movw	r22, r16
    1392:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    1396:	91 e1       	ldi	r25, 0x11	; 17
    1398:	e9 2e       	mov	r14, r25
    139a:	f1 2c       	mov	r15, r1
    139c:	ec 0e       	add	r14, r28
    139e:	fd 1e       	adc	r15, r29
    13a0:	ce 01       	movw	r24, r28
    13a2:	05 96       	adiw	r24, 0x05	; 5
    13a4:	b7 01       	movw	r22, r14
    13a6:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    13aa:	8a 89       	ldd	r24, Y+18	; 0x12
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	89 27       	eor	r24, r25
    13b0:	8a 8b       	std	Y+18, r24	; 0x12
    13b2:	c8 01       	movw	r24, r16
    13b4:	b7 01       	movw	r22, r14
    13b6:	ae 01       	movw	r20, r28
    13b8:	47 5e       	subi	r20, 0xE7	; 231
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	0e 94 3e 08 	call	0x107c	; 0x107c <_fpadd_parts>
    13c0:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__pack_f>
    13c4:	a0 96       	adiw	r28, 0x20	; 32
    13c6:	e6 e0       	ldi	r30, 0x06	; 6
    13c8:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x18>

000013cc <__mulsf3>:
    13cc:	a0 e2       	ldi	r26, 0x20	; 32
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ec ee       	ldi	r30, 0xEC	; 236
    13d2:	f9 e0       	ldi	r31, 0x09	; 9
    13d4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__prologue_saves__>
    13d8:	69 83       	std	Y+1, r22	; 0x01
    13da:	7a 83       	std	Y+2, r23	; 0x02
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	2d 83       	std	Y+5, r18	; 0x05
    13e2:	3e 83       	std	Y+6, r19	; 0x06
    13e4:	4f 83       	std	Y+7, r20	; 0x07
    13e6:	58 87       	std	Y+8, r21	; 0x08
    13e8:	ce 01       	movw	r24, r28
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	be 01       	movw	r22, r28
    13ee:	67 5f       	subi	r22, 0xF7	; 247
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    13f6:	ce 01       	movw	r24, r28
    13f8:	05 96       	adiw	r24, 0x05	; 5
    13fa:	be 01       	movw	r22, r28
    13fc:	6f 5e       	subi	r22, 0xEF	; 239
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    1404:	99 85       	ldd	r25, Y+9	; 0x09
    1406:	92 30       	cpi	r25, 0x02	; 2
    1408:	78 f0       	brcs	.+30     	; 0x1428 <__mulsf3+0x5c>
    140a:	89 89       	ldd	r24, Y+17	; 0x11
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	c0 f0       	brcs	.+48     	; 0x1440 <__mulsf3+0x74>
    1410:	94 30       	cpi	r25, 0x04	; 4
    1412:	19 f4       	brne	.+6      	; 0x141a <__mulsf3+0x4e>
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	41 f4       	brne	.+16     	; 0x1428 <__mulsf3+0x5c>
    1418:	cb c0       	rjmp	.+406    	; 0x15b0 <__mulsf3+0x1e4>
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	19 f4       	brne	.+6      	; 0x1424 <__mulsf3+0x58>
    141e:	92 30       	cpi	r25, 0x02	; 2
    1420:	79 f4       	brne	.+30     	; 0x1440 <__mulsf3+0x74>
    1422:	c6 c0       	rjmp	.+396    	; 0x15b0 <__mulsf3+0x1e4>
    1424:	92 30       	cpi	r25, 0x02	; 2
    1426:	51 f4       	brne	.+20     	; 0x143c <__mulsf3+0x70>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	2a 85       	ldd	r18, Y+10	; 0x0a
    142c:	9a 89       	ldd	r25, Y+18	; 0x12
    142e:	29 17       	cp	r18, r25
    1430:	09 f4       	brne	.+2      	; 0x1434 <__mulsf3+0x68>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	8a 87       	std	Y+10, r24	; 0x0a
    1436:	ce 01       	movw	r24, r28
    1438:	09 96       	adiw	r24, 0x09	; 9
    143a:	bc c0       	rjmp	.+376    	; 0x15b4 <__mulsf3+0x1e8>
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	51 f4       	brne	.+20     	; 0x1454 <__mulsf3+0x88>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	2a 85       	ldd	r18, Y+10	; 0x0a
    1444:	9a 89       	ldd	r25, Y+18	; 0x12
    1446:	29 17       	cp	r18, r25
    1448:	09 f4       	brne	.+2      	; 0x144c <__mulsf3+0x80>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	8a 8b       	std	Y+18, r24	; 0x12
    144e:	ce 01       	movw	r24, r28
    1450:	41 96       	adiw	r24, 0x11	; 17
    1452:	b0 c0       	rjmp	.+352    	; 0x15b4 <__mulsf3+0x1e8>
    1454:	6d 84       	ldd	r6, Y+13	; 0x0d
    1456:	7e 84       	ldd	r7, Y+14	; 0x0e
    1458:	8f 84       	ldd	r8, Y+15	; 0x0f
    145a:	98 88       	ldd	r9, Y+16	; 0x10
    145c:	ed 88       	ldd	r14, Y+21	; 0x15
    145e:	fe 88       	ldd	r15, Y+22	; 0x16
    1460:	0f 89       	ldd	r16, Y+23	; 0x17
    1462:	18 8d       	ldd	r17, Y+24	; 0x18
    1464:	e0 e2       	ldi	r30, 0x20	; 32
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	dc 01       	movw	r26, r24
    146e:	aa 24       	eor	r10, r10
    1470:	bb 24       	eor	r11, r11
    1472:	65 01       	movw	r12, r10
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	b3 01       	movw	r22, r6
    147c:	61 70       	andi	r22, 0x01	; 1
    147e:	70 70       	andi	r23, 0x00	; 0
    1480:	61 15       	cp	r22, r1
    1482:	71 05       	cpc	r23, r1
    1484:	d1 f0       	breq	.+52     	; 0x14ba <__mulsf3+0xee>
    1486:	2e 0d       	add	r18, r14
    1488:	3f 1d       	adc	r19, r15
    148a:	40 1f       	adc	r20, r16
    148c:	51 1f       	adc	r21, r17
    148e:	15 01       	movw	r2, r10
    1490:	26 01       	movw	r4, r12
    1492:	28 0e       	add	r2, r24
    1494:	39 1e       	adc	r3, r25
    1496:	4a 1e       	adc	r4, r26
    1498:	5b 1e       	adc	r5, r27
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	2e 15       	cp	r18, r14
    14a4:	3f 05       	cpc	r19, r15
    14a6:	40 07       	cpc	r20, r16
    14a8:	51 07       	cpc	r21, r17
    14aa:	18 f0       	brcs	.+6      	; 0x14b2 <__mulsf3+0xe6>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	dc 01       	movw	r26, r24
    14b2:	82 0d       	add	r24, r2
    14b4:	93 1d       	adc	r25, r3
    14b6:	a4 1d       	adc	r26, r4
    14b8:	b5 1d       	adc	r27, r5
    14ba:	aa 0c       	add	r10, r10
    14bc:	bb 1c       	adc	r11, r11
    14be:	cc 1c       	adc	r12, r12
    14c0:	dd 1c       	adc	r13, r13
    14c2:	17 ff       	sbrs	r17, 7
    14c4:	09 c0       	rjmp	.+18     	; 0x14d8 <__mulsf3+0x10c>
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	26 2e       	mov	r2, r22
    14ca:	31 2c       	mov	r3, r1
    14cc:	41 2c       	mov	r4, r1
    14ce:	51 2c       	mov	r5, r1
    14d0:	a2 28       	or	r10, r2
    14d2:	b3 28       	or	r11, r3
    14d4:	c4 28       	or	r12, r4
    14d6:	d5 28       	or	r13, r5
    14d8:	31 97       	sbiw	r30, 0x01	; 1
    14da:	49 f0       	breq	.+18     	; 0x14ee <__mulsf3+0x122>
    14dc:	ee 0c       	add	r14, r14
    14de:	ff 1c       	adc	r15, r15
    14e0:	00 1f       	adc	r16, r16
    14e2:	11 1f       	adc	r17, r17
    14e4:	96 94       	lsr	r9
    14e6:	87 94       	ror	r8
    14e8:	77 94       	ror	r7
    14ea:	67 94       	ror	r6
    14ec:	c6 cf       	rjmp	.-116    	; 0x147a <__mulsf3+0xae>
    14ee:	6b 89       	ldd	r22, Y+19	; 0x13
    14f0:	7c 89       	ldd	r23, Y+20	; 0x14
    14f2:	eb 85       	ldd	r30, Y+11	; 0x0b
    14f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    14f6:	6e 0f       	add	r22, r30
    14f8:	7f 1f       	adc	r23, r31
    14fa:	6e 5f       	subi	r22, 0xFE	; 254
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	7c 8f       	std	Y+28, r23	; 0x1c
    1500:	6b 8f       	std	Y+27, r22	; 0x1b
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	ea 85       	ldd	r30, Y+10	; 0x0a
    1506:	7a 89       	ldd	r23, Y+18	; 0x12
    1508:	e7 17       	cp	r30, r23
    150a:	09 f4       	brne	.+2      	; 0x150e <__mulsf3+0x142>
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	6a 8f       	std	Y+26, r22	; 0x1a
    1510:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1512:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1514:	10 c0       	rjmp	.+32     	; 0x1536 <__mulsf3+0x16a>
    1516:	fc 01       	movw	r30, r24
    1518:	e1 70       	andi	r30, 0x01	; 1
    151a:	f0 70       	andi	r31, 0x00	; 0
    151c:	30 97       	sbiw	r30, 0x00	; 0
    151e:	29 f0       	breq	.+10     	; 0x152a <__mulsf3+0x15e>
    1520:	56 95       	lsr	r21
    1522:	47 95       	ror	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	50 68       	ori	r21, 0x80	; 128
    152a:	b6 95       	lsr	r27
    152c:	a7 95       	ror	r26
    152e:	97 95       	ror	r25
    1530:	87 95       	ror	r24
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	b7 fd       	sbrc	r27, 7
    1538:	ee cf       	rjmp	.-36     	; 0x1516 <__mulsf3+0x14a>
    153a:	0c c0       	rjmp	.+24     	; 0x1554 <__mulsf3+0x188>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	aa 1f       	adc	r26, r26
    1542:	bb 1f       	adc	r27, r27
    1544:	57 fd       	sbrc	r21, 7
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	44 1f       	adc	r20, r20
    154e:	55 1f       	adc	r21, r21
    1550:	61 50       	subi	r22, 0x01	; 1
    1552:	70 40       	sbci	r23, 0x00	; 0
    1554:	80 30       	cpi	r24, 0x00	; 0
    1556:	e0 e0       	ldi	r30, 0x00	; 0
    1558:	9e 07       	cpc	r25, r30
    155a:	e0 e0       	ldi	r30, 0x00	; 0
    155c:	ae 07       	cpc	r26, r30
    155e:	e0 e4       	ldi	r30, 0x40	; 64
    1560:	be 07       	cpc	r27, r30
    1562:	60 f3       	brcs	.-40     	; 0x153c <__mulsf3+0x170>
    1564:	6b 8f       	std	Y+27, r22	; 0x1b
    1566:	7c 8f       	std	Y+28, r23	; 0x1c
    1568:	6f e7       	ldi	r22, 0x7F	; 127
    156a:	e6 2e       	mov	r14, r22
    156c:	f1 2c       	mov	r15, r1
    156e:	01 2d       	mov	r16, r1
    1570:	11 2d       	mov	r17, r1
    1572:	e8 22       	and	r14, r24
    1574:	f9 22       	and	r15, r25
    1576:	0a 23       	and	r16, r26
    1578:	1b 23       	and	r17, r27
    157a:	60 e4       	ldi	r22, 0x40	; 64
    157c:	e6 16       	cp	r14, r22
    157e:	f1 04       	cpc	r15, r1
    1580:	01 05       	cpc	r16, r1
    1582:	11 05       	cpc	r17, r1
    1584:	61 f4       	brne	.+24     	; 0x159e <__mulsf3+0x1d2>
    1586:	87 fd       	sbrc	r24, 7
    1588:	0a c0       	rjmp	.+20     	; 0x159e <__mulsf3+0x1d2>
    158a:	21 15       	cp	r18, r1
    158c:	31 05       	cpc	r19, r1
    158e:	41 05       	cpc	r20, r1
    1590:	51 05       	cpc	r21, r1
    1592:	29 f0       	breq	.+10     	; 0x159e <__mulsf3+0x1d2>
    1594:	80 5c       	subi	r24, 0xC0	; 192
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	af 4f       	sbci	r26, 0xFF	; 255
    159a:	bf 4f       	sbci	r27, 0xFF	; 255
    159c:	80 78       	andi	r24, 0x80	; 128
    159e:	8d 8f       	std	Y+29, r24	; 0x1d
    15a0:	9e 8f       	std	Y+30, r25	; 0x1e
    15a2:	af 8f       	std	Y+31, r26	; 0x1f
    15a4:	b8 a3       	std	Y+32, r27	; 0x20
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	89 8f       	std	Y+25, r24	; 0x19
    15aa:	ce 01       	movw	r24, r28
    15ac:	49 96       	adiw	r24, 0x19	; 25
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <__mulsf3+0x1e8>
    15b0:	82 e3       	ldi	r24, 0x32	; 50
    15b2:	93 e0       	ldi	r25, 0x03	; 3
    15b4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__pack_f>
    15b8:	a0 96       	adiw	r28, 0x20	; 32
    15ba:	e2 e1       	ldi	r30, 0x12	; 18
    15bc:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__epilogue_restores__>

000015c0 <__gtsf2>:
    15c0:	a8 e1       	ldi	r26, 0x18	; 24
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e6 ee       	ldi	r30, 0xE6	; 230
    15c6:	fa e0       	ldi	r31, 0x0A	; 10
    15c8:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x18>
    15cc:	69 83       	std	Y+1, r22	; 0x01
    15ce:	7a 83       	std	Y+2, r23	; 0x02
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	2d 83       	std	Y+5, r18	; 0x05
    15d6:	3e 83       	std	Y+6, r19	; 0x06
    15d8:	4f 83       	std	Y+7, r20	; 0x07
    15da:	58 87       	std	Y+8, r21	; 0x08
    15dc:	8e 01       	movw	r16, r28
    15de:	07 5f       	subi	r16, 0xF7	; 247
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	ce 01       	movw	r24, r28
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	b8 01       	movw	r22, r16
    15e8:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    15ec:	81 e1       	ldi	r24, 0x11	; 17
    15ee:	e8 2e       	mov	r14, r24
    15f0:	f1 2c       	mov	r15, r1
    15f2:	ec 0e       	add	r14, r28
    15f4:	fd 1e       	adc	r15, r29
    15f6:	ce 01       	movw	r24, r28
    15f8:	05 96       	adiw	r24, 0x05	; 5
    15fa:	b7 01       	movw	r22, r14
    15fc:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	40 f0       	brcs	.+16     	; 0x1616 <__gtsf2+0x56>
    1606:	89 89       	ldd	r24, Y+17	; 0x11
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	28 f0       	brcs	.+10     	; 0x1616 <__gtsf2+0x56>
    160c:	c8 01       	movw	r24, r16
    160e:	b7 01       	movw	r22, r14
    1610:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fpcmp_parts_f>
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <__gtsf2+0x58>
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	68 96       	adiw	r28, 0x18	; 24
    161a:	e6 e0       	ldi	r30, 0x06	; 6
    161c:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x18>

00001620 <__gesf2>:
    1620:	a8 e1       	ldi	r26, 0x18	; 24
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e6 e1       	ldi	r30, 0x16	; 22
    1626:	fb e0       	ldi	r31, 0x0B	; 11
    1628:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x18>
    162c:	69 83       	std	Y+1, r22	; 0x01
    162e:	7a 83       	std	Y+2, r23	; 0x02
    1630:	8b 83       	std	Y+3, r24	; 0x03
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	2d 83       	std	Y+5, r18	; 0x05
    1636:	3e 83       	std	Y+6, r19	; 0x06
    1638:	4f 83       	std	Y+7, r20	; 0x07
    163a:	58 87       	std	Y+8, r21	; 0x08
    163c:	8e 01       	movw	r16, r28
    163e:	07 5f       	subi	r16, 0xF7	; 247
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	b8 01       	movw	r22, r16
    1648:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    164c:	81 e1       	ldi	r24, 0x11	; 17
    164e:	e8 2e       	mov	r14, r24
    1650:	f1 2c       	mov	r15, r1
    1652:	ec 0e       	add	r14, r28
    1654:	fd 1e       	adc	r15, r29
    1656:	ce 01       	movw	r24, r28
    1658:	05 96       	adiw	r24, 0x05	; 5
    165a:	b7 01       	movw	r22, r14
    165c:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	40 f0       	brcs	.+16     	; 0x1676 <__gesf2+0x56>
    1666:	89 89       	ldd	r24, Y+17	; 0x11
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	28 f0       	brcs	.+10     	; 0x1676 <__gesf2+0x56>
    166c:	c8 01       	movw	r24, r16
    166e:	b7 01       	movw	r22, r14
    1670:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fpcmp_parts_f>
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <__gesf2+0x58>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	68 96       	adiw	r28, 0x18	; 24
    167a:	e6 e0       	ldi	r30, 0x06	; 6
    167c:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x18>

00001680 <__ltsf2>:
    1680:	a8 e1       	ldi	r26, 0x18	; 24
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e6 e4       	ldi	r30, 0x46	; 70
    1686:	fb e0       	ldi	r31, 0x0B	; 11
    1688:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x18>
    168c:	69 83       	std	Y+1, r22	; 0x01
    168e:	7a 83       	std	Y+2, r23	; 0x02
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	2d 83       	std	Y+5, r18	; 0x05
    1696:	3e 83       	std	Y+6, r19	; 0x06
    1698:	4f 83       	std	Y+7, r20	; 0x07
    169a:	58 87       	std	Y+8, r21	; 0x08
    169c:	8e 01       	movw	r16, r28
    169e:	07 5f       	subi	r16, 0xF7	; 247
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	b8 01       	movw	r22, r16
    16a8:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    16ac:	81 e1       	ldi	r24, 0x11	; 17
    16ae:	e8 2e       	mov	r14, r24
    16b0:	f1 2c       	mov	r15, r1
    16b2:	ec 0e       	add	r14, r28
    16b4:	fd 1e       	adc	r15, r29
    16b6:	ce 01       	movw	r24, r28
    16b8:	05 96       	adiw	r24, 0x05	; 5
    16ba:	b7 01       	movw	r22, r14
    16bc:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	82 30       	cpi	r24, 0x02	; 2
    16c4:	40 f0       	brcs	.+16     	; 0x16d6 <__ltsf2+0x56>
    16c6:	89 89       	ldd	r24, Y+17	; 0x11
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	28 f0       	brcs	.+10     	; 0x16d6 <__ltsf2+0x56>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b7 01       	movw	r22, r14
    16d0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fpcmp_parts_f>
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <__ltsf2+0x58>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	68 96       	adiw	r28, 0x18	; 24
    16da:	e6 e0       	ldi	r30, 0x06	; 6
    16dc:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x18>

000016e0 <__fixsfsi>:
    16e0:	ac e0       	ldi	r26, 0x0C	; 12
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e6 e7       	ldi	r30, 0x76	; 118
    16e6:	fb e0       	ldi	r31, 0x0B	; 11
    16e8:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__prologue_saves__+0x20>
    16ec:	69 83       	std	Y+1, r22	; 0x01
    16ee:	7a 83       	std	Y+2, r23	; 0x02
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	ce 01       	movw	r24, r28
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	be 01       	movw	r22, r28
    16fa:	6b 5f       	subi	r22, 0xFB	; 251
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	0e 94 90 0c 	call	0x1920	; 0x1920 <__unpack_f>
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	81 f1       	breq	.+96     	; 0x1768 <__fixsfsi+0x88>
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	70 f1       	brcs	.+92     	; 0x1768 <__fixsfsi+0x88>
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	21 f4       	brne	.+8      	; 0x1718 <__fixsfsi+0x38>
    1710:	8e 81       	ldd	r24, Y+6	; 0x06
    1712:	88 23       	and	r24, r24
    1714:	69 f1       	breq	.+90     	; 0x1770 <__fixsfsi+0x90>
    1716:	0a c0       	rjmp	.+20     	; 0x172c <__fixsfsi+0x4c>
    1718:	2f 81       	ldd	r18, Y+7	; 0x07
    171a:	38 85       	ldd	r19, Y+8	; 0x08
    171c:	37 fd       	sbrc	r19, 7
    171e:	24 c0       	rjmp	.+72     	; 0x1768 <__fixsfsi+0x88>
    1720:	6e 81       	ldd	r22, Y+6	; 0x06
    1722:	2f 31       	cpi	r18, 0x1F	; 31
    1724:	31 05       	cpc	r19, r1
    1726:	3c f0       	brlt	.+14     	; 0x1736 <__fixsfsi+0x56>
    1728:	66 23       	and	r22, r22
    172a:	11 f1       	breq	.+68     	; 0x1770 <__fixsfsi+0x90>
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e8       	ldi	r21, 0x80	; 128
    1734:	21 c0       	rjmp	.+66     	; 0x1778 <__fixsfsi+0x98>
    1736:	8e e1       	ldi	r24, 0x1E	; 30
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	82 1b       	sub	r24, r18
    173c:	93 0b       	sbc	r25, r19
    173e:	29 85       	ldd	r18, Y+9	; 0x09
    1740:	3a 85       	ldd	r19, Y+10	; 0x0a
    1742:	4b 85       	ldd	r20, Y+11	; 0x0b
    1744:	5c 85       	ldd	r21, Y+12	; 0x0c
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <__fixsfsi+0x70>
    1748:	56 95       	lsr	r21
    174a:	47 95       	ror	r20
    174c:	37 95       	ror	r19
    174e:	27 95       	ror	r18
    1750:	8a 95       	dec	r24
    1752:	d2 f7       	brpl	.-12     	; 0x1748 <__fixsfsi+0x68>
    1754:	66 23       	and	r22, r22
    1756:	81 f0       	breq	.+32     	; 0x1778 <__fixsfsi+0x98>
    1758:	50 95       	com	r21
    175a:	40 95       	com	r20
    175c:	30 95       	com	r19
    175e:	21 95       	neg	r18
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    1762:	4f 4f       	sbci	r20, 0xFF	; 255
    1764:	5f 4f       	sbci	r21, 0xFF	; 255
    1766:	08 c0       	rjmp	.+16     	; 0x1778 <__fixsfsi+0x98>
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <__fixsfsi+0x98>
    1770:	2f ef       	ldi	r18, 0xFF	; 255
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f ef       	ldi	r20, 0xFF	; 255
    1776:	5f e7       	ldi	r21, 0x7F	; 127
    1778:	b9 01       	movw	r22, r18
    177a:	ca 01       	movw	r24, r20
    177c:	2c 96       	adiw	r28, 0x0c	; 12
    177e:	e2 e0       	ldi	r30, 0x02	; 2
    1780:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__epilogue_restores__+0x20>

00001784 <__pack_f>:
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	fc 01       	movw	r30, r24
    1792:	24 81       	ldd	r18, Z+4	; 0x04
    1794:	35 81       	ldd	r19, Z+5	; 0x05
    1796:	46 81       	ldd	r20, Z+6	; 0x06
    1798:	57 81       	ldd	r21, Z+7	; 0x07
    179a:	61 81       	ldd	r22, Z+1	; 0x01
    179c:	80 81       	ld	r24, Z
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	20 f4       	brcc	.+8      	; 0x17aa <__pack_f+0x26>
    17a2:	40 61       	ori	r20, 0x10	; 16
    17a4:	ef ef       	ldi	r30, 0xFF	; 255
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	a3 c0       	rjmp	.+326    	; 0x18f0 <__pack_f+0x16c>
    17aa:	84 30       	cpi	r24, 0x04	; 4
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <__pack_f+0x2c>
    17ae:	9b c0       	rjmp	.+310    	; 0x18e6 <__pack_f+0x162>
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <__pack_f+0x32>
    17b4:	92 c0       	rjmp	.+292    	; 0x18da <__pack_f+0x156>
    17b6:	21 15       	cp	r18, r1
    17b8:	31 05       	cpc	r19, r1
    17ba:	41 05       	cpc	r20, r1
    17bc:	51 05       	cpc	r21, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <__pack_f+0x3e>
    17c0:	8f c0       	rjmp	.+286    	; 0x18e0 <__pack_f+0x15c>
    17c2:	02 80       	ldd	r0, Z+2	; 0x02
    17c4:	f3 81       	ldd	r31, Z+3	; 0x03
    17c6:	e0 2d       	mov	r30, r0
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	e2 38       	cpi	r30, 0x82	; 130
    17cc:	f8 07       	cpc	r31, r24
    17ce:	0c f0       	brlt	.+2      	; 0x17d2 <__pack_f+0x4e>
    17d0:	5a c0       	rjmp	.+180    	; 0x1886 <__pack_f+0x102>
    17d2:	c2 e8       	ldi	r28, 0x82	; 130
    17d4:	df ef       	ldi	r29, 0xFF	; 255
    17d6:	ce 1b       	sub	r28, r30
    17d8:	df 0b       	sbc	r29, r31
    17da:	ca 31       	cpi	r28, 0x1A	; 26
    17dc:	d1 05       	cpc	r29, r1
    17de:	6c f5       	brge	.+90     	; 0x183a <__pack_f+0xb6>
    17e0:	79 01       	movw	r14, r18
    17e2:	8a 01       	movw	r16, r20
    17e4:	0c 2e       	mov	r0, r28
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <__pack_f+0x6c>
    17e8:	16 95       	lsr	r17
    17ea:	07 95       	ror	r16
    17ec:	f7 94       	ror	r15
    17ee:	e7 94       	ror	r14
    17f0:	0a 94       	dec	r0
    17f2:	d2 f7       	brpl	.-12     	; 0x17e8 <__pack_f+0x64>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e0       	ldi	r26, 0x00	; 0
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	0c 2e       	mov	r0, r28
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <__pack_f+0x84>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	aa 1f       	adc	r26, r26
    1806:	bb 1f       	adc	r27, r27
    1808:	0a 94       	dec	r0
    180a:	d2 f7       	brpl	.-12     	; 0x1800 <__pack_f+0x7c>
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	a1 09       	sbc	r26, r1
    1810:	b1 09       	sbc	r27, r1
    1812:	82 23       	and	r24, r18
    1814:	93 23       	and	r25, r19
    1816:	a4 23       	and	r26, r20
    1818:	b5 23       	and	r27, r21
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	a1 05       	cpc	r26, r1
    1826:	b1 05       	cpc	r27, r1
    1828:	19 f4       	brne	.+6      	; 0x1830 <__pack_f+0xac>
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	a9 01       	movw	r20, r18
    1830:	2e 29       	or	r18, r14
    1832:	3f 29       	or	r19, r15
    1834:	40 2b       	or	r20, r16
    1836:	51 2b       	or	r21, r17
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <__pack_f+0xbc>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	a9 01       	movw	r20, r18
    1840:	da 01       	movw	r26, r20
    1842:	c9 01       	movw	r24, r18
    1844:	8f 77       	andi	r24, 0x7F	; 127
    1846:	90 70       	andi	r25, 0x00	; 0
    1848:	a0 70       	andi	r26, 0x00	; 0
    184a:	b0 70       	andi	r27, 0x00	; 0
    184c:	80 34       	cpi	r24, 0x40	; 64
    184e:	91 05       	cpc	r25, r1
    1850:	a1 05       	cpc	r26, r1
    1852:	b1 05       	cpc	r27, r1
    1854:	39 f4       	brne	.+14     	; 0x1864 <__pack_f+0xe0>
    1856:	27 ff       	sbrs	r18, 7
    1858:	09 c0       	rjmp	.+18     	; 0x186c <__pack_f+0xe8>
    185a:	20 5c       	subi	r18, 0xC0	; 192
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	4f 4f       	sbci	r20, 0xFF	; 255
    1860:	5f 4f       	sbci	r21, 0xFF	; 255
    1862:	04 c0       	rjmp	.+8      	; 0x186c <__pack_f+0xe8>
    1864:	21 5c       	subi	r18, 0xC1	; 193
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	4f 4f       	sbci	r20, 0xFF	; 255
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	e1 e0       	ldi	r30, 0x01	; 1
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	20 30       	cpi	r18, 0x00	; 0
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	38 07       	cpc	r19, r24
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	48 07       	cpc	r20, r24
    187a:	80 e4       	ldi	r24, 0x40	; 64
    187c:	58 07       	cpc	r21, r24
    187e:	28 f5       	brcc	.+74     	; 0x18ca <__pack_f+0x146>
    1880:	e0 e0       	ldi	r30, 0x00	; 0
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	22 c0       	rjmp	.+68     	; 0x18ca <__pack_f+0x146>
    1886:	e0 38       	cpi	r30, 0x80	; 128
    1888:	f1 05       	cpc	r31, r1
    188a:	6c f5       	brge	.+90     	; 0x18e6 <__pack_f+0x162>
    188c:	e1 58       	subi	r30, 0x81	; 129
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	da 01       	movw	r26, r20
    1892:	c9 01       	movw	r24, r18
    1894:	8f 77       	andi	r24, 0x7F	; 127
    1896:	90 70       	andi	r25, 0x00	; 0
    1898:	a0 70       	andi	r26, 0x00	; 0
    189a:	b0 70       	andi	r27, 0x00	; 0
    189c:	80 34       	cpi	r24, 0x40	; 64
    189e:	91 05       	cpc	r25, r1
    18a0:	a1 05       	cpc	r26, r1
    18a2:	b1 05       	cpc	r27, r1
    18a4:	39 f4       	brne	.+14     	; 0x18b4 <__pack_f+0x130>
    18a6:	27 ff       	sbrs	r18, 7
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <__pack_f+0x138>
    18aa:	20 5c       	subi	r18, 0xC0	; 192
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	4f 4f       	sbci	r20, 0xFF	; 255
    18b0:	5f 4f       	sbci	r21, 0xFF	; 255
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <__pack_f+0x138>
    18b4:	21 5c       	subi	r18, 0xC1	; 193
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
    18b8:	4f 4f       	sbci	r20, 0xFF	; 255
    18ba:	5f 4f       	sbci	r21, 0xFF	; 255
    18bc:	57 ff       	sbrs	r21, 7
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <__pack_f+0x146>
    18c0:	56 95       	lsr	r21
    18c2:	47 95       	ror	r20
    18c4:	37 95       	ror	r19
    18c6:	27 95       	ror	r18
    18c8:	31 96       	adiw	r30, 0x01	; 1
    18ca:	87 e0       	ldi	r24, 0x07	; 7
    18cc:	56 95       	lsr	r21
    18ce:	47 95       	ror	r20
    18d0:	37 95       	ror	r19
    18d2:	27 95       	ror	r18
    18d4:	8a 95       	dec	r24
    18d6:	d1 f7       	brne	.-12     	; 0x18cc <__pack_f+0x148>
    18d8:	0b c0       	rjmp	.+22     	; 0x18f0 <__pack_f+0x16c>
    18da:	e0 e0       	ldi	r30, 0x00	; 0
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <__pack_f+0x166>
    18e0:	e0 e0       	ldi	r30, 0x00	; 0
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <__pack_f+0x16c>
    18e6:	ef ef       	ldi	r30, 0xFF	; 255
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	8e 2f       	mov	r24, r30
    18f2:	87 95       	ror	r24
    18f4:	88 27       	eor	r24, r24
    18f6:	87 95       	ror	r24
    18f8:	94 2f       	mov	r25, r20
    18fa:	9f 77       	andi	r25, 0x7F	; 127
    18fc:	67 95       	ror	r22
    18fe:	66 27       	eor	r22, r22
    1900:	67 95       	ror	r22
    1902:	e6 95       	lsr	r30
    1904:	e2 2e       	mov	r14, r18
    1906:	a9 2f       	mov	r26, r25
    1908:	a8 2b       	or	r26, r24
    190a:	fe 2f       	mov	r31, r30
    190c:	f6 2b       	or	r31, r22
    190e:	62 2f       	mov	r22, r18
    1910:	73 2f       	mov	r23, r19
    1912:	8a 2f       	mov	r24, r26
    1914:	9f 2f       	mov	r25, r31
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	e6 e0       	ldi	r30, 0x06	; 6
    191c:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x18>

00001920 <__unpack_f>:
    1920:	dc 01       	movw	r26, r24
    1922:	fb 01       	movw	r30, r22
    1924:	2c 91       	ld	r18, X
    1926:	11 96       	adiw	r26, 0x01	; 1
    1928:	3c 91       	ld	r19, X
    192a:	11 97       	sbiw	r26, 0x01	; 1
    192c:	12 96       	adiw	r26, 0x02	; 2
    192e:	8c 91       	ld	r24, X
    1930:	12 97       	sbiw	r26, 0x02	; 2
    1932:	48 2f       	mov	r20, r24
    1934:	4f 77       	andi	r20, 0x7F	; 127
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	98 2f       	mov	r25, r24
    193a:	99 1f       	adc	r25, r25
    193c:	99 27       	eor	r25, r25
    193e:	99 1f       	adc	r25, r25
    1940:	13 96       	adiw	r26, 0x03	; 3
    1942:	6c 91       	ld	r22, X
    1944:	13 97       	sbiw	r26, 0x03	; 3
    1946:	86 2f       	mov	r24, r22
    1948:	88 0f       	add	r24, r24
    194a:	89 2b       	or	r24, r25
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	66 1f       	adc	r22, r22
    1950:	66 27       	eor	r22, r22
    1952:	66 1f       	adc	r22, r22
    1954:	61 83       	std	Z+1, r22	; 0x01
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	39 f5       	brne	.+78     	; 0x19a8 <__unpack_f+0x88>
    195a:	21 15       	cp	r18, r1
    195c:	31 05       	cpc	r19, r1
    195e:	41 05       	cpc	r20, r1
    1960:	51 05       	cpc	r21, r1
    1962:	11 f4       	brne	.+4      	; 0x1968 <__unpack_f+0x48>
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	29 c0       	rjmp	.+82     	; 0x19ba <__unpack_f+0x9a>
    1968:	82 e8       	ldi	r24, 0x82	; 130
    196a:	9f ef       	ldi	r25, 0xFF	; 255
    196c:	93 83       	std	Z+3, r25	; 0x03
    196e:	82 83       	std	Z+2, r24	; 0x02
    1970:	67 e0       	ldi	r22, 0x07	; 7
    1972:	22 0f       	add	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	44 1f       	adc	r20, r20
    1978:	55 1f       	adc	r21, r21
    197a:	6a 95       	dec	r22
    197c:	d1 f7       	brne	.-12     	; 0x1972 <__unpack_f+0x52>
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	80 83       	st	Z, r24
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <__unpack_f+0x76>
    1984:	22 0f       	add	r18, r18
    1986:	33 1f       	adc	r19, r19
    1988:	44 1f       	adc	r20, r20
    198a:	55 1f       	adc	r21, r21
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	93 83       	std	Z+3, r25	; 0x03
    1994:	82 83       	std	Z+2, r24	; 0x02
    1996:	20 30       	cpi	r18, 0x00	; 0
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	38 07       	cpc	r19, r24
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	48 07       	cpc	r20, r24
    19a0:	80 e4       	ldi	r24, 0x40	; 64
    19a2:	58 07       	cpc	r21, r24
    19a4:	78 f3       	brcs	.-34     	; 0x1984 <__unpack_f+0x64>
    19a6:	20 c0       	rjmp	.+64     	; 0x19e8 <__unpack_f+0xc8>
    19a8:	8f 3f       	cpi	r24, 0xFF	; 255
    19aa:	91 05       	cpc	r25, r1
    19ac:	79 f4       	brne	.+30     	; 0x19cc <__unpack_f+0xac>
    19ae:	21 15       	cp	r18, r1
    19b0:	31 05       	cpc	r19, r1
    19b2:	41 05       	cpc	r20, r1
    19b4:	51 05       	cpc	r21, r1
    19b6:	19 f4       	brne	.+6      	; 0x19be <__unpack_f+0x9e>
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	80 83       	st	Z, r24
    19bc:	08 95       	ret
    19be:	44 ff       	sbrs	r20, 4
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <__unpack_f+0xa8>
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	80 83       	st	Z, r24
    19c6:	10 c0       	rjmp	.+32     	; 0x19e8 <__unpack_f+0xc8>
    19c8:	10 82       	st	Z, r1
    19ca:	0e c0       	rjmp	.+28     	; 0x19e8 <__unpack_f+0xc8>
    19cc:	8f 57       	subi	r24, 0x7F	; 127
    19ce:	90 40       	sbci	r25, 0x00	; 0
    19d0:	93 83       	std	Z+3, r25	; 0x03
    19d2:	82 83       	std	Z+2, r24	; 0x02
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	80 83       	st	Z, r24
    19d8:	87 e0       	ldi	r24, 0x07	; 7
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	44 1f       	adc	r20, r20
    19e0:	55 1f       	adc	r21, r21
    19e2:	8a 95       	dec	r24
    19e4:	d1 f7       	brne	.-12     	; 0x19da <__unpack_f+0xba>
    19e6:	50 64       	ori	r21, 0x40	; 64
    19e8:	24 83       	std	Z+4, r18	; 0x04
    19ea:	35 83       	std	Z+5, r19	; 0x05
    19ec:	46 83       	std	Z+6, r20	; 0x06
    19ee:	57 83       	std	Z+7, r21	; 0x07
    19f0:	08 95       	ret

000019f2 <__fpcmp_parts_f>:
    19f2:	fc 01       	movw	r30, r24
    19f4:	db 01       	movw	r26, r22
    19f6:	90 81       	ld	r25, Z
    19f8:	92 30       	cpi	r25, 0x02	; 2
    19fa:	08 f4       	brcc	.+2      	; 0x19fe <__fpcmp_parts_f+0xc>
    19fc:	49 c0       	rjmp	.+146    	; 0x1a90 <__fpcmp_parts_f+0x9e>
    19fe:	8c 91       	ld	r24, X
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	08 f4       	brcc	.+2      	; 0x1a06 <__fpcmp_parts_f+0x14>
    1a04:	45 c0       	rjmp	.+138    	; 0x1a90 <__fpcmp_parts_f+0x9e>
    1a06:	94 30       	cpi	r25, 0x04	; 4
    1a08:	51 f4       	brne	.+20     	; 0x1a1e <__fpcmp_parts_f+0x2c>
    1a0a:	61 81       	ldd	r22, Z+1	; 0x01
    1a0c:	84 30       	cpi	r24, 0x04	; 4
    1a0e:	b1 f5       	brne	.+108    	; 0x1a7c <__fpcmp_parts_f+0x8a>
    1a10:	11 96       	adiw	r26, 0x01	; 1
    1a12:	2c 91       	ld	r18, X
    1a14:	11 97       	sbiw	r26, 0x01	; 1
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	26 1b       	sub	r18, r22
    1a1a:	31 09       	sbc	r19, r1
    1a1c:	41 c0       	rjmp	.+130    	; 0x1aa0 <__fpcmp_parts_f+0xae>
    1a1e:	84 30       	cpi	r24, 0x04	; 4
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <__fpcmp_parts_f+0x38>
    1a22:	92 30       	cpi	r25, 0x02	; 2
    1a24:	41 f4       	brne	.+16     	; 0x1a36 <__fpcmp_parts_f+0x44>
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	b1 f1       	breq	.+108    	; 0x1a96 <__fpcmp_parts_f+0xa4>
    1a2a:	11 96       	adiw	r26, 0x01	; 1
    1a2c:	8c 91       	ld	r24, X
    1a2e:	11 97       	sbiw	r26, 0x01	; 1
    1a30:	88 23       	and	r24, r24
    1a32:	a1 f1       	breq	.+104    	; 0x1a9c <__fpcmp_parts_f+0xaa>
    1a34:	2d c0       	rjmp	.+90     	; 0x1a90 <__fpcmp_parts_f+0x9e>
    1a36:	61 81       	ldd	r22, Z+1	; 0x01
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	01 f1       	breq	.+64     	; 0x1a7c <__fpcmp_parts_f+0x8a>
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	8c 91       	ld	r24, X
    1a40:	11 97       	sbiw	r26, 0x01	; 1
    1a42:	68 17       	cp	r22, r24
    1a44:	d9 f4       	brne	.+54     	; 0x1a7c <__fpcmp_parts_f+0x8a>
    1a46:	22 81       	ldd	r18, Z+2	; 0x02
    1a48:	33 81       	ldd	r19, Z+3	; 0x03
    1a4a:	12 96       	adiw	r26, 0x02	; 2
    1a4c:	8d 91       	ld	r24, X+
    1a4e:	9c 91       	ld	r25, X
    1a50:	13 97       	sbiw	r26, 0x03	; 3
    1a52:	82 17       	cp	r24, r18
    1a54:	93 07       	cpc	r25, r19
    1a56:	94 f0       	brlt	.+36     	; 0x1a7c <__fpcmp_parts_f+0x8a>
    1a58:	28 17       	cp	r18, r24
    1a5a:	39 07       	cpc	r19, r25
    1a5c:	bc f0       	brlt	.+46     	; 0x1a8c <__fpcmp_parts_f+0x9a>
    1a5e:	24 81       	ldd	r18, Z+4	; 0x04
    1a60:	35 81       	ldd	r19, Z+5	; 0x05
    1a62:	46 81       	ldd	r20, Z+6	; 0x06
    1a64:	57 81       	ldd	r21, Z+7	; 0x07
    1a66:	14 96       	adiw	r26, 0x04	; 4
    1a68:	8d 91       	ld	r24, X+
    1a6a:	9d 91       	ld	r25, X+
    1a6c:	0d 90       	ld	r0, X+
    1a6e:	bc 91       	ld	r27, X
    1a70:	a0 2d       	mov	r26, r0
    1a72:	82 17       	cp	r24, r18
    1a74:	93 07       	cpc	r25, r19
    1a76:	a4 07       	cpc	r26, r20
    1a78:	b5 07       	cpc	r27, r21
    1a7a:	18 f4       	brcc	.+6      	; 0x1a82 <__fpcmp_parts_f+0x90>
    1a7c:	66 23       	and	r22, r22
    1a7e:	41 f0       	breq	.+16     	; 0x1a90 <__fpcmp_parts_f+0x9e>
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <__fpcmp_parts_f+0xaa>
    1a82:	28 17       	cp	r18, r24
    1a84:	39 07       	cpc	r19, r25
    1a86:	4a 07       	cpc	r20, r26
    1a88:	5b 07       	cpc	r21, r27
    1a8a:	28 f4       	brcc	.+10     	; 0x1a96 <__fpcmp_parts_f+0xa4>
    1a8c:	66 23       	and	r22, r22
    1a8e:	31 f0       	breq	.+12     	; 0x1a9c <__fpcmp_parts_f+0xaa>
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <__fpcmp_parts_f+0xae>
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <__fpcmp_parts_f+0xae>
    1a9c:	2f ef       	ldi	r18, 0xFF	; 255
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	c9 01       	movw	r24, r18
    1aa2:	08 95       	ret

00001aa4 <__prologue_saves__>:
    1aa4:	2f 92       	push	r2
    1aa6:	3f 92       	push	r3
    1aa8:	4f 92       	push	r4
    1aaa:	5f 92       	push	r5
    1aac:	6f 92       	push	r6
    1aae:	7f 92       	push	r7
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	ca 1b       	sub	r28, r26
    1ace:	db 0b       	sbc	r29, r27
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	09 94       	ijmp

00001adc <__epilogue_restores__>:
    1adc:	2a 88       	ldd	r2, Y+18	; 0x12
    1ade:	39 88       	ldd	r3, Y+17	; 0x11
    1ae0:	48 88       	ldd	r4, Y+16	; 0x10
    1ae2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ae4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ae6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ae8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aea:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aec:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aee:	b9 84       	ldd	r11, Y+9	; 0x09
    1af0:	c8 84       	ldd	r12, Y+8	; 0x08
    1af2:	df 80       	ldd	r13, Y+7	; 0x07
    1af4:	ee 80       	ldd	r14, Y+6	; 0x06
    1af6:	fd 80       	ldd	r15, Y+5	; 0x05
    1af8:	0c 81       	ldd	r16, Y+4	; 0x04
    1afa:	1b 81       	ldd	r17, Y+3	; 0x03
    1afc:	aa 81       	ldd	r26, Y+2	; 0x02
    1afe:	b9 81       	ldd	r27, Y+1	; 0x01
    1b00:	ce 0f       	add	r28, r30
    1b02:	d1 1d       	adc	r29, r1
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	ed 01       	movw	r28, r26
    1b10:	08 95       	ret

00001b12 <fdevopen>:
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	8c 01       	movw	r16, r24
    1b1c:	eb 01       	movw	r28, r22
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <fdevopen+0x14>
    1b22:	20 97       	sbiw	r28, 0x00	; 0
    1b24:	c9 f1       	breq	.+114    	; 0x1b98 <fdevopen+0x86>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	6e e0       	ldi	r22, 0x0E	; 14
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	0e 94 2d 10 	call	0x205a	; 0x205a <calloc>
    1b32:	fc 01       	movw	r30, r24
    1b34:	9c 01       	movw	r18, r24
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	89 f1       	breq	.+98     	; 0x1b9c <fdevopen+0x8a>
    1b3a:	80 e8       	ldi	r24, 0x80	; 128
    1b3c:	83 83       	std	Z+3, r24	; 0x03
    1b3e:	20 97       	sbiw	r28, 0x00	; 0
    1b40:	71 f0       	breq	.+28     	; 0x1b5e <fdevopen+0x4c>
    1b42:	d3 87       	std	Z+11, r29	; 0x0b
    1b44:	c2 87       	std	Z+10, r28	; 0x0a
    1b46:	81 e8       	ldi	r24, 0x81	; 129
    1b48:	83 83       	std	Z+3, r24	; 0x03
    1b4a:	80 91 41 03 	lds	r24, 0x0341
    1b4e:	90 91 42 03 	lds	r25, 0x0342
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <fdevopen+0x4c>
    1b56:	f0 93 42 03 	sts	0x0342, r31
    1b5a:	e0 93 41 03 	sts	0x0341, r30
    1b5e:	01 15       	cp	r16, r1
    1b60:	11 05       	cpc	r17, r1
    1b62:	e1 f0       	breq	.+56     	; 0x1b9c <fdevopen+0x8a>
    1b64:	11 87       	std	Z+9, r17	; 0x09
    1b66:	00 87       	std	Z+8, r16	; 0x08
    1b68:	83 81       	ldd	r24, Z+3	; 0x03
    1b6a:	82 60       	ori	r24, 0x02	; 2
    1b6c:	83 83       	std	Z+3, r24	; 0x03
    1b6e:	80 91 43 03 	lds	r24, 0x0343
    1b72:	90 91 44 03 	lds	r25, 0x0344
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	89 f4       	brne	.+34     	; 0x1b9c <fdevopen+0x8a>
    1b7a:	f0 93 44 03 	sts	0x0344, r31
    1b7e:	e0 93 43 03 	sts	0x0343, r30
    1b82:	80 91 45 03 	lds	r24, 0x0345
    1b86:	90 91 46 03 	lds	r25, 0x0346
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	39 f4       	brne	.+14     	; 0x1b9c <fdevopen+0x8a>
    1b8e:	f0 93 46 03 	sts	0x0346, r31
    1b92:	e0 93 45 03 	sts	0x0345, r30
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <fdevopen+0x8a>
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <printf>:
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	35 96       	adiw	r30, 0x05	; 5
    1bb4:	61 91       	ld	r22, Z+
    1bb6:	71 91       	ld	r23, Z+
    1bb8:	80 91 43 03 	lds	r24, 0x0343
    1bbc:	90 91 44 03 	lds	r25, 0x0344
    1bc0:	af 01       	movw	r20, r30
    1bc2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vfprintf>
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <puts>:
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	8c 01       	movw	r16, r24
    1bda:	e0 91 43 03 	lds	r30, 0x0343
    1bde:	f0 91 44 03 	lds	r31, 0x0344
    1be2:	83 81       	ldd	r24, Z+3	; 0x03
    1be4:	81 ff       	sbrs	r24, 1
    1be6:	1f c0       	rjmp	.+62     	; 0x1c26 <puts+0x5a>
    1be8:	c0 e0       	ldi	r28, 0x00	; 0
    1bea:	d0 e0       	ldi	r29, 0x00	; 0
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <puts+0x36>
    1bee:	db 01       	movw	r26, r22
    1bf0:	18 96       	adiw	r26, 0x08	; 8
    1bf2:	ed 91       	ld	r30, X+
    1bf4:	fc 91       	ld	r31, X
    1bf6:	19 97       	sbiw	r26, 0x09	; 9
    1bf8:	09 95       	icall
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <puts+0x36>
    1bfe:	cf ef       	ldi	r28, 0xFF	; 255
    1c00:	df ef       	ldi	r29, 0xFF	; 255
    1c02:	f8 01       	movw	r30, r16
    1c04:	81 91       	ld	r24, Z+
    1c06:	8f 01       	movw	r16, r30
    1c08:	60 91 43 03 	lds	r22, 0x0343
    1c0c:	70 91 44 03 	lds	r23, 0x0344
    1c10:	88 23       	and	r24, r24
    1c12:	69 f7       	brne	.-38     	; 0x1bee <puts+0x22>
    1c14:	db 01       	movw	r26, r22
    1c16:	18 96       	adiw	r26, 0x08	; 8
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
    1c1c:	19 97       	sbiw	r26, 0x09	; 9
    1c1e:	8a e0       	ldi	r24, 0x0A	; 10
    1c20:	09 95       	icall
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <puts+0x5e>
    1c26:	cf ef       	ldi	r28, 0xFF	; 255
    1c28:	df ef       	ldi	r29, 0xFF	; 255
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	08 95       	ret

00001c3a <vfprintf>:
    1c3a:	2f 92       	push	r2
    1c3c:	3f 92       	push	r3
    1c3e:	4f 92       	push	r4
    1c40:	5f 92       	push	r5
    1c42:	6f 92       	push	r6
    1c44:	7f 92       	push	r7
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	2c 97       	sbiw	r28, 0x0c	; 12
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	6c 01       	movw	r12, r24
    1c70:	1b 01       	movw	r2, r22
    1c72:	8a 01       	movw	r16, r20
    1c74:	fc 01       	movw	r30, r24
    1c76:	17 82       	std	Z+7, r1	; 0x07
    1c78:	16 82       	std	Z+6, r1	; 0x06
    1c7a:	83 81       	ldd	r24, Z+3	; 0x03
    1c7c:	81 ff       	sbrs	r24, 1
    1c7e:	d1 c1       	rjmp	.+930    	; 0x2022 <vfprintf+0x3e8>
    1c80:	2e 01       	movw	r4, r28
    1c82:	08 94       	sec
    1c84:	41 1c       	adc	r4, r1
    1c86:	51 1c       	adc	r5, r1
    1c88:	f6 01       	movw	r30, r12
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	f1 01       	movw	r30, r2
    1c8e:	93 fd       	sbrc	r25, 3
    1c90:	85 91       	lpm	r24, Z+
    1c92:	93 ff       	sbrs	r25, 3
    1c94:	81 91       	ld	r24, Z+
    1c96:	1f 01       	movw	r2, r30
    1c98:	88 23       	and	r24, r24
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <vfprintf+0x64>
    1c9c:	be c1       	rjmp	.+892    	; 0x201a <vfprintf+0x3e0>
    1c9e:	85 32       	cpi	r24, 0x25	; 37
    1ca0:	39 f4       	brne	.+14     	; 0x1cb0 <vfprintf+0x76>
    1ca2:	93 fd       	sbrc	r25, 3
    1ca4:	85 91       	lpm	r24, Z+
    1ca6:	93 ff       	sbrs	r25, 3
    1ca8:	81 91       	ld	r24, Z+
    1caa:	1f 01       	movw	r2, r30
    1cac:	85 32       	cpi	r24, 0x25	; 37
    1cae:	29 f4       	brne	.+10     	; 0x1cba <vfprintf+0x80>
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	b6 01       	movw	r22, r12
    1cb4:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1cb8:	e7 cf       	rjmp	.-50     	; 0x1c88 <vfprintf+0x4e>
    1cba:	ee 24       	eor	r14, r14
    1cbc:	ff 24       	eor	r15, r15
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	20 32       	cpi	r18, 0x20	; 32
    1cc2:	b0 f4       	brcc	.+44     	; 0x1cf0 <vfprintf+0xb6>
    1cc4:	8b 32       	cpi	r24, 0x2B	; 43
    1cc6:	69 f0       	breq	.+26     	; 0x1ce2 <vfprintf+0xa8>
    1cc8:	8c 32       	cpi	r24, 0x2C	; 44
    1cca:	28 f4       	brcc	.+10     	; 0x1cd6 <vfprintf+0x9c>
    1ccc:	80 32       	cpi	r24, 0x20	; 32
    1cce:	51 f0       	breq	.+20     	; 0x1ce4 <vfprintf+0xaa>
    1cd0:	83 32       	cpi	r24, 0x23	; 35
    1cd2:	71 f4       	brne	.+28     	; 0x1cf0 <vfprintf+0xb6>
    1cd4:	0b c0       	rjmp	.+22     	; 0x1cec <vfprintf+0xb2>
    1cd6:	8d 32       	cpi	r24, 0x2D	; 45
    1cd8:	39 f0       	breq	.+14     	; 0x1ce8 <vfprintf+0xae>
    1cda:	80 33       	cpi	r24, 0x30	; 48
    1cdc:	49 f4       	brne	.+18     	; 0x1cf0 <vfprintf+0xb6>
    1cde:	21 60       	ori	r18, 0x01	; 1
    1ce0:	2c c0       	rjmp	.+88     	; 0x1d3a <vfprintf+0x100>
    1ce2:	22 60       	ori	r18, 0x02	; 2
    1ce4:	24 60       	ori	r18, 0x04	; 4
    1ce6:	29 c0       	rjmp	.+82     	; 0x1d3a <vfprintf+0x100>
    1ce8:	28 60       	ori	r18, 0x08	; 8
    1cea:	27 c0       	rjmp	.+78     	; 0x1d3a <vfprintf+0x100>
    1cec:	20 61       	ori	r18, 0x10	; 16
    1cee:	25 c0       	rjmp	.+74     	; 0x1d3a <vfprintf+0x100>
    1cf0:	27 fd       	sbrc	r18, 7
    1cf2:	2c c0       	rjmp	.+88     	; 0x1d4c <vfprintf+0x112>
    1cf4:	38 2f       	mov	r19, r24
    1cf6:	30 53       	subi	r19, 0x30	; 48
    1cf8:	3a 30       	cpi	r19, 0x0A	; 10
    1cfa:	98 f4       	brcc	.+38     	; 0x1d22 <vfprintf+0xe8>
    1cfc:	26 ff       	sbrs	r18, 6
    1cfe:	08 c0       	rjmp	.+16     	; 0x1d10 <vfprintf+0xd6>
    1d00:	8e 2d       	mov	r24, r14
    1d02:	88 0f       	add	r24, r24
    1d04:	e8 2e       	mov	r14, r24
    1d06:	ee 0c       	add	r14, r14
    1d08:	ee 0c       	add	r14, r14
    1d0a:	e8 0e       	add	r14, r24
    1d0c:	e3 0e       	add	r14, r19
    1d0e:	15 c0       	rjmp	.+42     	; 0x1d3a <vfprintf+0x100>
    1d10:	8f 2d       	mov	r24, r15
    1d12:	88 0f       	add	r24, r24
    1d14:	f8 2e       	mov	r15, r24
    1d16:	ff 0c       	add	r15, r15
    1d18:	ff 0c       	add	r15, r15
    1d1a:	f8 0e       	add	r15, r24
    1d1c:	f3 0e       	add	r15, r19
    1d1e:	20 62       	ori	r18, 0x20	; 32
    1d20:	0c c0       	rjmp	.+24     	; 0x1d3a <vfprintf+0x100>
    1d22:	8e 32       	cpi	r24, 0x2E	; 46
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <vfprintf+0xf4>
    1d26:	26 fd       	sbrc	r18, 6
    1d28:	78 c1       	rjmp	.+752    	; 0x201a <vfprintf+0x3e0>
    1d2a:	20 64       	ori	r18, 0x40	; 64
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <vfprintf+0x100>
    1d2e:	8c 36       	cpi	r24, 0x6C	; 108
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <vfprintf+0xfc>
    1d32:	20 68       	ori	r18, 0x80	; 128
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <vfprintf+0x100>
    1d36:	88 36       	cpi	r24, 0x68	; 104
    1d38:	49 f4       	brne	.+18     	; 0x1d4c <vfprintf+0x112>
    1d3a:	f1 01       	movw	r30, r2
    1d3c:	93 fd       	sbrc	r25, 3
    1d3e:	85 91       	lpm	r24, Z+
    1d40:	93 ff       	sbrs	r25, 3
    1d42:	81 91       	ld	r24, Z+
    1d44:	1f 01       	movw	r2, r30
    1d46:	88 23       	and	r24, r24
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <vfprintf+0x112>
    1d4a:	ba cf       	rjmp	.-140    	; 0x1cc0 <vfprintf+0x86>
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	95 54       	subi	r25, 0x45	; 69
    1d50:	93 30       	cpi	r25, 0x03	; 3
    1d52:	18 f0       	brcs	.+6      	; 0x1d5a <vfprintf+0x120>
    1d54:	90 52       	subi	r25, 0x20	; 32
    1d56:	93 30       	cpi	r25, 0x03	; 3
    1d58:	28 f4       	brcc	.+10     	; 0x1d64 <vfprintf+0x12a>
    1d5a:	0c 5f       	subi	r16, 0xFC	; 252
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	ff e3       	ldi	r31, 0x3F	; 63
    1d60:	f9 83       	std	Y+1, r31	; 0x01
    1d62:	0d c0       	rjmp	.+26     	; 0x1d7e <vfprintf+0x144>
    1d64:	83 36       	cpi	r24, 0x63	; 99
    1d66:	31 f0       	breq	.+12     	; 0x1d74 <vfprintf+0x13a>
    1d68:	83 37       	cpi	r24, 0x73	; 115
    1d6a:	71 f0       	breq	.+28     	; 0x1d88 <vfprintf+0x14e>
    1d6c:	83 35       	cpi	r24, 0x53	; 83
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <vfprintf+0x138>
    1d70:	60 c0       	rjmp	.+192    	; 0x1e32 <vfprintf+0x1f8>
    1d72:	22 c0       	rjmp	.+68     	; 0x1db8 <vfprintf+0x17e>
    1d74:	f8 01       	movw	r30, r16
    1d76:	80 81       	ld	r24, Z
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	0e 5f       	subi	r16, 0xFE	; 254
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	42 01       	movw	r8, r4
    1d80:	71 e0       	ldi	r23, 0x01	; 1
    1d82:	a7 2e       	mov	r10, r23
    1d84:	b1 2c       	mov	r11, r1
    1d86:	16 c0       	rjmp	.+44     	; 0x1db4 <vfprintf+0x17a>
    1d88:	62 e0       	ldi	r22, 0x02	; 2
    1d8a:	66 2e       	mov	r6, r22
    1d8c:	71 2c       	mov	r7, r1
    1d8e:	60 0e       	add	r6, r16
    1d90:	71 1e       	adc	r7, r17
    1d92:	f8 01       	movw	r30, r16
    1d94:	80 80       	ld	r8, Z
    1d96:	91 80       	ldd	r9, Z+1	; 0x01
    1d98:	26 ff       	sbrs	r18, 6
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <vfprintf+0x168>
    1d9c:	6e 2d       	mov	r22, r14
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <vfprintf+0x16c>
    1da2:	6f ef       	ldi	r22, 0xFF	; 255
    1da4:	7f ef       	ldi	r23, 0xFF	; 255
    1da6:	c4 01       	movw	r24, r8
    1da8:	2c 87       	std	Y+12, r18	; 0x0c
    1daa:	0e 94 97 11 	call	0x232e	; 0x232e <strnlen>
    1dae:	5c 01       	movw	r10, r24
    1db0:	83 01       	movw	r16, r6
    1db2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1db4:	2f 77       	andi	r18, 0x7F	; 127
    1db6:	17 c0       	rjmp	.+46     	; 0x1de6 <vfprintf+0x1ac>
    1db8:	52 e0       	ldi	r21, 0x02	; 2
    1dba:	65 2e       	mov	r6, r21
    1dbc:	71 2c       	mov	r7, r1
    1dbe:	60 0e       	add	r6, r16
    1dc0:	71 1e       	adc	r7, r17
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	80 80       	ld	r8, Z
    1dc6:	91 80       	ldd	r9, Z+1	; 0x01
    1dc8:	26 ff       	sbrs	r18, 6
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <vfprintf+0x198>
    1dcc:	6e 2d       	mov	r22, r14
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x19c>
    1dd2:	6f ef       	ldi	r22, 0xFF	; 255
    1dd4:	7f ef       	ldi	r23, 0xFF	; 255
    1dd6:	c4 01       	movw	r24, r8
    1dd8:	2c 87       	std	Y+12, r18	; 0x0c
    1dda:	0e 94 85 11 	call	0x230a	; 0x230a <strnlen_P>
    1dde:	5c 01       	movw	r10, r24
    1de0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1de2:	20 68       	ori	r18, 0x80	; 128
    1de4:	83 01       	movw	r16, r6
    1de6:	23 fd       	sbrc	r18, 3
    1de8:	20 c0       	rjmp	.+64     	; 0x1e2a <vfprintf+0x1f0>
    1dea:	08 c0       	rjmp	.+16     	; 0x1dfc <vfprintf+0x1c2>
    1dec:	80 e2       	ldi	r24, 0x20	; 32
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	b6 01       	movw	r22, r12
    1df2:	2c 87       	std	Y+12, r18	; 0x0c
    1df4:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1df8:	fa 94       	dec	r15
    1dfa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dfc:	8f 2d       	mov	r24, r15
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a8 16       	cp	r10, r24
    1e02:	b9 06       	cpc	r11, r25
    1e04:	98 f3       	brcs	.-26     	; 0x1dec <vfprintf+0x1b2>
    1e06:	11 c0       	rjmp	.+34     	; 0x1e2a <vfprintf+0x1f0>
    1e08:	f4 01       	movw	r30, r8
    1e0a:	27 fd       	sbrc	r18, 7
    1e0c:	85 91       	lpm	r24, Z+
    1e0e:	27 ff       	sbrs	r18, 7
    1e10:	81 91       	ld	r24, Z+
    1e12:	4f 01       	movw	r8, r30
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	b6 01       	movw	r22, r12
    1e18:	2c 87       	std	Y+12, r18	; 0x0c
    1e1a:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1e1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e20:	f1 10       	cpse	r15, r1
    1e22:	fa 94       	dec	r15
    1e24:	08 94       	sec
    1e26:	a1 08       	sbc	r10, r1
    1e28:	b1 08       	sbc	r11, r1
    1e2a:	a1 14       	cp	r10, r1
    1e2c:	b1 04       	cpc	r11, r1
    1e2e:	61 f7       	brne	.-40     	; 0x1e08 <vfprintf+0x1ce>
    1e30:	f1 c0       	rjmp	.+482    	; 0x2014 <vfprintf+0x3da>
    1e32:	84 36       	cpi	r24, 0x64	; 100
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <vfprintf+0x200>
    1e36:	89 36       	cpi	r24, 0x69	; 105
    1e38:	49 f5       	brne	.+82     	; 0x1e8c <vfprintf+0x252>
    1e3a:	27 ff       	sbrs	r18, 7
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <vfprintf+0x214>
    1e3e:	f8 01       	movw	r30, r16
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	0c 5f       	subi	r16, 0xFC	; 252
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <vfprintf+0x226>
    1e4e:	f8 01       	movw	r30, r16
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	88 27       	eor	r24, r24
    1e56:	77 fd       	sbrc	r23, 7
    1e58:	80 95       	com	r24
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	0e 5f       	subi	r16, 0xFE	; 254
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	4f e6       	ldi	r20, 0x6F	; 111
    1e62:	b4 2e       	mov	r11, r20
    1e64:	b2 22       	and	r11, r18
    1e66:	97 ff       	sbrs	r25, 7
    1e68:	09 c0       	rjmp	.+18     	; 0x1e7c <vfprintf+0x242>
    1e6a:	90 95       	com	r25
    1e6c:	80 95       	com	r24
    1e6e:	70 95       	com	r23
    1e70:	61 95       	neg	r22
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	8f 4f       	sbci	r24, 0xFF	; 255
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	f0 e8       	ldi	r31, 0x80	; 128
    1e7a:	bf 2a       	or	r11, r31
    1e7c:	a2 01       	movw	r20, r4
    1e7e:	2a e0       	ldi	r18, 0x0A	; 10
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	0e 94 ce 11 	call	0x239c	; 0x239c <__ultoa_invert>
    1e86:	78 2e       	mov	r7, r24
    1e88:	74 18       	sub	r7, r4
    1e8a:	45 c0       	rjmp	.+138    	; 0x1f16 <vfprintf+0x2dc>
    1e8c:	85 37       	cpi	r24, 0x75	; 117
    1e8e:	31 f4       	brne	.+12     	; 0x1e9c <vfprintf+0x262>
    1e90:	3f ee       	ldi	r19, 0xEF	; 239
    1e92:	b3 2e       	mov	r11, r19
    1e94:	b2 22       	and	r11, r18
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	25 c0       	rjmp	.+74     	; 0x1ee6 <vfprintf+0x2ac>
    1e9c:	99 ef       	ldi	r25, 0xF9	; 249
    1e9e:	b9 2e       	mov	r11, r25
    1ea0:	b2 22       	and	r11, r18
    1ea2:	8f 36       	cpi	r24, 0x6F	; 111
    1ea4:	c1 f0       	breq	.+48     	; 0x1ed6 <vfprintf+0x29c>
    1ea6:	80 37       	cpi	r24, 0x70	; 112
    1ea8:	20 f4       	brcc	.+8      	; 0x1eb2 <vfprintf+0x278>
    1eaa:	88 35       	cpi	r24, 0x58	; 88
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <vfprintf+0x276>
    1eae:	b5 c0       	rjmp	.+362    	; 0x201a <vfprintf+0x3e0>
    1eb0:	0d c0       	rjmp	.+26     	; 0x1ecc <vfprintf+0x292>
    1eb2:	80 37       	cpi	r24, 0x70	; 112
    1eb4:	21 f0       	breq	.+8      	; 0x1ebe <vfprintf+0x284>
    1eb6:	88 37       	cpi	r24, 0x78	; 120
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <vfprintf+0x282>
    1eba:	af c0       	rjmp	.+350    	; 0x201a <vfprintf+0x3e0>
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <vfprintf+0x288>
    1ebe:	20 e1       	ldi	r18, 0x10	; 16
    1ec0:	b2 2a       	or	r11, r18
    1ec2:	b4 fe       	sbrs	r11, 4
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <vfprintf+0x2a2>
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	b8 2a       	or	r11, r24
    1eca:	08 c0       	rjmp	.+16     	; 0x1edc <vfprintf+0x2a2>
    1ecc:	b4 fe       	sbrs	r11, 4
    1ece:	09 c0       	rjmp	.+18     	; 0x1ee2 <vfprintf+0x2a8>
    1ed0:	e6 e0       	ldi	r30, 0x06	; 6
    1ed2:	be 2a       	or	r11, r30
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <vfprintf+0x2a8>
    1ed6:	28 e0       	ldi	r18, 0x08	; 8
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <vfprintf+0x2ac>
    1edc:	20 e1       	ldi	r18, 0x10	; 16
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <vfprintf+0x2ac>
    1ee2:	20 e1       	ldi	r18, 0x10	; 16
    1ee4:	32 e0       	ldi	r19, 0x02	; 2
    1ee6:	b7 fe       	sbrs	r11, 7
    1ee8:	08 c0       	rjmp	.+16     	; 0x1efa <vfprintf+0x2c0>
    1eea:	f8 01       	movw	r30, r16
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	0c 5f       	subi	r16, 0xFC	; 252
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	07 c0       	rjmp	.+14     	; 0x1f08 <vfprintf+0x2ce>
    1efa:	f8 01       	movw	r30, r16
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 5f       	subi	r16, 0xFE	; 254
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	a2 01       	movw	r20, r4
    1f0a:	0e 94 ce 11 	call	0x239c	; 0x239c <__ultoa_invert>
    1f0e:	78 2e       	mov	r7, r24
    1f10:	74 18       	sub	r7, r4
    1f12:	ff e7       	ldi	r31, 0x7F	; 127
    1f14:	bf 22       	and	r11, r31
    1f16:	b6 fe       	sbrs	r11, 6
    1f18:	0b c0       	rjmp	.+22     	; 0x1f30 <vfprintf+0x2f6>
    1f1a:	2e ef       	ldi	r18, 0xFE	; 254
    1f1c:	b2 22       	and	r11, r18
    1f1e:	7e 14       	cp	r7, r14
    1f20:	38 f4       	brcc	.+14     	; 0x1f30 <vfprintf+0x2f6>
    1f22:	b4 fe       	sbrs	r11, 4
    1f24:	07 c0       	rjmp	.+14     	; 0x1f34 <vfprintf+0x2fa>
    1f26:	b2 fc       	sbrc	r11, 2
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <vfprintf+0x2fa>
    1f2a:	8f ee       	ldi	r24, 0xEF	; 239
    1f2c:	b8 22       	and	r11, r24
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <vfprintf+0x2fa>
    1f30:	a7 2c       	mov	r10, r7
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <vfprintf+0x2fc>
    1f34:	ae 2c       	mov	r10, r14
    1f36:	8b 2d       	mov	r24, r11
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	b4 fe       	sbrs	r11, 4
    1f3c:	0d c0       	rjmp	.+26     	; 0x1f58 <vfprintf+0x31e>
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e7 0d       	add	r30, r7
    1f42:	f1 1d       	adc	r31, r1
    1f44:	20 81       	ld	r18, Z
    1f46:	20 33       	cpi	r18, 0x30	; 48
    1f48:	19 f4       	brne	.+6      	; 0x1f50 <vfprintf+0x316>
    1f4a:	e9 ee       	ldi	r30, 0xE9	; 233
    1f4c:	be 22       	and	r11, r30
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <vfprintf+0x328>
    1f50:	a3 94       	inc	r10
    1f52:	b2 fe       	sbrs	r11, 2
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <vfprintf+0x328>
    1f56:	04 c0       	rjmp	.+8      	; 0x1f60 <vfprintf+0x326>
    1f58:	86 78       	andi	r24, 0x86	; 134
    1f5a:	90 70       	andi	r25, 0x00	; 0
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <vfprintf+0x328>
    1f60:	a3 94       	inc	r10
    1f62:	8b 2c       	mov	r8, r11
    1f64:	99 24       	eor	r9, r9
    1f66:	b3 fc       	sbrc	r11, 3
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <vfprintf+0x358>
    1f6a:	b0 fe       	sbrs	r11, 0
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <vfprintf+0x352>
    1f6e:	af 14       	cp	r10, r15
    1f70:	28 f4       	brcc	.+10     	; 0x1f7c <vfprintf+0x342>
    1f72:	e7 2c       	mov	r14, r7
    1f74:	ef 0c       	add	r14, r15
    1f76:	ea 18       	sub	r14, r10
    1f78:	af 2c       	mov	r10, r15
    1f7a:	08 c0       	rjmp	.+16     	; 0x1f8c <vfprintf+0x352>
    1f7c:	e7 2c       	mov	r14, r7
    1f7e:	06 c0       	rjmp	.+12     	; 0x1f8c <vfprintf+0x352>
    1f80:	80 e2       	ldi	r24, 0x20	; 32
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	b6 01       	movw	r22, r12
    1f86:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1f8a:	a3 94       	inc	r10
    1f8c:	af 14       	cp	r10, r15
    1f8e:	c0 f3       	brcs	.-16     	; 0x1f80 <vfprintf+0x346>
    1f90:	04 c0       	rjmp	.+8      	; 0x1f9a <vfprintf+0x360>
    1f92:	af 14       	cp	r10, r15
    1f94:	10 f4       	brcc	.+4      	; 0x1f9a <vfprintf+0x360>
    1f96:	fa 18       	sub	r15, r10
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <vfprintf+0x362>
    1f9a:	ff 24       	eor	r15, r15
    1f9c:	84 fe       	sbrs	r8, 4
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <vfprintf+0x384>
    1fa0:	80 e3       	ldi	r24, 0x30	; 48
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	b6 01       	movw	r22, r12
    1fa6:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1faa:	82 fe       	sbrs	r8, 2
    1fac:	1f c0       	rjmp	.+62     	; 0x1fec <vfprintf+0x3b2>
    1fae:	81 fe       	sbrs	r8, 1
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <vfprintf+0x37e>
    1fb2:	88 e5       	ldi	r24, 0x58	; 88
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	10 c0       	rjmp	.+32     	; 0x1fd8 <vfprintf+0x39e>
    1fb8:	88 e7       	ldi	r24, 0x78	; 120
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0d c0       	rjmp	.+26     	; 0x1fd8 <vfprintf+0x39e>
    1fbe:	c4 01       	movw	r24, r8
    1fc0:	86 78       	andi	r24, 0x86	; 134
    1fc2:	90 70       	andi	r25, 0x00	; 0
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	91 f0       	breq	.+36     	; 0x1fec <vfprintf+0x3b2>
    1fc8:	81 fc       	sbrc	r8, 1
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <vfprintf+0x396>
    1fcc:	80 e2       	ldi	r24, 0x20	; 32
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <vfprintf+0x398>
    1fd0:	8b e2       	ldi	r24, 0x2B	; 43
    1fd2:	b7 fc       	sbrc	r11, 7
    1fd4:	8d e2       	ldi	r24, 0x2D	; 45
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	b6 01       	movw	r22, r12
    1fda:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <vfprintf+0x3b2>
    1fe0:	80 e3       	ldi	r24, 0x30	; 48
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1fea:	ea 94       	dec	r14
    1fec:	7e 14       	cp	r7, r14
    1fee:	c0 f3       	brcs	.-16     	; 0x1fe0 <vfprintf+0x3a6>
    1ff0:	7a 94       	dec	r7
    1ff2:	f2 01       	movw	r30, r4
    1ff4:	e7 0d       	add	r30, r7
    1ff6:	f1 1d       	adc	r31, r1
    1ff8:	80 81       	ld	r24, Z
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	b6 01       	movw	r22, r12
    1ffe:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    2002:	77 20       	and	r7, r7
    2004:	a9 f7       	brne	.-22     	; 0x1ff0 <vfprintf+0x3b6>
    2006:	06 c0       	rjmp	.+12     	; 0x2014 <vfprintf+0x3da>
    2008:	80 e2       	ldi	r24, 0x20	; 32
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	b6 01       	movw	r22, r12
    200e:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    2012:	fa 94       	dec	r15
    2014:	ff 20       	and	r15, r15
    2016:	c1 f7       	brne	.-16     	; 0x2008 <vfprintf+0x3ce>
    2018:	37 ce       	rjmp	.-914    	; 0x1c88 <vfprintf+0x4e>
    201a:	f6 01       	movw	r30, r12
    201c:	26 81       	ldd	r18, Z+6	; 0x06
    201e:	37 81       	ldd	r19, Z+7	; 0x07
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <vfprintf+0x3ec>
    2022:	2f ef       	ldi	r18, 0xFF	; 255
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	c9 01       	movw	r24, r18
    2028:	2c 96       	adiw	r28, 0x0c	; 12
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
    2044:	bf 90       	pop	r11
    2046:	af 90       	pop	r10
    2048:	9f 90       	pop	r9
    204a:	8f 90       	pop	r8
    204c:	7f 90       	pop	r7
    204e:	6f 90       	pop	r6
    2050:	5f 90       	pop	r5
    2052:	4f 90       	pop	r4
    2054:	3f 90       	pop	r3
    2056:	2f 90       	pop	r2
    2058:	08 95       	ret

0000205a <calloc>:
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	68 9f       	mul	r22, r24
    2068:	80 01       	movw	r16, r0
    206a:	69 9f       	mul	r22, r25
    206c:	10 0d       	add	r17, r0
    206e:	78 9f       	mul	r23, r24
    2070:	10 0d       	add	r17, r0
    2072:	11 24       	eor	r1, r1
    2074:	c8 01       	movw	r24, r16
    2076:	0e 94 52 10 	call	0x20a4	; 0x20a4 <malloc>
    207a:	e8 2e       	mov	r14, r24
    207c:	e7 01       	movw	r28, r14
    207e:	7e 01       	movw	r14, r28
    2080:	f9 2e       	mov	r15, r25
    2082:	e7 01       	movw	r28, r14
    2084:	20 97       	sbiw	r28, 0x00	; 0
    2086:	31 f0       	breq	.+12     	; 0x2094 <calloc+0x3a>
    2088:	8e 2d       	mov	r24, r14
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	a8 01       	movw	r20, r16
    2090:	0e 94 90 11 	call	0x2320	; 0x2320 <memset>
    2094:	ce 01       	movw	r24, r28
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	08 95       	ret

000020a4 <malloc>:
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	82 30       	cpi	r24, 0x02	; 2
    20aa:	91 05       	cpc	r25, r1
    20ac:	10 f4       	brcc	.+4      	; 0x20b2 <malloc+0xe>
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	e0 91 49 03 	lds	r30, 0x0349
    20b6:	f0 91 4a 03 	lds	r31, 0x034A
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	26 c0       	rjmp	.+76     	; 0x2110 <malloc+0x6c>
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	68 17       	cp	r22, r24
    20ca:	79 07       	cpc	r23, r25
    20cc:	e0 f0       	brcs	.+56     	; 0x2106 <malloc+0x62>
    20ce:	68 17       	cp	r22, r24
    20d0:	79 07       	cpc	r23, r25
    20d2:	81 f4       	brne	.+32     	; 0x20f4 <malloc+0x50>
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	21 15       	cp	r18, r1
    20da:	31 05       	cpc	r19, r1
    20dc:	31 f0       	breq	.+12     	; 0x20ea <malloc+0x46>
    20de:	d9 01       	movw	r26, r18
    20e0:	13 96       	adiw	r26, 0x03	; 3
    20e2:	9c 93       	st	X, r25
    20e4:	8e 93       	st	-X, r24
    20e6:	12 97       	sbiw	r26, 0x02	; 2
    20e8:	2b c0       	rjmp	.+86     	; 0x2140 <malloc+0x9c>
    20ea:	90 93 4a 03 	sts	0x034A, r25
    20ee:	80 93 49 03 	sts	0x0349, r24
    20f2:	26 c0       	rjmp	.+76     	; 0x2140 <malloc+0x9c>
    20f4:	41 15       	cp	r20, r1
    20f6:	51 05       	cpc	r21, r1
    20f8:	19 f0       	breq	.+6      	; 0x2100 <malloc+0x5c>
    20fa:	64 17       	cp	r22, r20
    20fc:	75 07       	cpc	r23, r21
    20fe:	18 f4       	brcc	.+6      	; 0x2106 <malloc+0x62>
    2100:	ab 01       	movw	r20, r22
    2102:	e9 01       	movw	r28, r18
    2104:	df 01       	movw	r26, r30
    2106:	9f 01       	movw	r18, r30
    2108:	72 81       	ldd	r23, Z+2	; 0x02
    210a:	63 81       	ldd	r22, Z+3	; 0x03
    210c:	e7 2f       	mov	r30, r23
    210e:	f6 2f       	mov	r31, r22
    2110:	30 97       	sbiw	r30, 0x00	; 0
    2112:	c1 f6       	brne	.-80     	; 0x20c4 <malloc+0x20>
    2114:	41 15       	cp	r20, r1
    2116:	51 05       	cpc	r21, r1
    2118:	01 f1       	breq	.+64     	; 0x215a <malloc+0xb6>
    211a:	48 1b       	sub	r20, r24
    211c:	59 0b       	sbc	r21, r25
    211e:	44 30       	cpi	r20, 0x04	; 4
    2120:	51 05       	cpc	r21, r1
    2122:	80 f4       	brcc	.+32     	; 0x2144 <malloc+0xa0>
    2124:	12 96       	adiw	r26, 0x02	; 2
    2126:	8d 91       	ld	r24, X+
    2128:	9c 91       	ld	r25, X
    212a:	13 97       	sbiw	r26, 0x03	; 3
    212c:	20 97       	sbiw	r28, 0x00	; 0
    212e:	19 f0       	breq	.+6      	; 0x2136 <malloc+0x92>
    2130:	9b 83       	std	Y+3, r25	; 0x03
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	04 c0       	rjmp	.+8      	; 0x213e <malloc+0x9a>
    2136:	90 93 4a 03 	sts	0x034A, r25
    213a:	80 93 49 03 	sts	0x0349, r24
    213e:	fd 01       	movw	r30, r26
    2140:	32 96       	adiw	r30, 0x02	; 2
    2142:	46 c0       	rjmp	.+140    	; 0x21d0 <malloc+0x12c>
    2144:	fd 01       	movw	r30, r26
    2146:	e4 0f       	add	r30, r20
    2148:	f5 1f       	adc	r31, r21
    214a:	81 93       	st	Z+, r24
    214c:	91 93       	st	Z+, r25
    214e:	42 50       	subi	r20, 0x02	; 2
    2150:	50 40       	sbci	r21, 0x00	; 0
    2152:	11 96       	adiw	r26, 0x01	; 1
    2154:	5c 93       	st	X, r21
    2156:	4e 93       	st	-X, r20
    2158:	3b c0       	rjmp	.+118    	; 0x21d0 <malloc+0x12c>
    215a:	20 91 47 03 	lds	r18, 0x0347
    215e:	30 91 48 03 	lds	r19, 0x0348
    2162:	21 15       	cp	r18, r1
    2164:	31 05       	cpc	r19, r1
    2166:	41 f4       	brne	.+16     	; 0x2178 <malloc+0xd4>
    2168:	20 91 3c 03 	lds	r18, 0x033C
    216c:	30 91 3d 03 	lds	r19, 0x033D
    2170:	30 93 48 03 	sts	0x0348, r19
    2174:	20 93 47 03 	sts	0x0347, r18
    2178:	20 91 3e 03 	lds	r18, 0x033E
    217c:	30 91 3f 03 	lds	r19, 0x033F
    2180:	21 15       	cp	r18, r1
    2182:	31 05       	cpc	r19, r1
    2184:	41 f4       	brne	.+16     	; 0x2196 <malloc+0xf2>
    2186:	2d b7       	in	r18, 0x3d	; 61
    2188:	3e b7       	in	r19, 0x3e	; 62
    218a:	40 91 3a 03 	lds	r20, 0x033A
    218e:	50 91 3b 03 	lds	r21, 0x033B
    2192:	24 1b       	sub	r18, r20
    2194:	35 0b       	sbc	r19, r21
    2196:	e0 91 47 03 	lds	r30, 0x0347
    219a:	f0 91 48 03 	lds	r31, 0x0348
    219e:	e2 17       	cp	r30, r18
    21a0:	f3 07       	cpc	r31, r19
    21a2:	a0 f4       	brcc	.+40     	; 0x21cc <malloc+0x128>
    21a4:	2e 1b       	sub	r18, r30
    21a6:	3f 0b       	sbc	r19, r31
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	78 f0       	brcs	.+30     	; 0x21cc <malloc+0x128>
    21ae:	ac 01       	movw	r20, r24
    21b0:	4e 5f       	subi	r20, 0xFE	; 254
    21b2:	5f 4f       	sbci	r21, 0xFF	; 255
    21b4:	24 17       	cp	r18, r20
    21b6:	35 07       	cpc	r19, r21
    21b8:	48 f0       	brcs	.+18     	; 0x21cc <malloc+0x128>
    21ba:	4e 0f       	add	r20, r30
    21bc:	5f 1f       	adc	r21, r31
    21be:	50 93 48 03 	sts	0x0348, r21
    21c2:	40 93 47 03 	sts	0x0347, r20
    21c6:	81 93       	st	Z+, r24
    21c8:	91 93       	st	Z+, r25
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <malloc+0x12c>
    21cc:	e0 e0       	ldi	r30, 0x00	; 0
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	cf 01       	movw	r24, r30
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <free>:
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	09 f4       	brne	.+2      	; 0x21e2 <free+0xa>
    21e0:	91 c0       	rjmp	.+290    	; 0x2304 <free+0x12c>
    21e2:	fc 01       	movw	r30, r24
    21e4:	32 97       	sbiw	r30, 0x02	; 2
    21e6:	13 82       	std	Z+3, r1	; 0x03
    21e8:	12 82       	std	Z+2, r1	; 0x02
    21ea:	60 91 49 03 	lds	r22, 0x0349
    21ee:	70 91 4a 03 	lds	r23, 0x034A
    21f2:	61 15       	cp	r22, r1
    21f4:	71 05       	cpc	r23, r1
    21f6:	81 f4       	brne	.+32     	; 0x2218 <free+0x40>
    21f8:	20 81       	ld	r18, Z
    21fa:	31 81       	ldd	r19, Z+1	; 0x01
    21fc:	28 0f       	add	r18, r24
    21fe:	39 1f       	adc	r19, r25
    2200:	80 91 47 03 	lds	r24, 0x0347
    2204:	90 91 48 03 	lds	r25, 0x0348
    2208:	82 17       	cp	r24, r18
    220a:	93 07       	cpc	r25, r19
    220c:	99 f5       	brne	.+102    	; 0x2274 <free+0x9c>
    220e:	f0 93 48 03 	sts	0x0348, r31
    2212:	e0 93 47 03 	sts	0x0347, r30
    2216:	76 c0       	rjmp	.+236    	; 0x2304 <free+0x12c>
    2218:	db 01       	movw	r26, r22
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <free+0x4c>
    2220:	cd 01       	movw	r24, r26
    2222:	d9 01       	movw	r26, r18
    2224:	ae 17       	cp	r26, r30
    2226:	bf 07       	cpc	r27, r31
    2228:	48 f4       	brcc	.+18     	; 0x223c <free+0x64>
    222a:	12 96       	adiw	r26, 0x02	; 2
    222c:	2d 91       	ld	r18, X+
    222e:	3c 91       	ld	r19, X
    2230:	13 97       	sbiw	r26, 0x03	; 3
    2232:	21 15       	cp	r18, r1
    2234:	31 05       	cpc	r19, r1
    2236:	a1 f7       	brne	.-24     	; 0x2220 <free+0x48>
    2238:	cd 01       	movw	r24, r26
    223a:	21 c0       	rjmp	.+66     	; 0x227e <free+0xa6>
    223c:	b3 83       	std	Z+3, r27	; 0x03
    223e:	a2 83       	std	Z+2, r26	; 0x02
    2240:	ef 01       	movw	r28, r30
    2242:	49 91       	ld	r20, Y+
    2244:	59 91       	ld	r21, Y+
    2246:	9e 01       	movw	r18, r28
    2248:	24 0f       	add	r18, r20
    224a:	35 1f       	adc	r19, r21
    224c:	a2 17       	cp	r26, r18
    224e:	b3 07       	cpc	r27, r19
    2250:	79 f4       	brne	.+30     	; 0x2270 <free+0x98>
    2252:	2d 91       	ld	r18, X+
    2254:	3c 91       	ld	r19, X
    2256:	11 97       	sbiw	r26, 0x01	; 1
    2258:	24 0f       	add	r18, r20
    225a:	35 1f       	adc	r19, r21
    225c:	2e 5f       	subi	r18, 0xFE	; 254
    225e:	3f 4f       	sbci	r19, 0xFF	; 255
    2260:	31 83       	std	Z+1, r19	; 0x01
    2262:	20 83       	st	Z, r18
    2264:	12 96       	adiw	r26, 0x02	; 2
    2266:	2d 91       	ld	r18, X+
    2268:	3c 91       	ld	r19, X
    226a:	13 97       	sbiw	r26, 0x03	; 3
    226c:	33 83       	std	Z+3, r19	; 0x03
    226e:	22 83       	std	Z+2, r18	; 0x02
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	29 f4       	brne	.+10     	; 0x227e <free+0xa6>
    2274:	f0 93 4a 03 	sts	0x034A, r31
    2278:	e0 93 49 03 	sts	0x0349, r30
    227c:	43 c0       	rjmp	.+134    	; 0x2304 <free+0x12c>
    227e:	dc 01       	movw	r26, r24
    2280:	13 96       	adiw	r26, 0x03	; 3
    2282:	fc 93       	st	X, r31
    2284:	ee 93       	st	-X, r30
    2286:	12 97       	sbiw	r26, 0x02	; 2
    2288:	4d 91       	ld	r20, X+
    228a:	5d 91       	ld	r21, X+
    228c:	a4 0f       	add	r26, r20
    228e:	b5 1f       	adc	r27, r21
    2290:	ea 17       	cp	r30, r26
    2292:	fb 07       	cpc	r31, r27
    2294:	69 f4       	brne	.+26     	; 0x22b0 <free+0xd8>
    2296:	20 81       	ld	r18, Z
    2298:	31 81       	ldd	r19, Z+1	; 0x01
    229a:	24 0f       	add	r18, r20
    229c:	35 1f       	adc	r19, r21
    229e:	2e 5f       	subi	r18, 0xFE	; 254
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	ec 01       	movw	r28, r24
    22a4:	39 83       	std	Y+1, r19	; 0x01
    22a6:	28 83       	st	Y, r18
    22a8:	22 81       	ldd	r18, Z+2	; 0x02
    22aa:	33 81       	ldd	r19, Z+3	; 0x03
    22ac:	3b 83       	std	Y+3, r19	; 0x03
    22ae:	2a 83       	std	Y+2, r18	; 0x02
    22b0:	e0 e0       	ldi	r30, 0x00	; 0
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <free+0xe2>
    22b6:	fb 01       	movw	r30, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	db 01       	movw	r26, r22
    22bc:	12 96       	adiw	r26, 0x02	; 2
    22be:	8d 91       	ld	r24, X+
    22c0:	9c 91       	ld	r25, X
    22c2:	13 97       	sbiw	r26, 0x03	; 3
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	b9 f7       	brne	.-18     	; 0x22b6 <free+0xde>
    22c8:	9b 01       	movw	r18, r22
    22ca:	2e 5f       	subi	r18, 0xFE	; 254
    22cc:	3f 4f       	sbci	r19, 0xFF	; 255
    22ce:	8d 91       	ld	r24, X+
    22d0:	9c 91       	ld	r25, X
    22d2:	11 97       	sbiw	r26, 0x01	; 1
    22d4:	82 0f       	add	r24, r18
    22d6:	93 1f       	adc	r25, r19
    22d8:	40 91 47 03 	lds	r20, 0x0347
    22dc:	50 91 48 03 	lds	r21, 0x0348
    22e0:	48 17       	cp	r20, r24
    22e2:	59 07       	cpc	r21, r25
    22e4:	79 f4       	brne	.+30     	; 0x2304 <free+0x12c>
    22e6:	30 97       	sbiw	r30, 0x00	; 0
    22e8:	29 f4       	brne	.+10     	; 0x22f4 <free+0x11c>
    22ea:	10 92 4a 03 	sts	0x034A, r1
    22ee:	10 92 49 03 	sts	0x0349, r1
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <free+0x120>
    22f4:	13 82       	std	Z+3, r1	; 0x03
    22f6:	12 82       	std	Z+2, r1	; 0x02
    22f8:	22 50       	subi	r18, 0x02	; 2
    22fa:	30 40       	sbci	r19, 0x00	; 0
    22fc:	30 93 48 03 	sts	0x0348, r19
    2300:	20 93 47 03 	sts	0x0347, r18
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	08 95       	ret

0000230a <strnlen_P>:
    230a:	fc 01       	movw	r30, r24
    230c:	05 90       	lpm	r0, Z+
    230e:	61 50       	subi	r22, 0x01	; 1
    2310:	70 40       	sbci	r23, 0x00	; 0
    2312:	01 10       	cpse	r0, r1
    2314:	d8 f7       	brcc	.-10     	; 0x230c <strnlen_P+0x2>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	8e 0f       	add	r24, r30
    231c:	9f 1f       	adc	r25, r31
    231e:	08 95       	ret

00002320 <memset>:
    2320:	dc 01       	movw	r26, r24
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <memset+0x6>
    2324:	6d 93       	st	X+, r22
    2326:	41 50       	subi	r20, 0x01	; 1
    2328:	50 40       	sbci	r21, 0x00	; 0
    232a:	e0 f7       	brcc	.-8      	; 0x2324 <memset+0x4>
    232c:	08 95       	ret

0000232e <strnlen>:
    232e:	fc 01       	movw	r30, r24
    2330:	61 50       	subi	r22, 0x01	; 1
    2332:	70 40       	sbci	r23, 0x00	; 0
    2334:	01 90       	ld	r0, Z+
    2336:	01 10       	cpse	r0, r1
    2338:	d8 f7       	brcc	.-10     	; 0x2330 <strnlen+0x2>
    233a:	80 95       	com	r24
    233c:	90 95       	com	r25
    233e:	8e 0f       	add	r24, r30
    2340:	9f 1f       	adc	r25, r31
    2342:	08 95       	ret

00002344 <fputc>:
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	8c 01       	movw	r16, r24
    234e:	eb 01       	movw	r28, r22
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	81 ff       	sbrs	r24, 1
    2354:	1b c0       	rjmp	.+54     	; 0x238c <fputc+0x48>
    2356:	82 ff       	sbrs	r24, 2
    2358:	0d c0       	rjmp	.+26     	; 0x2374 <fputc+0x30>
    235a:	2e 81       	ldd	r18, Y+6	; 0x06
    235c:	3f 81       	ldd	r19, Y+7	; 0x07
    235e:	8c 81       	ldd	r24, Y+4	; 0x04
    2360:	9d 81       	ldd	r25, Y+5	; 0x05
    2362:	28 17       	cp	r18, r24
    2364:	39 07       	cpc	r19, r25
    2366:	64 f4       	brge	.+24     	; 0x2380 <fputc+0x3c>
    2368:	e8 81       	ld	r30, Y
    236a:	f9 81       	ldd	r31, Y+1	; 0x01
    236c:	01 93       	st	Z+, r16
    236e:	f9 83       	std	Y+1, r31	; 0x01
    2370:	e8 83       	st	Y, r30
    2372:	06 c0       	rjmp	.+12     	; 0x2380 <fputc+0x3c>
    2374:	e8 85       	ldd	r30, Y+8	; 0x08
    2376:	f9 85       	ldd	r31, Y+9	; 0x09
    2378:	80 2f       	mov	r24, r16
    237a:	09 95       	icall
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	31 f4       	brne	.+12     	; 0x238c <fputc+0x48>
    2380:	8e 81       	ldd	r24, Y+6	; 0x06
    2382:	9f 81       	ldd	r25, Y+7	; 0x07
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	9f 83       	std	Y+7, r25	; 0x07
    2388:	8e 83       	std	Y+6, r24	; 0x06
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <fputc+0x4c>
    238c:	0f ef       	ldi	r16, 0xFF	; 255
    238e:	1f ef       	ldi	r17, 0xFF	; 255
    2390:	c8 01       	movw	r24, r16
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	08 95       	ret

0000239c <__ultoa_invert>:
    239c:	fa 01       	movw	r30, r20
    239e:	aa 27       	eor	r26, r26
    23a0:	28 30       	cpi	r18, 0x08	; 8
    23a2:	51 f1       	breq	.+84     	; 0x23f8 <__ultoa_invert+0x5c>
    23a4:	20 31       	cpi	r18, 0x10	; 16
    23a6:	81 f1       	breq	.+96     	; 0x2408 <__ultoa_invert+0x6c>
    23a8:	e8 94       	clt
    23aa:	6f 93       	push	r22
    23ac:	6e 7f       	andi	r22, 0xFE	; 254
    23ae:	6e 5f       	subi	r22, 0xFE	; 254
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	8f 4f       	sbci	r24, 0xFF	; 255
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	af 4f       	sbci	r26, 0xFF	; 255
    23b8:	b1 e0       	ldi	r27, 0x01	; 1
    23ba:	3e d0       	rcall	.+124    	; 0x2438 <__ultoa_invert+0x9c>
    23bc:	b4 e0       	ldi	r27, 0x04	; 4
    23be:	3c d0       	rcall	.+120    	; 0x2438 <__ultoa_invert+0x9c>
    23c0:	67 0f       	add	r22, r23
    23c2:	78 1f       	adc	r23, r24
    23c4:	89 1f       	adc	r24, r25
    23c6:	9a 1f       	adc	r25, r26
    23c8:	a1 1d       	adc	r26, r1
    23ca:	68 0f       	add	r22, r24
    23cc:	79 1f       	adc	r23, r25
    23ce:	8a 1f       	adc	r24, r26
    23d0:	91 1d       	adc	r25, r1
    23d2:	a1 1d       	adc	r26, r1
    23d4:	6a 0f       	add	r22, r26
    23d6:	71 1d       	adc	r23, r1
    23d8:	81 1d       	adc	r24, r1
    23da:	91 1d       	adc	r25, r1
    23dc:	a1 1d       	adc	r26, r1
    23de:	20 d0       	rcall	.+64     	; 0x2420 <__ultoa_invert+0x84>
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <__ultoa_invert+0x48>
    23e2:	68 94       	set
    23e4:	3f 91       	pop	r19
    23e6:	2a e0       	ldi	r18, 0x0A	; 10
    23e8:	26 9f       	mul	r18, r22
    23ea:	11 24       	eor	r1, r1
    23ec:	30 19       	sub	r19, r0
    23ee:	30 5d       	subi	r19, 0xD0	; 208
    23f0:	31 93       	st	Z+, r19
    23f2:	de f6       	brtc	.-74     	; 0x23aa <__ultoa_invert+0xe>
    23f4:	cf 01       	movw	r24, r30
    23f6:	08 95       	ret
    23f8:	46 2f       	mov	r20, r22
    23fa:	47 70       	andi	r20, 0x07	; 7
    23fc:	40 5d       	subi	r20, 0xD0	; 208
    23fe:	41 93       	st	Z+, r20
    2400:	b3 e0       	ldi	r27, 0x03	; 3
    2402:	0f d0       	rcall	.+30     	; 0x2422 <__ultoa_invert+0x86>
    2404:	c9 f7       	brne	.-14     	; 0x23f8 <__ultoa_invert+0x5c>
    2406:	f6 cf       	rjmp	.-20     	; 0x23f4 <__ultoa_invert+0x58>
    2408:	46 2f       	mov	r20, r22
    240a:	4f 70       	andi	r20, 0x0F	; 15
    240c:	40 5d       	subi	r20, 0xD0	; 208
    240e:	4a 33       	cpi	r20, 0x3A	; 58
    2410:	18 f0       	brcs	.+6      	; 0x2418 <__ultoa_invert+0x7c>
    2412:	49 5d       	subi	r20, 0xD9	; 217
    2414:	31 fd       	sbrc	r19, 1
    2416:	40 52       	subi	r20, 0x20	; 32
    2418:	41 93       	st	Z+, r20
    241a:	02 d0       	rcall	.+4      	; 0x2420 <__ultoa_invert+0x84>
    241c:	a9 f7       	brne	.-22     	; 0x2408 <__ultoa_invert+0x6c>
    241e:	ea cf       	rjmp	.-44     	; 0x23f4 <__ultoa_invert+0x58>
    2420:	b4 e0       	ldi	r27, 0x04	; 4
    2422:	a6 95       	lsr	r26
    2424:	97 95       	ror	r25
    2426:	87 95       	ror	r24
    2428:	77 95       	ror	r23
    242a:	67 95       	ror	r22
    242c:	ba 95       	dec	r27
    242e:	c9 f7       	brne	.-14     	; 0x2422 <__ultoa_invert+0x86>
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	61 05       	cpc	r22, r1
    2434:	71 05       	cpc	r23, r1
    2436:	08 95       	ret
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
    243c:	0a 2e       	mov	r0, r26
    243e:	06 94       	lsr	r0
    2440:	57 95       	ror	r21
    2442:	47 95       	ror	r20
    2444:	37 95       	ror	r19
    2446:	27 95       	ror	r18
    2448:	ba 95       	dec	r27
    244a:	c9 f7       	brne	.-14     	; 0x243e <__ultoa_invert+0xa2>
    244c:	62 0f       	add	r22, r18
    244e:	73 1f       	adc	r23, r19
    2450:	84 1f       	adc	r24, r20
    2452:	95 1f       	adc	r25, r21
    2454:	a0 1d       	adc	r26, r0
    2456:	08 95       	ret

00002458 <_exit>:
    2458:	f8 94       	cli

0000245a <__stop_program>:
    245a:	ff cf       	rjmp	.-2      	; 0x245a <__stop_program>
