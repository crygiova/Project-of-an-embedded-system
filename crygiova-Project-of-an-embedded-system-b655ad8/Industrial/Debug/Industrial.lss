
Industrial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000031e  00800100  000032aa  0000333e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080041e  0080041e  0000365c  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  0000365c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000006b5  00000000  00000000  0000488c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e3b  00000000  00000000  00004f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e80  00000000  00000000  00008d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003aac  00000000  00000000  0000abfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b0  00000000  00000000  0000e6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b73  00000000  00000000  0000ec58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000171a  00000000  00000000  0000f7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000008ec  00000000  00000000  00010ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  000117d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_1>
       8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_2>
       c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_3>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_15>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <myfont>:
      70:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
      80:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
      90:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
      a0:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
      b0:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
      c0:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
      d0:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
      e0:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
      f0:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
     100:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
     110:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
     120:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
     130:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
     140:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
     150:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
     160:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
     170:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
     180:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
     190:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
     1a0:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
     1b0:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
     1c0:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
     1d0:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
     1e0:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
     1f0:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
     200:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
     210:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
     220:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
     230:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
     240:	00 00 42 3c 08 00 04 02 04 02 00 00                 ..B<........

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	14 e0       	ldi	r17, 0x04	; 4
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	ea ea       	ldi	r30, 0xAA	; 170
     260:	f2 e3       	ldi	r31, 0x32	; 50
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	ae 31       	cpi	r26, 0x1E	; 30
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	14 e0       	ldi	r17, 0x04	; 4
     270:	ae e1       	ldi	r26, 0x1E	; 30
     272:	b4 e0       	ldi	r27, 0x04	; 4
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a2 33       	cpi	r26, 0x32	; 50
     27a:	b1 07       	cpc	r27, r17
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 8a 04 	call	0x914	; 0x914 <main>
     282:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <readADC>:
uint8_t resultADC;
uint8_t flagADC;

volatile char* extADC = 0x1400;

void readADC(enum channelsADC channel){
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	0f 92       	push	r0
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	89 83       	std	Y+1, r24	; 0x01
	switch(channel){
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	91 05       	cpc	r25, r1
     2a0:	69 f0       	breq	.+26     	; 0x2bc <readADC+0x32>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	1c f4       	brge	.+6      	; 0x2ae <readADC+0x24>
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	81 f0       	breq	.+32     	; 0x2cc <readADC+0x42>
     2ac:	27 c0       	rjmp	.+78     	; 0x2fc <readADC+0x72>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	91 05       	cpc	r25, r1
     2b2:	a1 f0       	breq	.+40     	; 0x2dc <readADC+0x52>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	91 05       	cpc	r25, r1
     2b8:	c9 f0       	breq	.+50     	; 0x2ec <readADC+0x62>
     2ba:	20 c0       	rjmp	.+64     	; 0x2fc <readADC+0x72>
		case Y_AXIS:
			extADC[0] = 0x04;
     2bc:	80 91 00 01 	lds	r24, 0x0100
     2c0:	90 91 01 01 	lds	r25, 0x0101
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
			break;
     2ca:	1f c0       	rjmp	.+62     	; 0x30a <readADC+0x80>
		case X_AXIS:
			extADC[0] = 0x05;
     2cc:	80 91 00 01 	lds	r24, 0x0100
     2d0:	90 91 01 01 	lds	r25, 0x0101
     2d4:	25 e0       	ldi	r18, 0x05	; 5
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
			break;
     2da:	17 c0       	rjmp	.+46     	; 0x30a <readADC+0x80>
		case L_SLIDER:
			extADC[0] = 0x06;
     2dc:	80 91 00 01 	lds	r24, 0x0100
     2e0:	90 91 01 01 	lds	r25, 0x0101
     2e4:	26 e0       	ldi	r18, 0x06	; 6
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
			break; 
     2ea:	0f c0       	rjmp	.+30     	; 0x30a <readADC+0x80>
		case R_SLIDER: 
			extADC[0] = 0x07;
     2ec:	80 91 00 01 	lds	r24, 0x0100
     2f0:	90 91 01 01 	lds	r25, 0x0101
     2f4:	27 e0       	ldi	r18, 0x07	; 7
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
			break;
     2fa:	07 c0       	rjmp	.+14     	; 0x30a <readADC+0x80>
		default:
			extADC[0] = 0x00;
     2fc:	80 91 00 01 	lds	r24, 0x0100
     300:	90 91 01 01 	lds	r25, 0x0101
     304:	fc 01       	movw	r30, r24
     306:	10 82       	st	Z, r1
			break;
     308:	00 00       	nop
	}
	
	//_delay_ms(100); //TODO: interrupt
	//result = *extADC;
	}
     30a:	0f 90       	pop	r0
     30c:	cf 91       	pop	r28
     30e:	df 91       	pop	r29
     310:	08 95       	ret

00000312 <ADC_read>:

uint8_t ADC_read(enum channelsADC channel){
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	0f 92       	push	r0
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	89 83       	std	Y+1, r24	; 0x01
	readADC(channel);
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	0e 94 45 01 	call	0x28a	; 0x28a <readADC>
	while(!flagADC); //TODO: Make it less pooling-style
     324:	00 00       	nop
     326:	80 91 22 04 	lds	r24, 0x0422
     32a:	88 23       	and	r24, r24
     32c:	e1 f3       	breq	.-8      	; 0x326 <ADC_read+0x14>
	//printf("ADC[%d]: %d \n\r", channel, resultADC);
	flagADC = 0;
     32e:	10 92 22 04 	sts	0x0422, r1
	return resultADC;
     332:	80 91 23 04 	lds	r24, 0x0423
     336:	0f 90       	pop	r0
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <initCAN>:
#include "can.h"


volatile uint8_t flagMCP; //FLAG for MCP 

void initCAN(enum canMode mode){
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <initCAN+0x6>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t t;
	switch (mode){
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	91 05       	cpc	r25, r1
     354:	a9 f0       	breq	.+42     	; 0x380 <initCAN+0x42>
     356:	83 30       	cpi	r24, 0x03	; 3
     358:	91 05       	cpc	r25, r1
     35a:	34 f4       	brge	.+12     	; 0x368 <initCAN+0x2a>
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	59 f0       	breq	.+22     	; 0x376 <initCAN+0x38>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	91 05       	cpc	r25, r1
     364:	51 f0       	breq	.+20     	; 0x37a <initCAN+0x3c>
     366:	15 c0       	rjmp	.+42     	; 0x392 <initCAN+0x54>
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	91 05       	cpc	r25, r1
     36c:	61 f0       	breq	.+24     	; 0x386 <initCAN+0x48>
     36e:	84 30       	cpi	r24, 0x04	; 4
     370:	91 05       	cpc	r25, r1
     372:	61 f0       	breq	.+24     	; 0x38c <initCAN+0x4e>
     374:	0e c0       	rjmp	.+28     	; 0x392 <initCAN+0x54>
		case(NORMAL):
			t = 0x00;			
     376:	19 82       	std	Y+1, r1	; 0x01
			break;
     378:	0c c0       	rjmp	.+24     	; 0x392 <initCAN+0x54>
		case(SLEEP):
			t = 0x20;
     37a:	80 e2       	ldi	r24, 0x20	; 32
     37c:	89 83       	std	Y+1, r24	; 0x01
			break;
     37e:	09 c0       	rjmp	.+18     	; 0x392 <initCAN+0x54>
		case(LOOPBACK):
			t = 0x40;			
     380:	80 e4       	ldi	r24, 0x40	; 64
     382:	89 83       	std	Y+1, r24	; 0x01
			break;
     384:	06 c0       	rjmp	.+12     	; 0x392 <initCAN+0x54>
		case(LISTEN):
			t = 0x60;
     386:	80 e6       	ldi	r24, 0x60	; 96
     388:	89 83       	std	Y+1, r24	; 0x01
			break;		
     38a:	03 c0       	rjmp	.+6      	; 0x392 <initCAN+0x54>
		case(CONFIG):
			t = 0x80;
     38c:	80 e8       	ldi	r24, 0x80	; 128
     38e:	89 83       	std	Y+1, r24	; 0x01
			break;
     390:	00 00       	nop
	};
	
	writeMCP(MCP_CANCTRL,t); //Sets mode
     392:	8f e0       	ldi	r24, 0x0F	; 15
     394:	69 81       	ldd	r22, Y+1	; 0x01
     396:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <writeMCP>
	writeMCP(MCP_RXB0CTRL, 0b01100000); //Disable all Filters buffer 0 //Todo, by names
     39a:	80 e6       	ldi	r24, 0x60	; 96
     39c:	60 e6       	ldi	r22, 0x60	; 96
     39e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <writeMCP>
	writeMCP(MCP_RXB1CTRL, 0b01100000); //Disable all Filters buffer 1
     3a2:	80 e7       	ldi	r24, 0x70	; 112
     3a4:	60 e6       	ldi	r22, 0x60	; 96
     3a6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <writeMCP>
	writeMCP(MCP_CANINTF,0x00); //Clear Pending Interrupts	
     3aa:	8c e2       	ldi	r24, 0x2C	; 44
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <writeMCP>
	writeMCP(MCP_CANINTE, 0x1C); //Enable reception interrupts on both buffers
     3b2:	8b e2       	ldi	r24, 0x2B	; 43
     3b4:	6c e1       	ldi	r22, 0x1C	; 28
     3b6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <writeMCP>
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	cf 91       	pop	r28
     3c0:	df 91       	pop	r29
     3c2:	08 95       	ret

000003c4 <sendCANJoy>:


void sendCANJoy(uint8_t buffer, struct joypos_t p, enum joydir_t d){
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	2f 97       	sbiw	r28, 0x0f	; 15
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	8c 87       	std	Y+12, r24	; 0x0c
     3e6:	7e 87       	std	Y+14, r23	; 0x0e
     3e8:	6d 87       	std	Y+13, r22	; 0x0d
     3ea:	4f 87       	std	Y+15, r20	; 0x0f
	struct canMessage message;
	
	message.id = JOY_MESSAGE;
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	89 83       	std	Y+1, r24	; 0x01
	message.size = 4;
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	8b 83       	std	Y+3, r24	; 0x03
	
	message.data[0] = p.x; //X component of the joy
     3f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     3fa:	8c 83       	std	Y+4, r24	; 0x04
	message.data[1] = p.y; //Y component of the joy
     3fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     3fe:	8d 83       	std	Y+5, r24	; 0x05
	message.data[2] = (uint8_t) d; //Direction according to the enum
     400:	8f 85       	ldd	r24, Y+15	; 0x0f
     402:	8e 83       	std	Y+6, r24	; 0x06
	message.data[3] = CAN_TERMINATION;
     404:	1f 82       	std	Y+7, r1	; 0x07
	
	printf ("Joy X: %d, Joy Y: %d Joy: Pos: %d \r\n", (uint8_t) message.data[0], (uint8_t) message.data[1], (uint8_t) message.data[2]);  
     406:	8c 81       	ldd	r24, Y+4	; 0x04
     408:	68 2f       	mov	r22, r24
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	8d 81       	ldd	r24, Y+5	; 0x05
     40e:	48 2f       	mov	r20, r24
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	8e 81       	ldd	r24, Y+6	; 0x06
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	8d b7       	in	r24, 0x3d	; 61
     41a:	9e b7       	in	r25, 0x3e	; 62
     41c:	08 97       	sbiw	r24, 0x08	; 8
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	9e bf       	out	0x3e, r25	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	8d bf       	out	0x3d, r24	; 61
     428:	8d b7       	in	r24, 0x3d	; 61
     42a:	9e b7       	in	r25, 0x3e	; 62
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	e2 e0       	ldi	r30, 0x02	; 2
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	dc 01       	movw	r26, r24
     434:	ed 93       	st	X+, r30
     436:	fc 93       	st	X, r31
     438:	fc 01       	movw	r30, r24
     43a:	73 83       	std	Z+3, r23	; 0x03
     43c:	62 83       	std	Z+2, r22	; 0x02
     43e:	dc 01       	movw	r26, r24
     440:	15 96       	adiw	r26, 0x05	; 5
     442:	5c 93       	st	X, r21
     444:	4e 93       	st	-X, r20
     446:	14 97       	sbiw	r26, 0x04	; 4
     448:	fc 01       	movw	r30, r24
     44a:	37 83       	std	Z+7, r19	; 0x07
     44c:	26 83       	std	Z+6, r18	; 0x06
     44e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
     452:	8d b7       	in	r24, 0x3d	; 61
     454:	9e b7       	in	r25, 0x3e	; 62
     456:	08 96       	adiw	r24, 0x08	; 8
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	9e bf       	out	0x3e, r25	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	8d bf       	out	0x3d, r24	; 61
	
	fillTxBufferMCP(buffer,message);
     462:	8c 85       	ldd	r24, Y+12	; 0x0c
     464:	c9 80       	ldd	r12, Y+1	; 0x01
     466:	da 80       	ldd	r13, Y+2	; 0x02
     468:	eb 80       	ldd	r14, Y+3	; 0x03
     46a:	fc 80       	ldd	r15, Y+4	; 0x04
     46c:	0d 81       	ldd	r16, Y+5	; 0x05
     46e:	1e 81       	ldd	r17, Y+6	; 0x06
     470:	2f 81       	ldd	r18, Y+7	; 0x07
     472:	38 85       	ldd	r19, Y+8	; 0x08
     474:	49 85       	ldd	r20, Y+9	; 0x09
     476:	5a 85       	ldd	r21, Y+10	; 0x0a
     478:	6b 85       	ldd	r22, Y+11	; 0x0b
     47a:	0e 94 be 0b 	call	0x177c	; 0x177c <fillTxBufferMCP>
	requestToSendMCP(buffer); 
     47e:	8c 85       	ldd	r24, Y+12	; 0x0c
     480:	0e 94 3a 0a 	call	0x1474	; 0x1474 <requestToSendMCP>
		
     484:	2f 96       	adiw	r28, 0x0f	; 15
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	08 95       	ret

000004a2 <printMenu>:
														"Options",
														"Help"
	
};

void printMenu(uint8_t menuOption){
     4a2:	df 93       	push	r29
     4a4:	cf 93       	push	r28
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <printMenu+0x6>
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     4ae:	19 82       	std	Y+1, r1	; 0x01
     4b0:	34 c0       	rjmp	.+104    	; 0x51a <__stack+0x1b>
		gotoCharOLED(c,0);
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
		if (c == menuOption) putInvertedSOLED(menu[c]);
     4ba:	99 81       	ldd	r25, Y+1	; 0x01
     4bc:	8a 81       	ldd	r24, Y+2	; 0x02
     4be:	98 17       	cp	r25, r24
     4c0:	a9 f4       	brne	.+42     	; 0x4ec <printMenu+0x4a>
     4c2:	47 e2       	ldi	r20, 0x27	; 39
     4c4:	51 e0       	ldi	r21, 0x01	; 1
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	28 2f       	mov	r18, r24
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	c9 01       	movw	r24, r18
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	84 0f       	add	r24, r20
     4e4:	95 1f       	adc	r25, r21
     4e6:	0e 94 27 08 	call	0x104e	; 0x104e <putInvertedSOLED>
     4ea:	14 c0       	rjmp	.+40     	; 0x514 <__stack+0x15>
		else putsOLED(menu[c]);
     4ec:	47 e2       	ldi	r20, 0x27	; 39
     4ee:	51 e0       	ldi	r21, 0x01	; 1
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	28 2f       	mov	r18, r24
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	c9 01       	movw	r24, r18
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	82 0f       	add	r24, r18
     4fe:	93 1f       	adc	r25, r19
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	84 0f       	add	r24, r20
     50e:	95 1f       	adc	r25, r21
     510:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
	
};

void printMenu(uint8_t menuOption){
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	83 30       	cpi	r24, 0x03	; 3
     51e:	48 f2       	brcs	.-110    	; 0x4b2 <printMenu+0x10>
		gotoCharOLED(c,0);
		if (c == menuOption) putInvertedSOLED(menu[c]);
		else putsOLED(menu[c]);
	}
}
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	cf 91       	pop	r28
     526:	df 91       	pop	r29
     528:	08 95       	ret

0000052a <initExtMemIface>:

void initExtMemIface(){
     52a:	df 93       	push	r29
     52c:	cf 93       	push	r28
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1 << SRE);
     532:	85 e5       	ldi	r24, 0x55	; 85
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	25 e5       	ldi	r18, 0x55	; 85
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	20 68       	ori	r18, 0x80	; 128
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
}
     544:	cf 91       	pop	r28
     546:	df 91       	pop	r29
     548:	08 95       	ret

0000054a <initTimer>:

void initTimer(){ //It will raise a timer interrupt every aprox 10th of sec.
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	//TCCR1B = 0b00000101; //Set source and prescaler
	TCCR1B |= (1 << CS11);
     552:	8e e4       	ldi	r24, 0x4E	; 78
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	2e e4       	ldi	r18, 0x4E	; 78
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f9 01       	movw	r30, r18
     55c:	20 81       	ld	r18, Z
     55e:	22 60       	ori	r18, 0x02	; 2
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
	TIMSK  |= (1 << TOIE1); //Enable interrupt by overlfow
     564:	89 e5       	ldi	r24, 0x59	; 89
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	29 e5       	ldi	r18, 0x59	; 89
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	f9 01       	movw	r30, r18
     56e:	20 81       	ld	r18, Z
     570:	20 68       	ori	r18, 0x80	; 128
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
}
     576:	cf 91       	pop	r28
     578:	df 91       	pop	r29
     57a:	08 95       	ret

0000057c <stopTimer>:

void stopTimer(){
     57c:	df 93       	push	r29
     57e:	cf 93       	push	r28
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS11);
     584:	8e e4       	ldi	r24, 0x4E	; 78
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2e e4       	ldi	r18, 0x4E	; 78
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	2d 7f       	andi	r18, 0xFD	; 253
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	
}
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <__vector_1>:




ISR(INT0_vect) //Interrupt routine for the ADC
{
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
	resultADC = *extADC;
     5b6:	80 91 00 01 	lds	r24, 0x0100
     5ba:	90 91 01 01 	lds	r25, 0x0101
     5be:	fc 01       	movw	r30, r24
     5c0:	80 81       	ld	r24, Z
     5c2:	80 93 23 04 	sts	0x0423, r24
	flagADC = 1;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	80 93 22 04 	sts	0x0422, r24
}	
     5cc:	cf 91       	pop	r28
     5ce:	df 91       	pop	r29
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_2>:

ISR(INT1_vect) //Interrupt routine for the Int1 (Joystick Button)
{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	8f 93       	push	r24
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	flagJoyButton = 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 21 04 	sts	0x0421, r24
}
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	8f 91       	pop	r24
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_3>:

ISR(INT2_vect) //Interrupt routine for the MCP2515 
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
     62e:	df 93       	push	r29
     630:	cf 93       	push	r28
     632:	0f 92       	push	r0
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
	uint8_t mcp_flags;
	mcp_flags = readMCP(MCP_CANINTF);
     638:	8c e2       	ldi	r24, 0x2C	; 44
     63a:	0e 94 b8 09 	call	0x1370	; 0x1370 <readMCP>
     63e:	89 83       	std	Y+1, r24	; 0x01
	printf("Before Clearing: INTFs in MCP: %X \r\n", mcp_flags);
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	28 2f       	mov	r18, r24
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	00 d0       	rcall	.+0      	; 0x648 <__vector_3+0x3c>
     648:	00 d0       	rcall	.+0      	; 0x64a <__vector_3+0x3e>
     64a:	8d b7       	in	r24, 0x3d	; 61
     64c:	9e b7       	in	r25, 0x3e	; 62
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	47 eb       	ldi	r20, 0xB7	; 183
     652:	51 e0       	ldi	r21, 0x01	; 1
     654:	fc 01       	movw	r30, r24
     656:	51 83       	std	Z+1, r21	; 0x01
     658:	40 83       	st	Z, r20
     65a:	fc 01       	movw	r30, r24
     65c:	33 83       	std	Z+3, r19	; 0x03
     65e:	22 83       	std	Z+2, r18	; 0x02
     660:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
	
	writeMCP(MCP_CANINTF,0x00); //Clear Flags
     66c:	8c e2       	ldi	r24, 0x2C	; 44
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <writeMCP>
	
	mcp_flags = readMCP(MCP_CANINTF);
     674:	8c e2       	ldi	r24, 0x2C	; 44
     676:	0e 94 b8 09 	call	0x1370	; 0x1370 <readMCP>
     67a:	89 83       	std	Y+1, r24	; 0x01
	printf("After Clearing: INTFs in MCP: %X \r\n", mcp_flags);
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	28 2f       	mov	r18, r24
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	00 d0       	rcall	.+0      	; 0x684 <__vector_3+0x78>
     684:	00 d0       	rcall	.+0      	; 0x686 <__vector_3+0x7a>
     686:	8d b7       	in	r24, 0x3d	; 61
     688:	9e b7       	in	r25, 0x3e	; 62
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	4c ed       	ldi	r20, 0xDC	; 220
     68e:	51 e0       	ldi	r21, 0x01	; 1
     690:	fc 01       	movw	r30, r24
     692:	51 83       	std	Z+1, r21	; 0x01
     694:	40 83       	st	Z, r20
     696:	fc 01       	movw	r30, r24
     698:	33 83       	std	Z+3, r19	; 0x03
     69a:	22 83       	std	Z+2, r18	; 0x02
     69c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0

	flagMCP = 1;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 93 24 04 	sts	0x0424, r24
	
}
     6ae:	0f 90       	pop	r0
     6b0:	cf 91       	pop	r28
     6b2:	df 91       	pop	r29
     6b4:	ff 91       	pop	r31
     6b6:	ef 91       	pop	r30
     6b8:	bf 91       	pop	r27
     6ba:	af 91       	pop	r26
     6bc:	9f 91       	pop	r25
     6be:	8f 91       	pop	r24
     6c0:	7f 91       	pop	r23
     6c2:	6f 91       	pop	r22
     6c4:	5f 91       	pop	r21
     6c6:	4f 91       	pop	r20
     6c8:	3f 91       	pop	r19
     6ca:	2f 91       	pop	r18
     6cc:	0f 90       	pop	r0
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	0f 90       	pop	r0
     6d2:	1f 90       	pop	r1
     6d4:	18 95       	reti

000006d6 <__vector_15>:

ISR(TIMER1_OVF_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     6ec:	80 91 1e 04 	lds	r24, 0x041E
     6f0:	90 91 1f 04 	lds	r25, 0x041F
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	90 93 1f 04 	sts	0x041F, r25
     6fa:	80 93 1e 04 	sts	0x041E, r24
	if( ticks >= 5 ) {
     6fe:	80 91 1e 04 	lds	r24, 0x041E
     702:	90 91 1f 04 	lds	r25, 0x041F
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	91 05       	cpc	r25, r1
     70a:	18 f0       	brcs	.+6      	; 0x712 <__vector_15+0x3c>
			readControl = 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 25 04 	sts	0x0425, r24
	}
}	
     712:	cf 91       	pop	r28
     714:	df 91       	pop	r29
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <initInterrupts>:
 

void initInterrupts(){
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= ~(1<<PD3); //Set INT1/PD3 as Input
     72c:	81 e3       	ldi	r24, 0x31	; 49
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	21 e3       	ldi	r18, 0x31	; 49
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	27 7f       	andi	r18, 0xF7	; 247
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
	PORTD |= (1<<PD3); //Set pullup
     73e:	82 e3       	ldi	r24, 0x32	; 50
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	22 e3       	ldi	r18, 0x32	; 50
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	f9 01       	movw	r30, r18
     748:	20 81       	ld	r18, Z
     74a:	28 60       	ori	r18, 0x08	; 8
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
	MCUCR |= 1<<ISC11; //Set interrupt on falling edge
     750:	85 e5       	ldi	r24, 0x55	; 85
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	25 e5       	ldi	r18, 0x55	; 85
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	f9 01       	movw	r30, r18
     75a:	20 81       	ld	r18, Z
     75c:	28 60       	ori	r18, 0x08	; 8
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
	EMCUCR &= ~(1<<ISC2); //Set interrupt on 0 at INT2
     762:	86 e5       	ldi	r24, 0x56	; 86
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	26 e5       	ldi	r18, 0x56	; 86
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	2e 7f       	andi	r18, 0xFE	; 254
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
	GICR |= (1<<INT1);
     774:	8b e5       	ldi	r24, 0x5B	; 91
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	2b e5       	ldi	r18, 0x5B	; 91
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	f9 01       	movw	r30, r18
     77e:	20 81       	ld	r18, Z
     780:	20 68       	ori	r18, 0x80	; 128
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
	GICR |= (1<<INT0); 
     786:	8b e5       	ldi	r24, 0x5B	; 91
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	2b e5       	ldi	r18, 0x5B	; 91
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	20 64       	ori	r18, 0x40	; 64
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
	GICR |= (1<<INT2); 
     798:	8b e5       	ldi	r24, 0x5B	; 91
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	2b e5       	ldi	r18, 0x5B	; 91
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	f9 01       	movw	r30, r18
     7a2:	20 81       	ld	r18, Z
     7a4:	20 62       	ori	r18, 0x20	; 32
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
	sei();
     7aa:	78 94       	sei
}
     7ac:	cf 91       	pop	r28
     7ae:	df 91       	pop	r29
     7b0:	08 95       	ret

000007b2 <printHelp>:

void printHelp(){
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	2e 97       	sbiw	r28, 0x0e	; 14
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
	gotoCharOLED(0,0);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
	putsOLED("Need help ?");
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
	gotoCharOLED(1,0);
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
	putsOLED("Try google ...");
     7e2:	8c e0       	ldi	r24, 0x0C	; 12
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
	gotoCharOLED(2,0);
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
	putsOLED("or buy me beer");
     7f2:	8b e1       	ldi	r24, 0x1B	; 27
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e4       	ldi	r25, 0x40	; 64
     7fe:	ac e9       	ldi	r26, 0x9C	; 156
     800:	b5 e4       	ldi	r27, 0x45	; 69
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	ab 83       	std	Y+3, r26	; 0x03
     808:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     80a:	69 81       	ldd	r22, Y+1	; 0x01
     80c:	7a 81       	ldd	r23, Y+2	; 0x02
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	2a e9       	ldi	r18, 0x9A	; 154
     814:	39 e9       	ldi	r19, 0x99	; 153
     816:	49 e9       	ldi	r20, 0x99	; 153
     818:	54 e4       	ldi	r21, 0x44	; 68
     81a:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	8d 83       	std	Y+5, r24	; 0x05
     824:	9e 83       	std	Y+6, r25	; 0x06
     826:	af 83       	std	Y+7, r26	; 0x07
     828:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     82a:	11 e0       	ldi	r17, 0x01	; 1
     82c:	6d 81       	ldd	r22, Y+5	; 0x05
     82e:	7e 81       	ldd	r23, Y+6	; 0x06
     830:	8f 81       	ldd	r24, Y+7	; 0x07
     832:	98 85       	ldd	r25, Y+8	; 0x08
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__ltsf2>
     840:	88 23       	and	r24, r24
     842:	0c f0       	brlt	.+2      	; 0x846 <printHelp+0x94>
     844:	10 e0       	ldi	r17, 0x00	; 0
     846:	11 23       	and	r17, r17
     848:	29 f0       	breq	.+10     	; 0x854 <printHelp+0xa2>
		__ticks = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	9a 87       	std	Y+10, r25	; 0x0a
     850:	89 87       	std	Y+9, r24	; 0x09
     852:	46 c0       	rjmp	.+140    	; 0x8e0 <printHelp+0x12e>
	else if (__tmp > 65535)
     854:	11 e0       	ldi	r17, 0x01	; 1
     856:	6d 81       	ldd	r22, Y+5	; 0x05
     858:	7e 81       	ldd	r23, Y+6	; 0x06
     85a:	8f 81       	ldd	r24, Y+7	; 0x07
     85c:	98 85       	ldd	r25, Y+8	; 0x08
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	3f ef       	ldi	r19, 0xFF	; 255
     862:	4f e7       	ldi	r20, 0x7F	; 127
     864:	57 e4       	ldi	r21, 0x47	; 71
     866:	0e 94 09 12 	call	0x2412	; 0x2412 <__gtsf2>
     86a:	18 16       	cp	r1, r24
     86c:	0c f0       	brlt	.+2      	; 0x870 <printHelp+0xbe>
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	11 23       	and	r17, r17
     872:	61 f1       	breq	.+88     	; 0x8cc <printHelp+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     874:	69 81       	ldd	r22, Y+1	; 0x01
     876:	7a 81       	ldd	r23, Y+2	; 0x02
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	51 e4       	ldi	r21, 0x41	; 65
     884:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	9a 87       	std	Y+10, r25	; 0x0a
     89a:	89 87       	std	Y+9, r24	; 0x09
     89c:	12 c0       	rjmp	.+36     	; 0x8c2 <printHelp+0x110>
     89e:	8a e7       	ldi	r24, 0x7A	; 122
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	9c 87       	std	Y+12, r25	; 0x0c
     8a4:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     8aa:	8c 01       	movw	r16, r24
     8ac:	c8 01       	movw	r24, r16
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <printHelp+0xfc>
     8b2:	8c 01       	movw	r16, r24
     8b4:	1c 87       	std	Y+12, r17	; 0x0c
     8b6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b8:	89 85       	ldd	r24, Y+9	; 0x09
     8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	9a 87       	std	Y+10, r25	; 0x0a
     8c0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c2:	89 85       	ldd	r24, Y+9	; 0x09
     8c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	51 f7       	brne	.-44     	; 0x89e <printHelp+0xec>
     8ca:	17 c0       	rjmp	.+46     	; 0x8fa <printHelp+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8cc:	6d 81       	ldd	r22, Y+5	; 0x05
     8ce:	7e 81       	ldd	r23, Y+6	; 0x06
     8d0:	8f 81       	ldd	r24, Y+7	; 0x07
     8d2:	98 85       	ldd	r25, Y+8	; 0x08
     8d4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	9a 87       	std	Y+10, r25	; 0x0a
     8de:	89 87       	std	Y+9, r24	; 0x09
     8e0:	89 85       	ldd	r24, Y+9	; 0x09
     8e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e4:	9e 87       	std	Y+14, r25	; 0x0e
     8e6:	8d 87       	std	Y+13, r24	; 0x0d
     8e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ec:	8c 01       	movw	r16, r24
     8ee:	c8 01       	movw	r24, r16
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <printHelp+0x13e>
     8f4:	8c 01       	movw	r16, r24
     8f6:	1e 87       	std	Y+14, r17	; 0x0e
     8f8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(5000);
	clearOLED();
     8fa:	0e 94 c3 08 	call	0x1186	; 0x1186 <clearOLED>
}
     8fe:	2e 96       	adiw	r28, 0x0e	; 14
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	cf 91       	pop	r28
     90c:	df 91       	pop	r29
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <main>:


int main(void)
{
     914:	cf 92       	push	r12
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	c5 54       	subi	r28, 0x45	; 69
     92a:	d0 40       	sbci	r29, 0x00	; 0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
	initUART(UBBR);
     936:	8f e1       	ldi	r24, 0x1F	; 31
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <initUART>
	printf("Simple RAM TEST \r\n");
     93e:	8a e2       	ldi	r24, 0x2A	; 42
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
	initExtMemIface();
     946:	0e 94 95 02 	call	0x52a	; 0x52a <initExtMemIface>
	initTimer();
     94a:	0e 94 a5 02 	call	0x54a	; 0x54a <initTimer>
	initInterrupts();
     94e:	0e 94 92 03 	call	0x724	; 0x724 <initInterrupts>
	SRAM_test();
     952:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <SRAM_test>
	joyInit();
     956:	0e 94 df 05 	call	0xbbe	; 0xbbe <joyInit>
	initOLED();
     95a:	0e 94 4a 07 	call	0xe94	; 0xe94 <initOLED>
	initSPI();
     95e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <initSPI>
	initCAN(NORMAL);
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 9f 01 	call	0x33e	; 0x33e <initCAN>
     968:	01 c0       	rjmp	.+2      	; 0x96c <main+0x58>
			printf ("Buffer 0 ID: %d, Size: %d, Data: %s \r\n", m0.id, m0.size, m0.data);
			printf ("Buffer 1 ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
			//printf("Porco Dio !!!\r\n");
		}
		
	}
     96a:	00 00       	nop
	enum joydir_t d;
	struct canMessage m0,m1;

	 while(1){
		 
		if (readControl) {
     96c:	80 91 25 04 	lds	r24, 0x0425
     970:	88 23       	and	r24, r24
     972:	09 f4       	brne	.+2      	; 0x976 <main+0x62>
     974:	3f c0       	rjmp	.+126    	; 0x9f4 <main+0xe0>
			readControl = 0;
     976:	10 92 25 04 	sts	0x0425, r1
			d = getJoyDirection();
     97a:	0e 94 04 06 	call	0xc08	; 0xc08 <getJoyDirection>
     97e:	89 83       	std	Y+1, r24	; 0x01
			p = getJoyPosition();
     980:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getJoyPosition>
     984:	9b 83       	std	Y+3, r25	; 0x03
     986:	8a 83       	std	Y+2, r24	; 0x02
		    sendCANJoy(2,p,d);
     988:	2a 81       	ldd	r18, Y+2	; 0x02
     98a:	3b 81       	ldd	r19, Y+3	; 0x03
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	b9 01       	movw	r22, r18
     990:	49 81       	ldd	r20, Y+1	; 0x01
     992:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sendCANJoy>
			if (d == TOP || d == RIGHT_TOP || d == LEFT_TOP) menuOption = (menuOption-1)%NUM_MENU_OPTIONS;
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	84 30       	cpi	r24, 0x04	; 4
     99a:	31 f0       	breq	.+12     	; 0x9a8 <main+0x94>
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <main+0x94>
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	69 f4       	brne	.+26     	; 0x9c2 <main+0xae>
     9a8:	80 91 20 04 	lds	r24, 0x0420
     9ac:	88 2f       	mov	r24, r24
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	23 e0       	ldi	r18, 0x03	; 3
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	b9 01       	movw	r22, r18
     9b8:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__divmodhi4>
     9bc:	80 93 20 04 	sts	0x0420, r24
     9c0:	15 c0       	rjmp	.+42     	; 0x9ec <main+0xd8>
			else if (d == BOTTOM || d == RIGHT_BOTTOM|| d == LEFT_BOTTOM) menuOption = (menuOption+1)%NUM_MENU_OPTIONS;
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	85 30       	cpi	r24, 0x05	; 5
     9c6:	31 f0       	breq	.+12     	; 0x9d4 <main+0xc0>
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <main+0xc0>
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	88 23       	and	r24, r24
     9d2:	61 f4       	brne	.+24     	; 0x9ec <main+0xd8>
     9d4:	80 91 20 04 	lds	r24, 0x0420
     9d8:	88 2f       	mov	r24, r24
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	23 e0       	ldi	r18, 0x03	; 3
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	b9 01       	movw	r22, r18
     9e4:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__divmodhi4>
     9e8:	80 93 20 04 	sts	0x0420, r24
			printMenu(menuOption);
     9ec:	80 91 20 04 	lds	r24, 0x0420
     9f0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <printMenu>
		} if (flagJoyButton) {
     9f4:	80 91 21 04 	lds	r24, 0x0421
     9f8:	88 23       	and	r24, r24
     9fa:	09 f4       	brne	.+2      	; 0x9fe <main+0xea>
     9fc:	54 c0       	rjmp	.+168    	; 0xaa6 <main+0x192>
		
			struct canMessage m2s;
			flagJoyButton = 0;
     9fe:	10 92 21 04 	sts	0x0421, r1
			gotoCharOLED(7,0);
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
			putsOLED("                        "); //Cleans last selected option from screen
     a0a:	8c e3       	ldi	r24, 0x3C	; 60
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
			switch(menuOption){
     a12:	80 91 20 04 	lds	r24, 0x0420
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	91 05       	cpc	r25, r1
     a1e:	71 f1       	breq	.+92     	; 0xa7c <main+0x168>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	91 05       	cpc	r25, r1
     a24:	a1 f1       	breq	.+104    	; 0xa8e <main+0x17a>
     a26:	00 97       	sbiw	r24, 0x00	; 0
     a28:	a9 f5       	brne	.+106    	; 0xa94 <main+0x180>
				case 0: //Play
					gotoCharOLED(7,0);
     a2a:	87 e0       	ldi	r24, 0x07	; 7
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
					putsOLED("PLAY");
     a32:	85 e5       	ldi	r24, 0x55	; 85
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
					
					m2s.id = 95;
     a3a:	8f e5       	ldi	r24, 0x5F	; 95
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	9b 8f       	std	Y+27, r25	; 0x1b
     a40:	8a 8f       	std	Y+26, r24	; 0x1a
					m2s.size = 5;
     a42:	85 e0       	ldi	r24, 0x05	; 5
     a44:	8c 8f       	std	Y+28, r24	; 0x1c
					m2s.data[0] = 'O';
     a46:	8f e4       	ldi	r24, 0x4F	; 79
     a48:	8d 8f       	std	Y+29, r24	; 0x1d
					m2s.data[1] = 'K';
     a4a:	8b e4       	ldi	r24, 0x4B	; 75
     a4c:	8e 8f       	std	Y+30, r24	; 0x1e
					m2s.data[2] = ' ';
     a4e:	80 e2       	ldi	r24, 0x20	; 32
     a50:	8f 8f       	std	Y+31, r24	; 0x1f
					m2s.data[3] = '6';
     a52:	86 e3       	ldi	r24, 0x36	; 54
     a54:	88 a3       	std	Y+32, r24	; 0x20
					m2s.data[4] = 0x00;
     a56:	19 a2       	std	Y+33, r1	; 0x21
					fillTxBufferMCP(0,m2s);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	ca 8c       	ldd	r12, Y+26	; 0x1a
     a5c:	db 8c       	ldd	r13, Y+27	; 0x1b
     a5e:	ec 8c       	ldd	r14, Y+28	; 0x1c
     a60:	fd 8c       	ldd	r15, Y+29	; 0x1d
     a62:	0e 8d       	ldd	r16, Y+30	; 0x1e
     a64:	1f 8d       	ldd	r17, Y+31	; 0x1f
     a66:	28 a1       	ldd	r18, Y+32	; 0x20
     a68:	39 a1       	ldd	r19, Y+33	; 0x21
     a6a:	4a a1       	ldd	r20, Y+34	; 0x22
     a6c:	5b a1       	ldd	r21, Y+35	; 0x23
     a6e:	6c a1       	ldd	r22, Y+36	; 0x24
     a70:	0e 94 be 0b 	call	0x177c	; 0x177c <fillTxBufferMCP>
					requestToSendMCP(0);
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 3a 0a 	call	0x1474	; 0x1474 <requestToSendMCP>
					break;
     a7a:	15 c0       	rjmp	.+42     	; 0xaa6 <main+0x192>
					
			   case 1: //Options
					gotoCharOLED(7,0);
     a7c:	87 e0       	ldi	r24, 0x07	; 7
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
					putsOLED("OPTIONS");
     a84:	8a e5       	ldi	r24, 0x5A	; 90
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
					break;
     a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <main+0x192>
					
			   case 2: //Help
					printHelp();
     a8e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <printHelp>
					break;
     a92:	09 c0       	rjmp	.+18     	; 0xaa6 <main+0x192>
					
			  default:
					gotoCharOLED(7,0);
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	0e 94 be 07 	call	0xf7c	; 0xf7c <gotoCharOLED>
					putsOLED("Stick to the OPTIONS !!!");
     a9c:	82 e6       	ldi	r24, 0x62	; 98
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	0e 94 fe 07 	call	0xffc	; 0xffc <putsOLED>
					break;
     aa4:	00 00       	nop
				
			}
		}
		
		if(flagMCP) {
     aa6:	80 91 24 04 	lds	r24, 0x0424
     aaa:	88 23       	and	r24, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <main+0x19c>
     aae:	5d cf       	rjmp	.-326    	; 0x96a <main+0x56>
			flagMCP = 0;
     ab0:	10 92 24 04 	sts	0x0424, r1
			struct canMessage m0,m1;
			m0 = readRxBufferMCP(0);
     ab4:	ce 01       	movw	r24, r28
     ab6:	cb 96       	adiw	r24, 0x3b	; 59
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <readRxBufferMCP>
     abe:	ce 01       	movw	r24, r28
     ac0:	85 96       	adiw	r24, 0x25	; 37
     ac2:	9e 01       	movw	r18, r28
     ac4:	25 5c       	subi	r18, 0xC5	; 197
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	4b e0       	ldi	r20, 0x0B	; 11
     aca:	f9 01       	movw	r30, r18
     acc:	00 80       	ld	r0, Z
     ace:	2f 5f       	subi	r18, 0xFF	; 255
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	00 82       	st	Z, r0
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	41 50       	subi	r20, 0x01	; 1
     ada:	44 23       	and	r20, r20
     adc:	b1 f7       	brne	.-20     	; 0xaca <main+0x1b6>
			m1 = readRxBufferMCP(1);
     ade:	ce 01       	movw	r24, r28
     ae0:	cb 96       	adiw	r24, 0x3b	; 59
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <readRxBufferMCP>
     ae8:	ce 01       	movw	r24, r28
     aea:	c0 96       	adiw	r24, 0x30	; 48
     aec:	9e 01       	movw	r18, r28
     aee:	25 5c       	subi	r18, 0xC5	; 197
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	4b e0       	ldi	r20, 0x0B	; 11
     af4:	f9 01       	movw	r30, r18
     af6:	00 80       	ld	r0, Z
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	fc 01       	movw	r30, r24
     afe:	00 82       	st	Z, r0
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	41 50       	subi	r20, 0x01	; 1
     b04:	44 23       	and	r20, r20
     b06:	b1 f7       	brne	.-20     	; 0xaf4 <main+0x1e0>
			printf ("Buffer 0 ID: %d, Size: %d, Data: %s \r\n", m0.id, m0.size, m0.data);
     b08:	4d a1       	ldd	r20, Y+37	; 0x25
     b0a:	5e a1       	ldd	r21, Y+38	; 0x26
     b0c:	8f a1       	ldd	r24, Y+39	; 0x27
     b0e:	28 2f       	mov	r18, r24
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	8d b7       	in	r24, 0x3d	; 61
     b14:	9e b7       	in	r25, 0x3e	; 62
     b16:	08 97       	sbiw	r24, 0x08	; 8
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	9e bf       	out	0x3e, r25	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	8d bf       	out	0x3d, r24	; 61
     b22:	8d b7       	in	r24, 0x3d	; 61
     b24:	9e b7       	in	r25, 0x3e	; 62
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	6b e7       	ldi	r22, 0x7B	; 123
     b2a:	72 e0       	ldi	r23, 0x02	; 2
     b2c:	fc 01       	movw	r30, r24
     b2e:	71 83       	std	Z+1, r23	; 0x01
     b30:	60 83       	st	Z, r22
     b32:	fc 01       	movw	r30, r24
     b34:	53 83       	std	Z+3, r21	; 0x03
     b36:	42 83       	std	Z+2, r20	; 0x02
     b38:	fc 01       	movw	r30, r24
     b3a:	35 83       	std	Z+5, r19	; 0x05
     b3c:	24 83       	std	Z+4, r18	; 0x04
     b3e:	9e 01       	movw	r18, r28
     b40:	2b 5d       	subi	r18, 0xDB	; 219
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	2d 5f       	subi	r18, 0xFD	; 253
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	fc 01       	movw	r30, r24
     b4a:	37 83       	std	Z+7, r19	; 0x07
     b4c:	26 83       	std	Z+6, r18	; 0x06
     b4e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
     b52:	8d b7       	in	r24, 0x3d	; 61
     b54:	9e b7       	in	r25, 0x3e	; 62
     b56:	08 96       	adiw	r24, 0x08	; 8
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	9e bf       	out	0x3e, r25	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	8d bf       	out	0x3d, r24	; 61
			printf ("Buffer 1 ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
     b62:	48 a9       	ldd	r20, Y+48	; 0x30
     b64:	59 a9       	ldd	r21, Y+49	; 0x31
     b66:	8a a9       	ldd	r24, Y+50	; 0x32
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	ed b7       	in	r30, 0x3d	; 61
     b6e:	fe b7       	in	r31, 0x3e	; 62
     b70:	38 97       	sbiw	r30, 0x08	; 8
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	fe bf       	out	0x3e, r31	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	ed bf       	out	0x3d, r30	; 61
     b7c:	8d b7       	in	r24, 0x3d	; 61
     b7e:	9e b7       	in	r25, 0x3e	; 62
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	62 ea       	ldi	r22, 0xA2	; 162
     b84:	72 e0       	ldi	r23, 0x02	; 2
     b86:	fc 01       	movw	r30, r24
     b88:	71 83       	std	Z+1, r23	; 0x01
     b8a:	60 83       	st	Z, r22
     b8c:	fc 01       	movw	r30, r24
     b8e:	53 83       	std	Z+3, r21	; 0x03
     b90:	42 83       	std	Z+2, r20	; 0x02
     b92:	fc 01       	movw	r30, r24
     b94:	35 83       	std	Z+5, r19	; 0x05
     b96:	24 83       	std	Z+4, r18	; 0x04
     b98:	9e 01       	movw	r18, r28
     b9a:	20 5d       	subi	r18, 0xD0	; 208
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	2d 5f       	subi	r18, 0xFD	; 253
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	fc 01       	movw	r30, r24
     ba4:	37 83       	std	Z+7, r19	; 0x07
     ba6:	26 83       	std	Z+6, r18	; 0x06
     ba8:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
     bac:	8d b7       	in	r24, 0x3d	; 61
     bae:	9e b7       	in	r25, 0x3e	; 62
     bb0:	08 96       	adiw	r24, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	9e bf       	out	0x3e, r25	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	8d bf       	out	0x3d, r24	; 61
			//printf("Porco Dio !!!\r\n");
		}
		
	}
     bbc:	d7 ce       	rjmp	.-594    	; 0x96c <main+0x58>

00000bbe <joyInit>:

volatile uint8_t flagJoyButton = 0; //Initialize flag for joybutton
struct joypos_t mPoint; //Will be initialized in runntime


void joyInit(){
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	mPoint.x = ADC_read(X_AXIS);
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     bcc:	80 93 26 04 	sts	0x0426, r24
	mPoint.y = ADC_read(Y_AXIS);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     bd6:	80 93 27 04 	sts	0x0427, r24
}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <getJoyPosition>:

struct joypos_t getJoyPosition(){
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <getJoyPosition+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
	r.x = ADC_read(X_AXIS);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     bf0:	89 83       	std	Y+1, r24	; 0x01
	r.y = ADC_read(Y_AXIS);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     bf8:	8a 83       	std	Y+2, r24	; 0x02
	return r;	
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <getJoyDirection>:

enum joydir_t getJoyDirection(){
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <getJoyDirection+0x6>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
    r = getJoyPosition();
     c12:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getJoyPosition>
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
	if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) return CENTER;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	80 91 26 04 	lds	r24, 0x0426
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a9 01       	movw	r20, r18
     c2a:	48 1b       	sub	r20, r24
     c2c:	59 0b       	sbc	r21, r25
     c2e:	ca 01       	movw	r24, r20
     c30:	5f ef       	ldi	r21, 0xFF	; 255
     c32:	88 3e       	cpi	r24, 0xE8	; 232
     c34:	95 07       	cpc	r25, r21
     c36:	6c f1       	brlt	.+90     	; 0xc92 <getJoyDirection+0x8a>
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	80 91 26 04 	lds	r24, 0x0426
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	48 1b       	sub	r20, r24
     c4a:	59 0b       	sbc	r21, r25
     c4c:	ca 01       	movw	r24, r20
     c4e:	89 31       	cpi	r24, 0x19	; 25
     c50:	91 05       	cpc	r25, r1
     c52:	fc f4       	brge	.+62     	; 0xc92 <getJoyDirection+0x8a>
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	80 91 27 04 	lds	r24, 0x0427
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a9 01       	movw	r20, r18
     c64:	48 1b       	sub	r20, r24
     c66:	59 0b       	sbc	r21, r25
     c68:	ca 01       	movw	r24, r20
     c6a:	5f ef       	ldi	r21, 0xFF	; 255
     c6c:	88 3e       	cpi	r24, 0xE8	; 232
     c6e:	95 07       	cpc	r25, r21
     c70:	84 f0       	brlt	.+32     	; 0xc92 <getJoyDirection+0x8a>
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	80 91 27 04 	lds	r24, 0x0427
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a9 01       	movw	r20, r18
     c82:	48 1b       	sub	r20, r24
     c84:	59 0b       	sbc	r21, r25
     c86:	ca 01       	movw	r24, r20
     c88:	89 31       	cpi	r24, 0x19	; 25
     c8a:	91 05       	cpc	r25, r1
     c8c:	14 f4       	brge	.+4      	; 0xc92 <getJoyDirection+0x8a>
     c8e:	88 e0       	ldi	r24, 0x08	; 8
     c90:	7d c0       	rjmp	.+250    	; 0xd8c <getJoyDirection+0x184>
	else {
		if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && !abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	80 91 26 04 	lds	r24, 0x0426
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	a9 01       	movw	r20, r18
     ca2:	48 1b       	sub	r20, r24
     ca4:	59 0b       	sbc	r21, r25
     ca6:	ca 01       	movw	r24, r20
     ca8:	5f ef       	ldi	r21, 0xFF	; 255
     caa:	88 3e       	cpi	r24, 0xE8	; 232
     cac:	95 07       	cpc	r25, r21
     cae:	bc f0       	brlt	.+46     	; 0xcde <getJoyDirection+0xd6>
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	80 91 26 04 	lds	r24, 0x0426
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	a9 01       	movw	r20, r18
     cc0:	48 1b       	sub	r20, r24
     cc2:	59 0b       	sbc	r21, r25
     cc4:	ca 01       	movw	r24, r20
     cc6:	89 31       	cpi	r24, 0x19	; 25
     cc8:	91 05       	cpc	r25, r1
     cca:	4c f4       	brge	.+18     	; 0xcde <getJoyDirection+0xd6>
			if (r.y > mPoint.y) return TOP;
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	80 91 27 04 	lds	r24, 0x0427
     cd2:	89 17       	cp	r24, r25
     cd4:	10 f4       	brcc	.+4      	; 0xcda <getJoyDirection+0xd2>
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	59 c0       	rjmp	.+178    	; 0xd8c <getJoyDirection+0x184>
			else return BOTTOM;
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	57 c0       	rjmp	.+174    	; 0xd8c <getJoyDirection+0x184>
		}
		if (!abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	80 91 27 04 	lds	r24, 0x0427
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a9 01       	movw	r20, r18
     cee:	48 1b       	sub	r20, r24
     cf0:	59 0b       	sbc	r21, r25
     cf2:	ca 01       	movw	r24, r20
     cf4:	5f ef       	ldi	r21, 0xFF	; 255
     cf6:	88 3e       	cpi	r24, 0xE8	; 232
     cf8:	95 07       	cpc	r25, r21
     cfa:	bc f0       	brlt	.+46     	; 0xd2a <getJoyDirection+0x122>
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	80 91 27 04 	lds	r24, 0x0427
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	a9 01       	movw	r20, r18
     d0c:	48 1b       	sub	r20, r24
     d0e:	59 0b       	sbc	r21, r25
     d10:	ca 01       	movw	r24, r20
     d12:	89 31       	cpi	r24, 0x19	; 25
     d14:	91 05       	cpc	r25, r1
     d16:	4c f4       	brge	.+18     	; 0xd2a <getJoyDirection+0x122>
			if (r.x > mPoint.x) return RIGHT;
     d18:	99 81       	ldd	r25, Y+1	; 0x01
     d1a:	80 91 26 04 	lds	r24, 0x0426
     d1e:	89 17       	cp	r24, r25
     d20:	10 f4       	brcc	.+4      	; 0xd26 <getJoyDirection+0x11e>
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	33 c0       	rjmp	.+102    	; 0xd8c <getJoyDirection+0x184>
			else return LEFT;
     d26:	86 e0       	ldi	r24, 0x06	; 6
     d28:	31 c0       	rjmp	.+98     	; 0xd8c <getJoyDirection+0x184>
		} 
		if (r.x < mPoint.x && r.y < mPoint.y) return LEFT_BOTTOM; 
     d2a:	99 81       	ldd	r25, Y+1	; 0x01
     d2c:	80 91 26 04 	lds	r24, 0x0426
     d30:	98 17       	cp	r25, r24
     d32:	38 f4       	brcc	.+14     	; 0xd42 <getJoyDirection+0x13a>
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	80 91 27 04 	lds	r24, 0x0427
     d3a:	98 17       	cp	r25, r24
     d3c:	10 f4       	brcc	.+4      	; 0xd42 <getJoyDirection+0x13a>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	25 c0       	rjmp	.+74     	; 0xd8c <getJoyDirection+0x184>
		if (r.x < mPoint.x && r.y > mPoint.y) return LEFT_TOP;
     d42:	99 81       	ldd	r25, Y+1	; 0x01
     d44:	80 91 26 04 	lds	r24, 0x0426
     d48:	98 17       	cp	r25, r24
     d4a:	38 f4       	brcc	.+14     	; 0xd5a <getJoyDirection+0x152>
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	80 91 27 04 	lds	r24, 0x0427
     d52:	89 17       	cp	r24, r25
     d54:	10 f4       	brcc	.+4      	; 0xd5a <getJoyDirection+0x152>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	19 c0       	rjmp	.+50     	; 0xd8c <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y < mPoint.y) return RIGHT_BOTTOM;
     d5a:	99 81       	ldd	r25, Y+1	; 0x01
     d5c:	80 91 26 04 	lds	r24, 0x0426
     d60:	89 17       	cp	r24, r25
     d62:	38 f4       	brcc	.+14     	; 0xd72 <getJoyDirection+0x16a>
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	80 91 27 04 	lds	r24, 0x0427
     d6a:	98 17       	cp	r25, r24
     d6c:	10 f4       	brcc	.+4      	; 0xd72 <getJoyDirection+0x16a>
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	0d c0       	rjmp	.+26     	; 0xd8c <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y > mPoint.y) return RIGHT_TOP;
     d72:	99 81       	ldd	r25, Y+1	; 0x01
     d74:	80 91 26 04 	lds	r24, 0x0426
     d78:	89 17       	cp	r24, r25
     d7a:	38 f4       	brcc	.+14     	; 0xd8a <getJoyDirection+0x182>
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	80 91 27 04 	lds	r24, 0x0427
     d82:	89 17       	cp	r24, r25
     d84:	10 f4       	brcc	.+4      	; 0xd8a <getJoyDirection+0x182>
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <getJoyDirection+0x184>
	}
	
	return CENTER; //In case of error return inhert NEVER USED
     d8a:	88 e0       	ldi	r24, 0x08	; 8
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <printdir>:



	
	void printdir(enum joydir_t d) {
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	89 83       	std	Y+1, r24	; 0x01
		switch (d){
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	91 05       	cpc	r25, r1
     dac:	01 f1       	breq	.+64     	; 0xdee <printdir+0x58>
     dae:	85 30       	cpi	r24, 0x05	; 5
     db0:	91 05       	cpc	r25, r1
     db2:	84 f4       	brge	.+32     	; 0xdd4 <printdir+0x3e>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	c1 f1       	breq	.+112    	; 0xe2a <printdir+0x94>
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	91 05       	cpc	r25, r1
     dbe:	1c f4       	brge	.+6      	; 0xdc6 <printdir+0x30>
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	c1 f1       	breq	.+112    	; 0xe34 <printdir+0x9e>
     dc4:	41 c0       	rjmp	.+130    	; 0xe48 <printdir+0xb2>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	91 05       	cpc	r25, r1
     dca:	29 f1       	breq	.+74     	; 0xe16 <printdir+0x80>
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	39 f1       	breq	.+78     	; 0xe20 <printdir+0x8a>
     dd2:	3a c0       	rjmp	.+116    	; 0xe48 <printdir+0xb2>
     dd4:	86 30       	cpi	r24, 0x06	; 6
     dd6:	91 05       	cpc	r25, r1
     dd8:	a1 f0       	breq	.+40     	; 0xe02 <printdir+0x6c>
     dda:	86 30       	cpi	r24, 0x06	; 6
     ddc:	91 05       	cpc	r25, r1
     dde:	64 f0       	brlt	.+24     	; 0xdf8 <printdir+0x62>
     de0:	87 30       	cpi	r24, 0x07	; 7
     de2:	91 05       	cpc	r25, r1
     de4:	99 f0       	breq	.+38     	; 0xe0c <printdir+0x76>
     de6:	88 30       	cpi	r24, 0x08	; 8
     de8:	91 05       	cpc	r25, r1
     dea:	49 f1       	breq	.+82     	; 0xe3e <printdir+0xa8>
     dec:	2d c0       	rjmp	.+90     	; 0xe48 <printdir+0xb2>
			case TOP: printf("TOP \r\n"); break;
     dee:	89 ec       	ldi	r24, 0xC9	; 201
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     df6:	28 c0       	rjmp	.+80     	; 0xe48 <printdir+0xb2>
			case BOTTOM: printf("BOTTOM \r\n"); break;
     df8:	8f ec       	ldi	r24, 0xCF	; 207
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e00:	23 c0       	rjmp	.+70     	; 0xe48 <printdir+0xb2>
			case LEFT: printf("LEFT \r\n"); break;
     e02:	88 ed       	ldi	r24, 0xD8	; 216
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e0a:	1e c0       	rjmp	.+60     	; 0xe48 <printdir+0xb2>
			case RIGHT: printf("RIGHT \r\n"); break;
     e0c:	8f ed       	ldi	r24, 0xDF	; 223
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <printdir+0xb2>
			case RIGHT_BOTTOM: printf("RIGHT_BOTTOM \r\n"); break;
     e16:	87 ee       	ldi	r24, 0xE7	; 231
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e1e:	14 c0       	rjmp	.+40     	; 0xe48 <printdir+0xb2>
			case RIGHT_TOP: printf("RIGHT_TOP \r\n"); break;
     e20:	86 ef       	ldi	r24, 0xF6	; 246
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <printdir+0xb2>
			case LEFT_TOP: printf("LEFT_TOP \r\n"); break;
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	93 e0       	ldi	r25, 0x03	; 3
     e2e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <printdir+0xb2>
			case LEFT_BOTTOM: printf("LEFT_BOTTOM \r\n"); break;
     e34:	8d e0       	ldi	r24, 0x0D	; 13
     e36:	93 e0       	ldi	r25, 0x03	; 3
     e38:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <printdir+0xb2>
			case CENTER: printf("SENTRUM \r\n"); break;	
     e3e:	8b e1       	ldi	r24, 0x1B	; 27
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>
     e46:	00 00       	nop
		}	
		
	}
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <writeDataOLED>:
#include "font_5x7.h"

volatile char* extDataOled = 0x1242; //Adress for the Data reg of the OLED DC=0       0b0001 0010 0100 0010
volatile char* extCommandOled = 0x1001; //Adress for the Command reg of the OLED DC=1 0b0001 0000 0000 0001

void writeDataOLED(uint8_t c){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	89 83       	std	Y+1, r24	; 0x01
	*extDataOled = c;
     e5c:	80 91 25 03 	lds	r24, 0x0325
     e60:	90 91 26 03 	lds	r25, 0x0326
     e64:	29 81       	ldd	r18, Y+1	; 0x01
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
}
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <writeCommandOLED>:

void writeCommandOLED(uint8_t c){
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	89 83       	std	Y+1, r24	; 0x01
	*extCommandOled = c;
     e7e:	80 91 27 03 	lds	r24, 0x0327
     e82:	90 91 28 03 	lds	r25, 0x0328
     e86:	29 81       	ldd	r18, Y+1	; 0x01
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18
}
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <initOLED>:

void initOLED()
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
    writeCommandOLED(0xae); // display off
     e9c:	8e ea       	ldi	r24, 0xAE	; 174
     e9e:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xa1); //segment remap
     ea2:	81 ea       	ldi	r24, 0xA1	; 161
     ea4:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xda); //common pads hardware: alternative
     ea8:	8a ed       	ldi	r24, 0xDA	; 218
     eaa:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x12);
     eae:	82 e1       	ldi	r24, 0x12	; 18
     eb0:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xc8); //common output scan direction:com63~com0
     eb4:	88 ec       	ldi	r24, 0xC8	; 200
     eb6:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xa8); //multiplex ration mode:63
     eba:	88 ea       	ldi	r24, 0xA8	; 168
     ebc:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x3f);
     ec0:	8f e3       	ldi	r24, 0x3F	; 63
     ec2:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xd5); //display divide ratio/osc. freq. mode
     ec6:	85 ed       	ldi	r24, 0xD5	; 213
     ec8:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x80);
     ecc:	80 e8       	ldi	r24, 0x80	; 128
     ece:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x81); //contrast control
     ed2:	81 e8       	ldi	r24, 0x81	; 129
     ed4:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x50);
     ed8:	80 e5       	ldi	r24, 0x50	; 80
     eda:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xd9); //set pre-charge period
     ede:	89 ed       	ldi	r24, 0xD9	; 217
     ee0:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x21);
     ee4:	81 e2       	ldi	r24, 0x21	; 33
     ee6:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x20); //Set Memory Addressing Mode
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x00); // horizontal
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xdb); //VCOM deselect level mode
     ef6:	8b ed       	ldi	r24, 0xDB	; 219
     ef8:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x30);
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xad); //master configuration
     f02:	8d ea       	ldi	r24, 0xAD	; 173
     f04:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0x00);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>

    //oled_home();
    writeCommandOLED(0x21); //Set column
     f0e:	81 e2       	ldi	r24, 0x21	; 33
     f10:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x00);
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x7F);
     f1a:	8f e7       	ldi	r24, 0x7F	; 127
     f1c:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	
	writeCommandOLED(0x22); //Set row
     f20:	82 e2       	ldi	r24, 0x22	; 34
     f22:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x00);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x07);
     f2c:	87 e0       	ldi	r24, 0x07	; 7
     f2e:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	
	writeCommandOLED(0x40); //Set start line to 0th
     f32:	80 e4       	ldi	r24, 0x40	; 64
     f34:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>

    writeCommandOLED(0xa4); //out follows RAM content
     f38:	84 ea       	ldi	r24, 0xA4	; 164
     f3a:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xa6); //set normal display
     f3e:	86 ea       	ldi	r24, 0xA6	; 166
     f40:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
    writeCommandOLED(0xaf); // display on
     f44:	8f ea       	ldi	r24, 0xAF	; 175
     f46:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	
	clearOLED();
     f4a:	0e 94 c3 08 	call	0x1186	; 0x1186 <clearOLED>
	
	
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <invertModeOLED>:


void invertModeOLED() {
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa7);	
     f5c:	87 ea       	ldi	r24, 0xA7	; 167
     f5e:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
}
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <normalModeOLED>:

void normalModeOLED() {
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa6);	
     f70:	86 ea       	ldi	r24, 0xA6	; 166
     f72:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <gotoCharOLED>:

//Treats the OLED as a display char of 25 characters long by 8 lines
//It will write from the given position to the end of the line and display
void gotoCharOLED(char line, char pos){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <gotoCharOLED+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     f8a:	81 e2       	ldi	r24, 0x21	; 33
     f8c:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(pos*5);
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	98 2f       	mov	r25, r24
     f94:	99 0f       	add	r25, r25
     f96:	99 0f       	add	r25, r25
     f98:	89 0f       	add	r24, r25
     f9a:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x7F);
     f9e:	8f e7       	ldi	r24, 0x7F	; 127
     fa0:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     fa4:	82 e2       	ldi	r24, 0x22	; 34
     fa6:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(line);
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x07);
     fb0:	87 e0       	ldi	r24, 0x07	; 7
     fb2:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <gotoPosOLED>:

void gotoPosOLED(char x, char y){
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <gotoPosOLED+0x6>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     fce:	81 e2       	ldi	r24, 0x21	; 33
     fd0:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(x);
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x7F);
     fda:	8f e7       	ldi	r24, 0x7F	; 127
     fdc:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     fe0:	82 e2       	ldi	r24, 0x22	; 34
     fe2:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(y);
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
	writeCommandOLED(0x07);
     fec:	87 e0       	ldi	r24, 0x07	; 7
     fee:	0e 94 39 07 	call	0xe72	; 0xe72 <writeCommandOLED>
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <putsOLED>:

void putsOLED(char* s){
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <putsOLED+0x6>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	9b 83       	std	Y+3, r25	; 0x03
    100a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putcOLED(s[counter]);
    100c:	19 82       	std	Y+1, r1	; 0x01
    100e:	0e c0       	rjmp	.+28     	; 0x102c <putsOLED+0x30>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	2a 81       	ldd	r18, Y+2	; 0x02
    1018:	3b 81       	ldd	r19, Y+3	; 0x03
    101a:	82 0f       	add	r24, r18
    101c:	93 1f       	adc	r25, r19
    101e:	fc 01       	movw	r30, r24
    1020:	80 81       	ld	r24, Z
    1022:	0e 94 50 08 	call	0x10a0	; 0x10a0 <putcOLED>
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	2a 81       	ldd	r18, Y+2	; 0x02
    1034:	3b 81       	ldd	r19, Y+3	; 0x03
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	88 23       	and	r24, r24
    1040:	39 f7       	brne	.-50     	; 0x1010 <putsOLED+0x14>
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <putInvertedSOLED>:

void putInvertedSOLED(char* s){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <putInvertedSOLED+0x6>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	9b 83       	std	Y+3, r25	; 0x03
    105c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putInvertedCOLED(s[counter]);
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	0e c0       	rjmp	.+28     	; 0x107e <putInvertedSOLED+0x30>
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	2a 81       	ldd	r18, Y+2	; 0x02
    106a:	3b 81       	ldd	r19, Y+3	; 0x03
    106c:	82 0f       	add	r24, r18
    106e:	93 1f       	adc	r25, r19
    1070:	fc 01       	movw	r30, r24
    1072:	80 81       	ld	r24, Z
    1074:	0e 94 89 08 	call	0x1112	; 0x1112 <putInvertedCOLED>
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	2a 81       	ldd	r18, Y+2	; 0x02
    1086:	3b 81       	ldd	r19, Y+3	; 0x03
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	fc 01       	movw	r30, r24
    108e:	80 81       	ld	r24, Z
    1090:	88 23       	and	r24, r24
    1092:	39 f7       	brne	.-50     	; 0x1062 <putInvertedSOLED+0x14>
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <putcOLED>:

void putcOLED(char c){
    10a0:	1f 93       	push	r17
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <putcOLED+0x8>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <putcOLED+0xa>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(pgm_read_byte(&(myfont[c-32][counter]))); //-32 is to compensate for the offset between our fontfile and the true ascii table
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	22 c0       	rjmp	.+68     	; 0x10fa <putcOLED+0x5a>
    10b6:	20 e7       	ldi	r18, 0x70	; 112
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	ac 01       	movw	r20, r24
    10c2:	44 0f       	add	r20, r20
    10c4:	55 1f       	adc	r21, r21
    10c6:	44 0f       	add	r20, r20
    10c8:	55 1f       	adc	r21, r21
    10ca:	48 0f       	add	r20, r24
    10cc:	59 1f       	adc	r21, r25
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	84 0f       	add	r24, r20
    10d6:	95 1f       	adc	r25, r21
    10d8:	80 5a       	subi	r24, 0xA0	; 160
    10da:	90 40       	sbci	r25, 0x00	; 0
    10dc:	82 0f       	add	r24, r18
    10de:	93 1f       	adc	r25, r19
    10e0:	9b 83       	std	Y+3, r25	; 0x03
    10e2:	8a 83       	std	Y+2, r24	; 0x02
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	fc 01       	movw	r30, r24
    10ea:	14 91       	lpm	r17, Z+
    10ec:	1c 83       	std	Y+4, r17	; 0x04
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	0e 94 28 07 	call	0xe50	; 0xe50 <writeDataOLED>
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	d8 f2       	brcs	.-74     	; 0x10b6 <putcOLED+0x16>
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	1f 91       	pop	r17
    1110:	08 95       	ret

00001112 <putInvertedCOLED>:

void putInvertedCOLED(char c){
    1112:	1f 93       	push	r17
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <putInvertedCOLED+0x8>
    111a:	00 d0       	rcall	.+0      	; 0x111c <putInvertedCOLED+0xa>
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(~pgm_read_byte(&(myfont[c-32][counter]))); 
    1124:	19 82       	std	Y+1, r1	; 0x01
    1126:	23 c0       	rjmp	.+70     	; 0x116e <putInvertedCOLED+0x5c>
    1128:	20 e7       	ldi	r18, 0x70	; 112
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	ac 01       	movw	r20, r24
    1134:	44 0f       	add	r20, r20
    1136:	55 1f       	adc	r21, r21
    1138:	44 0f       	add	r20, r20
    113a:	55 1f       	adc	r21, r21
    113c:	48 0f       	add	r20, r24
    113e:	59 1f       	adc	r21, r25
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	84 0f       	add	r24, r20
    1148:	95 1f       	adc	r25, r21
    114a:	80 5a       	subi	r24, 0xA0	; 160
    114c:	90 40       	sbci	r25, 0x00	; 0
    114e:	82 0f       	add	r24, r18
    1150:	93 1f       	adc	r25, r19
    1152:	9b 83       	std	Y+3, r25	; 0x03
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	9b 81       	ldd	r25, Y+3	; 0x03
    115a:	fc 01       	movw	r30, r24
    115c:	14 91       	lpm	r17, Z+
    115e:	1c 83       	std	Y+4, r17	; 0x04
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	80 95       	com	r24
    1164:	0e 94 28 07 	call	0xe50	; 0xe50 <writeDataOLED>
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	85 30       	cpi	r24, 0x05	; 5
    1172:	d0 f2       	brcs	.-76     	; 0x1128 <putInvertedCOLED+0x16>
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	1f 91       	pop	r17
    1184:	08 95       	ret

00001186 <clearOLED>:

void clearOLED(){
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <clearOLED+0x6>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
	gotoPosOLED(0,0);
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <gotoPosOLED>
	uint16_t i;
	for(i = 0; i < 128*8; i++) writeDataOLED(0x00);
    1198:	1a 82       	std	Y+2, r1	; 0x02
    119a:	19 82       	std	Y+1, r1	; 0x01
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <clearOLED+0x28>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 28 07 	call	0xe50	; 0xe50 <writeDataOLED>
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	24 e0       	ldi	r18, 0x04	; 4
    11b4:	80 30       	cpi	r24, 0x00	; 0
    11b6:	92 07       	cpc	r25, r18
    11b8:	90 f3       	brcs	.-28     	; 0x119e <clearOLED+0x18>
	gotoPosOLED(0,0);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <gotoPosOLED>
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <initSPI>:
 */ 


#include "spi.h"

void initSPI(){
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
	//Setting pins and directions 
	//MOSI, SCK, !SS as output
	DDRB = (1 << DDB7) | (1 << DDB5)  | (1 << DDB4);
    11d4:	87 e3       	ldi	r24, 0x37	; 55
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	20 eb       	ldi	r18, 0xB0	; 176
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
	//DDRB &= ~(1 << PB6);
	PORTB |=  (1 << DDB4); //Pullup to avoid wrong fallback to slave mode
    11de:	88 e3       	ldi	r24, 0x38	; 56
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	28 e3       	ldi	r18, 0x38	; 56
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	f9 01       	movw	r30, r18
    11e8:	20 81       	ld	r18, Z
    11ea:	20 61       	ori	r18, 0x10	; 16
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
	//MISO is Overriden as input, TODO: check if it work
	SPCR |=   (1 << SPE) | (1 << MSTR) | (1<<SPR0) ; // fosc/16
    11f0:	8d e2       	ldi	r24, 0x2D	; 45
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	2d e2       	ldi	r18, 0x2D	; 45
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	f9 01       	movw	r30, r18
    11fa:	20 81       	ld	r18, Z
    11fc:	21 65       	ori	r18, 0x51	; 81
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
	//configured as Master, NOT producing interrupts
	
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <resetMCP>:

void resetMCP(){
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	2e 97       	sbiw	r28, 0x0e	; 14
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
	select_mcp();
    1220:	88 e3       	ldi	r24, 0x38	; 56
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	28 e3       	ldi	r18, 0x38	; 56
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	f9 01       	movw	r30, r18
    122a:	20 81       	ld	r18, Z
    122c:	2f 7e       	andi	r18, 0xEF	; 239
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
	SPDR = MCP_RESET;
    1232:	8f e2       	ldi	r24, 0x2F	; 47
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	20 ec       	ldi	r18, 0xC0	; 192
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
     wait_spi();
    123c:	8e e2       	ldi	r24, 0x2E	; 46
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	fc 01       	movw	r30, r24
    1242:	80 81       	ld	r24, Z
    1244:	88 23       	and	r24, r24
    1246:	d4 f7       	brge	.-12     	; 0x123c <resetMCP+0x34>
	deselect_mcp();
    1248:	88 e3       	ldi	r24, 0x38	; 56
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	28 e3       	ldi	r18, 0x38	; 56
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	f9 01       	movw	r30, r18
    1252:	20 81       	ld	r18, Z
    1254:	20 61       	ori	r18, 0x10	; 16
    1256:	fc 01       	movw	r30, r24
    1258:	20 83       	st	Z, r18
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	a0 e2       	ldi	r26, 0x20	; 32
    1260:	b1 e4       	ldi	r27, 0x41	; 65
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	ab 83       	std	Y+3, r26	; 0x03
    1268:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    126a:	69 81       	ldd	r22, Y+1	; 0x01
    126c:	7a 81       	ldd	r23, Y+2	; 0x02
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	2a e9       	ldi	r18, 0x9A	; 154
    1274:	39 e9       	ldi	r19, 0x99	; 153
    1276:	49 e9       	ldi	r20, 0x99	; 153
    1278:	54 e4       	ldi	r21, 0x44	; 68
    127a:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	af 83       	std	Y+7, r26	; 0x07
    1288:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    128a:	11 e0       	ldi	r17, 0x01	; 1
    128c:	6d 81       	ldd	r22, Y+5	; 0x05
    128e:	7e 81       	ldd	r23, Y+6	; 0x06
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	98 85       	ldd	r25, Y+8	; 0x08
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <resetMCP+0x9e>
    12a4:	10 e0       	ldi	r17, 0x00	; 0
    12a6:	11 23       	and	r17, r17
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <resetMCP+0xac>
		__ticks = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9a 87       	std	Y+10, r25	; 0x0a
    12b0:	89 87       	std	Y+9, r24	; 0x09
    12b2:	46 c0       	rjmp	.+140    	; 0x1340 <resetMCP+0x138>
	else if (__tmp > 65535)
    12b4:	11 e0       	ldi	r17, 0x01	; 1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	3f ef       	ldi	r19, 0xFF	; 255
    12c2:	4f e7       	ldi	r20, 0x7F	; 127
    12c4:	57 e4       	ldi	r21, 0x47	; 71
    12c6:	0e 94 09 12 	call	0x2412	; 0x2412 <__gtsf2>
    12ca:	18 16       	cp	r1, r24
    12cc:	0c f0       	brlt	.+2      	; 0x12d0 <resetMCP+0xc8>
    12ce:	10 e0       	ldi	r17, 0x00	; 0
    12d0:	11 23       	and	r17, r17
    12d2:	61 f1       	breq	.+88     	; 0x132c <resetMCP+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	69 81       	ldd	r22, Y+1	; 0x01
    12d6:	7a 81       	ldd	r23, Y+2	; 0x02
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9a 87       	std	Y+10, r25	; 0x0a
    12fa:	89 87       	std	Y+9, r24	; 0x09
    12fc:	12 c0       	rjmp	.+36     	; 0x1322 <resetMCP+0x11a>
    12fe:	8a e7       	ldi	r24, 0x7A	; 122
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 87       	std	Y+12, r25	; 0x0c
    1304:	8b 87       	std	Y+11, r24	; 0x0b
    1306:	8b 85       	ldd	r24, Y+11	; 0x0b
    1308:	9c 85       	ldd	r25, Y+12	; 0x0c
    130a:	8c 01       	movw	r16, r24
    130c:	c8 01       	movw	r24, r16
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <resetMCP+0x106>
    1312:	8c 01       	movw	r16, r24
    1314:	1c 87       	std	Y+12, r17	; 0x0c
    1316:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	9a 87       	std	Y+10, r25	; 0x0a
    1320:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	51 f7       	brne	.-44     	; 0x12fe <resetMCP+0xf6>
    132a:	17 c0       	rjmp	.+46     	; 0x135a <resetMCP+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132c:	6d 81       	ldd	r22, Y+5	; 0x05
    132e:	7e 81       	ldd	r23, Y+6	; 0x06
    1330:	8f 81       	ldd	r24, Y+7	; 0x07
    1332:	98 85       	ldd	r25, Y+8	; 0x08
    1334:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9a 87       	std	Y+10, r25	; 0x0a
    133e:	89 87       	std	Y+9, r24	; 0x09
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	9e 87       	std	Y+14, r25	; 0x0e
    1346:	8d 87       	std	Y+13, r24	; 0x0d
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	8c 01       	movw	r16, r24
    134e:	f8 01       	movw	r30, r16
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <resetMCP+0x148>
    1354:	8f 01       	movw	r16, r30
    1356:	1e 87       	std	Y+14, r17	; 0x0e
    1358:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	//Resets the SPI-CAN controller and waits for it to be ready
}
    135a:	2e 96       	adiw	r28, 0x0e	; 14
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <readMCP>:

uint8_t readMCP(char address){
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <readMCP+0x6>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t r;
	select_mcp();
    137c:	88 e3       	ldi	r24, 0x38	; 56
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	28 e3       	ldi	r18, 0x38	; 56
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	2f 7e       	andi	r18, 0xEF	; 239
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
	SPDR = MCP_READ;
    138e:	8f e2       	ldi	r24, 0x2F	; 47
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	23 e0       	ldi	r18, 0x03	; 3
    1394:	fc 01       	movw	r30, r24
    1396:	20 83       	st	Z, r18
    wait_spi();
    1398:	8e e2       	ldi	r24, 0x2E	; 46
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	80 81       	ld	r24, Z
    13a0:	88 23       	and	r24, r24
    13a2:	d4 f7       	brge	.-12     	; 0x1398 <readMCP+0x28>
	SPDR = address;
    13a4:	8f e2       	ldi	r24, 0x2F	; 47
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	2a 81       	ldd	r18, Y+2	; 0x02
    13aa:	fc 01       	movw	r30, r24
    13ac:	20 83       	st	Z, r18
    wait_spi();
    13ae:	8e e2       	ldi	r24, 0x2E	; 46
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	fc 01       	movw	r30, r24
    13b4:	80 81       	ld	r24, Z
    13b6:	88 23       	and	r24, r24
    13b8:	d4 f7       	brge	.-12     	; 0x13ae <readMCP+0x3e>
	SPDR = MCP_DUMMY;
    13ba:	8f e2       	ldi	r24, 0x2F	; 47
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	fc 01       	movw	r30, r24
    13c0:	10 82       	st	Z, r1
    wait_spi();
    13c2:	8e e2       	ldi	r24, 0x2E	; 46
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	88 23       	and	r24, r24
    13cc:	d4 f7       	brge	.-12     	; 0x13c2 <readMCP+0x52>
	r = SPDR;
    13ce:	8f e2       	ldi	r24, 0x2F	; 47
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
    13d8:	88 e3       	ldi	r24, 0x38	; 56
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	28 e3       	ldi	r18, 0x38	; 56
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	20 61       	ori	r18, 0x10	; 16
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18
	return r;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <writeMCP>:

void writeMCP(char address, char data){
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <writeMCP+0x6>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	6a 83       	std	Y+2, r22	; 0x02
	select_mcp();
    1404:	88 e3       	ldi	r24, 0x38	; 56
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	28 e3       	ldi	r18, 0x38	; 56
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	f9 01       	movw	r30, r18
    140e:	20 81       	ld	r18, Z
    1410:	2f 7e       	andi	r18, 0xEF	; 239
    1412:	fc 01       	movw	r30, r24
    1414:	20 83       	st	Z, r18
	SPDR = MCP_WRITE;
    1416:	8f e2       	ldi	r24, 0x2F	; 47
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	22 e0       	ldi	r18, 0x02	; 2
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
    wait_spi();
    1420:	8e e2       	ldi	r24, 0x2E	; 46
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	fc 01       	movw	r30, r24
    1426:	80 81       	ld	r24, Z
    1428:	88 23       	and	r24, r24
    142a:	d4 f7       	brge	.-12     	; 0x1420 <writeMCP+0x2a>
	SPDR = address;
    142c:	8f e2       	ldi	r24, 0x2F	; 47
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	29 81       	ldd	r18, Y+1	; 0x01
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
    wait_spi();
    1436:	8e e2       	ldi	r24, 0x2E	; 46
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	fc 01       	movw	r30, r24
    143c:	80 81       	ld	r24, Z
    143e:	88 23       	and	r24, r24
    1440:	d4 f7       	brge	.-12     	; 0x1436 <writeMCP+0x40>
	SPDR = data;
    1442:	8f e2       	ldi	r24, 0x2F	; 47
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	2a 81       	ldd	r18, Y+2	; 0x02
    1448:	fc 01       	movw	r30, r24
    144a:	20 83       	st	Z, r18
    wait_spi();
    144c:	8e e2       	ldi	r24, 0x2E	; 46
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	fc 01       	movw	r30, r24
    1452:	80 81       	ld	r24, Z
    1454:	88 23       	and	r24, r24
    1456:	d4 f7       	brge	.-12     	; 0x144c <writeMCP+0x56>
	deselect_mcp();
    1458:	88 e3       	ldi	r24, 0x38	; 56
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	28 e3       	ldi	r18, 0x38	; 56
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	f9 01       	movw	r30, r18
    1462:	20 81       	ld	r18, Z
    1464:	20 61       	ori	r18, 0x10	; 16
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <requestToSendMCP>:


void requestToSendMCP(char buffer){
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01
	select_mcp();
    1480:	88 e3       	ldi	r24, 0x38	; 56
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	28 e3       	ldi	r18, 0x38	; 56
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	f9 01       	movw	r30, r18
    148a:	20 81       	ld	r18, Z
    148c:	2f 7e       	andi	r18, 0xEF	; 239
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
	switch(buffer) {
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	91 05       	cpc	r25, r1
    149c:	59 f0       	breq	.+22     	; 0x14b4 <requestToSendMCP+0x40>
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	91 05       	cpc	r25, r1
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <requestToSendMCP+0x4c>
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	91 f4       	brne	.+36     	; 0x14cc <requestToSendMCP+0x58>
		case 0:
			SPDR = MCP_RTS_TX0;
    14a8:	8f e2       	ldi	r24, 0x2F	; 47
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	21 e8       	ldi	r18, 0x81	; 129
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
			break;
    14b2:	0c c0       	rjmp	.+24     	; 0x14cc <requestToSendMCP+0x58>
		case 1:
		    SPDR = MCP_RTS_TX1;
    14b4:	8f e2       	ldi	r24, 0x2F	; 47
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	22 e8       	ldi	r18, 0x82	; 130
    14ba:	fc 01       	movw	r30, r24
    14bc:	20 83       	st	Z, r18
			break;
    14be:	06 c0       	rjmp	.+12     	; 0x14cc <requestToSendMCP+0x58>
		case 2:	
		    SPDR = MCP_RTS_TX2;
    14c0:	8f e2       	ldi	r24, 0x2F	; 47
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	24 e8       	ldi	r18, 0x84	; 132
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
			break;
    14ca:	00 00       	nop
	}
	wait_spi();
    14cc:	8e e2       	ldi	r24, 0x2E	; 46
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	fc 01       	movw	r30, r24
    14d2:	80 81       	ld	r24, Z
    14d4:	88 23       	and	r24, r24
    14d6:	d4 f7       	brge	.-12     	; 0x14cc <requestToSendMCP+0x58>
	deselect_mcp();
    14d8:	88 e3       	ldi	r24, 0x38	; 56
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	28 e3       	ldi	r18, 0x38	; 56
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	f9 01       	movw	r30, r18
    14e2:	20 81       	ld	r18, Z
    14e4:	20 61       	ori	r18, 0x10	; 16
    14e6:	fc 01       	movw	r30, r24
    14e8:	20 83       	st	Z, r18
//	writeMCP(MCP_TXB0CTRL,0b00001000);
//    uint8_t r = readMCP(0x30);
}
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <bitModifyMCP>:


void bitModifyMCP(char address, char mask, char data){
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <bitModifyMCP+0x6>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	6a 83       	std	Y+2, r22	; 0x02
    1502:	4b 83       	std	Y+3, r20	; 0x03
	select_mcp();
    1504:	88 e3       	ldi	r24, 0x38	; 56
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	28 e3       	ldi	r18, 0x38	; 56
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	f9 01       	movw	r30, r18
    150e:	20 81       	ld	r18, Z
    1510:	2f 7e       	andi	r18, 0xEF	; 239
    1512:	fc 01       	movw	r30, r24
    1514:	20 83       	st	Z, r18
    SPDR = MCP_BITMOD;
    1516:	8f e2       	ldi	r24, 0x2F	; 47
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	25 e0       	ldi	r18, 0x05	; 5
    151c:	fc 01       	movw	r30, r24
    151e:	20 83       	st	Z, r18
    wait_spi();
    1520:	8e e2       	ldi	r24, 0x2E	; 46
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	fc 01       	movw	r30, r24
    1526:	80 81       	ld	r24, Z
    1528:	88 23       	and	r24, r24
    152a:	d4 f7       	brge	.-12     	; 0x1520 <bitModifyMCP+0x2e>
	SPDR = address;
    152c:	8f e2       	ldi	r24, 0x2F	; 47
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	29 81       	ldd	r18, Y+1	; 0x01
    1532:	fc 01       	movw	r30, r24
    1534:	20 83       	st	Z, r18
    wait_spi();
    1536:	8e e2       	ldi	r24, 0x2E	; 46
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	fc 01       	movw	r30, r24
    153c:	80 81       	ld	r24, Z
    153e:	88 23       	and	r24, r24
    1540:	d4 f7       	brge	.-12     	; 0x1536 <bitModifyMCP+0x44>
	SPDR = mask;
    1542:	8f e2       	ldi	r24, 0x2F	; 47
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	2a 81       	ldd	r18, Y+2	; 0x02
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18
    wait_spi();
    154c:	8e e2       	ldi	r24, 0x2E	; 46
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	88 23       	and	r24, r24
    1556:	d4 f7       	brge	.-12     	; 0x154c <bitModifyMCP+0x5a>
	SPDR = data;
    1558:	8f e2       	ldi	r24, 0x2F	; 47
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	2b 81       	ldd	r18, Y+3	; 0x03
    155e:	fc 01       	movw	r30, r24
    1560:	20 83       	st	Z, r18
    wait_spi();
    1562:	8e e2       	ldi	r24, 0x2E	; 46
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	fc 01       	movw	r30, r24
    1568:	80 81       	ld	r24, Z
    156a:	88 23       	and	r24, r24
    156c:	d4 f7       	brge	.-12     	; 0x1562 <bitModifyMCP+0x70>
	deselect_mcp();
    156e:	88 e3       	ldi	r24, 0x38	; 56
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	28 e3       	ldi	r18, 0x38	; 56
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	20 81       	ld	r18, Z
    157a:	20 61       	ori	r18, 0x10	; 16
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <readStatus>:

uint8_t readStatus(){
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	0f 92       	push	r0
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	uint8_t r;
	select_mcp();
    1596:	88 e3       	ldi	r24, 0x38	; 56
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	28 e3       	ldi	r18, 0x38	; 56
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	f9 01       	movw	r30, r18
    15a0:	20 81       	ld	r18, Z
    15a2:	2f 7e       	andi	r18, 0xEF	; 239
    15a4:	fc 01       	movw	r30, r24
    15a6:	20 83       	st	Z, r18
    SPDR = MCP_READ_STATUS;
    15a8:	8f e2       	ldi	r24, 0x2F	; 47
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	20 ea       	ldi	r18, 0xA0	; 160
    15ae:	fc 01       	movw	r30, r24
    15b0:	20 83       	st	Z, r18
    wait_spi();
    15b2:	8e e2       	ldi	r24, 0x2E	; 46
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	fc 01       	movw	r30, r24
    15b8:	80 81       	ld	r24, Z
    15ba:	88 23       	and	r24, r24
    15bc:	d4 f7       	brge	.-12     	; 0x15b2 <readStatus+0x26>
	SPDR = MCP_DUMMY;
    15be:	8f e2       	ldi	r24, 0x2F	; 47
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	fc 01       	movw	r30, r24
    15c4:	10 82       	st	Z, r1
    wait_spi();
    15c6:	8e e2       	ldi	r24, 0x2E	; 46
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	88 23       	and	r24, r24
    15d0:	d4 f7       	brge	.-12     	; 0x15c6 <readStatus+0x3a>
	r = SPDR;
    15d2:	8f e2       	ldi	r24, 0x2F	; 47
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
    15dc:	88 e3       	ldi	r24, 0x38	; 56
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	28 e3       	ldi	r18, 0x38	; 56
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	f9 01       	movw	r30, r18
    15e6:	20 81       	ld	r18, Z
    15e8:	20 61       	ori	r18, 0x10	; 16
    15ea:	fc 01       	movw	r30, r24
    15ec:	20 83       	st	Z, r18
	return r;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <readRxBufferMCP>:

struct canMessage readRxBufferMCP(char buffer){
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	2d 97       	sbiw	r28, 0x0d	; 13
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	ac 01       	movw	r20, r24
    160e:	6d 87       	std	Y+13, r22	; 0x0d
	//Adresses are relative to Buffer 0
	struct canMessage m;
	
	select_mcp();
    1610:	88 e3       	ldi	r24, 0x38	; 56
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	28 e3       	ldi	r18, 0x38	; 56
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	f9 01       	movw	r30, r18
    161a:	20 81       	ld	r18, Z
    161c:	2f 7e       	andi	r18, 0xEF	; 239
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	88 23       	and	r24, r24
    1626:	31 f4       	brne	.+12     	; 0x1634 <readRxBufferMCP+0x3c>
    1628:	8f e2       	ldi	r24, 0x2F	; 47
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	20 e9       	ldi	r18, 0x90	; 144
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
	else SPDR = MCP_READ_RX1;
	wait_spi();
    1632:	05 c0       	rjmp	.+10     	; 0x163e <readRxBufferMCP+0x46>
	struct canMessage m;
	
	select_mcp();
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
	else SPDR = MCP_READ_RX1;
    1634:	8f e2       	ldi	r24, 0x2F	; 47
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	24 e9       	ldi	r18, 0x94	; 148
    163a:	fc 01       	movw	r30, r24
    163c:	20 83       	st	Z, r18
	wait_spi();
    163e:	8e e2       	ldi	r24, 0x2E	; 46
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	88 23       	and	r24, r24
    1648:	d4 f7       	brge	.-12     	; 0x163e <readRxBufferMCP+0x46>
	
	SPDR = MCP_DUMMY;
    164a:	8f e2       	ldi	r24, 0x2F	; 47
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	10 82       	st	Z, r1
	wait_spi();
    1652:	8e e2       	ldi	r24, 0x2E	; 46
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	fc 01       	movw	r30, r24
    1658:	80 81       	ld	r24, Z
    165a:	88 23       	and	r24, r24
    165c:	d4 f7       	brge	.-12     	; 0x1652 <readRxBufferMCP+0x5a>
	
	m.id = SPDR<<3; //8 high bits recived and shifted to fit the 11bit format (0x61)
    165e:	8f e2       	ldi	r24, 0x2F	; 47
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	fc 01       	movw	r30, r24
    1664:	80 81       	ld	r24, Z
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	9b 83       	std	Y+3, r25	; 0x03
    1678:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
    167a:	8f e2       	ldi	r24, 0x2F	; 47
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	fc 01       	movw	r30, r24
    1680:	10 82       	st	Z, r1
	wait_spi();    //Recive lower 3 bits of id
    1682:	8e e2       	ldi	r24, 0x2E	; 46
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	fc 01       	movw	r30, r24
    1688:	80 81       	ld	r24, Z
    168a:	88 23       	and	r24, r24
    168c:	d4 f7       	brge	.-12     	; 0x1682 <readRxBufferMCP+0x8a>
	
	m.id |= (SPDR & 0xE0)>>5;  //Id is received, cleansed and constructed  (0x62)
    168e:	2a 81       	ldd	r18, Y+2	; 0x02
    1690:	3b 81       	ldd	r19, Y+3	; 0x03
    1692:	8f e2       	ldi	r24, 0x2F	; 47
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	fc 01       	movw	r30, r24
    1698:	80 81       	ld	r24, Z
    169a:	82 95       	swap	r24
    169c:	86 95       	lsr	r24
    169e:	87 70       	andi	r24, 0x07	; 7
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 70       	andi	r25, 0x00	; 0
    16a6:	82 2b       	or	r24, r18
    16a8:	93 2b       	or	r25, r19
    16aa:	9b 83       	std	Y+3, r25	; 0x03
    16ac:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
    16ae:	8f e2       	ldi	r24, 0x2F	; 47
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	fc 01       	movw	r30, r24
    16b4:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x63)
    16b6:	8e e2       	ldi	r24, 0x2E	; 46
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	80 81       	ld	r24, Z
    16be:	88 23       	and	r24, r24
    16c0:	d4 f7       	brge	.-12     	; 0x16b6 <readRxBufferMCP+0xbe>
	
	SPDR = MCP_DUMMY;  
    16c2:	8f e2       	ldi	r24, 0x2F	; 47
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	fc 01       	movw	r30, r24
    16c8:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x64)
    16ca:	8e e2       	ldi	r24, 0x2E	; 46
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	fc 01       	movw	r30, r24
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	d4 f7       	brge	.-12     	; 0x16ca <readRxBufferMCP+0xd2>
	
	SPDR = MCP_DUMMY;  
    16d6:	8f e2       	ldi	r24, 0x2F	; 47
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	fc 01       	movw	r30, r24
    16dc:	10 82       	st	Z, r1
	wait_spi();    //Reads DLC (size) (0x65)
    16de:	8e e2       	ldi	r24, 0x2E	; 46
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	fc 01       	movw	r30, r24
    16e4:	80 81       	ld	r24, Z
    16e6:	88 23       	and	r24, r24
    16e8:	d4 f7       	brge	.-12     	; 0x16de <readRxBufferMCP+0xe6>
	
	m.size = SPDR & 0x0F;
    16ea:	8f e2       	ldi	r24, 0x2F	; 47
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 70       	andi	r24, 0x0F	; 15
    16f4:	8c 83       	std	Y+4, r24	; 0x04
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	1b c0       	rjmp	.+54     	; 0x1730 <readRxBufferMCP+0x138>
		SPDR = MCP_DUMMY;  
    16fa:	8f e2       	ldi	r24, 0x2F	; 47
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	fc 01       	movw	r30, r24
    1700:	10 82       	st	Z, r1
		wait_spi();    //Reads data (0x66..0x6D) 
    1702:	8e e2       	ldi	r24, 0x2E	; 46
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	fc 01       	movw	r30, r24
    1708:	80 81       	ld	r24, Z
    170a:	88 23       	and	r24, r24
    170c:	d4 f7       	brge	.-12     	; 0x1702 <readRxBufferMCP+0x10a>
		m.data[c] = SPDR;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	2f e2       	ldi	r18, 0x2F	; 47
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f9 01       	movw	r30, r18
    171a:	60 81       	ld	r22, Z
    171c:	9e 01       	movw	r18, r28
    171e:	2b 5f       	subi	r18, 0xFB	; 251
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	82 0f       	add	r24, r18
    1724:	93 1f       	adc	r25, r19
    1726:	fc 01       	movw	r30, r24
    1728:	60 83       	st	Z, r22
	
	m.size = SPDR & 0x0F;
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	89 17       	cp	r24, r25
    1736:	08 f3       	brcs	.-62     	; 0x16fa <readRxBufferMCP+0x102>
		SPDR = MCP_DUMMY;  
		wait_spi();    //Reads data (0x66..0x6D) 
		m.data[c] = SPDR;
	}
	
	deselect_mcp();
    1738:	88 e3       	ldi	r24, 0x38	; 56
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	28 e3       	ldi	r18, 0x38	; 56
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	f9 01       	movw	r30, r18
    1742:	20 81       	ld	r18, Z
    1744:	20 61       	ori	r18, 0x10	; 16
    1746:	fc 01       	movw	r30, r24
    1748:	20 83       	st	Z, r18
	
	return m;
    174a:	ca 01       	movw	r24, r20
    174c:	9e 01       	movw	r18, r28
    174e:	2e 5f       	subi	r18, 0xFE	; 254
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	6b e0       	ldi	r22, 0x0B	; 11
    1754:	f9 01       	movw	r30, r18
    1756:	00 80       	ld	r0, Z
    1758:	2f 5f       	subi	r18, 0xFF	; 255
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	fc 01       	movw	r30, r24
    175e:	00 82       	st	Z, r0
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	61 50       	subi	r22, 0x01	; 1
    1764:	66 23       	and	r22, r22
    1766:	b1 f7       	brne	.-20     	; 0x1754 <readRxBufferMCP+0x15c>
}
    1768:	ca 01       	movw	r24, r20
    176a:	2d 96       	adiw	r28, 0x0d	; 13
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <fillTxBufferMCP>:


void fillTxBufferMCP(char buffer, struct canMessage m){
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	2e 97       	sbiw	r28, 0x0e	; 14
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	8b 83       	std	Y+3, r24	; 0x03
    179e:	cc 82       	std	Y+4, r12	; 0x04
    17a0:	dd 82       	std	Y+5, r13	; 0x05
    17a2:	ee 82       	std	Y+6, r14	; 0x06
    17a4:	ff 82       	std	Y+7, r15	; 0x07
    17a6:	08 87       	std	Y+8, r16	; 0x08
    17a8:	19 87       	std	Y+9, r17	; 0x09
    17aa:	2a 87       	std	Y+10, r18	; 0x0a
    17ac:	3b 87       	std	Y+11, r19	; 0x0b
    17ae:	4c 87       	std	Y+12, r20	; 0x0c
    17b0:	5d 87       	std	Y+13, r21	; 0x0d
    17b2:	6e 87       	std	Y+14, r22	; 0x0e
	//Adresses are relative to Buffer 0
	select_mcp();
    17b4:	88 e3       	ldi	r24, 0x38	; 56
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	28 e3       	ldi	r18, 0x38	; 56
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	f9 01       	movw	r30, r18
    17be:	20 81       	ld	r18, Z
    17c0:	2f 7e       	andi	r18, 0xEF	; 239
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 23       	and	r24, r24
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <fillTxBufferMCP+0x5a>
    17cc:	8f e2       	ldi	r24, 0x2F	; 47
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	20 e4       	ldi	r18, 0x40	; 64
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	31 f4       	brne	.+12     	; 0x17e8 <fillTxBufferMCP+0x6c>
    17dc:	8f e2       	ldi	r24, 0x2F	; 47
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	22 e4       	ldi	r18, 0x42	; 66
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18
	else SPDR = MCP_LOAD_TX2;
	wait_spi();
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <fillTxBufferMCP+0x76>
void fillTxBufferMCP(char buffer, struct canMessage m){
	//Adresses are relative to Buffer 0
	select_mcp();
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
	else SPDR = MCP_LOAD_TX2;
    17e8:	8f e2       	ldi	r24, 0x2F	; 47
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	24 e4       	ldi	r18, 0x44	; 68
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
	wait_spi();
    17f2:	8e e2       	ldi	r24, 0x2E	; 46
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	fc 01       	movw	r30, r24
    17f8:	80 81       	ld	r24, Z
    17fa:	88 23       	and	r24, r24
    17fc:	d4 f7       	brge	.-12     	; 0x17f2 <fillTxBufferMCP+0x76>
	
	uint8_t t;
	
	t = m.id >> 3;
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	96 95       	lsr	r25
    1804:	87 95       	ror	r24
    1806:	96 95       	lsr	r25
    1808:	87 95       	ror	r24
    180a:	96 95       	lsr	r25
    180c:	87 95       	ror	r24
    180e:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
    1810:	8f e2       	ldi	r24, 0x2F	; 47
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	2a 81       	ldd	r18, Y+2	; 0x02
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
	wait_spi();  //sends higher 8 bits of ID to 0x31
    181a:	8e e2       	ldi	r24, 0x2E	; 46
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	fc 01       	movw	r30, r24
    1820:	80 81       	ld	r24, Z
    1822:	88 23       	and	r24, r24
    1824:	d4 f7       	brge	.-12     	; 0x181a <fillTxBufferMCP+0x9e>
	
	t = (m.id << 5) & 0xE0;
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	82 95       	swap	r24
    182c:	88 0f       	add	r24, r24
    182e:	80 7e       	andi	r24, 0xE0	; 224
    1830:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
    1832:	8f e2       	ldi	r24, 0x2F	; 47
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	2a 81       	ldd	r18, Y+2	; 0x02
    1838:	fc 01       	movw	r30, r24
    183a:	20 83       	st	Z, r18
	wait_spi(); //sends lower 3 bits to higher bits of 0x32
    183c:	8e e2       	ldi	r24, 0x2E	; 46
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	fc 01       	movw	r30, r24
    1842:	80 81       	ld	r24, Z
    1844:	88 23       	and	r24, r24
    1846:	d4 f7       	brge	.-12     	; 0x183c <fillTxBufferMCP+0xc0>
		
	SPDR = MCP_DUMMY;  
    1848:	8f e2       	ldi	r24, 0x2F	; 47
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	fc 01       	movw	r30, r24
    184e:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill (0x33)
    1850:	8e e2       	ldi	r24, 0x2E	; 46
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	80 81       	ld	r24, Z
    1858:	88 23       	and	r24, r24
    185a:	d4 f7       	brge	.-12     	; 0x1850 <fillTxBufferMCP+0xd4>
	
	SPDR = MCP_DUMMY;  
    185c:	8f e2       	ldi	r24, 0x2F	; 47
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	fc 01       	movw	r30, r24
    1862:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill(0x34)
    1864:	8e e2       	ldi	r24, 0x2E	; 46
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	88 23       	and	r24, r24
    186e:	d4 f7       	brge	.-12     	; 0x1864 <fillTxBufferMCP+0xe8>
	
	
	SPDR = m.size & 0x0F;  
    1870:	8f e2       	ldi	r24, 0x2F	; 47
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	2e 81       	ldd	r18, Y+6	; 0x06
    1876:	2f 70       	andi	r18, 0x0F	; 15
    1878:	fc 01       	movw	r30, r24
    187a:	20 83       	st	Z, r18
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
    187c:	8e e2       	ldi	r24, 0x2E	; 46
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	fc 01       	movw	r30, r24
    1882:	80 81       	ld	r24, Z
    1884:	88 23       	and	r24, r24
    1886:	d4 f7       	brge	.-12     	; 0x187c <fillTxBufferMCP+0x100>
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    1888:	19 82       	std	Y+1, r1	; 0x01
    188a:	17 c0       	rjmp	.+46     	; 0x18ba <fillTxBufferMCP+0x13e>
		SPDR = m.data[c];  
    188c:	8f e2       	ldi	r24, 0x2F	; 47
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	29 81       	ldd	r18, Y+1	; 0x01
    1892:	22 2f       	mov	r18, r18
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	ae 01       	movw	r20, r28
    1898:	49 5f       	subi	r20, 0xF9	; 249
    189a:	5f 4f       	sbci	r21, 0xFF	; 255
    189c:	24 0f       	add	r18, r20
    189e:	35 1f       	adc	r19, r21
    18a0:	f9 01       	movw	r30, r18
    18a2:	20 81       	ld	r18, Z
    18a4:	fc 01       	movw	r30, r24
    18a6:	20 83       	st	Z, r18
		wait_spi();    //fills in data (0x36..0x40) 
    18a8:	8e e2       	ldi	r24, 0x2E	; 46
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	fc 01       	movw	r30, r24
    18ae:	80 81       	ld	r24, Z
    18b0:	88 23       	and	r24, r24
    18b2:	d4 f7       	brge	.-12     	; 0x18a8 <fillTxBufferMCP+0x12c>
	SPDR = m.size & 0x0F;  
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	89 17       	cp	r24, r25
    18c0:	28 f3       	brcs	.-54     	; 0x188c <fillTxBufferMCP+0x110>
		SPDR = m.data[c];  
		wait_spi();    //fills in data (0x36..0x40) 
	}
	
	deselect_mcp();
    18c2:	88 e3       	ldi	r24, 0x38	; 56
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	28 e3       	ldi	r18, 0x38	; 56
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	f9 01       	movw	r30, r18
    18cc:	20 81       	ld	r18, Z
    18ce:	20 61       	ori	r18, 0x10	; 16
    18d0:	fc 01       	movw	r30, r24
    18d2:	20 83       	st	Z, r18
    18d4:	2e 96       	adiw	r28, 0x0e	; 14
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	08 95       	ret

000018f2 <initUART>:
 */ 


#include "uart.h"

void initUART(uint16_t ubrr ){
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <initUART+0x6>
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	9a 83       	std	Y+2, r25	; 0x02
    18fe:	89 83       	std	Y+1, r24	; 0x01
	
	//Init clock generator reg
	UBRR0H = (unsigned char) (ubrr >> 8);
    1900:	80 e4       	ldi	r24, 0x40	; 64
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	29 81       	ldd	r18, Y+1	; 0x01
    1906:	3a 81       	ldd	r19, Y+2	; 0x02
    1908:	23 2f       	mov	r18, r19
    190a:	33 27       	eor	r19, r19
    190c:	fc 01       	movw	r30, r24
    190e:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
    1910:	89 e2       	ldi	r24, 0x29	; 41
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	29 81       	ldd	r18, Y+1	; 0x01
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
	//UCSR0A = 0b00000000 //TODO: Rx & Tx "polling"
	UCSR0B = 0b00011000;
    191a:	8a e2       	ldi	r24, 0x2A	; 42
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	28 e1       	ldi	r18, 0x18	; 24
    1920:	fc 01       	movw	r30, r24
    1922:	20 83       	st	Z, r18
	UCSR0C = 0b10000110;
    1924:	80 e4       	ldi	r24, 0x40	; 64
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	26 e8       	ldi	r18, 0x86	; 134
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
	
	fdevopen(putC,getC);
    192e:	8b eb       	ldi	r24, 0xBB	; 187
    1930:	9c e0       	ldi	r25, 0x0C	; 12
    1932:	23 ea       	ldi	r18, 0xA3	; 163
    1934:	3c e0       	ldi	r19, 0x0C	; 12
    1936:	b9 01       	movw	r22, r18
    1938:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <fdevopen>
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <getC>:

int getC()
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while( !(UCSR0A & 1 << RXC0) );
    1950:	00 00       	nop
    1952:	8b e2       	ldi	r24, 0x2B	; 43
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	fc 01       	movw	r30, r24
    1958:	80 81       	ld	r24, Z
    195a:	88 23       	and	r24, r24
    195c:	d4 f7       	brge	.-12     	; 0x1952 <getC+0xc>
	c = UDR0;
    195e:	8c e2       	ldi	r24, 0x2C	; 44
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	fc 01       	movw	r30, r24
    1964:	80 81       	ld	r24, Z
    1966:	89 83       	std	Y+1, r24	; 0x01
	return c;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
}
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <putC>:

int putC(char data){
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & 1 << UDRE0) );
    1982:	00 00       	nop
    1984:	8b e2       	ldi	r24, 0x2B	; 43
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	fc 01       	movw	r30, r24
    198a:	80 81       	ld	r24, Z
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	80 72       	andi	r24, 0x20	; 32
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	b1 f3       	breq	.-20     	; 0x1984 <putC+0xe>
	UDR0 = data;
    1998:	8c e2       	ldi	r24, 0x2C	; 44
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	29 81       	ldd	r18, Y+1	; 0x01
    199e:	fc 01       	movw	r30, r24
    19a0:	20 83       	st	Z, r18
	while( !(UCSR0A & 1 << TXC0) );
    19a2:	00 00       	nop
    19a4:	8b e2       	ldi	r24, 0x2B	; 43
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	80 74       	andi	r24, 0x40	; 64
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	b1 f3       	breq	.-20     	; 0x19a4 <putC+0x2e>
	return 0;
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <testLatch>:


#include "utils.h"

void testLatch()
{
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	2e 97       	sbiw	r28, 0x0e	; 14
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
    19dc:	8a e3       	ldi	r24, 0x3A	; 58
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	2f ef       	ldi	r18, 0xFF	; 255
    19e2:	fc 01       	movw	r30, r24
    19e4:	20 83       	st	Z, r18
	DDRE = 0xFF;
    19e6:	86 e2       	ldi	r24, 0x26	; 38
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	2f ef       	ldi	r18, 0xFF	; 255
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x55;
    19f0:	8b e3       	ldi	r24, 0x3B	; 59
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	25 e5       	ldi	r18, 0x55	; 85
    19f6:	fc 01       	movw	r30, r24
    19f8:	20 83       	st	Z, r18
	PORT_E.b1 = 1;
    19fa:	87 e2       	ldi	r24, 0x27	; 39
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	fc 01       	movw	r30, r24
    1a00:	20 81       	ld	r18, Z
    1a02:	22 60       	ori	r18, 0x02	; 2
    1a04:	fc 01       	movw	r30, r24
    1a06:	20 83       	st	Z, r18
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e2       	ldi	r26, 0x20	; 32
    1a0e:	b1 e4       	ldi	r27, 0x41	; 65
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	ab 83       	std	Y+3, r26	; 0x03
    1a16:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	69 81       	ldd	r22, Y+1	; 0x01
    1a1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	2a e9       	ldi	r18, 0x9A	; 154
    1a22:	39 e9       	ldi	r19, 0x99	; 153
    1a24:	49 e9       	ldi	r20, 0x99	; 153
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8d 83       	std	Y+5, r24	; 0x05
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	af 83       	std	Y+7, r26	; 0x07
    1a36:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a38:	11 e0       	ldi	r17, 0x01	; 1
    1a3a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a3c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a40:	98 85       	ldd	r25, Y+8	; 0x08
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	0c f0       	brlt	.+2      	; 0x1a54 <testLatch+0x90>
    1a52:	10 e0       	ldi	r17, 0x00	; 0
    1a54:	11 23       	and	r17, r17
    1a56:	29 f0       	breq	.+10     	; 0x1a62 <testLatch+0x9e>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9a 87       	std	Y+10, r25	; 0x0a
    1a5e:	89 87       	std	Y+9, r24	; 0x09
    1a60:	46 c0       	rjmp	.+140    	; 0x1aee <testLatch+0x12a>
	else if (__tmp > 65535)
    1a62:	11 e0       	ldi	r17, 0x01	; 1
    1a64:	6d 81       	ldd	r22, Y+5	; 0x05
    1a66:	7e 81       	ldd	r23, Y+6	; 0x06
    1a68:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6a:	98 85       	ldd	r25, Y+8	; 0x08
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 09 12 	call	0x2412	; 0x2412 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	0c f0       	brlt	.+2      	; 0x1a7e <testLatch+0xba>
    1a7c:	10 e0       	ldi	r17, 0x00	; 0
    1a7e:	11 23       	and	r17, r17
    1a80:	61 f1       	breq	.+88     	; 0x1ada <testLatch+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	69 81       	ldd	r22, Y+1	; 0x01
    1a84:	7a 81       	ldd	r23, Y+2	; 0x02
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9a 87       	std	Y+10, r25	; 0x0a
    1aa8:	89 87       	std	Y+9, r24	; 0x09
    1aaa:	12 c0       	rjmp	.+36     	; 0x1ad0 <testLatch+0x10c>
    1aac:	8a e7       	ldi	r24, 0x7A	; 122
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	8b 87       	std	Y+11, r24	; 0x0b
    1ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ab8:	8c 01       	movw	r16, r24
    1aba:	c8 01       	movw	r24, r16
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <testLatch+0xf8>
    1ac0:	8c 01       	movw	r16, r24
    1ac2:	1c 87       	std	Y+12, r17	; 0x0c
    1ac4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9a 87       	std	Y+10, r25	; 0x0a
    1ace:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	51 f7       	brne	.-44     	; 0x1aac <testLatch+0xe8>
    1ad8:	17 c0       	rjmp	.+46     	; 0x1b08 <testLatch+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6d 81       	ldd	r22, Y+5	; 0x05
    1adc:	7e 81       	ldd	r23, Y+6	; 0x06
    1ade:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae0:	98 85       	ldd	r25, Y+8	; 0x08
    1ae2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a 87       	std	Y+10, r25	; 0x0a
    1aec:	89 87       	std	Y+9, r24	; 0x09
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	9e 87       	std	Y+14, r25	; 0x0e
    1af4:	8d 87       	std	Y+13, r24	; 0x0d
    1af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afa:	8c 01       	movw	r16, r24
    1afc:	f8 01       	movw	r30, r16
    1afe:	31 97       	sbiw	r30, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <testLatch+0x13a>
    1b02:	8f 01       	movw	r16, r30
    1b04:	1e 87       	std	Y+14, r17	; 0x0e
    1b06:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	PORT_E.b1 = 0;
    1b08:	87 e2       	ldi	r24, 0x27	; 39
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 81       	ld	r18, Z
    1b10:	2d 7f       	andi	r18, 0xFD	; 253
    1b12:	fc 01       	movw	r30, r24
    1b14:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x00;
    1b16:	8b e3       	ldi	r24, 0x3B	; 59
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	10 82       	st	Z, r1
}
    1b1e:	2e 96       	adiw	r28, 0x0e	; 14
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <SRAM_test>:

void SRAM_test(void)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	29 97       	sbiw	r28, 0x09	; 9
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
	// Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	98 e1       	ldi	r25, 0x18	; 24
    1b4c:	98 87       	std	Y+8, r25	; 0x08
    1b4e:	8f 83       	std	Y+7, r24	; 0x07
	
	unsigned int i, werrors, rerrors;
	werrors = 0;
    1b50:	1c 82       	std	Y+4, r1	; 0x04
    1b52:	1b 82       	std	Y+3, r1	; 0x03
	rerrors = 0;
    1b54:	1e 82       	std	Y+6, r1	; 0x06
    1b56:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
    1b58:	89 e2       	ldi	r24, 0x29	; 41
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <puts>

	for (i = 0; i < 0x800; i++) {
    1b60:	1a 82       	std	Y+2, r1	; 0x02
    1b62:	19 82       	std	Y+1, r1	; 0x01
    1b64:	53 c0       	rjmp	.+166    	; 0x1c0c <SRAM_test+0xd8>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	80 95       	com	r24
    1b6a:	89 87       	std	Y+9, r24	; 0x09
		ext_ram[i] = testvalue;
    1b6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b6e:	38 85       	ldd	r19, Y+8	; 0x08
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	29 85       	ldd	r18, Y+9	; 0x09
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	20 83       	st	Z, r18
		//printf("WRITE: current i: %d \r\n",i);
		if (ext_ram[i] != testvalue) {
    1b7e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b80:	38 85       	ldd	r19, Y+8	; 0x08
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	90 81       	ld	r25, Z
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	98 17       	cp	r25, r24
    1b92:	b9 f1       	breq	.+110    	; 0x1c02 <SRAM_test+0xce>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    1b94:	2f 81       	ldd	r18, Y+7	; 0x07
    1b96:	38 85       	ldd	r19, Y+8	; 0x08
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	8d b7       	in	r24, 0x3d	; 61
    1bb0:	9e b7       	in	r25, 0x3e	; 62
    1bb2:	08 97       	sbiw	r24, 0x08	; 8
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	9e bf       	out	0x3e, r25	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	8d bf       	out	0x3d, r24	; 61
    1bbe:	8d b7       	in	r24, 0x3d	; 61
    1bc0:	9e b7       	in	r25, 0x3e	; 62
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	60 e4       	ldi	r22, 0x40	; 64
    1bc6:	73 e0       	ldi	r23, 0x03	; 3
    1bc8:	fc 01       	movw	r30, r24
    1bca:	71 83       	std	Z+1, r23	; 0x01
    1bcc:	60 83       	st	Z, r22
    1bce:	69 81       	ldd	r22, Y+1	; 0x01
    1bd0:	7a 81       	ldd	r23, Y+2	; 0x02
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	73 83       	std	Z+3, r23	; 0x03
    1bd6:	62 83       	std	Z+2, r22	; 0x02
    1bd8:	fc 01       	movw	r30, r24
    1bda:	55 83       	std	Z+5, r21	; 0x05
    1bdc:	44 83       	std	Z+4, r20	; 0x04
    1bde:	fc 01       	movw	r30, r24
    1be0:	37 83       	std	Z+7, r19	; 0x07
    1be2:	26 83       	std	Z+6, r18	; 0x06
    1be4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
    1be8:	8d b7       	in	r24, 0x3d	; 61
    1bea:	9e b7       	in	r25, 0x3e	; 62
    1bec:	08 96       	adiw	r24, 0x08	; 8
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	9e bf       	out	0x3e, r25	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	8d bf       	out	0x3d, r24	; 61
			werrors++;
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	9c 83       	std	Y+4, r25	; 0x04
    1c00:	8b 83       	std	Y+3, r24	; 0x03
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	e8 e0       	ldi	r30, 0x08	; 8
    1c12:	80 30       	cpi	r24, 0x00	; 0
    1c14:	9e 07       	cpc	r25, r30
    1c16:	08 f4       	brcc	.+2      	; 0x1c1a <SRAM_test+0xe6>
    1c18:	a6 cf       	rjmp	.-180    	; 0x1b66 <SRAM_test+0x32>
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    1c1a:	1a 82       	std	Y+2, r1	; 0x02
    1c1c:	19 82       	std	Y+1, r1	; 0x01
    1c1e:	4a c0       	rjmp	.+148    	; 0x1cb4 <SRAM_test+0x180>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	80 95       	com	r24
    1c24:	89 87       	std	Y+9, r24	; 0x09
		//printf("READ: current i: %d \r\n",i);
  		if (ext_ram[i] != testvalue) {
    1c26:	2f 81       	ldd	r18, Y+7	; 0x07
    1c28:	38 85       	ldd	r19, Y+8	; 0x08
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	fc 01       	movw	r30, r24
    1c34:	90 81       	ld	r25, Z
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	98 17       	cp	r25, r24
    1c3a:	b9 f1       	breq	.+110    	; 0x1caa <SRAM_test+0x176>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    1c3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c3e:	38 85       	ldd	r19, Y+8	; 0x08
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	82 0f       	add	r24, r18
    1c46:	93 1f       	adc	r25, r19
    1c48:	fc 01       	movw	r30, r24
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	8d b7       	in	r24, 0x3d	; 61
    1c58:	9e b7       	in	r25, 0x3e	; 62
    1c5a:	08 97       	sbiw	r24, 0x08	; 8
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	9e bf       	out	0x3e, r25	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	8d bf       	out	0x3d, r24	; 61
    1c66:	8d b7       	in	r24, 0x3d	; 61
    1c68:	9e b7       	in	r25, 0x3e	; 62
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	60 e8       	ldi	r22, 0x80	; 128
    1c6e:	73 e0       	ldi	r23, 0x03	; 3
    1c70:	fc 01       	movw	r30, r24
    1c72:	71 83       	std	Z+1, r23	; 0x01
    1c74:	60 83       	st	Z, r22
    1c76:	69 81       	ldd	r22, Y+1	; 0x01
    1c78:	7a 81       	ldd	r23, Y+2	; 0x02
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	73 83       	std	Z+3, r23	; 0x03
    1c7e:	62 83       	std	Z+2, r22	; 0x02
    1c80:	fc 01       	movw	r30, r24
    1c82:	55 83       	std	Z+5, r21	; 0x05
    1c84:	44 83       	std	Z+4, r20	; 0x04
    1c86:	fc 01       	movw	r30, r24
    1c88:	37 83       	std	Z+7, r19	; 0x07
    1c8a:	26 83       	std	Z+6, r18	; 0x06
    1c8c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
    1c90:	8d b7       	in	r24, 0x3d	; 61
    1c92:	9e b7       	in	r25, 0x3e	; 62
    1c94:	08 96       	adiw	r24, 0x08	; 8
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	9e bf       	out	0x3e, r25	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	8d bf       	out	0x3d, r24	; 61
			rerrors++;
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	e8 e0       	ldi	r30, 0x08	; 8
    1cba:	80 30       	cpi	r24, 0x00	; 0
    1cbc:	9e 07       	cpc	r25, r30
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <SRAM_test+0x18e>
    1cc0:	af cf       	rjmp	.-162    	; 0x1c20 <SRAM_test+0xec>
			rerrors++;
		} else {
			//printf("SRAM READ OK \r\n "); 
		}
	}
	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <SRAM_test+0x190>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <SRAM_test+0x192>
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <SRAM_test+0x194>
    1cc8:	8d b7       	in	r24, 0x3d	; 61
    1cca:	9e b7       	in	r25, 0x3e	; 62
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	2f eb       	ldi	r18, 0xBF	; 191
    1cd0:	33 e0       	ldi	r19, 0x03	; 3
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	31 83       	std	Z+1, r19	; 0x01
    1cd6:	20 83       	st	Z, r18
    1cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cda:	3c 81       	ldd	r19, Y+4	; 0x04
    1cdc:	fc 01       	movw	r30, r24
    1cde:	33 83       	std	Z+3, r19	; 0x03
    1ce0:	22 83       	std	Z+2, r18	; 0x02
    1ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	35 83       	std	Z+5, r19	; 0x05
    1cea:	24 83       	std	Z+4, r18	; 0x04
    1cec:	0e 94 24 15 	call	0x2a48	; 0x2a48 <printf>
    1cf0:	8d b7       	in	r24, 0x3d	; 61
    1cf2:	9e b7       	in	r25, 0x3e	; 62
    1cf4:	06 96       	adiw	r24, 0x06	; 6
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	9e bf       	out	0x3e, r25	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	8d bf       	out	0x3d, r24	; 61
}
    1d00:	29 96       	adiw	r28, 0x09	; 9
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <GAL_test>:




void GAL_test(void* start, void* stop){
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	64 97       	sbiw	r28, 0x14	; 20
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	9a 8b       	std	Y+18, r25	; 0x12
    1d2c:	89 8b       	std	Y+17, r24	; 0x11
    1d2e:	7c 8b       	std	Y+20, r23	; 0x14
    1d30:	6b 8b       	std	Y+19, r22	; 0x13
	volatile char* access = (char *) start;
    1d32:	89 89       	ldd	r24, Y+17	; 0x11
    1d34:	9a 89       	ldd	r25, Y+18	; 0x12
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
	while(access != (char* ) stop ) {
    1d3a:	8a c0       	rjmp	.+276    	; 0x1e50 <GAL_test+0x13e>
		*access = 0x42;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	22 e4       	ldi	r18, 0x42	; 66
    1d42:	fc 01       	movw	r30, r24
    1d44:	20 83       	st	Z, r18
		++access;
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e2       	ldi	r26, 0x20	; 32
    1d56:	b1 e4       	ldi	r27, 0x41	; 65
    1d58:	8b 83       	std	Y+3, r24	; 0x03
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	ad 83       	std	Y+5, r26	; 0x05
    1d5e:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	6b 81       	ldd	r22, Y+3	; 0x03
    1d62:	7c 81       	ldd	r23, Y+4	; 0x04
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	2a e9       	ldi	r18, 0x9A	; 154
    1d6a:	39 e9       	ldi	r19, 0x99	; 153
    1d6c:	49 e9       	ldi	r20, 0x99	; 153
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8f 83       	std	Y+7, r24	; 0x07
    1d7a:	98 87       	std	Y+8, r25	; 0x08
    1d7c:	a9 87       	std	Y+9, r26	; 0x09
    1d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d80:	11 e0       	ldi	r17, 0x01	; 1
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	0c f0       	brlt	.+2      	; 0x1d9c <GAL_test+0x8a>
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	11 23       	and	r17, r17
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <GAL_test+0x98>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9c 87       	std	Y+12, r25	; 0x0c
    1da6:	8b 87       	std	Y+11, r24	; 0x0b
    1da8:	46 c0       	rjmp	.+140    	; 0x1e36 <GAL_test+0x124>
	else if (__tmp > 65535)
    1daa:	11 e0       	ldi	r17, 0x01	; 1
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 09 12 	call	0x2412	; 0x2412 <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	0c f0       	brlt	.+2      	; 0x1dc6 <GAL_test+0xb4>
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	11 23       	and	r17, r17
    1dc8:	61 f1       	breq	.+88     	; 0x1e22 <GAL_test+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	6b 81       	ldd	r22, Y+3	; 0x03
    1dcc:	7c 81       	ldd	r23, Y+4	; 0x04
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 0f 11 	call	0x221e	; 0x221e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9c 87       	std	Y+12, r25	; 0x0c
    1df0:	8b 87       	std	Y+11, r24	; 0x0b
    1df2:	12 c0       	rjmp	.+36     	; 0x1e18 <GAL_test+0x106>
    1df4:	8a e7       	ldi	r24, 0x7A	; 122
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e 87       	std	Y+14, r25	; 0x0e
    1dfa:	8d 87       	std	Y+13, r24	; 0x0d
    1dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e00:	8c 01       	movw	r16, r24
    1e02:	c8 01       	movw	r24, r16
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <GAL_test+0xf2>
    1e08:	8c 01       	movw	r16, r24
    1e0a:	1e 87       	std	Y+14, r17	; 0x0e
    1e0c:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e10:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	9c 87       	std	Y+12, r25	; 0x0c
    1e16:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	51 f7       	brne	.-44     	; 0x1df4 <GAL_test+0xe2>
    1e20:	17 c0       	rjmp	.+46     	; 0x1e50 <GAL_test+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e22:	6f 81       	ldd	r22, Y+7	; 0x07
    1e24:	78 85       	ldd	r23, Y+8	; 0x08
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9c 87       	std	Y+12, r25	; 0x0c
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	98 8b       	std	Y+16, r25	; 0x10
    1e3c:	8f 87       	std	Y+15, r24	; 0x0f
    1e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e40:	98 89       	ldd	r25, Y+16	; 0x10
    1e42:	8c 01       	movw	r16, r24
    1e44:	f8 01       	movw	r30, r16
    1e46:	31 97       	sbiw	r30, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <GAL_test+0x134>
    1e4a:	8f 01       	movw	r16, r30
    1e4c:	18 8b       	std	Y+16, r17	; 0x10
    1e4e:	0f 87       	std	Y+15, r16	; 0x0f



void GAL_test(void* start, void* stop){
	volatile char* access = (char *) start;
	while(access != (char* ) stop ) {
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	29 81       	ldd	r18, Y+1	; 0x01
    1e56:	3a 81       	ldd	r19, Y+2	; 0x02
    1e58:	28 17       	cp	r18, r24
    1e5a:	39 07       	cpc	r19, r25
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <GAL_test+0x14e>
    1e5e:	6e cf       	rjmp	.-292    	; 0x1d3c <GAL_test+0x2a>
		++access;
		_delay_ms(10);
	}
		
	
    1e60:	64 96       	adiw	r28, 0x14	; 20
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <__fixunssfsi>:
    1e76:	ef 92       	push	r14
    1e78:	ff 92       	push	r15
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	7b 01       	movw	r14, r22
    1e80:	8c 01       	movw	r16, r24
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	5f e4       	ldi	r21, 0x4F	; 79
    1e8a:	0e 94 39 12 	call	0x2472	; 0x2472 <__gesf2>
    1e8e:	87 fd       	sbrc	r24, 7
    1e90:	11 c0       	rjmp	.+34     	; 0x1eb4 <__fixunssfsi+0x3e>
    1e92:	c8 01       	movw	r24, r16
    1e94:	b7 01       	movw	r22, r14
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	5f e4       	ldi	r21, 0x4F	; 79
    1e9e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
    1ea2:	0e 94 99 12 	call	0x2532	; 0x2532 <__fixsfsi>
    1ea6:	9b 01       	movw	r18, r22
    1ea8:	ac 01       	movw	r20, r24
    1eaa:	20 50       	subi	r18, 0x00	; 0
    1eac:	30 40       	sbci	r19, 0x00	; 0
    1eae:	40 40       	sbci	r20, 0x00	; 0
    1eb0:	50 48       	sbci	r21, 0x80	; 128
    1eb2:	06 c0       	rjmp	.+12     	; 0x1ec0 <__fixunssfsi+0x4a>
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	b7 01       	movw	r22, r14
    1eb8:	0e 94 99 12 	call	0x2532	; 0x2532 <__fixsfsi>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	b9 01       	movw	r22, r18
    1ec2:	ca 01       	movw	r24, r20
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	08 95       	ret

00001ece <_fpadd_parts>:
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	ed e6       	ldi	r30, 0x6D	; 109
    1ed4:	ff e0       	ldi	r31, 0x0F	; 15
    1ed6:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x8>
    1eda:	fc 01       	movw	r30, r24
    1edc:	ea 01       	movw	r28, r20
    1ede:	80 81       	ld	r24, Z
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	08 f4       	brcc	.+2      	; 0x1ee6 <_fpadd_parts+0x18>
    1ee4:	38 c1       	rjmp	.+624    	; 0x2156 <_fpadd_parts+0x288>
    1ee6:	db 01       	movw	r26, r22
    1ee8:	9c 91       	ld	r25, X
    1eea:	92 30       	cpi	r25, 0x02	; 2
    1eec:	08 f4       	brcc	.+2      	; 0x1ef0 <_fpadd_parts+0x22>
    1eee:	30 c1       	rjmp	.+608    	; 0x2150 <_fpadd_parts+0x282>
    1ef0:	84 30       	cpi	r24, 0x04	; 4
    1ef2:	59 f4       	brne	.+22     	; 0x1f0a <_fpadd_parts+0x3c>
    1ef4:	94 30       	cpi	r25, 0x04	; 4
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <_fpadd_parts+0x2c>
    1ef8:	2e c1       	rjmp	.+604    	; 0x2156 <_fpadd_parts+0x288>
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	11 96       	adiw	r26, 0x01	; 1
    1efe:	8c 91       	ld	r24, X
    1f00:	11 97       	sbiw	r26, 0x01	; 1
    1f02:	98 17       	cp	r25, r24
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <_fpadd_parts+0x3a>
    1f06:	21 c1       	rjmp	.+578    	; 0x214a <_fpadd_parts+0x27c>
    1f08:	26 c1       	rjmp	.+588    	; 0x2156 <_fpadd_parts+0x288>
    1f0a:	94 30       	cpi	r25, 0x04	; 4
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <_fpadd_parts+0x42>
    1f0e:	20 c1       	rjmp	.+576    	; 0x2150 <_fpadd_parts+0x282>
    1f10:	92 30       	cpi	r25, 0x02	; 2
    1f12:	b1 f4       	brne	.+44     	; 0x1f40 <_fpadd_parts+0x72>
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <_fpadd_parts+0x4c>
    1f18:	1e c1       	rjmp	.+572    	; 0x2156 <_fpadd_parts+0x288>
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	af 01       	movw	r20, r30
    1f1e:	28 e0       	ldi	r18, 0x08	; 8
    1f20:	da 01       	movw	r26, r20
    1f22:	0d 90       	ld	r0, X+
    1f24:	ad 01       	movw	r20, r26
    1f26:	dc 01       	movw	r26, r24
    1f28:	0d 92       	st	X+, r0
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	21 50       	subi	r18, 0x01	; 1
    1f2e:	c1 f7       	brne	.-16     	; 0x1f20 <_fpadd_parts+0x52>
    1f30:	db 01       	movw	r26, r22
    1f32:	11 96       	adiw	r26, 0x01	; 1
    1f34:	8c 91       	ld	r24, X
    1f36:	11 97       	sbiw	r26, 0x01	; 1
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	89 23       	and	r24, r25
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	0a c1       	rjmp	.+532    	; 0x2154 <_fpadd_parts+0x286>
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <_fpadd_parts+0x78>
    1f44:	05 c1       	rjmp	.+522    	; 0x2150 <_fpadd_parts+0x282>
    1f46:	c2 80       	ldd	r12, Z+2	; 0x02
    1f48:	d3 80       	ldd	r13, Z+3	; 0x03
    1f4a:	db 01       	movw	r26, r22
    1f4c:	12 96       	adiw	r26, 0x02	; 2
    1f4e:	6d 90       	ld	r6, X+
    1f50:	7c 90       	ld	r7, X
    1f52:	13 97       	sbiw	r26, 0x03	; 3
    1f54:	24 81       	ldd	r18, Z+4	; 0x04
    1f56:	35 81       	ldd	r19, Z+5	; 0x05
    1f58:	46 81       	ldd	r20, Z+6	; 0x06
    1f5a:	57 81       	ldd	r21, Z+7	; 0x07
    1f5c:	14 96       	adiw	r26, 0x04	; 4
    1f5e:	ed 90       	ld	r14, X+
    1f60:	fd 90       	ld	r15, X+
    1f62:	0d 91       	ld	r16, X+
    1f64:	1c 91       	ld	r17, X
    1f66:	17 97       	sbiw	r26, 0x07	; 7
    1f68:	c6 01       	movw	r24, r12
    1f6a:	86 19       	sub	r24, r6
    1f6c:	97 09       	sbc	r25, r7
    1f6e:	5c 01       	movw	r10, r24
    1f70:	97 ff       	sbrs	r25, 7
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <_fpadd_parts+0xae>
    1f74:	aa 24       	eor	r10, r10
    1f76:	bb 24       	eor	r11, r11
    1f78:	a8 1a       	sub	r10, r24
    1f7a:	b9 0a       	sbc	r11, r25
    1f7c:	b0 e2       	ldi	r27, 0x20	; 32
    1f7e:	ab 16       	cp	r10, r27
    1f80:	b1 04       	cpc	r11, r1
    1f82:	0c f0       	brlt	.+2      	; 0x1f86 <_fpadd_parts+0xb8>
    1f84:	61 c0       	rjmp	.+194    	; 0x2048 <_fpadd_parts+0x17a>
    1f86:	18 16       	cp	r1, r24
    1f88:	19 06       	cpc	r1, r25
    1f8a:	6c f5       	brge	.+90     	; 0x1fe6 <_fpadd_parts+0x118>
    1f8c:	37 01       	movw	r6, r14
    1f8e:	48 01       	movw	r8, r16
    1f90:	0a 2c       	mov	r0, r10
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <_fpadd_parts+0xce>
    1f94:	96 94       	lsr	r9
    1f96:	87 94       	ror	r8
    1f98:	77 94       	ror	r7
    1f9a:	67 94       	ror	r6
    1f9c:	0a 94       	dec	r0
    1f9e:	d2 f7       	brpl	.-12     	; 0x1f94 <_fpadd_parts+0xc6>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	0a 2c       	mov	r0, r10
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <_fpadd_parts+0xe6>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	aa 1f       	adc	r26, r26
    1fb2:	bb 1f       	adc	r27, r27
    1fb4:	0a 94       	dec	r0
    1fb6:	d2 f7       	brpl	.-12     	; 0x1fac <_fpadd_parts+0xde>
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	a1 09       	sbc	r26, r1
    1fbc:	b1 09       	sbc	r27, r1
    1fbe:	8e 21       	and	r24, r14
    1fc0:	9f 21       	and	r25, r15
    1fc2:	a0 23       	and	r26, r16
    1fc4:	b1 23       	and	r27, r17
    1fc6:	ee 24       	eor	r14, r14
    1fc8:	ff 24       	eor	r15, r15
    1fca:	87 01       	movw	r16, r14
    1fcc:	e3 94       	inc	r14
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	a1 05       	cpc	r26, r1
    1fd2:	b1 05       	cpc	r27, r1
    1fd4:	19 f4       	brne	.+6      	; 0x1fdc <_fpadd_parts+0x10e>
    1fd6:	ee 24       	eor	r14, r14
    1fd8:	ff 24       	eor	r15, r15
    1fda:	87 01       	movw	r16, r14
    1fdc:	e6 28       	or	r14, r6
    1fde:	f7 28       	or	r15, r7
    1fe0:	08 29       	or	r16, r8
    1fe2:	19 29       	or	r17, r9
    1fe4:	3c c0       	rjmp	.+120    	; 0x205e <_fpadd_parts+0x190>
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	d1 f1       	breq	.+116    	; 0x205e <_fpadd_parts+0x190>
    1fea:	ca 0c       	add	r12, r10
    1fec:	db 1c       	adc	r13, r11
    1fee:	39 01       	movw	r6, r18
    1ff0:	4a 01       	movw	r8, r20
    1ff2:	0a 2c       	mov	r0, r10
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <_fpadd_parts+0x130>
    1ff6:	96 94       	lsr	r9
    1ff8:	87 94       	ror	r8
    1ffa:	77 94       	ror	r7
    1ffc:	67 94       	ror	r6
    1ffe:	0a 94       	dec	r0
    2000:	d2 f7       	brpl	.-12     	; 0x1ff6 <_fpadd_parts+0x128>
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e0       	ldi	r26, 0x00	; 0
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	0a 2c       	mov	r0, r10
    200c:	04 c0       	rjmp	.+8      	; 0x2016 <_fpadd_parts+0x148>
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	aa 1f       	adc	r26, r26
    2014:	bb 1f       	adc	r27, r27
    2016:	0a 94       	dec	r0
    2018:	d2 f7       	brpl	.-12     	; 0x200e <_fpadd_parts+0x140>
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	a1 09       	sbc	r26, r1
    201e:	b1 09       	sbc	r27, r1
    2020:	82 23       	and	r24, r18
    2022:	93 23       	and	r25, r19
    2024:	a4 23       	and	r26, r20
    2026:	b5 23       	and	r27, r21
    2028:	21 e0       	ldi	r18, 0x01	; 1
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	a1 05       	cpc	r26, r1
    2034:	b1 05       	cpc	r27, r1
    2036:	19 f4       	brne	.+6      	; 0x203e <_fpadd_parts+0x170>
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	a9 01       	movw	r20, r18
    203e:	26 29       	or	r18, r6
    2040:	37 29       	or	r19, r7
    2042:	48 29       	or	r20, r8
    2044:	59 29       	or	r21, r9
    2046:	0b c0       	rjmp	.+22     	; 0x205e <_fpadd_parts+0x190>
    2048:	6c 14       	cp	r6, r12
    204a:	7d 04       	cpc	r7, r13
    204c:	24 f4       	brge	.+8      	; 0x2056 <_fpadd_parts+0x188>
    204e:	ee 24       	eor	r14, r14
    2050:	ff 24       	eor	r15, r15
    2052:	87 01       	movw	r16, r14
    2054:	04 c0       	rjmp	.+8      	; 0x205e <_fpadd_parts+0x190>
    2056:	63 01       	movw	r12, r6
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	a9 01       	movw	r20, r18
    205e:	81 81       	ldd	r24, Z+1	; 0x01
    2060:	fb 01       	movw	r30, r22
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	89 17       	cp	r24, r25
    2066:	09 f4       	brne	.+2      	; 0x206a <_fpadd_parts+0x19c>
    2068:	45 c0       	rjmp	.+138    	; 0x20f4 <_fpadd_parts+0x226>
    206a:	88 23       	and	r24, r24
    206c:	49 f0       	breq	.+18     	; 0x2080 <_fpadd_parts+0x1b2>
    206e:	d8 01       	movw	r26, r16
    2070:	c7 01       	movw	r24, r14
    2072:	82 1b       	sub	r24, r18
    2074:	93 0b       	sbc	r25, r19
    2076:	a4 0b       	sbc	r26, r20
    2078:	b5 0b       	sbc	r27, r21
    207a:	9c 01       	movw	r18, r24
    207c:	ad 01       	movw	r20, r26
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <_fpadd_parts+0x1ba>
    2080:	2e 19       	sub	r18, r14
    2082:	3f 09       	sbc	r19, r15
    2084:	40 0b       	sbc	r20, r16
    2086:	51 0b       	sbc	r21, r17
    2088:	57 fd       	sbrc	r21, 7
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <_fpadd_parts+0x1c6>
    208c:	19 82       	std	Y+1, r1	; 0x01
    208e:	db 82       	std	Y+3, r13	; 0x03
    2090:	ca 82       	std	Y+2, r12	; 0x02
    2092:	0b c0       	rjmp	.+22     	; 0x20aa <_fpadd_parts+0x1dc>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	db 82       	std	Y+3, r13	; 0x03
    209a:	ca 82       	std	Y+2, r12	; 0x02
    209c:	50 95       	com	r21
    209e:	40 95       	com	r20
    20a0:	30 95       	com	r19
    20a2:	21 95       	neg	r18
    20a4:	3f 4f       	sbci	r19, 0xFF	; 255
    20a6:	4f 4f       	sbci	r20, 0xFF	; 255
    20a8:	5f 4f       	sbci	r21, 0xFF	; 255
    20aa:	2c 83       	std	Y+4, r18	; 0x04
    20ac:	3d 83       	std	Y+5, r19	; 0x05
    20ae:	4e 83       	std	Y+6, r20	; 0x06
    20b0:	5f 83       	std	Y+7, r21	; 0x07
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <_fpadd_parts+0x200>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	aa 1f       	adc	r26, r26
    20ba:	bb 1f       	adc	r27, r27
    20bc:	8c 83       	std	Y+4, r24	; 0x04
    20be:	9d 83       	std	Y+5, r25	; 0x05
    20c0:	ae 83       	std	Y+6, r26	; 0x06
    20c2:	bf 83       	std	Y+7, r27	; 0x07
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9b 83       	std	Y+3, r25	; 0x03
    20cc:	8a 83       	std	Y+2, r24	; 0x02
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	9d 81       	ldd	r25, Y+5	; 0x05
    20d2:	ae 81       	ldd	r26, Y+6	; 0x06
    20d4:	bf 81       	ldd	r27, Y+7	; 0x07
    20d6:	9c 01       	movw	r18, r24
    20d8:	ad 01       	movw	r20, r26
    20da:	21 50       	subi	r18, 0x01	; 1
    20dc:	30 40       	sbci	r19, 0x00	; 0
    20de:	40 40       	sbci	r20, 0x00	; 0
    20e0:	50 40       	sbci	r21, 0x00	; 0
    20e2:	2f 3f       	cpi	r18, 0xFF	; 255
    20e4:	ef ef       	ldi	r30, 0xFF	; 255
    20e6:	3e 07       	cpc	r19, r30
    20e8:	ef ef       	ldi	r30, 0xFF	; 255
    20ea:	4e 07       	cpc	r20, r30
    20ec:	ef e3       	ldi	r30, 0x3F	; 63
    20ee:	5e 07       	cpc	r21, r30
    20f0:	08 f3       	brcs	.-62     	; 0x20b4 <_fpadd_parts+0x1e6>
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <_fpadd_parts+0x23c>
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	db 82       	std	Y+3, r13	; 0x03
    20f8:	ca 82       	std	Y+2, r12	; 0x02
    20fa:	2e 0d       	add	r18, r14
    20fc:	3f 1d       	adc	r19, r15
    20fe:	40 1f       	adc	r20, r16
    2100:	51 1f       	adc	r21, r17
    2102:	2c 83       	std	Y+4, r18	; 0x04
    2104:	3d 83       	std	Y+5, r19	; 0x05
    2106:	4e 83       	std	Y+6, r20	; 0x06
    2108:	5f 83       	std	Y+7, r21	; 0x07
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	88 83       	st	Y, r24
    210e:	2c 81       	ldd	r18, Y+4	; 0x04
    2110:	3d 81       	ldd	r19, Y+5	; 0x05
    2112:	4e 81       	ldd	r20, Y+6	; 0x06
    2114:	5f 81       	ldd	r21, Y+7	; 0x07
    2116:	57 ff       	sbrs	r21, 7
    2118:	1d c0       	rjmp	.+58     	; 0x2154 <_fpadd_parts+0x286>
    211a:	da 01       	movw	r26, r20
    211c:	c9 01       	movw	r24, r18
    211e:	81 70       	andi	r24, 0x01	; 1
    2120:	90 70       	andi	r25, 0x00	; 0
    2122:	a0 70       	andi	r26, 0x00	; 0
    2124:	b0 70       	andi	r27, 0x00	; 0
    2126:	56 95       	lsr	r21
    2128:	47 95       	ror	r20
    212a:	37 95       	ror	r19
    212c:	27 95       	ror	r18
    212e:	82 2b       	or	r24, r18
    2130:	93 2b       	or	r25, r19
    2132:	a4 2b       	or	r26, r20
    2134:	b5 2b       	or	r27, r21
    2136:	8c 83       	std	Y+4, r24	; 0x04
    2138:	9d 83       	std	Y+5, r25	; 0x05
    213a:	ae 83       	std	Y+6, r26	; 0x06
    213c:	bf 83       	std	Y+7, r27	; 0x07
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	01 96       	adiw	r24, 0x01	; 1
    2144:	9b 83       	std	Y+3, r25	; 0x03
    2146:	8a 83       	std	Y+2, r24	; 0x02
    2148:	05 c0       	rjmp	.+10     	; 0x2154 <_fpadd_parts+0x286>
    214a:	ef e0       	ldi	r30, 0x0F	; 15
    214c:	f4 e0       	ldi	r31, 0x04	; 4
    214e:	03 c0       	rjmp	.+6      	; 0x2156 <_fpadd_parts+0x288>
    2150:	fb 01       	movw	r30, r22
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <_fpadd_parts+0x288>
    2154:	fe 01       	movw	r30, r28
    2156:	cf 01       	movw	r24, r30
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	ee e0       	ldi	r30, 0x0E	; 14
    215e:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x8>

00002162 <__addsf3>:
    2162:	a0 e2       	ldi	r26, 0x20	; 32
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 eb       	ldi	r30, 0xB7	; 183
    2168:	f0 e1       	ldi	r31, 0x10	; 16
    216a:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__prologue_saves__+0x18>
    216e:	69 83       	std	Y+1, r22	; 0x01
    2170:	7a 83       	std	Y+2, r23	; 0x02
    2172:	8b 83       	std	Y+3, r24	; 0x03
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	2d 83       	std	Y+5, r18	; 0x05
    2178:	3e 83       	std	Y+6, r19	; 0x06
    217a:	4f 83       	std	Y+7, r20	; 0x07
    217c:	58 87       	std	Y+8, r21	; 0x08
    217e:	89 e0       	ldi	r24, 0x09	; 9
    2180:	e8 2e       	mov	r14, r24
    2182:	f1 2c       	mov	r15, r1
    2184:	ec 0e       	add	r14, r28
    2186:	fd 1e       	adc	r15, r29
    2188:	ce 01       	movw	r24, r28
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	b7 01       	movw	r22, r14
    218e:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    2192:	8e 01       	movw	r16, r28
    2194:	0f 5e       	subi	r16, 0xEF	; 239
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	ce 01       	movw	r24, r28
    219a:	05 96       	adiw	r24, 0x05	; 5
    219c:	b8 01       	movw	r22, r16
    219e:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    21a2:	c7 01       	movw	r24, r14
    21a4:	b8 01       	movw	r22, r16
    21a6:	ae 01       	movw	r20, r28
    21a8:	47 5e       	subi	r20, 0xE7	; 231
    21aa:	5f 4f       	sbci	r21, 0xFF	; 255
    21ac:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_fpadd_parts>
    21b0:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__pack_f>
    21b4:	a0 96       	adiw	r28, 0x20	; 32
    21b6:	e6 e0       	ldi	r30, 0x06	; 6
    21b8:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

000021bc <__subsf3>:
    21bc:	a0 e2       	ldi	r26, 0x20	; 32
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e4 ee       	ldi	r30, 0xE4	; 228
    21c2:	f0 e1       	ldi	r31, 0x10	; 16
    21c4:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__prologue_saves__+0x18>
    21c8:	69 83       	std	Y+1, r22	; 0x01
    21ca:	7a 83       	std	Y+2, r23	; 0x02
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	2d 83       	std	Y+5, r18	; 0x05
    21d2:	3e 83       	std	Y+6, r19	; 0x06
    21d4:	4f 83       	std	Y+7, r20	; 0x07
    21d6:	58 87       	std	Y+8, r21	; 0x08
    21d8:	8e 01       	movw	r16, r28
    21da:	07 5f       	subi	r16, 0xF7	; 247
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	ce 01       	movw	r24, r28
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	b8 01       	movw	r22, r16
    21e4:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    21e8:	91 e1       	ldi	r25, 0x11	; 17
    21ea:	e9 2e       	mov	r14, r25
    21ec:	f1 2c       	mov	r15, r1
    21ee:	ec 0e       	add	r14, r28
    21f0:	fd 1e       	adc	r15, r29
    21f2:	ce 01       	movw	r24, r28
    21f4:	05 96       	adiw	r24, 0x05	; 5
    21f6:	b7 01       	movw	r22, r14
    21f8:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    21fc:	8a 89       	ldd	r24, Y+18	; 0x12
    21fe:	91 e0       	ldi	r25, 0x01	; 1
    2200:	89 27       	eor	r24, r25
    2202:	8a 8b       	std	Y+18, r24	; 0x12
    2204:	c8 01       	movw	r24, r16
    2206:	b7 01       	movw	r22, r14
    2208:	ae 01       	movw	r20, r28
    220a:	47 5e       	subi	r20, 0xE7	; 231
    220c:	5f 4f       	sbci	r21, 0xFF	; 255
    220e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_fpadd_parts>
    2212:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__pack_f>
    2216:	a0 96       	adiw	r28, 0x20	; 32
    2218:	e6 e0       	ldi	r30, 0x06	; 6
    221a:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

0000221e <__mulsf3>:
    221e:	a0 e2       	ldi	r26, 0x20	; 32
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e1       	ldi	r30, 0x15	; 21
    2224:	f1 e1       	ldi	r31, 0x11	; 17
    2226:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__prologue_saves__>
    222a:	69 83       	std	Y+1, r22	; 0x01
    222c:	7a 83       	std	Y+2, r23	; 0x02
    222e:	8b 83       	std	Y+3, r24	; 0x03
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	2d 83       	std	Y+5, r18	; 0x05
    2234:	3e 83       	std	Y+6, r19	; 0x06
    2236:	4f 83       	std	Y+7, r20	; 0x07
    2238:	58 87       	std	Y+8, r21	; 0x08
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	be 01       	movw	r22, r28
    2240:	67 5f       	subi	r22, 0xF7	; 247
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    2248:	ce 01       	movw	r24, r28
    224a:	05 96       	adiw	r24, 0x05	; 5
    224c:	be 01       	movw	r22, r28
    224e:	6f 5e       	subi	r22, 0xEF	; 239
    2250:	7f 4f       	sbci	r23, 0xFF	; 255
    2252:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    2256:	99 85       	ldd	r25, Y+9	; 0x09
    2258:	92 30       	cpi	r25, 0x02	; 2
    225a:	78 f0       	brcs	.+30     	; 0x227a <__mulsf3+0x5c>
    225c:	89 89       	ldd	r24, Y+17	; 0x11
    225e:	82 30       	cpi	r24, 0x02	; 2
    2260:	c0 f0       	brcs	.+48     	; 0x2292 <__mulsf3+0x74>
    2262:	94 30       	cpi	r25, 0x04	; 4
    2264:	19 f4       	brne	.+6      	; 0x226c <__mulsf3+0x4e>
    2266:	82 30       	cpi	r24, 0x02	; 2
    2268:	41 f4       	brne	.+16     	; 0x227a <__mulsf3+0x5c>
    226a:	cb c0       	rjmp	.+406    	; 0x2402 <__mulsf3+0x1e4>
    226c:	84 30       	cpi	r24, 0x04	; 4
    226e:	19 f4       	brne	.+6      	; 0x2276 <__mulsf3+0x58>
    2270:	92 30       	cpi	r25, 0x02	; 2
    2272:	79 f4       	brne	.+30     	; 0x2292 <__mulsf3+0x74>
    2274:	c6 c0       	rjmp	.+396    	; 0x2402 <__mulsf3+0x1e4>
    2276:	92 30       	cpi	r25, 0x02	; 2
    2278:	51 f4       	brne	.+20     	; 0x228e <__mulsf3+0x70>
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	2a 85       	ldd	r18, Y+10	; 0x0a
    227e:	9a 89       	ldd	r25, Y+18	; 0x12
    2280:	29 17       	cp	r18, r25
    2282:	09 f4       	brne	.+2      	; 0x2286 <__mulsf3+0x68>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	8a 87       	std	Y+10, r24	; 0x0a
    2288:	ce 01       	movw	r24, r28
    228a:	09 96       	adiw	r24, 0x09	; 9
    228c:	bc c0       	rjmp	.+376    	; 0x2406 <__mulsf3+0x1e8>
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	51 f4       	brne	.+20     	; 0x22a6 <__mulsf3+0x88>
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	2a 85       	ldd	r18, Y+10	; 0x0a
    2296:	9a 89       	ldd	r25, Y+18	; 0x12
    2298:	29 17       	cp	r18, r25
    229a:	09 f4       	brne	.+2      	; 0x229e <__mulsf3+0x80>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	8a 8b       	std	Y+18, r24	; 0x12
    22a0:	ce 01       	movw	r24, r28
    22a2:	41 96       	adiw	r24, 0x11	; 17
    22a4:	b0 c0       	rjmp	.+352    	; 0x2406 <__mulsf3+0x1e8>
    22a6:	6d 84       	ldd	r6, Y+13	; 0x0d
    22a8:	7e 84       	ldd	r7, Y+14	; 0x0e
    22aa:	8f 84       	ldd	r8, Y+15	; 0x0f
    22ac:	98 88       	ldd	r9, Y+16	; 0x10
    22ae:	ed 88       	ldd	r14, Y+21	; 0x15
    22b0:	fe 88       	ldd	r15, Y+22	; 0x16
    22b2:	0f 89       	ldd	r16, Y+23	; 0x17
    22b4:	18 8d       	ldd	r17, Y+24	; 0x18
    22b6:	e0 e2       	ldi	r30, 0x20	; 32
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	dc 01       	movw	r26, r24
    22c0:	aa 24       	eor	r10, r10
    22c2:	bb 24       	eor	r11, r11
    22c4:	65 01       	movw	r12, r10
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	a9 01       	movw	r20, r18
    22cc:	b3 01       	movw	r22, r6
    22ce:	61 70       	andi	r22, 0x01	; 1
    22d0:	70 70       	andi	r23, 0x00	; 0
    22d2:	61 15       	cp	r22, r1
    22d4:	71 05       	cpc	r23, r1
    22d6:	d1 f0       	breq	.+52     	; 0x230c <__mulsf3+0xee>
    22d8:	2e 0d       	add	r18, r14
    22da:	3f 1d       	adc	r19, r15
    22dc:	40 1f       	adc	r20, r16
    22de:	51 1f       	adc	r21, r17
    22e0:	15 01       	movw	r2, r10
    22e2:	26 01       	movw	r4, r12
    22e4:	28 0e       	add	r2, r24
    22e6:	39 1e       	adc	r3, r25
    22e8:	4a 1e       	adc	r4, r26
    22ea:	5b 1e       	adc	r5, r27
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e0       	ldi	r26, 0x00	; 0
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	2e 15       	cp	r18, r14
    22f6:	3f 05       	cpc	r19, r15
    22f8:	40 07       	cpc	r20, r16
    22fa:	51 07       	cpc	r21, r17
    22fc:	18 f0       	brcs	.+6      	; 0x2304 <__mulsf3+0xe6>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	dc 01       	movw	r26, r24
    2304:	82 0d       	add	r24, r2
    2306:	93 1d       	adc	r25, r3
    2308:	a4 1d       	adc	r26, r4
    230a:	b5 1d       	adc	r27, r5
    230c:	aa 0c       	add	r10, r10
    230e:	bb 1c       	adc	r11, r11
    2310:	cc 1c       	adc	r12, r12
    2312:	dd 1c       	adc	r13, r13
    2314:	17 ff       	sbrs	r17, 7
    2316:	09 c0       	rjmp	.+18     	; 0x232a <__mulsf3+0x10c>
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	26 2e       	mov	r2, r22
    231c:	31 2c       	mov	r3, r1
    231e:	41 2c       	mov	r4, r1
    2320:	51 2c       	mov	r5, r1
    2322:	a2 28       	or	r10, r2
    2324:	b3 28       	or	r11, r3
    2326:	c4 28       	or	r12, r4
    2328:	d5 28       	or	r13, r5
    232a:	31 97       	sbiw	r30, 0x01	; 1
    232c:	49 f0       	breq	.+18     	; 0x2340 <__mulsf3+0x122>
    232e:	ee 0c       	add	r14, r14
    2330:	ff 1c       	adc	r15, r15
    2332:	00 1f       	adc	r16, r16
    2334:	11 1f       	adc	r17, r17
    2336:	96 94       	lsr	r9
    2338:	87 94       	ror	r8
    233a:	77 94       	ror	r7
    233c:	67 94       	ror	r6
    233e:	c6 cf       	rjmp	.-116    	; 0x22cc <__mulsf3+0xae>
    2340:	6b 89       	ldd	r22, Y+19	; 0x13
    2342:	7c 89       	ldd	r23, Y+20	; 0x14
    2344:	eb 85       	ldd	r30, Y+11	; 0x0b
    2346:	fc 85       	ldd	r31, Y+12	; 0x0c
    2348:	6e 0f       	add	r22, r30
    234a:	7f 1f       	adc	r23, r31
    234c:	6e 5f       	subi	r22, 0xFE	; 254
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	7c 8f       	std	Y+28, r23	; 0x1c
    2352:	6b 8f       	std	Y+27, r22	; 0x1b
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	ea 85       	ldd	r30, Y+10	; 0x0a
    2358:	7a 89       	ldd	r23, Y+18	; 0x12
    235a:	e7 17       	cp	r30, r23
    235c:	09 f4       	brne	.+2      	; 0x2360 <__mulsf3+0x142>
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	6a 8f       	std	Y+26, r22	; 0x1a
    2362:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2364:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2366:	10 c0       	rjmp	.+32     	; 0x2388 <__mulsf3+0x16a>
    2368:	fc 01       	movw	r30, r24
    236a:	e1 70       	andi	r30, 0x01	; 1
    236c:	f0 70       	andi	r31, 0x00	; 0
    236e:	30 97       	sbiw	r30, 0x00	; 0
    2370:	29 f0       	breq	.+10     	; 0x237c <__mulsf3+0x15e>
    2372:	56 95       	lsr	r21
    2374:	47 95       	ror	r20
    2376:	37 95       	ror	r19
    2378:	27 95       	ror	r18
    237a:	50 68       	ori	r21, 0x80	; 128
    237c:	b6 95       	lsr	r27
    237e:	a7 95       	ror	r26
    2380:	97 95       	ror	r25
    2382:	87 95       	ror	r24
    2384:	6f 5f       	subi	r22, 0xFF	; 255
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	b7 fd       	sbrc	r27, 7
    238a:	ee cf       	rjmp	.-36     	; 0x2368 <__mulsf3+0x14a>
    238c:	0c c0       	rjmp	.+24     	; 0x23a6 <__mulsf3+0x188>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	aa 1f       	adc	r26, r26
    2394:	bb 1f       	adc	r27, r27
    2396:	57 fd       	sbrc	r21, 7
    2398:	81 60       	ori	r24, 0x01	; 1
    239a:	22 0f       	add	r18, r18
    239c:	33 1f       	adc	r19, r19
    239e:	44 1f       	adc	r20, r20
    23a0:	55 1f       	adc	r21, r21
    23a2:	61 50       	subi	r22, 0x01	; 1
    23a4:	70 40       	sbci	r23, 0x00	; 0
    23a6:	80 30       	cpi	r24, 0x00	; 0
    23a8:	e0 e0       	ldi	r30, 0x00	; 0
    23aa:	9e 07       	cpc	r25, r30
    23ac:	e0 e0       	ldi	r30, 0x00	; 0
    23ae:	ae 07       	cpc	r26, r30
    23b0:	e0 e4       	ldi	r30, 0x40	; 64
    23b2:	be 07       	cpc	r27, r30
    23b4:	60 f3       	brcs	.-40     	; 0x238e <__mulsf3+0x170>
    23b6:	6b 8f       	std	Y+27, r22	; 0x1b
    23b8:	7c 8f       	std	Y+28, r23	; 0x1c
    23ba:	6f e7       	ldi	r22, 0x7F	; 127
    23bc:	e6 2e       	mov	r14, r22
    23be:	f1 2c       	mov	r15, r1
    23c0:	01 2d       	mov	r16, r1
    23c2:	11 2d       	mov	r17, r1
    23c4:	e8 22       	and	r14, r24
    23c6:	f9 22       	and	r15, r25
    23c8:	0a 23       	and	r16, r26
    23ca:	1b 23       	and	r17, r27
    23cc:	60 e4       	ldi	r22, 0x40	; 64
    23ce:	e6 16       	cp	r14, r22
    23d0:	f1 04       	cpc	r15, r1
    23d2:	01 05       	cpc	r16, r1
    23d4:	11 05       	cpc	r17, r1
    23d6:	61 f4       	brne	.+24     	; 0x23f0 <__mulsf3+0x1d2>
    23d8:	87 fd       	sbrc	r24, 7
    23da:	0a c0       	rjmp	.+20     	; 0x23f0 <__mulsf3+0x1d2>
    23dc:	21 15       	cp	r18, r1
    23de:	31 05       	cpc	r19, r1
    23e0:	41 05       	cpc	r20, r1
    23e2:	51 05       	cpc	r21, r1
    23e4:	29 f0       	breq	.+10     	; 0x23f0 <__mulsf3+0x1d2>
    23e6:	80 5c       	subi	r24, 0xC0	; 192
    23e8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ea:	af 4f       	sbci	r26, 0xFF	; 255
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	80 78       	andi	r24, 0x80	; 128
    23f0:	8d 8f       	std	Y+29, r24	; 0x1d
    23f2:	9e 8f       	std	Y+30, r25	; 0x1e
    23f4:	af 8f       	std	Y+31, r26	; 0x1f
    23f6:	b8 a3       	std	Y+32, r27	; 0x20
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	89 8f       	std	Y+25, r24	; 0x19
    23fc:	ce 01       	movw	r24, r28
    23fe:	49 96       	adiw	r24, 0x19	; 25
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <__mulsf3+0x1e8>
    2402:	8f e0       	ldi	r24, 0x0F	; 15
    2404:	94 e0       	ldi	r25, 0x04	; 4
    2406:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__pack_f>
    240a:	a0 96       	adiw	r28, 0x20	; 32
    240c:	e2 e1       	ldi	r30, 0x12	; 18
    240e:	0c 94 be 14 	jmp	0x297c	; 0x297c <__epilogue_restores__>

00002412 <__gtsf2>:
    2412:	a8 e1       	ldi	r26, 0x18	; 24
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e0       	ldi	r30, 0x0F	; 15
    2418:	f2 e1       	ldi	r31, 0x12	; 18
    241a:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__prologue_saves__+0x18>
    241e:	69 83       	std	Y+1, r22	; 0x01
    2420:	7a 83       	std	Y+2, r23	; 0x02
    2422:	8b 83       	std	Y+3, r24	; 0x03
    2424:	9c 83       	std	Y+4, r25	; 0x04
    2426:	2d 83       	std	Y+5, r18	; 0x05
    2428:	3e 83       	std	Y+6, r19	; 0x06
    242a:	4f 83       	std	Y+7, r20	; 0x07
    242c:	58 87       	std	Y+8, r21	; 0x08
    242e:	8e 01       	movw	r16, r28
    2430:	07 5f       	subi	r16, 0xF7	; 247
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	ce 01       	movw	r24, r28
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	b8 01       	movw	r22, r16
    243a:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    243e:	81 e1       	ldi	r24, 0x11	; 17
    2440:	e8 2e       	mov	r14, r24
    2442:	f1 2c       	mov	r15, r1
    2444:	ec 0e       	add	r14, r28
    2446:	fd 1e       	adc	r15, r29
    2448:	ce 01       	movw	r24, r28
    244a:	05 96       	adiw	r24, 0x05	; 5
    244c:	b7 01       	movw	r22, r14
    244e:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	82 30       	cpi	r24, 0x02	; 2
    2456:	40 f0       	brcs	.+16     	; 0x2468 <__gtsf2+0x56>
    2458:	89 89       	ldd	r24, Y+17	; 0x11
    245a:	82 30       	cpi	r24, 0x02	; 2
    245c:	28 f0       	brcs	.+10     	; 0x2468 <__gtsf2+0x56>
    245e:	c8 01       	movw	r24, r16
    2460:	b7 01       	movw	r22, r14
    2462:	0e 94 22 14 	call	0x2844	; 0x2844 <__fpcmp_parts_f>
    2466:	01 c0       	rjmp	.+2      	; 0x246a <__gtsf2+0x58>
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	68 96       	adiw	r28, 0x18	; 24
    246c:	e6 e0       	ldi	r30, 0x06	; 6
    246e:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

00002472 <__gesf2>:
    2472:	a8 e1       	ldi	r26, 0x18	; 24
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ef e3       	ldi	r30, 0x3F	; 63
    2478:	f2 e1       	ldi	r31, 0x12	; 18
    247a:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__prologue_saves__+0x18>
    247e:	69 83       	std	Y+1, r22	; 0x01
    2480:	7a 83       	std	Y+2, r23	; 0x02
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	9c 83       	std	Y+4, r25	; 0x04
    2486:	2d 83       	std	Y+5, r18	; 0x05
    2488:	3e 83       	std	Y+6, r19	; 0x06
    248a:	4f 83       	std	Y+7, r20	; 0x07
    248c:	58 87       	std	Y+8, r21	; 0x08
    248e:	8e 01       	movw	r16, r28
    2490:	07 5f       	subi	r16, 0xF7	; 247
    2492:	1f 4f       	sbci	r17, 0xFF	; 255
    2494:	ce 01       	movw	r24, r28
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	b8 01       	movw	r22, r16
    249a:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    249e:	81 e1       	ldi	r24, 0x11	; 17
    24a0:	e8 2e       	mov	r14, r24
    24a2:	f1 2c       	mov	r15, r1
    24a4:	ec 0e       	add	r14, r28
    24a6:	fd 1e       	adc	r15, r29
    24a8:	ce 01       	movw	r24, r28
    24aa:	05 96       	adiw	r24, 0x05	; 5
    24ac:	b7 01       	movw	r22, r14
    24ae:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	82 30       	cpi	r24, 0x02	; 2
    24b6:	40 f0       	brcs	.+16     	; 0x24c8 <__gesf2+0x56>
    24b8:	89 89       	ldd	r24, Y+17	; 0x11
    24ba:	82 30       	cpi	r24, 0x02	; 2
    24bc:	28 f0       	brcs	.+10     	; 0x24c8 <__gesf2+0x56>
    24be:	c8 01       	movw	r24, r16
    24c0:	b7 01       	movw	r22, r14
    24c2:	0e 94 22 14 	call	0x2844	; 0x2844 <__fpcmp_parts_f>
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <__gesf2+0x58>
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	68 96       	adiw	r28, 0x18	; 24
    24cc:	e6 e0       	ldi	r30, 0x06	; 6
    24ce:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

000024d2 <__ltsf2>:
    24d2:	a8 e1       	ldi	r26, 0x18	; 24
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ef e6       	ldi	r30, 0x6F	; 111
    24d8:	f2 e1       	ldi	r31, 0x12	; 18
    24da:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__prologue_saves__+0x18>
    24de:	69 83       	std	Y+1, r22	; 0x01
    24e0:	7a 83       	std	Y+2, r23	; 0x02
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	2d 83       	std	Y+5, r18	; 0x05
    24e8:	3e 83       	std	Y+6, r19	; 0x06
    24ea:	4f 83       	std	Y+7, r20	; 0x07
    24ec:	58 87       	std	Y+8, r21	; 0x08
    24ee:	8e 01       	movw	r16, r28
    24f0:	07 5f       	subi	r16, 0xF7	; 247
    24f2:	1f 4f       	sbci	r17, 0xFF	; 255
    24f4:	ce 01       	movw	r24, r28
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	b8 01       	movw	r22, r16
    24fa:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    24fe:	81 e1       	ldi	r24, 0x11	; 17
    2500:	e8 2e       	mov	r14, r24
    2502:	f1 2c       	mov	r15, r1
    2504:	ec 0e       	add	r14, r28
    2506:	fd 1e       	adc	r15, r29
    2508:	ce 01       	movw	r24, r28
    250a:	05 96       	adiw	r24, 0x05	; 5
    250c:	b7 01       	movw	r22, r14
    250e:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	40 f0       	brcs	.+16     	; 0x2528 <__ltsf2+0x56>
    2518:	89 89       	ldd	r24, Y+17	; 0x11
    251a:	82 30       	cpi	r24, 0x02	; 2
    251c:	28 f0       	brcs	.+10     	; 0x2528 <__ltsf2+0x56>
    251e:	c8 01       	movw	r24, r16
    2520:	b7 01       	movw	r22, r14
    2522:	0e 94 22 14 	call	0x2844	; 0x2844 <__fpcmp_parts_f>
    2526:	01 c0       	rjmp	.+2      	; 0x252a <__ltsf2+0x58>
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	68 96       	adiw	r28, 0x18	; 24
    252c:	e6 e0       	ldi	r30, 0x06	; 6
    252e:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

00002532 <__fixsfsi>:
    2532:	ac e0       	ldi	r26, 0x0C	; 12
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e9       	ldi	r30, 0x9F	; 159
    2538:	f2 e1       	ldi	r31, 0x12	; 18
    253a:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__prologue_saves__+0x20>
    253e:	69 83       	std	Y+1, r22	; 0x01
    2540:	7a 83       	std	Y+2, r23	; 0x02
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	be 01       	movw	r22, r28
    254c:	6b 5f       	subi	r22, 0xFB	; 251
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	0e 94 b9 13 	call	0x2772	; 0x2772 <__unpack_f>
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	82 30       	cpi	r24, 0x02	; 2
    2558:	81 f1       	breq	.+96     	; 0x25ba <__fixsfsi+0x88>
    255a:	82 30       	cpi	r24, 0x02	; 2
    255c:	70 f1       	brcs	.+92     	; 0x25ba <__fixsfsi+0x88>
    255e:	84 30       	cpi	r24, 0x04	; 4
    2560:	21 f4       	brne	.+8      	; 0x256a <__fixsfsi+0x38>
    2562:	8e 81       	ldd	r24, Y+6	; 0x06
    2564:	88 23       	and	r24, r24
    2566:	69 f1       	breq	.+90     	; 0x25c2 <__fixsfsi+0x90>
    2568:	0a c0       	rjmp	.+20     	; 0x257e <__fixsfsi+0x4c>
    256a:	2f 81       	ldd	r18, Y+7	; 0x07
    256c:	38 85       	ldd	r19, Y+8	; 0x08
    256e:	37 fd       	sbrc	r19, 7
    2570:	24 c0       	rjmp	.+72     	; 0x25ba <__fixsfsi+0x88>
    2572:	6e 81       	ldd	r22, Y+6	; 0x06
    2574:	2f 31       	cpi	r18, 0x1F	; 31
    2576:	31 05       	cpc	r19, r1
    2578:	3c f0       	brlt	.+14     	; 0x2588 <__fixsfsi+0x56>
    257a:	66 23       	and	r22, r22
    257c:	11 f1       	breq	.+68     	; 0x25c2 <__fixsfsi+0x90>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e8       	ldi	r21, 0x80	; 128
    2586:	21 c0       	rjmp	.+66     	; 0x25ca <__fixsfsi+0x98>
    2588:	8e e1       	ldi	r24, 0x1E	; 30
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	82 1b       	sub	r24, r18
    258e:	93 0b       	sbc	r25, r19
    2590:	29 85       	ldd	r18, Y+9	; 0x09
    2592:	3a 85       	ldd	r19, Y+10	; 0x0a
    2594:	4b 85       	ldd	r20, Y+11	; 0x0b
    2596:	5c 85       	ldd	r21, Y+12	; 0x0c
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <__fixsfsi+0x70>
    259a:	56 95       	lsr	r21
    259c:	47 95       	ror	r20
    259e:	37 95       	ror	r19
    25a0:	27 95       	ror	r18
    25a2:	8a 95       	dec	r24
    25a4:	d2 f7       	brpl	.-12     	; 0x259a <__fixsfsi+0x68>
    25a6:	66 23       	and	r22, r22
    25a8:	81 f0       	breq	.+32     	; 0x25ca <__fixsfsi+0x98>
    25aa:	50 95       	com	r21
    25ac:	40 95       	com	r20
    25ae:	30 95       	com	r19
    25b0:	21 95       	neg	r18
    25b2:	3f 4f       	sbci	r19, 0xFF	; 255
    25b4:	4f 4f       	sbci	r20, 0xFF	; 255
    25b6:	5f 4f       	sbci	r21, 0xFF	; 255
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <__fixsfsi+0x98>
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	a9 01       	movw	r20, r18
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <__fixsfsi+0x98>
    25c2:	2f ef       	ldi	r18, 0xFF	; 255
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f ef       	ldi	r20, 0xFF	; 255
    25c8:	5f e7       	ldi	r21, 0x7F	; 127
    25ca:	b9 01       	movw	r22, r18
    25cc:	ca 01       	movw	r24, r20
    25ce:	2c 96       	adiw	r28, 0x0c	; 12
    25d0:	e2 e0       	ldi	r30, 0x02	; 2
    25d2:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__epilogue_restores__+0x20>

000025d6 <__pack_f>:
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	fc 01       	movw	r30, r24
    25e4:	24 81       	ldd	r18, Z+4	; 0x04
    25e6:	35 81       	ldd	r19, Z+5	; 0x05
    25e8:	46 81       	ldd	r20, Z+6	; 0x06
    25ea:	57 81       	ldd	r21, Z+7	; 0x07
    25ec:	61 81       	ldd	r22, Z+1	; 0x01
    25ee:	80 81       	ld	r24, Z
    25f0:	82 30       	cpi	r24, 0x02	; 2
    25f2:	20 f4       	brcc	.+8      	; 0x25fc <__pack_f+0x26>
    25f4:	40 61       	ori	r20, 0x10	; 16
    25f6:	ef ef       	ldi	r30, 0xFF	; 255
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	a3 c0       	rjmp	.+326    	; 0x2742 <__pack_f+0x16c>
    25fc:	84 30       	cpi	r24, 0x04	; 4
    25fe:	09 f4       	brne	.+2      	; 0x2602 <__pack_f+0x2c>
    2600:	9b c0       	rjmp	.+310    	; 0x2738 <__pack_f+0x162>
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	09 f4       	brne	.+2      	; 0x2608 <__pack_f+0x32>
    2606:	92 c0       	rjmp	.+292    	; 0x272c <__pack_f+0x156>
    2608:	21 15       	cp	r18, r1
    260a:	31 05       	cpc	r19, r1
    260c:	41 05       	cpc	r20, r1
    260e:	51 05       	cpc	r21, r1
    2610:	09 f4       	brne	.+2      	; 0x2614 <__pack_f+0x3e>
    2612:	8f c0       	rjmp	.+286    	; 0x2732 <__pack_f+0x15c>
    2614:	02 80       	ldd	r0, Z+2	; 0x02
    2616:	f3 81       	ldd	r31, Z+3	; 0x03
    2618:	e0 2d       	mov	r30, r0
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	e2 38       	cpi	r30, 0x82	; 130
    261e:	f8 07       	cpc	r31, r24
    2620:	0c f0       	brlt	.+2      	; 0x2624 <__pack_f+0x4e>
    2622:	5a c0       	rjmp	.+180    	; 0x26d8 <__pack_f+0x102>
    2624:	c2 e8       	ldi	r28, 0x82	; 130
    2626:	df ef       	ldi	r29, 0xFF	; 255
    2628:	ce 1b       	sub	r28, r30
    262a:	df 0b       	sbc	r29, r31
    262c:	ca 31       	cpi	r28, 0x1A	; 26
    262e:	d1 05       	cpc	r29, r1
    2630:	6c f5       	brge	.+90     	; 0x268c <__pack_f+0xb6>
    2632:	79 01       	movw	r14, r18
    2634:	8a 01       	movw	r16, r20
    2636:	0c 2e       	mov	r0, r28
    2638:	04 c0       	rjmp	.+8      	; 0x2642 <__pack_f+0x6c>
    263a:	16 95       	lsr	r17
    263c:	07 95       	ror	r16
    263e:	f7 94       	ror	r15
    2640:	e7 94       	ror	r14
    2642:	0a 94       	dec	r0
    2644:	d2 f7       	brpl	.-12     	; 0x263a <__pack_f+0x64>
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e0       	ldi	r26, 0x00	; 0
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	0c 2e       	mov	r0, r28
    2650:	04 c0       	rjmp	.+8      	; 0x265a <__pack_f+0x84>
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	aa 1f       	adc	r26, r26
    2658:	bb 1f       	adc	r27, r27
    265a:	0a 94       	dec	r0
    265c:	d2 f7       	brpl	.-12     	; 0x2652 <__pack_f+0x7c>
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	a1 09       	sbc	r26, r1
    2662:	b1 09       	sbc	r27, r1
    2664:	82 23       	and	r24, r18
    2666:	93 23       	and	r25, r19
    2668:	a4 23       	and	r26, r20
    266a:	b5 23       	and	r27, r21
    266c:	21 e0       	ldi	r18, 0x01	; 1
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	a1 05       	cpc	r26, r1
    2678:	b1 05       	cpc	r27, r1
    267a:	19 f4       	brne	.+6      	; 0x2682 <__pack_f+0xac>
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	a9 01       	movw	r20, r18
    2682:	2e 29       	or	r18, r14
    2684:	3f 29       	or	r19, r15
    2686:	40 2b       	or	r20, r16
    2688:	51 2b       	or	r21, r17
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <__pack_f+0xbc>
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	a9 01       	movw	r20, r18
    2692:	da 01       	movw	r26, r20
    2694:	c9 01       	movw	r24, r18
    2696:	8f 77       	andi	r24, 0x7F	; 127
    2698:	90 70       	andi	r25, 0x00	; 0
    269a:	a0 70       	andi	r26, 0x00	; 0
    269c:	b0 70       	andi	r27, 0x00	; 0
    269e:	80 34       	cpi	r24, 0x40	; 64
    26a0:	91 05       	cpc	r25, r1
    26a2:	a1 05       	cpc	r26, r1
    26a4:	b1 05       	cpc	r27, r1
    26a6:	39 f4       	brne	.+14     	; 0x26b6 <__pack_f+0xe0>
    26a8:	27 ff       	sbrs	r18, 7
    26aa:	09 c0       	rjmp	.+18     	; 0x26be <__pack_f+0xe8>
    26ac:	20 5c       	subi	r18, 0xC0	; 192
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	4f 4f       	sbci	r20, 0xFF	; 255
    26b2:	5f 4f       	sbci	r21, 0xFF	; 255
    26b4:	04 c0       	rjmp	.+8      	; 0x26be <__pack_f+0xe8>
    26b6:	21 5c       	subi	r18, 0xC1	; 193
    26b8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ba:	4f 4f       	sbci	r20, 0xFF	; 255
    26bc:	5f 4f       	sbci	r21, 0xFF	; 255
    26be:	e1 e0       	ldi	r30, 0x01	; 1
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	20 30       	cpi	r18, 0x00	; 0
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	38 07       	cpc	r19, r24
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	48 07       	cpc	r20, r24
    26cc:	80 e4       	ldi	r24, 0x40	; 64
    26ce:	58 07       	cpc	r21, r24
    26d0:	28 f5       	brcc	.+74     	; 0x271c <__pack_f+0x146>
    26d2:	e0 e0       	ldi	r30, 0x00	; 0
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	22 c0       	rjmp	.+68     	; 0x271c <__pack_f+0x146>
    26d8:	e0 38       	cpi	r30, 0x80	; 128
    26da:	f1 05       	cpc	r31, r1
    26dc:	6c f5       	brge	.+90     	; 0x2738 <__pack_f+0x162>
    26de:	e1 58       	subi	r30, 0x81	; 129
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	da 01       	movw	r26, r20
    26e4:	c9 01       	movw	r24, r18
    26e6:	8f 77       	andi	r24, 0x7F	; 127
    26e8:	90 70       	andi	r25, 0x00	; 0
    26ea:	a0 70       	andi	r26, 0x00	; 0
    26ec:	b0 70       	andi	r27, 0x00	; 0
    26ee:	80 34       	cpi	r24, 0x40	; 64
    26f0:	91 05       	cpc	r25, r1
    26f2:	a1 05       	cpc	r26, r1
    26f4:	b1 05       	cpc	r27, r1
    26f6:	39 f4       	brne	.+14     	; 0x2706 <__pack_f+0x130>
    26f8:	27 ff       	sbrs	r18, 7
    26fa:	09 c0       	rjmp	.+18     	; 0x270e <__pack_f+0x138>
    26fc:	20 5c       	subi	r18, 0xC0	; 192
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	4f 4f       	sbci	r20, 0xFF	; 255
    2702:	5f 4f       	sbci	r21, 0xFF	; 255
    2704:	04 c0       	rjmp	.+8      	; 0x270e <__pack_f+0x138>
    2706:	21 5c       	subi	r18, 0xC1	; 193
    2708:	3f 4f       	sbci	r19, 0xFF	; 255
    270a:	4f 4f       	sbci	r20, 0xFF	; 255
    270c:	5f 4f       	sbci	r21, 0xFF	; 255
    270e:	57 ff       	sbrs	r21, 7
    2710:	05 c0       	rjmp	.+10     	; 0x271c <__pack_f+0x146>
    2712:	56 95       	lsr	r21
    2714:	47 95       	ror	r20
    2716:	37 95       	ror	r19
    2718:	27 95       	ror	r18
    271a:	31 96       	adiw	r30, 0x01	; 1
    271c:	87 e0       	ldi	r24, 0x07	; 7
    271e:	56 95       	lsr	r21
    2720:	47 95       	ror	r20
    2722:	37 95       	ror	r19
    2724:	27 95       	ror	r18
    2726:	8a 95       	dec	r24
    2728:	d1 f7       	brne	.-12     	; 0x271e <__pack_f+0x148>
    272a:	0b c0       	rjmp	.+22     	; 0x2742 <__pack_f+0x16c>
    272c:	e0 e0       	ldi	r30, 0x00	; 0
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	05 c0       	rjmp	.+10     	; 0x273c <__pack_f+0x166>
    2732:	e0 e0       	ldi	r30, 0x00	; 0
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <__pack_f+0x16c>
    2738:	ef ef       	ldi	r30, 0xFF	; 255
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	a9 01       	movw	r20, r18
    2742:	8e 2f       	mov	r24, r30
    2744:	87 95       	ror	r24
    2746:	88 27       	eor	r24, r24
    2748:	87 95       	ror	r24
    274a:	94 2f       	mov	r25, r20
    274c:	9f 77       	andi	r25, 0x7F	; 127
    274e:	67 95       	ror	r22
    2750:	66 27       	eor	r22, r22
    2752:	67 95       	ror	r22
    2754:	e6 95       	lsr	r30
    2756:	e2 2e       	mov	r14, r18
    2758:	a9 2f       	mov	r26, r25
    275a:	a8 2b       	or	r26, r24
    275c:	fe 2f       	mov	r31, r30
    275e:	f6 2b       	or	r31, r22
    2760:	62 2f       	mov	r22, r18
    2762:	73 2f       	mov	r23, r19
    2764:	8a 2f       	mov	r24, r26
    2766:	9f 2f       	mov	r25, r31
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	e6 e0       	ldi	r30, 0x06	; 6
    276e:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

00002772 <__unpack_f>:
    2772:	dc 01       	movw	r26, r24
    2774:	fb 01       	movw	r30, r22
    2776:	2c 91       	ld	r18, X
    2778:	11 96       	adiw	r26, 0x01	; 1
    277a:	3c 91       	ld	r19, X
    277c:	11 97       	sbiw	r26, 0x01	; 1
    277e:	12 96       	adiw	r26, 0x02	; 2
    2780:	8c 91       	ld	r24, X
    2782:	12 97       	sbiw	r26, 0x02	; 2
    2784:	48 2f       	mov	r20, r24
    2786:	4f 77       	andi	r20, 0x7F	; 127
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	98 2f       	mov	r25, r24
    278c:	99 1f       	adc	r25, r25
    278e:	99 27       	eor	r25, r25
    2790:	99 1f       	adc	r25, r25
    2792:	13 96       	adiw	r26, 0x03	; 3
    2794:	6c 91       	ld	r22, X
    2796:	13 97       	sbiw	r26, 0x03	; 3
    2798:	86 2f       	mov	r24, r22
    279a:	88 0f       	add	r24, r24
    279c:	89 2b       	or	r24, r25
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	66 1f       	adc	r22, r22
    27a2:	66 27       	eor	r22, r22
    27a4:	66 1f       	adc	r22, r22
    27a6:	61 83       	std	Z+1, r22	; 0x01
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	39 f5       	brne	.+78     	; 0x27fa <__unpack_f+0x88>
    27ac:	21 15       	cp	r18, r1
    27ae:	31 05       	cpc	r19, r1
    27b0:	41 05       	cpc	r20, r1
    27b2:	51 05       	cpc	r21, r1
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__unpack_f+0x48>
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	29 c0       	rjmp	.+82     	; 0x280c <__unpack_f+0x9a>
    27ba:	82 e8       	ldi	r24, 0x82	; 130
    27bc:	9f ef       	ldi	r25, 0xFF	; 255
    27be:	93 83       	std	Z+3, r25	; 0x03
    27c0:	82 83       	std	Z+2, r24	; 0x02
    27c2:	67 e0       	ldi	r22, 0x07	; 7
    27c4:	22 0f       	add	r18, r18
    27c6:	33 1f       	adc	r19, r19
    27c8:	44 1f       	adc	r20, r20
    27ca:	55 1f       	adc	r21, r21
    27cc:	6a 95       	dec	r22
    27ce:	d1 f7       	brne	.-12     	; 0x27c4 <__unpack_f+0x52>
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	80 83       	st	Z, r24
    27d4:	09 c0       	rjmp	.+18     	; 0x27e8 <__unpack_f+0x76>
    27d6:	22 0f       	add	r18, r18
    27d8:	33 1f       	adc	r19, r19
    27da:	44 1f       	adc	r20, r20
    27dc:	55 1f       	adc	r21, r21
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	93 83       	std	Z+3, r25	; 0x03
    27e6:	82 83       	std	Z+2, r24	; 0x02
    27e8:	20 30       	cpi	r18, 0x00	; 0
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	38 07       	cpc	r19, r24
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	48 07       	cpc	r20, r24
    27f2:	80 e4       	ldi	r24, 0x40	; 64
    27f4:	58 07       	cpc	r21, r24
    27f6:	78 f3       	brcs	.-34     	; 0x27d6 <__unpack_f+0x64>
    27f8:	20 c0       	rjmp	.+64     	; 0x283a <__unpack_f+0xc8>
    27fa:	8f 3f       	cpi	r24, 0xFF	; 255
    27fc:	91 05       	cpc	r25, r1
    27fe:	79 f4       	brne	.+30     	; 0x281e <__unpack_f+0xac>
    2800:	21 15       	cp	r18, r1
    2802:	31 05       	cpc	r19, r1
    2804:	41 05       	cpc	r20, r1
    2806:	51 05       	cpc	r21, r1
    2808:	19 f4       	brne	.+6      	; 0x2810 <__unpack_f+0x9e>
    280a:	84 e0       	ldi	r24, 0x04	; 4
    280c:	80 83       	st	Z, r24
    280e:	08 95       	ret
    2810:	44 ff       	sbrs	r20, 4
    2812:	03 c0       	rjmp	.+6      	; 0x281a <__unpack_f+0xa8>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 83       	st	Z, r24
    2818:	10 c0       	rjmp	.+32     	; 0x283a <__unpack_f+0xc8>
    281a:	10 82       	st	Z, r1
    281c:	0e c0       	rjmp	.+28     	; 0x283a <__unpack_f+0xc8>
    281e:	8f 57       	subi	r24, 0x7F	; 127
    2820:	90 40       	sbci	r25, 0x00	; 0
    2822:	93 83       	std	Z+3, r25	; 0x03
    2824:	82 83       	std	Z+2, r24	; 0x02
    2826:	83 e0       	ldi	r24, 0x03	; 3
    2828:	80 83       	st	Z, r24
    282a:	87 e0       	ldi	r24, 0x07	; 7
    282c:	22 0f       	add	r18, r18
    282e:	33 1f       	adc	r19, r19
    2830:	44 1f       	adc	r20, r20
    2832:	55 1f       	adc	r21, r21
    2834:	8a 95       	dec	r24
    2836:	d1 f7       	brne	.-12     	; 0x282c <__unpack_f+0xba>
    2838:	50 64       	ori	r21, 0x40	; 64
    283a:	24 83       	std	Z+4, r18	; 0x04
    283c:	35 83       	std	Z+5, r19	; 0x05
    283e:	46 83       	std	Z+6, r20	; 0x06
    2840:	57 83       	std	Z+7, r21	; 0x07
    2842:	08 95       	ret

00002844 <__fpcmp_parts_f>:
    2844:	fc 01       	movw	r30, r24
    2846:	db 01       	movw	r26, r22
    2848:	90 81       	ld	r25, Z
    284a:	92 30       	cpi	r25, 0x02	; 2
    284c:	08 f4       	brcc	.+2      	; 0x2850 <__fpcmp_parts_f+0xc>
    284e:	49 c0       	rjmp	.+146    	; 0x28e2 <__fpcmp_parts_f+0x9e>
    2850:	8c 91       	ld	r24, X
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	08 f4       	brcc	.+2      	; 0x2858 <__fpcmp_parts_f+0x14>
    2856:	45 c0       	rjmp	.+138    	; 0x28e2 <__fpcmp_parts_f+0x9e>
    2858:	94 30       	cpi	r25, 0x04	; 4
    285a:	51 f4       	brne	.+20     	; 0x2870 <__fpcmp_parts_f+0x2c>
    285c:	61 81       	ldd	r22, Z+1	; 0x01
    285e:	84 30       	cpi	r24, 0x04	; 4
    2860:	b1 f5       	brne	.+108    	; 0x28ce <__fpcmp_parts_f+0x8a>
    2862:	11 96       	adiw	r26, 0x01	; 1
    2864:	2c 91       	ld	r18, X
    2866:	11 97       	sbiw	r26, 0x01	; 1
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	26 1b       	sub	r18, r22
    286c:	31 09       	sbc	r19, r1
    286e:	41 c0       	rjmp	.+130    	; 0x28f2 <__fpcmp_parts_f+0xae>
    2870:	84 30       	cpi	r24, 0x04	; 4
    2872:	21 f0       	breq	.+8      	; 0x287c <__fpcmp_parts_f+0x38>
    2874:	92 30       	cpi	r25, 0x02	; 2
    2876:	41 f4       	brne	.+16     	; 0x2888 <__fpcmp_parts_f+0x44>
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	b1 f1       	breq	.+108    	; 0x28e8 <__fpcmp_parts_f+0xa4>
    287c:	11 96       	adiw	r26, 0x01	; 1
    287e:	8c 91       	ld	r24, X
    2880:	11 97       	sbiw	r26, 0x01	; 1
    2882:	88 23       	and	r24, r24
    2884:	a1 f1       	breq	.+104    	; 0x28ee <__fpcmp_parts_f+0xaa>
    2886:	2d c0       	rjmp	.+90     	; 0x28e2 <__fpcmp_parts_f+0x9e>
    2888:	61 81       	ldd	r22, Z+1	; 0x01
    288a:	82 30       	cpi	r24, 0x02	; 2
    288c:	01 f1       	breq	.+64     	; 0x28ce <__fpcmp_parts_f+0x8a>
    288e:	11 96       	adiw	r26, 0x01	; 1
    2890:	8c 91       	ld	r24, X
    2892:	11 97       	sbiw	r26, 0x01	; 1
    2894:	68 17       	cp	r22, r24
    2896:	d9 f4       	brne	.+54     	; 0x28ce <__fpcmp_parts_f+0x8a>
    2898:	22 81       	ldd	r18, Z+2	; 0x02
    289a:	33 81       	ldd	r19, Z+3	; 0x03
    289c:	12 96       	adiw	r26, 0x02	; 2
    289e:	8d 91       	ld	r24, X+
    28a0:	9c 91       	ld	r25, X
    28a2:	13 97       	sbiw	r26, 0x03	; 3
    28a4:	82 17       	cp	r24, r18
    28a6:	93 07       	cpc	r25, r19
    28a8:	94 f0       	brlt	.+36     	; 0x28ce <__fpcmp_parts_f+0x8a>
    28aa:	28 17       	cp	r18, r24
    28ac:	39 07       	cpc	r19, r25
    28ae:	bc f0       	brlt	.+46     	; 0x28de <__fpcmp_parts_f+0x9a>
    28b0:	24 81       	ldd	r18, Z+4	; 0x04
    28b2:	35 81       	ldd	r19, Z+5	; 0x05
    28b4:	46 81       	ldd	r20, Z+6	; 0x06
    28b6:	57 81       	ldd	r21, Z+7	; 0x07
    28b8:	14 96       	adiw	r26, 0x04	; 4
    28ba:	8d 91       	ld	r24, X+
    28bc:	9d 91       	ld	r25, X+
    28be:	0d 90       	ld	r0, X+
    28c0:	bc 91       	ld	r27, X
    28c2:	a0 2d       	mov	r26, r0
    28c4:	82 17       	cp	r24, r18
    28c6:	93 07       	cpc	r25, r19
    28c8:	a4 07       	cpc	r26, r20
    28ca:	b5 07       	cpc	r27, r21
    28cc:	18 f4       	brcc	.+6      	; 0x28d4 <__fpcmp_parts_f+0x90>
    28ce:	66 23       	and	r22, r22
    28d0:	41 f0       	breq	.+16     	; 0x28e2 <__fpcmp_parts_f+0x9e>
    28d2:	0d c0       	rjmp	.+26     	; 0x28ee <__fpcmp_parts_f+0xaa>
    28d4:	28 17       	cp	r18, r24
    28d6:	39 07       	cpc	r19, r25
    28d8:	4a 07       	cpc	r20, r26
    28da:	5b 07       	cpc	r21, r27
    28dc:	28 f4       	brcc	.+10     	; 0x28e8 <__fpcmp_parts_f+0xa4>
    28de:	66 23       	and	r22, r22
    28e0:	31 f0       	breq	.+12     	; 0x28ee <__fpcmp_parts_f+0xaa>
    28e2:	21 e0       	ldi	r18, 0x01	; 1
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	05 c0       	rjmp	.+10     	; 0x28f2 <__fpcmp_parts_f+0xae>
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <__fpcmp_parts_f+0xae>
    28ee:	2f ef       	ldi	r18, 0xFF	; 255
    28f0:	3f ef       	ldi	r19, 0xFF	; 255
    28f2:	c9 01       	movw	r24, r18
    28f4:	08 95       	ret

000028f6 <__divmodhi4>:
    28f6:	97 fb       	bst	r25, 7
    28f8:	09 2e       	mov	r0, r25
    28fa:	07 26       	eor	r0, r23
    28fc:	0a d0       	rcall	.+20     	; 0x2912 <__divmodhi4_neg1>
    28fe:	77 fd       	sbrc	r23, 7
    2900:	04 d0       	rcall	.+8      	; 0x290a <__divmodhi4_neg2>
    2902:	0c d0       	rcall	.+24     	; 0x291c <__udivmodhi4>
    2904:	06 d0       	rcall	.+12     	; 0x2912 <__divmodhi4_neg1>
    2906:	00 20       	and	r0, r0
    2908:	1a f4       	brpl	.+6      	; 0x2910 <__divmodhi4_exit>

0000290a <__divmodhi4_neg2>:
    290a:	70 95       	com	r23
    290c:	61 95       	neg	r22
    290e:	7f 4f       	sbci	r23, 0xFF	; 255

00002910 <__divmodhi4_exit>:
    2910:	08 95       	ret

00002912 <__divmodhi4_neg1>:
    2912:	f6 f7       	brtc	.-4      	; 0x2910 <__divmodhi4_exit>
    2914:	90 95       	com	r25
    2916:	81 95       	neg	r24
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	08 95       	ret

0000291c <__udivmodhi4>:
    291c:	aa 1b       	sub	r26, r26
    291e:	bb 1b       	sub	r27, r27
    2920:	51 e1       	ldi	r21, 0x11	; 17
    2922:	07 c0       	rjmp	.+14     	; 0x2932 <__udivmodhi4_ep>

00002924 <__udivmodhi4_loop>:
    2924:	aa 1f       	adc	r26, r26
    2926:	bb 1f       	adc	r27, r27
    2928:	a6 17       	cp	r26, r22
    292a:	b7 07       	cpc	r27, r23
    292c:	10 f0       	brcs	.+4      	; 0x2932 <__udivmodhi4_ep>
    292e:	a6 1b       	sub	r26, r22
    2930:	b7 0b       	sbc	r27, r23

00002932 <__udivmodhi4_ep>:
    2932:	88 1f       	adc	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	5a 95       	dec	r21
    2938:	a9 f7       	brne	.-22     	; 0x2924 <__udivmodhi4_loop>
    293a:	80 95       	com	r24
    293c:	90 95       	com	r25
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	08 95       	ret

00002944 <__prologue_saves__>:
    2944:	2f 92       	push	r2
    2946:	3f 92       	push	r3
    2948:	4f 92       	push	r4
    294a:	5f 92       	push	r5
    294c:	6f 92       	push	r6
    294e:	7f 92       	push	r7
    2950:	8f 92       	push	r8
    2952:	9f 92       	push	r9
    2954:	af 92       	push	r10
    2956:	bf 92       	push	r11
    2958:	cf 92       	push	r12
    295a:	df 92       	push	r13
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	ca 1b       	sub	r28, r26
    296e:	db 0b       	sbc	r29, r27
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	09 94       	ijmp

0000297c <__epilogue_restores__>:
    297c:	2a 88       	ldd	r2, Y+18	; 0x12
    297e:	39 88       	ldd	r3, Y+17	; 0x11
    2980:	48 88       	ldd	r4, Y+16	; 0x10
    2982:	5f 84       	ldd	r5, Y+15	; 0x0f
    2984:	6e 84       	ldd	r6, Y+14	; 0x0e
    2986:	7d 84       	ldd	r7, Y+13	; 0x0d
    2988:	8c 84       	ldd	r8, Y+12	; 0x0c
    298a:	9b 84       	ldd	r9, Y+11	; 0x0b
    298c:	aa 84       	ldd	r10, Y+10	; 0x0a
    298e:	b9 84       	ldd	r11, Y+9	; 0x09
    2990:	c8 84       	ldd	r12, Y+8	; 0x08
    2992:	df 80       	ldd	r13, Y+7	; 0x07
    2994:	ee 80       	ldd	r14, Y+6	; 0x06
    2996:	fd 80       	ldd	r15, Y+5	; 0x05
    2998:	0c 81       	ldd	r16, Y+4	; 0x04
    299a:	1b 81       	ldd	r17, Y+3	; 0x03
    299c:	aa 81       	ldd	r26, Y+2	; 0x02
    299e:	b9 81       	ldd	r27, Y+1	; 0x01
    29a0:	ce 0f       	add	r28, r30
    29a2:	d1 1d       	adc	r29, r1
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	ed 01       	movw	r28, r26
    29b0:	08 95       	ret

000029b2 <fdevopen>:
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	8c 01       	movw	r16, r24
    29bc:	eb 01       	movw	r28, r22
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	11 f4       	brne	.+4      	; 0x29c6 <fdevopen+0x14>
    29c2:	20 97       	sbiw	r28, 0x00	; 0
    29c4:	c9 f1       	breq	.+114    	; 0x2a38 <fdevopen+0x86>
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	6e e0       	ldi	r22, 0x0E	; 14
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <calloc>
    29d2:	fc 01       	movw	r30, r24
    29d4:	9c 01       	movw	r18, r24
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	89 f1       	breq	.+98     	; 0x2a3c <fdevopen+0x8a>
    29da:	80 e8       	ldi	r24, 0x80	; 128
    29dc:	83 83       	std	Z+3, r24	; 0x03
    29de:	20 97       	sbiw	r28, 0x00	; 0
    29e0:	71 f0       	breq	.+28     	; 0x29fe <fdevopen+0x4c>
    29e2:	d3 87       	std	Z+11, r29	; 0x0b
    29e4:	c2 87       	std	Z+10, r28	; 0x0a
    29e6:	81 e8       	ldi	r24, 0x81	; 129
    29e8:	83 83       	std	Z+3, r24	; 0x03
    29ea:	80 91 28 04 	lds	r24, 0x0428
    29ee:	90 91 29 04 	lds	r25, 0x0429
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	21 f4       	brne	.+8      	; 0x29fe <fdevopen+0x4c>
    29f6:	f0 93 29 04 	sts	0x0429, r31
    29fa:	e0 93 28 04 	sts	0x0428, r30
    29fe:	01 15       	cp	r16, r1
    2a00:	11 05       	cpc	r17, r1
    2a02:	e1 f0       	breq	.+56     	; 0x2a3c <fdevopen+0x8a>
    2a04:	11 87       	std	Z+9, r17	; 0x09
    2a06:	00 87       	std	Z+8, r16	; 0x08
    2a08:	83 81       	ldd	r24, Z+3	; 0x03
    2a0a:	82 60       	ori	r24, 0x02	; 2
    2a0c:	83 83       	std	Z+3, r24	; 0x03
    2a0e:	80 91 2a 04 	lds	r24, 0x042A
    2a12:	90 91 2b 04 	lds	r25, 0x042B
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	89 f4       	brne	.+34     	; 0x2a3c <fdevopen+0x8a>
    2a1a:	f0 93 2b 04 	sts	0x042B, r31
    2a1e:	e0 93 2a 04 	sts	0x042A, r30
    2a22:	80 91 2c 04 	lds	r24, 0x042C
    2a26:	90 91 2d 04 	lds	r25, 0x042D
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	39 f4       	brne	.+14     	; 0x2a3c <fdevopen+0x8a>
    2a2e:	f0 93 2d 04 	sts	0x042D, r31
    2a32:	e0 93 2c 04 	sts	0x042C, r30
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <fdevopen+0x8a>
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	c9 01       	movw	r24, r18
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	08 95       	ret

00002a48 <printf>:
    2a48:	a0 e0       	ldi	r26, 0x00	; 0
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	ea e2       	ldi	r30, 0x2A	; 42
    2a4e:	f5 e1       	ldi	r31, 0x15	; 21
    2a50:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__prologue_saves__+0x20>
    2a54:	fe 01       	movw	r30, r28
    2a56:	35 96       	adiw	r30, 0x05	; 5
    2a58:	61 91       	ld	r22, Z+
    2a5a:	71 91       	ld	r23, Z+
    2a5c:	80 91 2a 04 	lds	r24, 0x042A
    2a60:	90 91 2b 04 	lds	r25, 0x042B
    2a64:	af 01       	movw	r20, r30
    2a66:	0e 94 6e 15 	call	0x2adc	; 0x2adc <vfprintf>
    2a6a:	20 96       	adiw	r28, 0x00	; 0
    2a6c:	e2 e0       	ldi	r30, 0x02	; 2
    2a6e:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__epilogue_restores__+0x20>

00002a72 <puts>:
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	8c 01       	movw	r16, r24
    2a80:	e0 91 2a 04 	lds	r30, 0x042A
    2a84:	f0 91 2b 04 	lds	r31, 0x042B
    2a88:	83 81       	ldd	r24, Z+3	; 0x03
    2a8a:	81 ff       	sbrs	r24, 1
    2a8c:	1f c0       	rjmp	.+62     	; 0x2acc <puts+0x5a>
    2a8e:	c0 e0       	ldi	r28, 0x00	; 0
    2a90:	d0 e0       	ldi	r29, 0x00	; 0
    2a92:	0a c0       	rjmp	.+20     	; 0x2aa8 <puts+0x36>
    2a94:	db 01       	movw	r26, r22
    2a96:	18 96       	adiw	r26, 0x08	; 8
    2a98:	ed 91       	ld	r30, X+
    2a9a:	fc 91       	ld	r31, X
    2a9c:	19 97       	sbiw	r26, 0x09	; 9
    2a9e:	09 95       	icall
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	11 f0       	breq	.+4      	; 0x2aa8 <puts+0x36>
    2aa4:	cf ef       	ldi	r28, 0xFF	; 255
    2aa6:	df ef       	ldi	r29, 0xFF	; 255
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	81 91       	ld	r24, Z+
    2aac:	8f 01       	movw	r16, r30
    2aae:	60 91 2a 04 	lds	r22, 0x042A
    2ab2:	70 91 2b 04 	lds	r23, 0x042B
    2ab6:	88 23       	and	r24, r24
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <puts+0x22>
    2aba:	db 01       	movw	r26, r22
    2abc:	18 96       	adiw	r26, 0x08	; 8
    2abe:	ed 91       	ld	r30, X+
    2ac0:	fc 91       	ld	r31, X
    2ac2:	19 97       	sbiw	r26, 0x09	; 9
    2ac4:	8a e0       	ldi	r24, 0x0A	; 10
    2ac6:	09 95       	icall
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	11 f0       	breq	.+4      	; 0x2ad0 <puts+0x5e>
    2acc:	cf ef       	ldi	r28, 0xFF	; 255
    2ace:	df ef       	ldi	r29, 0xFF	; 255
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	e6 e0       	ldi	r30, 0x06	; 6
    2ad8:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

00002adc <vfprintf>:
    2adc:	ac e0       	ldi	r26, 0x0C	; 12
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e4 e7       	ldi	r30, 0x74	; 116
    2ae2:	f5 e1       	ldi	r31, 0x15	; 21
    2ae4:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__prologue_saves__>
    2ae8:	6c 01       	movw	r12, r24
    2aea:	1b 01       	movw	r2, r22
    2aec:	8a 01       	movw	r16, r20
    2aee:	fc 01       	movw	r30, r24
    2af0:	17 82       	std	Z+7, r1	; 0x07
    2af2:	16 82       	std	Z+6, r1	; 0x06
    2af4:	83 81       	ldd	r24, Z+3	; 0x03
    2af6:	81 ff       	sbrs	r24, 1
    2af8:	d1 c1       	rjmp	.+930    	; 0x2e9c <vfprintf+0x3c0>
    2afa:	2e 01       	movw	r4, r28
    2afc:	08 94       	sec
    2afe:	41 1c       	adc	r4, r1
    2b00:	51 1c       	adc	r5, r1
    2b02:	f6 01       	movw	r30, r12
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	f1 01       	movw	r30, r2
    2b08:	93 fd       	sbrc	r25, 3
    2b0a:	85 91       	lpm	r24, Z+
    2b0c:	93 ff       	sbrs	r25, 3
    2b0e:	81 91       	ld	r24, Z+
    2b10:	1f 01       	movw	r2, r30
    2b12:	88 23       	and	r24, r24
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <vfprintf+0x3c>
    2b16:	be c1       	rjmp	.+892    	; 0x2e94 <vfprintf+0x3b8>
    2b18:	85 32       	cpi	r24, 0x25	; 37
    2b1a:	39 f4       	brne	.+14     	; 0x2b2a <vfprintf+0x4e>
    2b1c:	93 fd       	sbrc	r25, 3
    2b1e:	85 91       	lpm	r24, Z+
    2b20:	93 ff       	sbrs	r25, 3
    2b22:	81 91       	ld	r24, Z+
    2b24:	1f 01       	movw	r2, r30
    2b26:	85 32       	cpi	r24, 0x25	; 37
    2b28:	29 f4       	brne	.+10     	; 0x2b34 <vfprintf+0x58>
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	b6 01       	movw	r22, r12
    2b2e:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2b32:	e7 cf       	rjmp	.-50     	; 0x2b02 <vfprintf+0x26>
    2b34:	ee 24       	eor	r14, r14
    2b36:	ff 24       	eor	r15, r15
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	20 32       	cpi	r18, 0x20	; 32
    2b3c:	b0 f4       	brcc	.+44     	; 0x2b6a <vfprintf+0x8e>
    2b3e:	8b 32       	cpi	r24, 0x2B	; 43
    2b40:	69 f0       	breq	.+26     	; 0x2b5c <vfprintf+0x80>
    2b42:	8c 32       	cpi	r24, 0x2C	; 44
    2b44:	28 f4       	brcc	.+10     	; 0x2b50 <vfprintf+0x74>
    2b46:	80 32       	cpi	r24, 0x20	; 32
    2b48:	51 f0       	breq	.+20     	; 0x2b5e <vfprintf+0x82>
    2b4a:	83 32       	cpi	r24, 0x23	; 35
    2b4c:	71 f4       	brne	.+28     	; 0x2b6a <vfprintf+0x8e>
    2b4e:	0b c0       	rjmp	.+22     	; 0x2b66 <vfprintf+0x8a>
    2b50:	8d 32       	cpi	r24, 0x2D	; 45
    2b52:	39 f0       	breq	.+14     	; 0x2b62 <vfprintf+0x86>
    2b54:	80 33       	cpi	r24, 0x30	; 48
    2b56:	49 f4       	brne	.+18     	; 0x2b6a <vfprintf+0x8e>
    2b58:	21 60       	ori	r18, 0x01	; 1
    2b5a:	2c c0       	rjmp	.+88     	; 0x2bb4 <vfprintf+0xd8>
    2b5c:	22 60       	ori	r18, 0x02	; 2
    2b5e:	24 60       	ori	r18, 0x04	; 4
    2b60:	29 c0       	rjmp	.+82     	; 0x2bb4 <vfprintf+0xd8>
    2b62:	28 60       	ori	r18, 0x08	; 8
    2b64:	27 c0       	rjmp	.+78     	; 0x2bb4 <vfprintf+0xd8>
    2b66:	20 61       	ori	r18, 0x10	; 16
    2b68:	25 c0       	rjmp	.+74     	; 0x2bb4 <vfprintf+0xd8>
    2b6a:	27 fd       	sbrc	r18, 7
    2b6c:	2c c0       	rjmp	.+88     	; 0x2bc6 <vfprintf+0xea>
    2b6e:	38 2f       	mov	r19, r24
    2b70:	30 53       	subi	r19, 0x30	; 48
    2b72:	3a 30       	cpi	r19, 0x0A	; 10
    2b74:	98 f4       	brcc	.+38     	; 0x2b9c <vfprintf+0xc0>
    2b76:	26 ff       	sbrs	r18, 6
    2b78:	08 c0       	rjmp	.+16     	; 0x2b8a <vfprintf+0xae>
    2b7a:	8e 2d       	mov	r24, r14
    2b7c:	88 0f       	add	r24, r24
    2b7e:	e8 2e       	mov	r14, r24
    2b80:	ee 0c       	add	r14, r14
    2b82:	ee 0c       	add	r14, r14
    2b84:	e8 0e       	add	r14, r24
    2b86:	e3 0e       	add	r14, r19
    2b88:	15 c0       	rjmp	.+42     	; 0x2bb4 <vfprintf+0xd8>
    2b8a:	8f 2d       	mov	r24, r15
    2b8c:	88 0f       	add	r24, r24
    2b8e:	f8 2e       	mov	r15, r24
    2b90:	ff 0c       	add	r15, r15
    2b92:	ff 0c       	add	r15, r15
    2b94:	f8 0e       	add	r15, r24
    2b96:	f3 0e       	add	r15, r19
    2b98:	20 62       	ori	r18, 0x20	; 32
    2b9a:	0c c0       	rjmp	.+24     	; 0x2bb4 <vfprintf+0xd8>
    2b9c:	8e 32       	cpi	r24, 0x2E	; 46
    2b9e:	21 f4       	brne	.+8      	; 0x2ba8 <vfprintf+0xcc>
    2ba0:	26 fd       	sbrc	r18, 6
    2ba2:	78 c1       	rjmp	.+752    	; 0x2e94 <vfprintf+0x3b8>
    2ba4:	20 64       	ori	r18, 0x40	; 64
    2ba6:	06 c0       	rjmp	.+12     	; 0x2bb4 <vfprintf+0xd8>
    2ba8:	8c 36       	cpi	r24, 0x6C	; 108
    2baa:	11 f4       	brne	.+4      	; 0x2bb0 <vfprintf+0xd4>
    2bac:	20 68       	ori	r18, 0x80	; 128
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <vfprintf+0xd8>
    2bb0:	88 36       	cpi	r24, 0x68	; 104
    2bb2:	49 f4       	brne	.+18     	; 0x2bc6 <vfprintf+0xea>
    2bb4:	f1 01       	movw	r30, r2
    2bb6:	93 fd       	sbrc	r25, 3
    2bb8:	85 91       	lpm	r24, Z+
    2bba:	93 ff       	sbrs	r25, 3
    2bbc:	81 91       	ld	r24, Z+
    2bbe:	1f 01       	movw	r2, r30
    2bc0:	88 23       	and	r24, r24
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <vfprintf+0xea>
    2bc4:	ba cf       	rjmp	.-140    	; 0x2b3a <vfprintf+0x5e>
    2bc6:	98 2f       	mov	r25, r24
    2bc8:	95 54       	subi	r25, 0x45	; 69
    2bca:	93 30       	cpi	r25, 0x03	; 3
    2bcc:	18 f0       	brcs	.+6      	; 0x2bd4 <vfprintf+0xf8>
    2bce:	90 52       	subi	r25, 0x20	; 32
    2bd0:	93 30       	cpi	r25, 0x03	; 3
    2bd2:	28 f4       	brcc	.+10     	; 0x2bde <vfprintf+0x102>
    2bd4:	0c 5f       	subi	r16, 0xFC	; 252
    2bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd8:	ff e3       	ldi	r31, 0x3F	; 63
    2bda:	f9 83       	std	Y+1, r31	; 0x01
    2bdc:	0d c0       	rjmp	.+26     	; 0x2bf8 <vfprintf+0x11c>
    2bde:	83 36       	cpi	r24, 0x63	; 99
    2be0:	31 f0       	breq	.+12     	; 0x2bee <vfprintf+0x112>
    2be2:	83 37       	cpi	r24, 0x73	; 115
    2be4:	71 f0       	breq	.+28     	; 0x2c02 <vfprintf+0x126>
    2be6:	83 35       	cpi	r24, 0x53	; 83
    2be8:	09 f0       	breq	.+2      	; 0x2bec <vfprintf+0x110>
    2bea:	60 c0       	rjmp	.+192    	; 0x2cac <vfprintf+0x1d0>
    2bec:	22 c0       	rjmp	.+68     	; 0x2c32 <vfprintf+0x156>
    2bee:	f8 01       	movw	r30, r16
    2bf0:	80 81       	ld	r24, Z
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	0e 5f       	subi	r16, 0xFE	; 254
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	42 01       	movw	r8, r4
    2bfa:	71 e0       	ldi	r23, 0x01	; 1
    2bfc:	a7 2e       	mov	r10, r23
    2bfe:	b1 2c       	mov	r11, r1
    2c00:	16 c0       	rjmp	.+44     	; 0x2c2e <vfprintf+0x152>
    2c02:	62 e0       	ldi	r22, 0x02	; 2
    2c04:	66 2e       	mov	r6, r22
    2c06:	71 2c       	mov	r7, r1
    2c08:	60 0e       	add	r6, r16
    2c0a:	71 1e       	adc	r7, r17
    2c0c:	f8 01       	movw	r30, r16
    2c0e:	80 80       	ld	r8, Z
    2c10:	91 80       	ldd	r9, Z+1	; 0x01
    2c12:	26 ff       	sbrs	r18, 6
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <vfprintf+0x140>
    2c16:	6e 2d       	mov	r22, r14
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <vfprintf+0x144>
    2c1c:	6f ef       	ldi	r22, 0xFF	; 255
    2c1e:	7f ef       	ldi	r23, 0xFF	; 255
    2c20:	c4 01       	movw	r24, r8
    2c22:	2c 87       	std	Y+12, r18	; 0x0c
    2c24:	0e 94 be 18 	call	0x317c	; 0x317c <strnlen>
    2c28:	5c 01       	movw	r10, r24
    2c2a:	83 01       	movw	r16, r6
    2c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c2e:	2f 77       	andi	r18, 0x7F	; 127
    2c30:	17 c0       	rjmp	.+46     	; 0x2c60 <vfprintf+0x184>
    2c32:	52 e0       	ldi	r21, 0x02	; 2
    2c34:	65 2e       	mov	r6, r21
    2c36:	71 2c       	mov	r7, r1
    2c38:	60 0e       	add	r6, r16
    2c3a:	71 1e       	adc	r7, r17
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	80 80       	ld	r8, Z
    2c40:	91 80       	ldd	r9, Z+1	; 0x01
    2c42:	26 ff       	sbrs	r18, 6
    2c44:	03 c0       	rjmp	.+6      	; 0x2c4c <vfprintf+0x170>
    2c46:	6e 2d       	mov	r22, r14
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <vfprintf+0x174>
    2c4c:	6f ef       	ldi	r22, 0xFF	; 255
    2c4e:	7f ef       	ldi	r23, 0xFF	; 255
    2c50:	c4 01       	movw	r24, r8
    2c52:	2c 87       	std	Y+12, r18	; 0x0c
    2c54:	0e 94 ac 18 	call	0x3158	; 0x3158 <strnlen_P>
    2c58:	5c 01       	movw	r10, r24
    2c5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c5c:	20 68       	ori	r18, 0x80	; 128
    2c5e:	83 01       	movw	r16, r6
    2c60:	23 fd       	sbrc	r18, 3
    2c62:	20 c0       	rjmp	.+64     	; 0x2ca4 <vfprintf+0x1c8>
    2c64:	08 c0       	rjmp	.+16     	; 0x2c76 <vfprintf+0x19a>
    2c66:	80 e2       	ldi	r24, 0x20	; 32
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	b6 01       	movw	r22, r12
    2c6c:	2c 87       	std	Y+12, r18	; 0x0c
    2c6e:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2c72:	fa 94       	dec	r15
    2c74:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c76:	8f 2d       	mov	r24, r15
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	a8 16       	cp	r10, r24
    2c7c:	b9 06       	cpc	r11, r25
    2c7e:	98 f3       	brcs	.-26     	; 0x2c66 <vfprintf+0x18a>
    2c80:	11 c0       	rjmp	.+34     	; 0x2ca4 <vfprintf+0x1c8>
    2c82:	f4 01       	movw	r30, r8
    2c84:	27 fd       	sbrc	r18, 7
    2c86:	85 91       	lpm	r24, Z+
    2c88:	27 ff       	sbrs	r18, 7
    2c8a:	81 91       	ld	r24, Z+
    2c8c:	4f 01       	movw	r8, r30
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	b6 01       	movw	r22, r12
    2c92:	2c 87       	std	Y+12, r18	; 0x0c
    2c94:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2c98:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c9a:	f1 10       	cpse	r15, r1
    2c9c:	fa 94       	dec	r15
    2c9e:	08 94       	sec
    2ca0:	a1 08       	sbc	r10, r1
    2ca2:	b1 08       	sbc	r11, r1
    2ca4:	a1 14       	cp	r10, r1
    2ca6:	b1 04       	cpc	r11, r1
    2ca8:	61 f7       	brne	.-40     	; 0x2c82 <vfprintf+0x1a6>
    2caa:	f1 c0       	rjmp	.+482    	; 0x2e8e <vfprintf+0x3b2>
    2cac:	84 36       	cpi	r24, 0x64	; 100
    2cae:	11 f0       	breq	.+4      	; 0x2cb4 <vfprintf+0x1d8>
    2cb0:	89 36       	cpi	r24, 0x69	; 105
    2cb2:	49 f5       	brne	.+82     	; 0x2d06 <vfprintf+0x22a>
    2cb4:	27 ff       	sbrs	r18, 7
    2cb6:	08 c0       	rjmp	.+16     	; 0x2cc8 <vfprintf+0x1ec>
    2cb8:	f8 01       	movw	r30, r16
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	0c 5f       	subi	r16, 0xFC	; 252
    2cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc6:	09 c0       	rjmp	.+18     	; 0x2cda <vfprintf+0x1fe>
    2cc8:	f8 01       	movw	r30, r16
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	88 27       	eor	r24, r24
    2cd0:	77 fd       	sbrc	r23, 7
    2cd2:	80 95       	com	r24
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	0e 5f       	subi	r16, 0xFE	; 254
    2cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cda:	4f e6       	ldi	r20, 0x6F	; 111
    2cdc:	b4 2e       	mov	r11, r20
    2cde:	b2 22       	and	r11, r18
    2ce0:	97 ff       	sbrs	r25, 7
    2ce2:	09 c0       	rjmp	.+18     	; 0x2cf6 <vfprintf+0x21a>
    2ce4:	90 95       	com	r25
    2ce6:	80 95       	com	r24
    2ce8:	70 95       	com	r23
    2cea:	61 95       	neg	r22
    2cec:	7f 4f       	sbci	r23, 0xFF	; 255
    2cee:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf2:	f0 e8       	ldi	r31, 0x80	; 128
    2cf4:	bf 2a       	or	r11, r31
    2cf6:	a2 01       	movw	r20, r4
    2cf8:	2a e0       	ldi	r18, 0x0A	; 10
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__ultoa_invert>
    2d00:	78 2e       	mov	r7, r24
    2d02:	74 18       	sub	r7, r4
    2d04:	45 c0       	rjmp	.+138    	; 0x2d90 <vfprintf+0x2b4>
    2d06:	85 37       	cpi	r24, 0x75	; 117
    2d08:	31 f4       	brne	.+12     	; 0x2d16 <vfprintf+0x23a>
    2d0a:	3f ee       	ldi	r19, 0xEF	; 239
    2d0c:	b3 2e       	mov	r11, r19
    2d0e:	b2 22       	and	r11, r18
    2d10:	2a e0       	ldi	r18, 0x0A	; 10
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	25 c0       	rjmp	.+74     	; 0x2d60 <vfprintf+0x284>
    2d16:	99 ef       	ldi	r25, 0xF9	; 249
    2d18:	b9 2e       	mov	r11, r25
    2d1a:	b2 22       	and	r11, r18
    2d1c:	8f 36       	cpi	r24, 0x6F	; 111
    2d1e:	c1 f0       	breq	.+48     	; 0x2d50 <vfprintf+0x274>
    2d20:	80 37       	cpi	r24, 0x70	; 112
    2d22:	20 f4       	brcc	.+8      	; 0x2d2c <vfprintf+0x250>
    2d24:	88 35       	cpi	r24, 0x58	; 88
    2d26:	09 f0       	breq	.+2      	; 0x2d2a <vfprintf+0x24e>
    2d28:	b5 c0       	rjmp	.+362    	; 0x2e94 <vfprintf+0x3b8>
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <vfprintf+0x26a>
    2d2c:	80 37       	cpi	r24, 0x70	; 112
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <vfprintf+0x25c>
    2d30:	88 37       	cpi	r24, 0x78	; 120
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <vfprintf+0x25a>
    2d34:	af c0       	rjmp	.+350    	; 0x2e94 <vfprintf+0x3b8>
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <vfprintf+0x260>
    2d38:	20 e1       	ldi	r18, 0x10	; 16
    2d3a:	b2 2a       	or	r11, r18
    2d3c:	b4 fe       	sbrs	r11, 4
    2d3e:	0b c0       	rjmp	.+22     	; 0x2d56 <vfprintf+0x27a>
    2d40:	84 e0       	ldi	r24, 0x04	; 4
    2d42:	b8 2a       	or	r11, r24
    2d44:	08 c0       	rjmp	.+16     	; 0x2d56 <vfprintf+0x27a>
    2d46:	b4 fe       	sbrs	r11, 4
    2d48:	09 c0       	rjmp	.+18     	; 0x2d5c <vfprintf+0x280>
    2d4a:	e6 e0       	ldi	r30, 0x06	; 6
    2d4c:	be 2a       	or	r11, r30
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <vfprintf+0x280>
    2d50:	28 e0       	ldi	r18, 0x08	; 8
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	05 c0       	rjmp	.+10     	; 0x2d60 <vfprintf+0x284>
    2d56:	20 e1       	ldi	r18, 0x10	; 16
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <vfprintf+0x284>
    2d5c:	20 e1       	ldi	r18, 0x10	; 16
    2d5e:	32 e0       	ldi	r19, 0x02	; 2
    2d60:	b7 fe       	sbrs	r11, 7
    2d62:	08 c0       	rjmp	.+16     	; 0x2d74 <vfprintf+0x298>
    2d64:	f8 01       	movw	r30, r16
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	0c 5f       	subi	r16, 0xFC	; 252
    2d70:	1f 4f       	sbci	r17, 0xFF	; 255
    2d72:	07 c0       	rjmp	.+14     	; 0x2d82 <vfprintf+0x2a6>
    2d74:	f8 01       	movw	r30, r16
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	0e 5f       	subi	r16, 0xFE	; 254
    2d80:	1f 4f       	sbci	r17, 0xFF	; 255
    2d82:	a2 01       	movw	r20, r4
    2d84:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__ultoa_invert>
    2d88:	78 2e       	mov	r7, r24
    2d8a:	74 18       	sub	r7, r4
    2d8c:	ff e7       	ldi	r31, 0x7F	; 127
    2d8e:	bf 22       	and	r11, r31
    2d90:	b6 fe       	sbrs	r11, 6
    2d92:	0b c0       	rjmp	.+22     	; 0x2daa <vfprintf+0x2ce>
    2d94:	2e ef       	ldi	r18, 0xFE	; 254
    2d96:	b2 22       	and	r11, r18
    2d98:	7e 14       	cp	r7, r14
    2d9a:	38 f4       	brcc	.+14     	; 0x2daa <vfprintf+0x2ce>
    2d9c:	b4 fe       	sbrs	r11, 4
    2d9e:	07 c0       	rjmp	.+14     	; 0x2dae <vfprintf+0x2d2>
    2da0:	b2 fc       	sbrc	r11, 2
    2da2:	05 c0       	rjmp	.+10     	; 0x2dae <vfprintf+0x2d2>
    2da4:	8f ee       	ldi	r24, 0xEF	; 239
    2da6:	b8 22       	and	r11, r24
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <vfprintf+0x2d2>
    2daa:	a7 2c       	mov	r10, r7
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <vfprintf+0x2d4>
    2dae:	ae 2c       	mov	r10, r14
    2db0:	8b 2d       	mov	r24, r11
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	b4 fe       	sbrs	r11, 4
    2db6:	0d c0       	rjmp	.+26     	; 0x2dd2 <vfprintf+0x2f6>
    2db8:	fe 01       	movw	r30, r28
    2dba:	e7 0d       	add	r30, r7
    2dbc:	f1 1d       	adc	r31, r1
    2dbe:	20 81       	ld	r18, Z
    2dc0:	20 33       	cpi	r18, 0x30	; 48
    2dc2:	19 f4       	brne	.+6      	; 0x2dca <vfprintf+0x2ee>
    2dc4:	e9 ee       	ldi	r30, 0xE9	; 233
    2dc6:	be 22       	and	r11, r30
    2dc8:	09 c0       	rjmp	.+18     	; 0x2ddc <vfprintf+0x300>
    2dca:	a3 94       	inc	r10
    2dcc:	b2 fe       	sbrs	r11, 2
    2dce:	06 c0       	rjmp	.+12     	; 0x2ddc <vfprintf+0x300>
    2dd0:	04 c0       	rjmp	.+8      	; 0x2dda <vfprintf+0x2fe>
    2dd2:	86 78       	andi	r24, 0x86	; 134
    2dd4:	90 70       	andi	r25, 0x00	; 0
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <vfprintf+0x300>
    2dda:	a3 94       	inc	r10
    2ddc:	8b 2c       	mov	r8, r11
    2dde:	99 24       	eor	r9, r9
    2de0:	b3 fc       	sbrc	r11, 3
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <vfprintf+0x330>
    2de4:	b0 fe       	sbrs	r11, 0
    2de6:	0f c0       	rjmp	.+30     	; 0x2e06 <vfprintf+0x32a>
    2de8:	af 14       	cp	r10, r15
    2dea:	28 f4       	brcc	.+10     	; 0x2df6 <vfprintf+0x31a>
    2dec:	e7 2c       	mov	r14, r7
    2dee:	ef 0c       	add	r14, r15
    2df0:	ea 18       	sub	r14, r10
    2df2:	af 2c       	mov	r10, r15
    2df4:	08 c0       	rjmp	.+16     	; 0x2e06 <vfprintf+0x32a>
    2df6:	e7 2c       	mov	r14, r7
    2df8:	06 c0       	rjmp	.+12     	; 0x2e06 <vfprintf+0x32a>
    2dfa:	80 e2       	ldi	r24, 0x20	; 32
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	b6 01       	movw	r22, r12
    2e00:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2e04:	a3 94       	inc	r10
    2e06:	af 14       	cp	r10, r15
    2e08:	c0 f3       	brcs	.-16     	; 0x2dfa <vfprintf+0x31e>
    2e0a:	04 c0       	rjmp	.+8      	; 0x2e14 <vfprintf+0x338>
    2e0c:	af 14       	cp	r10, r15
    2e0e:	10 f4       	brcc	.+4      	; 0x2e14 <vfprintf+0x338>
    2e10:	fa 18       	sub	r15, r10
    2e12:	01 c0       	rjmp	.+2      	; 0x2e16 <vfprintf+0x33a>
    2e14:	ff 24       	eor	r15, r15
    2e16:	84 fe       	sbrs	r8, 4
    2e18:	0f c0       	rjmp	.+30     	; 0x2e38 <vfprintf+0x35c>
    2e1a:	80 e3       	ldi	r24, 0x30	; 48
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	b6 01       	movw	r22, r12
    2e20:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2e24:	82 fe       	sbrs	r8, 2
    2e26:	1f c0       	rjmp	.+62     	; 0x2e66 <vfprintf+0x38a>
    2e28:	81 fe       	sbrs	r8, 1
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <vfprintf+0x356>
    2e2c:	88 e5       	ldi	r24, 0x58	; 88
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	10 c0       	rjmp	.+32     	; 0x2e52 <vfprintf+0x376>
    2e32:	88 e7       	ldi	r24, 0x78	; 120
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0d c0       	rjmp	.+26     	; 0x2e52 <vfprintf+0x376>
    2e38:	c4 01       	movw	r24, r8
    2e3a:	86 78       	andi	r24, 0x86	; 134
    2e3c:	90 70       	andi	r25, 0x00	; 0
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	91 f0       	breq	.+36     	; 0x2e66 <vfprintf+0x38a>
    2e42:	81 fc       	sbrc	r8, 1
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <vfprintf+0x36e>
    2e46:	80 e2       	ldi	r24, 0x20	; 32
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <vfprintf+0x370>
    2e4a:	8b e2       	ldi	r24, 0x2B	; 43
    2e4c:	b7 fc       	sbrc	r11, 7
    2e4e:	8d e2       	ldi	r24, 0x2D	; 45
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	b6 01       	movw	r22, r12
    2e54:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <vfprintf+0x38a>
    2e5a:	80 e3       	ldi	r24, 0x30	; 48
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	b6 01       	movw	r22, r12
    2e60:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2e64:	ea 94       	dec	r14
    2e66:	7e 14       	cp	r7, r14
    2e68:	c0 f3       	brcs	.-16     	; 0x2e5a <vfprintf+0x37e>
    2e6a:	7a 94       	dec	r7
    2e6c:	f2 01       	movw	r30, r4
    2e6e:	e7 0d       	add	r30, r7
    2e70:	f1 1d       	adc	r31, r1
    2e72:	80 81       	ld	r24, Z
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	b6 01       	movw	r22, r12
    2e78:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2e7c:	77 20       	and	r7, r7
    2e7e:	a9 f7       	brne	.-22     	; 0x2e6a <vfprintf+0x38e>
    2e80:	06 c0       	rjmp	.+12     	; 0x2e8e <vfprintf+0x3b2>
    2e82:	80 e2       	ldi	r24, 0x20	; 32
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	b6 01       	movw	r22, r12
    2e88:	0e 94 c9 18 	call	0x3192	; 0x3192 <fputc>
    2e8c:	fa 94       	dec	r15
    2e8e:	ff 20       	and	r15, r15
    2e90:	c1 f7       	brne	.-16     	; 0x2e82 <vfprintf+0x3a6>
    2e92:	37 ce       	rjmp	.-914    	; 0x2b02 <vfprintf+0x26>
    2e94:	f6 01       	movw	r30, r12
    2e96:	26 81       	ldd	r18, Z+6	; 0x06
    2e98:	37 81       	ldd	r19, Z+7	; 0x07
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <vfprintf+0x3c4>
    2e9c:	2f ef       	ldi	r18, 0xFF	; 255
    2e9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ea0:	c9 01       	movw	r24, r18
    2ea2:	2c 96       	adiw	r28, 0x0c	; 12
    2ea4:	e2 e1       	ldi	r30, 0x12	; 18
    2ea6:	0c 94 be 14 	jmp	0x297c	; 0x297c <__epilogue_restores__>

00002eaa <calloc>:
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	0f 93       	push	r16
    2eb0:	1f 93       	push	r17
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	68 9f       	mul	r22, r24
    2eb8:	80 01       	movw	r16, r0
    2eba:	69 9f       	mul	r22, r25
    2ebc:	10 0d       	add	r17, r0
    2ebe:	78 9f       	mul	r23, r24
    2ec0:	10 0d       	add	r17, r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	c8 01       	movw	r24, r16
    2ec6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <malloc>
    2eca:	e8 2e       	mov	r14, r24
    2ecc:	e7 01       	movw	r28, r14
    2ece:	7e 01       	movw	r14, r28
    2ed0:	f9 2e       	mov	r15, r25
    2ed2:	e7 01       	movw	r28, r14
    2ed4:	20 97       	sbiw	r28, 0x00	; 0
    2ed6:	31 f0       	breq	.+12     	; 0x2ee4 <calloc+0x3a>
    2ed8:	8e 2d       	mov	r24, r14
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	70 e0       	ldi	r23, 0x00	; 0
    2ede:	a8 01       	movw	r20, r16
    2ee0:	0e 94 b7 18 	call	0x316e	; 0x316e <memset>
    2ee4:	7e 01       	movw	r14, r28
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	e6 e0       	ldi	r30, 0x06	; 6
    2eee:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x18>

00002ef2 <malloc>:
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	82 30       	cpi	r24, 0x02	; 2
    2ef8:	91 05       	cpc	r25, r1
    2efa:	10 f4       	brcc	.+4      	; 0x2f00 <malloc+0xe>
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	e0 91 30 04 	lds	r30, 0x0430
    2f04:	f0 91 31 04 	lds	r31, 0x0431
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	26 c0       	rjmp	.+76     	; 0x2f5e <malloc+0x6c>
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	68 17       	cp	r22, r24
    2f18:	79 07       	cpc	r23, r25
    2f1a:	e0 f0       	brcs	.+56     	; 0x2f54 <malloc+0x62>
    2f1c:	68 17       	cp	r22, r24
    2f1e:	79 07       	cpc	r23, r25
    2f20:	81 f4       	brne	.+32     	; 0x2f42 <malloc+0x50>
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	21 15       	cp	r18, r1
    2f28:	31 05       	cpc	r19, r1
    2f2a:	31 f0       	breq	.+12     	; 0x2f38 <malloc+0x46>
    2f2c:	d9 01       	movw	r26, r18
    2f2e:	13 96       	adiw	r26, 0x03	; 3
    2f30:	9c 93       	st	X, r25
    2f32:	8e 93       	st	-X, r24
    2f34:	12 97       	sbiw	r26, 0x02	; 2
    2f36:	2b c0       	rjmp	.+86     	; 0x2f8e <malloc+0x9c>
    2f38:	90 93 31 04 	sts	0x0431, r25
    2f3c:	80 93 30 04 	sts	0x0430, r24
    2f40:	26 c0       	rjmp	.+76     	; 0x2f8e <malloc+0x9c>
    2f42:	41 15       	cp	r20, r1
    2f44:	51 05       	cpc	r21, r1
    2f46:	19 f0       	breq	.+6      	; 0x2f4e <malloc+0x5c>
    2f48:	64 17       	cp	r22, r20
    2f4a:	75 07       	cpc	r23, r21
    2f4c:	18 f4       	brcc	.+6      	; 0x2f54 <malloc+0x62>
    2f4e:	ab 01       	movw	r20, r22
    2f50:	e9 01       	movw	r28, r18
    2f52:	df 01       	movw	r26, r30
    2f54:	9f 01       	movw	r18, r30
    2f56:	72 81       	ldd	r23, Z+2	; 0x02
    2f58:	63 81       	ldd	r22, Z+3	; 0x03
    2f5a:	e7 2f       	mov	r30, r23
    2f5c:	f6 2f       	mov	r31, r22
    2f5e:	30 97       	sbiw	r30, 0x00	; 0
    2f60:	c1 f6       	brne	.-80     	; 0x2f12 <malloc+0x20>
    2f62:	41 15       	cp	r20, r1
    2f64:	51 05       	cpc	r21, r1
    2f66:	01 f1       	breq	.+64     	; 0x2fa8 <malloc+0xb6>
    2f68:	48 1b       	sub	r20, r24
    2f6a:	59 0b       	sbc	r21, r25
    2f6c:	44 30       	cpi	r20, 0x04	; 4
    2f6e:	51 05       	cpc	r21, r1
    2f70:	80 f4       	brcc	.+32     	; 0x2f92 <malloc+0xa0>
    2f72:	12 96       	adiw	r26, 0x02	; 2
    2f74:	8d 91       	ld	r24, X+
    2f76:	9c 91       	ld	r25, X
    2f78:	13 97       	sbiw	r26, 0x03	; 3
    2f7a:	20 97       	sbiw	r28, 0x00	; 0
    2f7c:	19 f0       	breq	.+6      	; 0x2f84 <malloc+0x92>
    2f7e:	9b 83       	std	Y+3, r25	; 0x03
    2f80:	8a 83       	std	Y+2, r24	; 0x02
    2f82:	04 c0       	rjmp	.+8      	; 0x2f8c <malloc+0x9a>
    2f84:	90 93 31 04 	sts	0x0431, r25
    2f88:	80 93 30 04 	sts	0x0430, r24
    2f8c:	fd 01       	movw	r30, r26
    2f8e:	32 96       	adiw	r30, 0x02	; 2
    2f90:	46 c0       	rjmp	.+140    	; 0x301e <malloc+0x12c>
    2f92:	fd 01       	movw	r30, r26
    2f94:	e4 0f       	add	r30, r20
    2f96:	f5 1f       	adc	r31, r21
    2f98:	81 93       	st	Z+, r24
    2f9a:	91 93       	st	Z+, r25
    2f9c:	42 50       	subi	r20, 0x02	; 2
    2f9e:	50 40       	sbci	r21, 0x00	; 0
    2fa0:	11 96       	adiw	r26, 0x01	; 1
    2fa2:	5c 93       	st	X, r21
    2fa4:	4e 93       	st	-X, r20
    2fa6:	3b c0       	rjmp	.+118    	; 0x301e <malloc+0x12c>
    2fa8:	20 91 2e 04 	lds	r18, 0x042E
    2fac:	30 91 2f 04 	lds	r19, 0x042F
    2fb0:	21 15       	cp	r18, r1
    2fb2:	31 05       	cpc	r19, r1
    2fb4:	41 f4       	brne	.+16     	; 0x2fc6 <malloc+0xd4>
    2fb6:	20 91 19 04 	lds	r18, 0x0419
    2fba:	30 91 1a 04 	lds	r19, 0x041A
    2fbe:	30 93 2f 04 	sts	0x042F, r19
    2fc2:	20 93 2e 04 	sts	0x042E, r18
    2fc6:	20 91 1b 04 	lds	r18, 0x041B
    2fca:	30 91 1c 04 	lds	r19, 0x041C
    2fce:	21 15       	cp	r18, r1
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	41 f4       	brne	.+16     	; 0x2fe4 <malloc+0xf2>
    2fd4:	2d b7       	in	r18, 0x3d	; 61
    2fd6:	3e b7       	in	r19, 0x3e	; 62
    2fd8:	40 91 17 04 	lds	r20, 0x0417
    2fdc:	50 91 18 04 	lds	r21, 0x0418
    2fe0:	24 1b       	sub	r18, r20
    2fe2:	35 0b       	sbc	r19, r21
    2fe4:	e0 91 2e 04 	lds	r30, 0x042E
    2fe8:	f0 91 2f 04 	lds	r31, 0x042F
    2fec:	e2 17       	cp	r30, r18
    2fee:	f3 07       	cpc	r31, r19
    2ff0:	a0 f4       	brcc	.+40     	; 0x301a <malloc+0x128>
    2ff2:	2e 1b       	sub	r18, r30
    2ff4:	3f 0b       	sbc	r19, r31
    2ff6:	28 17       	cp	r18, r24
    2ff8:	39 07       	cpc	r19, r25
    2ffa:	78 f0       	brcs	.+30     	; 0x301a <malloc+0x128>
    2ffc:	ac 01       	movw	r20, r24
    2ffe:	4e 5f       	subi	r20, 0xFE	; 254
    3000:	5f 4f       	sbci	r21, 0xFF	; 255
    3002:	24 17       	cp	r18, r20
    3004:	35 07       	cpc	r19, r21
    3006:	48 f0       	brcs	.+18     	; 0x301a <malloc+0x128>
    3008:	4e 0f       	add	r20, r30
    300a:	5f 1f       	adc	r21, r31
    300c:	50 93 2f 04 	sts	0x042F, r21
    3010:	40 93 2e 04 	sts	0x042E, r20
    3014:	81 93       	st	Z+, r24
    3016:	91 93       	st	Z+, r25
    3018:	02 c0       	rjmp	.+4      	; 0x301e <malloc+0x12c>
    301a:	e0 e0       	ldi	r30, 0x00	; 0
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	cf 01       	movw	r24, r30
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	08 95       	ret

00003026 <free>:
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	09 f4       	brne	.+2      	; 0x3030 <free+0xa>
    302e:	91 c0       	rjmp	.+290    	; 0x3152 <free+0x12c>
    3030:	fc 01       	movw	r30, r24
    3032:	32 97       	sbiw	r30, 0x02	; 2
    3034:	13 82       	std	Z+3, r1	; 0x03
    3036:	12 82       	std	Z+2, r1	; 0x02
    3038:	60 91 30 04 	lds	r22, 0x0430
    303c:	70 91 31 04 	lds	r23, 0x0431
    3040:	61 15       	cp	r22, r1
    3042:	71 05       	cpc	r23, r1
    3044:	81 f4       	brne	.+32     	; 0x3066 <free+0x40>
    3046:	20 81       	ld	r18, Z
    3048:	31 81       	ldd	r19, Z+1	; 0x01
    304a:	28 0f       	add	r18, r24
    304c:	39 1f       	adc	r19, r25
    304e:	80 91 2e 04 	lds	r24, 0x042E
    3052:	90 91 2f 04 	lds	r25, 0x042F
    3056:	82 17       	cp	r24, r18
    3058:	93 07       	cpc	r25, r19
    305a:	99 f5       	brne	.+102    	; 0x30c2 <free+0x9c>
    305c:	f0 93 2f 04 	sts	0x042F, r31
    3060:	e0 93 2e 04 	sts	0x042E, r30
    3064:	76 c0       	rjmp	.+236    	; 0x3152 <free+0x12c>
    3066:	db 01       	movw	r26, r22
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <free+0x4c>
    306e:	cd 01       	movw	r24, r26
    3070:	d9 01       	movw	r26, r18
    3072:	ae 17       	cp	r26, r30
    3074:	bf 07       	cpc	r27, r31
    3076:	48 f4       	brcc	.+18     	; 0x308a <free+0x64>
    3078:	12 96       	adiw	r26, 0x02	; 2
    307a:	2d 91       	ld	r18, X+
    307c:	3c 91       	ld	r19, X
    307e:	13 97       	sbiw	r26, 0x03	; 3
    3080:	21 15       	cp	r18, r1
    3082:	31 05       	cpc	r19, r1
    3084:	a1 f7       	brne	.-24     	; 0x306e <free+0x48>
    3086:	cd 01       	movw	r24, r26
    3088:	21 c0       	rjmp	.+66     	; 0x30cc <free+0xa6>
    308a:	b3 83       	std	Z+3, r27	; 0x03
    308c:	a2 83       	std	Z+2, r26	; 0x02
    308e:	ef 01       	movw	r28, r30
    3090:	49 91       	ld	r20, Y+
    3092:	59 91       	ld	r21, Y+
    3094:	9e 01       	movw	r18, r28
    3096:	24 0f       	add	r18, r20
    3098:	35 1f       	adc	r19, r21
    309a:	a2 17       	cp	r26, r18
    309c:	b3 07       	cpc	r27, r19
    309e:	79 f4       	brne	.+30     	; 0x30be <free+0x98>
    30a0:	2d 91       	ld	r18, X+
    30a2:	3c 91       	ld	r19, X
    30a4:	11 97       	sbiw	r26, 0x01	; 1
    30a6:	24 0f       	add	r18, r20
    30a8:	35 1f       	adc	r19, r21
    30aa:	2e 5f       	subi	r18, 0xFE	; 254
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	31 83       	std	Z+1, r19	; 0x01
    30b0:	20 83       	st	Z, r18
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	2d 91       	ld	r18, X+
    30b6:	3c 91       	ld	r19, X
    30b8:	13 97       	sbiw	r26, 0x03	; 3
    30ba:	33 83       	std	Z+3, r19	; 0x03
    30bc:	22 83       	std	Z+2, r18	; 0x02
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	29 f4       	brne	.+10     	; 0x30cc <free+0xa6>
    30c2:	f0 93 31 04 	sts	0x0431, r31
    30c6:	e0 93 30 04 	sts	0x0430, r30
    30ca:	43 c0       	rjmp	.+134    	; 0x3152 <free+0x12c>
    30cc:	dc 01       	movw	r26, r24
    30ce:	13 96       	adiw	r26, 0x03	; 3
    30d0:	fc 93       	st	X, r31
    30d2:	ee 93       	st	-X, r30
    30d4:	12 97       	sbiw	r26, 0x02	; 2
    30d6:	4d 91       	ld	r20, X+
    30d8:	5d 91       	ld	r21, X+
    30da:	a4 0f       	add	r26, r20
    30dc:	b5 1f       	adc	r27, r21
    30de:	ea 17       	cp	r30, r26
    30e0:	fb 07       	cpc	r31, r27
    30e2:	69 f4       	brne	.+26     	; 0x30fe <free+0xd8>
    30e4:	20 81       	ld	r18, Z
    30e6:	31 81       	ldd	r19, Z+1	; 0x01
    30e8:	24 0f       	add	r18, r20
    30ea:	35 1f       	adc	r19, r21
    30ec:	2e 5f       	subi	r18, 0xFE	; 254
    30ee:	3f 4f       	sbci	r19, 0xFF	; 255
    30f0:	ec 01       	movw	r28, r24
    30f2:	39 83       	std	Y+1, r19	; 0x01
    30f4:	28 83       	st	Y, r18
    30f6:	22 81       	ldd	r18, Z+2	; 0x02
    30f8:	33 81       	ldd	r19, Z+3	; 0x03
    30fa:	3b 83       	std	Y+3, r19	; 0x03
    30fc:	2a 83       	std	Y+2, r18	; 0x02
    30fe:	e0 e0       	ldi	r30, 0x00	; 0
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <free+0xe2>
    3104:	fb 01       	movw	r30, r22
    3106:	bc 01       	movw	r22, r24
    3108:	db 01       	movw	r26, r22
    310a:	12 96       	adiw	r26, 0x02	; 2
    310c:	8d 91       	ld	r24, X+
    310e:	9c 91       	ld	r25, X
    3110:	13 97       	sbiw	r26, 0x03	; 3
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	b9 f7       	brne	.-18     	; 0x3104 <free+0xde>
    3116:	9b 01       	movw	r18, r22
    3118:	2e 5f       	subi	r18, 0xFE	; 254
    311a:	3f 4f       	sbci	r19, 0xFF	; 255
    311c:	8d 91       	ld	r24, X+
    311e:	9c 91       	ld	r25, X
    3120:	11 97       	sbiw	r26, 0x01	; 1
    3122:	82 0f       	add	r24, r18
    3124:	93 1f       	adc	r25, r19
    3126:	40 91 2e 04 	lds	r20, 0x042E
    312a:	50 91 2f 04 	lds	r21, 0x042F
    312e:	48 17       	cp	r20, r24
    3130:	59 07       	cpc	r21, r25
    3132:	79 f4       	brne	.+30     	; 0x3152 <free+0x12c>
    3134:	30 97       	sbiw	r30, 0x00	; 0
    3136:	29 f4       	brne	.+10     	; 0x3142 <free+0x11c>
    3138:	10 92 31 04 	sts	0x0431, r1
    313c:	10 92 30 04 	sts	0x0430, r1
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <free+0x120>
    3142:	13 82       	std	Z+3, r1	; 0x03
    3144:	12 82       	std	Z+2, r1	; 0x02
    3146:	22 50       	subi	r18, 0x02	; 2
    3148:	30 40       	sbci	r19, 0x00	; 0
    314a:	30 93 2f 04 	sts	0x042F, r19
    314e:	20 93 2e 04 	sts	0x042E, r18
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	08 95       	ret

00003158 <strnlen_P>:
    3158:	fc 01       	movw	r30, r24
    315a:	05 90       	lpm	r0, Z+
    315c:	61 50       	subi	r22, 0x01	; 1
    315e:	70 40       	sbci	r23, 0x00	; 0
    3160:	01 10       	cpse	r0, r1
    3162:	d8 f7       	brcc	.-10     	; 0x315a <strnlen_P+0x2>
    3164:	80 95       	com	r24
    3166:	90 95       	com	r25
    3168:	8e 0f       	add	r24, r30
    316a:	9f 1f       	adc	r25, r31
    316c:	08 95       	ret

0000316e <memset>:
    316e:	dc 01       	movw	r26, r24
    3170:	01 c0       	rjmp	.+2      	; 0x3174 <memset+0x6>
    3172:	6d 93       	st	X+, r22
    3174:	41 50       	subi	r20, 0x01	; 1
    3176:	50 40       	sbci	r21, 0x00	; 0
    3178:	e0 f7       	brcc	.-8      	; 0x3172 <memset+0x4>
    317a:	08 95       	ret

0000317c <strnlen>:
    317c:	fc 01       	movw	r30, r24
    317e:	61 50       	subi	r22, 0x01	; 1
    3180:	70 40       	sbci	r23, 0x00	; 0
    3182:	01 90       	ld	r0, Z+
    3184:	01 10       	cpse	r0, r1
    3186:	d8 f7       	brcc	.-10     	; 0x317e <strnlen+0x2>
    3188:	80 95       	com	r24
    318a:	90 95       	com	r25
    318c:	8e 0f       	add	r24, r30
    318e:	9f 1f       	adc	r25, r31
    3190:	08 95       	ret

00003192 <fputc>:
    3192:	0f 93       	push	r16
    3194:	1f 93       	push	r17
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	8c 01       	movw	r16, r24
    319c:	eb 01       	movw	r28, r22
    319e:	8b 81       	ldd	r24, Y+3	; 0x03
    31a0:	81 ff       	sbrs	r24, 1
    31a2:	1b c0       	rjmp	.+54     	; 0x31da <fputc+0x48>
    31a4:	82 ff       	sbrs	r24, 2
    31a6:	0d c0       	rjmp	.+26     	; 0x31c2 <fputc+0x30>
    31a8:	2e 81       	ldd	r18, Y+6	; 0x06
    31aa:	3f 81       	ldd	r19, Y+7	; 0x07
    31ac:	8c 81       	ldd	r24, Y+4	; 0x04
    31ae:	9d 81       	ldd	r25, Y+5	; 0x05
    31b0:	28 17       	cp	r18, r24
    31b2:	39 07       	cpc	r19, r25
    31b4:	64 f4       	brge	.+24     	; 0x31ce <fputc+0x3c>
    31b6:	e8 81       	ld	r30, Y
    31b8:	f9 81       	ldd	r31, Y+1	; 0x01
    31ba:	01 93       	st	Z+, r16
    31bc:	f9 83       	std	Y+1, r31	; 0x01
    31be:	e8 83       	st	Y, r30
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <fputc+0x3c>
    31c2:	e8 85       	ldd	r30, Y+8	; 0x08
    31c4:	f9 85       	ldd	r31, Y+9	; 0x09
    31c6:	80 2f       	mov	r24, r16
    31c8:	09 95       	icall
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	31 f4       	brne	.+12     	; 0x31da <fputc+0x48>
    31ce:	8e 81       	ldd	r24, Y+6	; 0x06
    31d0:	9f 81       	ldd	r25, Y+7	; 0x07
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	9f 83       	std	Y+7, r25	; 0x07
    31d6:	8e 83       	std	Y+6, r24	; 0x06
    31d8:	02 c0       	rjmp	.+4      	; 0x31de <fputc+0x4c>
    31da:	0f ef       	ldi	r16, 0xFF	; 255
    31dc:	1f ef       	ldi	r17, 0xFF	; 255
    31de:	c8 01       	movw	r24, r16
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	1f 91       	pop	r17
    31e6:	0f 91       	pop	r16
    31e8:	08 95       	ret

000031ea <__ultoa_invert>:
    31ea:	fa 01       	movw	r30, r20
    31ec:	aa 27       	eor	r26, r26
    31ee:	28 30       	cpi	r18, 0x08	; 8
    31f0:	51 f1       	breq	.+84     	; 0x3246 <__ultoa_invert+0x5c>
    31f2:	20 31       	cpi	r18, 0x10	; 16
    31f4:	81 f1       	breq	.+96     	; 0x3256 <__ultoa_invert+0x6c>
    31f6:	e8 94       	clt
    31f8:	6f 93       	push	r22
    31fa:	6e 7f       	andi	r22, 0xFE	; 254
    31fc:	6e 5f       	subi	r22, 0xFE	; 254
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	8f 4f       	sbci	r24, 0xFF	; 255
    3202:	9f 4f       	sbci	r25, 0xFF	; 255
    3204:	af 4f       	sbci	r26, 0xFF	; 255
    3206:	b1 e0       	ldi	r27, 0x01	; 1
    3208:	3e d0       	rcall	.+124    	; 0x3286 <__ultoa_invert+0x9c>
    320a:	b4 e0       	ldi	r27, 0x04	; 4
    320c:	3c d0       	rcall	.+120    	; 0x3286 <__ultoa_invert+0x9c>
    320e:	67 0f       	add	r22, r23
    3210:	78 1f       	adc	r23, r24
    3212:	89 1f       	adc	r24, r25
    3214:	9a 1f       	adc	r25, r26
    3216:	a1 1d       	adc	r26, r1
    3218:	68 0f       	add	r22, r24
    321a:	79 1f       	adc	r23, r25
    321c:	8a 1f       	adc	r24, r26
    321e:	91 1d       	adc	r25, r1
    3220:	a1 1d       	adc	r26, r1
    3222:	6a 0f       	add	r22, r26
    3224:	71 1d       	adc	r23, r1
    3226:	81 1d       	adc	r24, r1
    3228:	91 1d       	adc	r25, r1
    322a:	a1 1d       	adc	r26, r1
    322c:	20 d0       	rcall	.+64     	; 0x326e <__ultoa_invert+0x84>
    322e:	09 f4       	brne	.+2      	; 0x3232 <__ultoa_invert+0x48>
    3230:	68 94       	set
    3232:	3f 91       	pop	r19
    3234:	2a e0       	ldi	r18, 0x0A	; 10
    3236:	26 9f       	mul	r18, r22
    3238:	11 24       	eor	r1, r1
    323a:	30 19       	sub	r19, r0
    323c:	30 5d       	subi	r19, 0xD0	; 208
    323e:	31 93       	st	Z+, r19
    3240:	de f6       	brtc	.-74     	; 0x31f8 <__ultoa_invert+0xe>
    3242:	cf 01       	movw	r24, r30
    3244:	08 95       	ret
    3246:	46 2f       	mov	r20, r22
    3248:	47 70       	andi	r20, 0x07	; 7
    324a:	40 5d       	subi	r20, 0xD0	; 208
    324c:	41 93       	st	Z+, r20
    324e:	b3 e0       	ldi	r27, 0x03	; 3
    3250:	0f d0       	rcall	.+30     	; 0x3270 <__ultoa_invert+0x86>
    3252:	c9 f7       	brne	.-14     	; 0x3246 <__ultoa_invert+0x5c>
    3254:	f6 cf       	rjmp	.-20     	; 0x3242 <__ultoa_invert+0x58>
    3256:	46 2f       	mov	r20, r22
    3258:	4f 70       	andi	r20, 0x0F	; 15
    325a:	40 5d       	subi	r20, 0xD0	; 208
    325c:	4a 33       	cpi	r20, 0x3A	; 58
    325e:	18 f0       	brcs	.+6      	; 0x3266 <__ultoa_invert+0x7c>
    3260:	49 5d       	subi	r20, 0xD9	; 217
    3262:	31 fd       	sbrc	r19, 1
    3264:	40 52       	subi	r20, 0x20	; 32
    3266:	41 93       	st	Z+, r20
    3268:	02 d0       	rcall	.+4      	; 0x326e <__ultoa_invert+0x84>
    326a:	a9 f7       	brne	.-22     	; 0x3256 <__ultoa_invert+0x6c>
    326c:	ea cf       	rjmp	.-44     	; 0x3242 <__ultoa_invert+0x58>
    326e:	b4 e0       	ldi	r27, 0x04	; 4
    3270:	a6 95       	lsr	r26
    3272:	97 95       	ror	r25
    3274:	87 95       	ror	r24
    3276:	77 95       	ror	r23
    3278:	67 95       	ror	r22
    327a:	ba 95       	dec	r27
    327c:	c9 f7       	brne	.-14     	; 0x3270 <__ultoa_invert+0x86>
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	61 05       	cpc	r22, r1
    3282:	71 05       	cpc	r23, r1
    3284:	08 95       	ret
    3286:	9b 01       	movw	r18, r22
    3288:	ac 01       	movw	r20, r24
    328a:	0a 2e       	mov	r0, r26
    328c:	06 94       	lsr	r0
    328e:	57 95       	ror	r21
    3290:	47 95       	ror	r20
    3292:	37 95       	ror	r19
    3294:	27 95       	ror	r18
    3296:	ba 95       	dec	r27
    3298:	c9 f7       	brne	.-14     	; 0x328c <__ultoa_invert+0xa2>
    329a:	62 0f       	add	r22, r18
    329c:	73 1f       	adc	r23, r19
    329e:	84 1f       	adc	r24, r20
    32a0:	95 1f       	adc	r25, r21
    32a2:	a0 1d       	adc	r26, r0
    32a4:	08 95       	ret

000032a6 <_exit>:
    32a6:	f8 94       	cli

000032a8 <__stop_program>:
    32a8:	ff cf       	rjmp	.-2      	; 0x32a8 <__stop_program>
