
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  000024e0  00002574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008002a0  008002a0  00002714  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000308  00000000  00000000  0000361c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000047d  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000036ad  00000000  00000000  00003da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cb0  00000000  00000000  0000744e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003231  00000000  00000000  000090fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  0000c330  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000092e  00000000  00000000  0000c730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001880  00000000  00000000  0000d05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000008cf  00000000  00000000  0000e8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000108  00000000  00000000  0000f1ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ee       	ldi	r30, 0xE0	; 224
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3a       	cpi	r26, 0xA0	; 160
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a0 ea       	ldi	r26, 0xA0	; 160
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3a       	cpi	r26, 0xAB	; 171
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
      c6:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initCAN>:
#include "can.h"


volatile uint8_t flagMCP; //FLAG for MCP 

void initCAN(enum canMode mode){
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <initCAN+0x6>
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t t;
	switch (mode){
      da:	8a 81       	ldd	r24, Y+2	; 0x02
      dc:	88 2f       	mov	r24, r24
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	91 05       	cpc	r25, r1
      e4:	a9 f0       	breq	.+42     	; 0x110 <initCAN+0x42>
      e6:	83 30       	cpi	r24, 0x03	; 3
      e8:	91 05       	cpc	r25, r1
      ea:	34 f4       	brge	.+12     	; 0xf8 <initCAN+0x2a>
      ec:	00 97       	sbiw	r24, 0x00	; 0
      ee:	59 f0       	breq	.+22     	; 0x106 <initCAN+0x38>
      f0:	81 30       	cpi	r24, 0x01	; 1
      f2:	91 05       	cpc	r25, r1
      f4:	51 f0       	breq	.+20     	; 0x10a <initCAN+0x3c>
      f6:	15 c0       	rjmp	.+42     	; 0x122 <initCAN+0x54>
      f8:	83 30       	cpi	r24, 0x03	; 3
      fa:	91 05       	cpc	r25, r1
      fc:	61 f0       	breq	.+24     	; 0x116 <initCAN+0x48>
      fe:	84 30       	cpi	r24, 0x04	; 4
     100:	91 05       	cpc	r25, r1
     102:	61 f0       	breq	.+24     	; 0x11c <initCAN+0x4e>
     104:	0e c0       	rjmp	.+28     	; 0x122 <initCAN+0x54>
		case(NORMAL):
			t = 0x00;			
     106:	19 82       	std	Y+1, r1	; 0x01
			break;
     108:	0c c0       	rjmp	.+24     	; 0x122 <initCAN+0x54>
		case(SLEEP):
			t = 0x20;
     10a:	80 e2       	ldi	r24, 0x20	; 32
     10c:	89 83       	std	Y+1, r24	; 0x01
			break;
     10e:	09 c0       	rjmp	.+18     	; 0x122 <initCAN+0x54>
		case(LOOPBACK):
			t = 0x40;			
     110:	80 e4       	ldi	r24, 0x40	; 64
     112:	89 83       	std	Y+1, r24	; 0x01
			break;
     114:	06 c0       	rjmp	.+12     	; 0x122 <initCAN+0x54>
		case(LISTEN):
			t = 0x60;
     116:	80 e6       	ldi	r24, 0x60	; 96
     118:	89 83       	std	Y+1, r24	; 0x01
			break;		
     11a:	03 c0       	rjmp	.+6      	; 0x122 <initCAN+0x54>
		case(CONFIG):
			t = 0x80;
     11c:	80 e8       	ldi	r24, 0x80	; 128
     11e:	89 83       	std	Y+1, r24	; 0x01
			break;
     120:	00 00       	nop
	};
	
	writeMCP(MCP_CANCTRL,t); //Sets mode
     122:	8f e0       	ldi	r24, 0x0F	; 15
     124:	69 81       	ldd	r22, Y+1	; 0x01
     126:	0e 94 b3 04 	call	0x966	; 0x966 <writeMCP>
	writeMCP(MCP_RXB0CTRL, 0b01100000); //Disable all Filters buffer 0 //Todo, by names
     12a:	80 e6       	ldi	r24, 0x60	; 96
     12c:	60 e6       	ldi	r22, 0x60	; 96
     12e:	0e 94 b3 04 	call	0x966	; 0x966 <writeMCP>
	writeMCP(MCP_RXB1CTRL, 0b01100000); //Disable all Filters buffer 1
     132:	80 e7       	ldi	r24, 0x70	; 112
     134:	60 e6       	ldi	r22, 0x60	; 96
     136:	0e 94 b3 04 	call	0x966	; 0x966 <writeMCP>
	writeMCP(MCP_CANINTF,0x00); //Clear Pending Interrupts
     13a:	8c e2       	ldi	r24, 0x2C	; 44
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	0e 94 b3 04 	call	0x966	; 0x966 <writeMCP>
	writeMCP(MCP_CANINTE, 0x1F); //Enable reception interrupts on both buffers
     142:	8b e2       	ldi	r24, 0x2B	; 43
     144:	6f e1       	ldi	r22, 0x1F	; 31
     146:	0e 94 b3 04 	call	0x966	; 0x966 <writeMCP>
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <__vector_5>:
 */ 

#include "globals.h"

ISR(INT4_vect) //Interrupt routine for the CAN Transciver
{
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	00 90 5b 00 	lds	r0, 0x005B
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	2f 93       	push	r18
     166:	3f 93       	push	r19
     168:	4f 93       	push	r20
     16a:	5f 93       	push	r21
     16c:	6f 93       	push	r22
     16e:	7f 93       	push	r23
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	0f 92       	push	r0
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
	uint8_t mcp_flags;
	mcp_flags = readMCP(MCP_CANINTF);
     186:	8c e2       	ldi	r24, 0x2C	; 44
     188:	0e 94 70 04 	call	0x8e0	; 0x8e0 <readMCP>
     18c:	89 83       	std	Y+1, r24	; 0x01
	writeMCP(MCP_CANINTF,0x00); //Clear Flags
     18e:	8c e2       	ldi	r24, 0x2C	; 44
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	0e 94 b3 04 	call	0x966	; 0x966 <writeMCP>
	
	//printf("CAN MCP General interrupt handler \r\n");
	
    if(mcp_flags & 1 << 0) {  //RX0IF
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	81 70       	andi	r24, 0x01	; 1
     19e:	90 70       	andi	r25, 0x00	; 0
     1a0:	88 23       	and	r24, r24
     1a2:	29 f0       	breq	.+10     	; 0x1ae <__vector_5+0x5a>
		//printf("CAN MCP Interrupt RX0IF Triggered \r\n");	
		flagMCP |= 	(1 << 0);
     1a4:	80 91 a0 02 	lds	r24, 0x02A0
     1a8:	81 60       	ori	r24, 0x01	; 1
     1aa:	80 93 a0 02 	sts	0x02A0, r24
		
	}  if(mcp_flags & 1 << 1) { //RX1IF
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	88 2f       	mov	r24, r24
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	82 70       	andi	r24, 0x02	; 2
     1b6:	90 70       	andi	r25, 0x00	; 0
     1b8:	00 97       	sbiw	r24, 0x00	; 0
     1ba:	29 f0       	breq	.+10     	; 0x1c6 <__vector_5+0x72>
		//printf("CAN MCP Interrupt RX1IF Triggered \r\n");
		flagMCP |= 	(1 << 1);
     1bc:	80 91 a0 02 	lds	r24, 0x02A0
     1c0:	82 60       	ori	r24, 0x02	; 2
     1c2:	80 93 a0 02 	sts	0x02A0, r24
		
	}  if(mcp_flags & 1 << 2) { //TX0IF
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	88 2f       	mov	r24, r24
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	84 70       	andi	r24, 0x04	; 4
     1ce:	90 70       	andi	r25, 0x00	; 0
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	29 f0       	breq	.+10     	; 0x1de <__vector_5+0x8a>
		//printf("CAN MCP Interrupt TX0IF Triggered \r\n");
		flagMCP |= 	(1 << 2);
     1d4:	80 91 a0 02 	lds	r24, 0x02A0
     1d8:	84 60       	ori	r24, 0x04	; 4
     1da:	80 93 a0 02 	sts	0x02A0, r24
		
	}  if(mcp_flags & 1 << 3) { //TX1IF
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	88 2f       	mov	r24, r24
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	88 70       	andi	r24, 0x08	; 8
     1e6:	90 70       	andi	r25, 0x00	; 0
     1e8:	00 97       	sbiw	r24, 0x00	; 0
     1ea:	29 f0       	breq	.+10     	; 0x1f6 <__vector_5+0xa2>
	//	printf("CAN MCP Interrupt TX1IF Triggered \r\n");
		flagMCP |= 	(1 << 3);
     1ec:	80 91 a0 02 	lds	r24, 0x02A0
     1f0:	88 60       	ori	r24, 0x08	; 8
     1f2:	80 93 a0 02 	sts	0x02A0, r24
		
	}  if(mcp_flags & 1 << 4) { //TX2IF
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	88 2f       	mov	r24, r24
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	80 71       	andi	r24, 0x10	; 16
     1fe:	90 70       	andi	r25, 0x00	; 0
     200:	00 97       	sbiw	r24, 0x00	; 0
     202:	29 f0       	breq	.+10     	; 0x20e <__vector_5+0xba>
	//	printf("CAN MCP Interrupt TX2IF Triggered \r\n");
		flagMCP |= 	(1 << 4);
     204:	80 91 a0 02 	lds	r24, 0x02A0
     208:	80 61       	ori	r24, 0x10	; 16
     20a:	80 93 a0 02 	sts	0x02A0, r24
	} 

		


}	
     20e:	0f 90       	pop	r0
     210:	cf 91       	pop	r28
     212:	df 91       	pop	r29
     214:	ff 91       	pop	r31
     216:	ef 91       	pop	r30
     218:	bf 91       	pop	r27
     21a:	af 91       	pop	r26
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	7f 91       	pop	r23
     222:	6f 91       	pop	r22
     224:	5f 91       	pop	r21
     226:	4f 91       	pop	r20
     228:	3f 91       	pop	r19
     22a:	2f 91       	pop	r18
     22c:	0f 90       	pop	r0
     22e:	00 92 5b 00 	sts	0x005B, r0
     232:	0f 90       	pop	r0
     234:	0f be       	out	0x3f, r0	; 63
     236:	0f 90       	pop	r0
     238:	1f 90       	pop	r1
     23a:	18 95       	reti

0000023c <initInterrupts>:
 
void initInterrupts(){
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
// 	EMCUCR &= ~(1<<ISC2); //Set interrupt on 0 at INT2
// 	GICR |= (1<<INT1);
// 	GICR |= (1<<INT0); 
// 	GICR |= (1<<INT2); 
//TODO: Configure to our interrupts
	DDRE &= ~(1<<PE4); //Set PE5 as Input
     244:	82 e2       	ldi	r24, 0x22	; 34
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	22 e2       	ldi	r18, 0x22	; 34
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2f 7e       	andi	r18, 0xEF	; 239
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	PORTD |= (1<<PE4); //Set pullup for PE5
     256:	82 e3       	ldi	r24, 0x32	; 50
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	22 e3       	ldi	r18, 0x32	; 50
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	20 61       	ori	r18, 0x10	; 16
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
	EICRB |= (1<<ISC41);
     268:	8a e5       	ldi	r24, 0x5A	; 90
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	2a e5       	ldi	r18, 0x5A	; 90
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	f9 01       	movw	r30, r18
     272:	20 81       	ld	r18, Z
     274:	22 60       	ori	r18, 0x02	; 2
     276:	fc 01       	movw	r30, r24
     278:	20 83       	st	Z, r18
	EICRB &= ~(1<<ISC40); //Set interrupts on falling edge at PE5
     27a:	8a e5       	ldi	r24, 0x5A	; 90
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	2a e5       	ldi	r18, 0x5A	; 90
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	f9 01       	movw	r30, r18
     284:	20 81       	ld	r18, Z
     286:	2e 7f       	andi	r18, 0xFE	; 254
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
	EIMSK |= (1<<INT4); //Enable interrupt on PE5
     28c:	89 e5       	ldi	r24, 0x59	; 89
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	29 e5       	ldi	r18, 0x59	; 89
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	f9 01       	movw	r30, r18
     296:	20 81       	ld	r18, Z
     298:	20 61       	ori	r18, 0x10	; 16
     29a:	fc 01       	movw	r30, r24
     29c:	20 83       	st	Z, r18
	sei();
     29e:	78 94       	sei
}
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <main>:




int main(void)
{
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	c4 55       	subi	r28, 0x54	; 84
     2b4:	d0 40       	sbci	r29, 0x00	; 0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
	struct canMessage m2s,rm;
	initUART(UBBR);
     2c0:	8b e1       	ldi	r24, 0x1B	; 27
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 31 07 	call	0xe62	; 0xe62 <initUART>
	initInterrupts();
     2c8:	0e 94 1e 01 	call	0x23c	; 0x23c <initInterrupts>
	initSPI();
     2cc:	0e 94 9e 03 	call	0x73c	; 0x73c <initSPI>
	printf("\r\n \r\n Hi, I am NODE 2 and this is NOT jackass, but we are getting there\r\n");
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <puts>
	resetMCP();
     2d8:	0e 94 bc 03 	call	0x778	; 0x778 <resetMCP>
	initCAN(NORMAL);	
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 67 00 	call	0xce	; 0xce <initCAN>
	writeMCP(MCP_CANINTF, 0x01);
     2e2:	8c e2       	ldi	r24, 0x2C	; 44
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	0e 94 b3 04 	call	0x966	; 0x966 <writeMCP>
	char newCurrent = 0;
     2ea:	19 82       	std	Y+1, r1	; 0x01
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 ea       	ldi	r26, 0xA0	; 160
     2f2:	b0 e4       	ldi	r27, 0x40	; 64
     2f4:	8a 83       	std	Y+2, r24	; 0x02
     2f6:	9b 83       	std	Y+3, r25	; 0x03
     2f8:	ac 83       	std	Y+4, r26	; 0x04
     2fa:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     2fc:	6a 81       	ldd	r22, Y+2	; 0x02
     2fe:	7b 81       	ldd	r23, Y+3	; 0x03
     300:	8c 81       	ldd	r24, Y+4	; 0x04
     302:	9d 81       	ldd	r25, Y+5	; 0x05
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	4a e7       	ldi	r20, 0x7A	; 122
     30a:	54 e4       	ldi	r21, 0x44	; 68
     30c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     310:	dc 01       	movw	r26, r24
     312:	cb 01       	movw	r24, r22
     314:	8e 83       	std	Y+6, r24	; 0x06
     316:	9f 83       	std	Y+7, r25	; 0x07
     318:	a8 87       	std	Y+8, r26	; 0x08
     31a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     31c:	11 e0       	ldi	r17, 0x01	; 1
     31e:	6e 81       	ldd	r22, Y+6	; 0x06
     320:	7f 81       	ldd	r23, Y+7	; 0x07
     322:	88 85       	ldd	r24, Y+8	; 0x08
     324:	99 85       	ldd	r25, Y+9	; 0x09
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e8       	ldi	r20, 0x80	; 128
     32c:	5f e3       	ldi	r21, 0x3F	; 63
     32e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__ltsf2>
     332:	88 23       	and	r24, r24
     334:	0c f0       	brlt	.+2      	; 0x338 <main+0x92>
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	11 23       	and	r17, r17
     33a:	29 f0       	breq	.+10     	; 0x346 <main+0xa0>
		__ticks = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	9b 87       	std	Y+11, r25	; 0x0b
     342:	8a 87       	std	Y+10, r24	; 0x0a
     344:	46 c0       	rjmp	.+140    	; 0x3d2 <main+0x12c>
	else if (__tmp > 65535)
     346:	11 e0       	ldi	r17, 0x01	; 1
     348:	6e 81       	ldd	r22, Y+6	; 0x06
     34a:	7f 81       	ldd	r23, Y+7	; 0x07
     34c:	88 85       	ldd	r24, Y+8	; 0x08
     34e:	99 85       	ldd	r25, Y+9	; 0x09
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	4f e7       	ldi	r20, 0x7F	; 127
     356:	57 e4       	ldi	r21, 0x47	; 71
     358:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__gtsf2>
     35c:	18 16       	cp	r1, r24
     35e:	0c f0       	brlt	.+2      	; 0x362 <main+0xbc>
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	11 23       	and	r17, r17
     364:	61 f1       	breq	.+88     	; 0x3be <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     366:	6a 81       	ldd	r22, Y+2	; 0x02
     368:	7b 81       	ldd	r23, Y+3	; 0x03
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
     36c:	9d 81       	ldd	r25, Y+5	; 0x05
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e2       	ldi	r20, 0x20	; 32
     374:	51 e4       	ldi	r21, 0x41	; 65
     376:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fixunssfsi>
     386:	dc 01       	movw	r26, r24
     388:	cb 01       	movw	r24, r22
     38a:	9b 87       	std	Y+11, r25	; 0x0b
     38c:	8a 87       	std	Y+10, r24	; 0x0a
     38e:	12 c0       	rjmp	.+36     	; 0x3b4 <main+0x10e>
     390:	84 e6       	ldi	r24, 0x64	; 100
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9d 87       	std	Y+13, r25	; 0x0d
     396:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     398:	8c 85       	ldd	r24, Y+12	; 0x0c
     39a:	9d 85       	ldd	r25, Y+13	; 0x0d
     39c:	8c 01       	movw	r16, r24
     39e:	c8 01       	movw	r24, r16
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <main+0xfa>
     3a4:	8c 01       	movw	r16, r24
     3a6:	1d 87       	std	Y+13, r17	; 0x0d
     3a8:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3aa:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ac:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	9b 87       	std	Y+11, r25	; 0x0b
     3b2:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     3b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	51 f7       	brne	.-44     	; 0x390 <main+0xea>
     3bc:	17 c0       	rjmp	.+46     	; 0x3ec <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3be:	6e 81       	ldd	r22, Y+6	; 0x06
     3c0:	7f 81       	ldd	r23, Y+7	; 0x07
     3c2:	88 85       	ldd	r24, Y+8	; 0x08
     3c4:	99 85       	ldd	r25, Y+9	; 0x09
     3c6:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fixunssfsi>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	9b 87       	std	Y+11, r25	; 0x0b
     3d0:	8a 87       	std	Y+10, r24	; 0x0a
     3d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     3d6:	9f 87       	std	Y+15, r25	; 0x0f
     3d8:	8e 87       	std	Y+14, r24	; 0x0e
     3da:	8e 85       	ldd	r24, Y+14	; 0x0e
     3dc:	9f 85       	ldd	r25, Y+15	; 0x0f
     3de:	8c 01       	movw	r16, r24
     3e0:	f8 01       	movw	r30, r16
     3e2:	31 97       	sbiw	r30, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x13c>
     3e6:	8f 01       	movw	r16, r30
     3e8:	1f 87       	std	Y+15, r17	; 0x0f
     3ea:	0e 87       	std	Y+14, r16	; 0x0e
// 		
// 		fillTxBufferMCP(0,m2s);
// 		requestToSendMCP(0);
		_delay_ms(5);
	
		initPWM();
     3ec:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <initPWM>
		struct canMessage m0,m1, current;
	
	 while(1){
		
		//receiving
		if(flagMCP & 1 << 0) {
     3f0:	80 91 a0 02 	lds	r24, 0x02A0
     3f4:	88 2f       	mov	r24, r24
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	81 70       	andi	r24, 0x01	; 1
     3fa:	90 70       	andi	r25, 0x00	; 0
     3fc:	88 23       	and	r24, r24
     3fe:	f1 f0       	breq	.+60     	; 0x43c <main+0x196>
			flagMCP &= ~(1 << 0);
     400:	80 91 a0 02 	lds	r24, 0x02A0
     404:	8e 7f       	andi	r24, 0xFE	; 254
     406:	80 93 a0 02 	sts	0x02A0, r24
			m0 = readRxBufferMCP(0);
     40a:	ce 01       	movw	r24, r28
     40c:	c4 96       	adiw	r24, 0x34	; 52
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	0e 94 b4 05 	call	0xb68	; 0xb68 <readRxBufferMCP>
			current = m0;
     414:	ce 01       	movw	r24, r28
     416:	86 5b       	subi	r24, 0xB6	; 182
     418:	9f 4f       	sbci	r25, 0xFF	; 255
     41a:	9e 01       	movw	r18, r28
     41c:	2c 5c       	subi	r18, 0xCC	; 204
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	4b e0       	ldi	r20, 0x0B	; 11
     422:	f9 01       	movw	r30, r18
     424:	00 80       	ld	r0, Z
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	fc 01       	movw	r30, r24
     42c:	00 82       	st	Z, r0
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	41 50       	subi	r20, 0x01	; 1
     432:	44 23       	and	r20, r20
     434:	b1 f7       	brne	.-20     	; 0x422 <main+0x17c>
			//printf ("Buffer 0 ID: %d, Size: %d, Data: %s \r\n", m0.id, m0.size, m0.data);
			newCurrent = 1;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	89 83       	std	Y+1, r24	; 0x01
     43a:	25 c0       	rjmp	.+74     	; 0x486 <main+0x1e0>
		}
		
		else if(flagMCP & 1 << 1) {
     43c:	80 91 a0 02 	lds	r24, 0x02A0
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	82 70       	andi	r24, 0x02	; 2
     446:	90 70       	andi	r25, 0x00	; 0
     448:	00 97       	sbiw	r24, 0x00	; 0
     44a:	e9 f0       	breq	.+58     	; 0x486 <main+0x1e0>
			flagMCP &= ~(1 << 1);
     44c:	80 91 a0 02 	lds	r24, 0x02A0
     450:	8d 7f       	andi	r24, 0xFD	; 253
     452:	80 93 a0 02 	sts	0x02A0, r24
			m1 = readRxBufferMCP(1);
     456:	ce 01       	movw	r24, r28
     458:	cf 96       	adiw	r24, 0x3f	; 63
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	0e 94 b4 05 	call	0xb68	; 0xb68 <readRxBufferMCP>
			current = m1;
     460:	ce 01       	movw	r24, r28
     462:	86 5b       	subi	r24, 0xB6	; 182
     464:	9f 4f       	sbci	r25, 0xFF	; 255
     466:	9e 01       	movw	r18, r28
     468:	21 5c       	subi	r18, 0xC1	; 193
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	4b e0       	ldi	r20, 0x0B	; 11
     46e:	f9 01       	movw	r30, r18
     470:	00 80       	ld	r0, Z
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	fc 01       	movw	r30, r24
     478:	00 82       	st	Z, r0
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	41 50       	subi	r20, 0x01	; 1
     47e:	44 23       	and	r20, r20
     480:	b1 f7       	brne	.-20     	; 0x46e <main+0x1c8>
			//printf ("Buffer 1 ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
			newCurrent = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(newCurrent) {
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	88 23       	and	r24, r24
     48a:	d1 f0       	breq	.+52     	; 0x4c0 <main+0x21a>
		
			switch (current.id){
     48c:	ce 01       	movw	r24, r28
     48e:	86 5b       	subi	r24, 0xB6	; 182
     490:	9f 4f       	sbci	r25, 0xFF	; 255
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	91 81       	ldd	r25, Z+1	; 0x01
     498:	8a 30       	cpi	r24, 0x0A	; 10
     49a:	91 05       	cpc	r25, r1
     49c:	49 f4       	brne	.+18     	; 0x4b0 <main+0x20a>
				case JOY_MESSAGE:
				//	printf("Joystick X: %d    Y: %d   DIR: %d \r\n", current.data[0],current.data[1],current.data[2]);
					newCurrent = 0;
     49e:	19 82       	std	Y+1, r1	; 0x01
					setPWM(current.data[0]);
     4a0:	ce 01       	movw	r24, r28
     4a2:	86 5b       	subi	r24, 0xB6	; 182
     4a4:	9f 4f       	sbci	r25, 0xFF	; 255
     4a6:	fc 01       	movw	r30, r24
     4a8:	83 81       	ldd	r24, Z+3	; 0x03
     4aa:	0e 94 11 03 	call	0x622	; 0x622 <setPWM>
					break;
     4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <main+0x21a>
				default:
					newCurrent = 0;
     4b0:	19 82       	std	Y+1, r1	; 0x01
					//printf ("Current CAN message ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
					setPWM(current.data[0]);
     4b2:	ce 01       	movw	r24, r28
     4b4:	86 5b       	subi	r24, 0xB6	; 182
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	fc 01       	movw	r30, r24
     4ba:	83 81       	ldd	r24, Z+3	; 0x03
     4bc:	0e 94 11 03 	call	0x622	; 0x622 <setPWM>
					break;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	a8 e4       	ldi	r26, 0x48	; 72
     4c6:	b2 e4       	ldi	r27, 0x42	; 66
     4c8:	88 8b       	std	Y+16, r24	; 0x10
     4ca:	99 8b       	std	Y+17, r25	; 0x11
     4cc:	aa 8b       	std	Y+18, r26	; 0x12
     4ce:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     4d0:	68 89       	ldd	r22, Y+16	; 0x10
     4d2:	79 89       	ldd	r23, Y+17	; 0x11
     4d4:	8a 89       	ldd	r24, Y+18	; 0x12
     4d6:	9b 89       	ldd	r25, Y+19	; 0x13
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	4a e7       	ldi	r20, 0x7A	; 122
     4de:	54 e4       	ldi	r21, 0x44	; 68
     4e0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	8c 8b       	std	Y+20, r24	; 0x14
     4ea:	9d 8b       	std	Y+21, r25	; 0x15
     4ec:	ae 8b       	std	Y+22, r26	; 0x16
     4ee:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     4f0:	11 e0       	ldi	r17, 0x01	; 1
     4f2:	6c 89       	ldd	r22, Y+20	; 0x14
     4f4:	7d 89       	ldd	r23, Y+21	; 0x15
     4f6:	8e 89       	ldd	r24, Y+22	; 0x16
     4f8:	9f 89       	ldd	r25, Y+23	; 0x17
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5f e3       	ldi	r21, 0x3F	; 63
     502:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__ltsf2>
     506:	88 23       	and	r24, r24
     508:	0c f0       	brlt	.+2      	; 0x50c <main+0x266>
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	11 23       	and	r17, r17
     50e:	29 f0       	breq	.+10     	; 0x51a <main+0x274>
		__ticks = 1;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	99 8f       	std	Y+25, r25	; 0x19
     516:	88 8f       	std	Y+24, r24	; 0x18
     518:	46 c0       	rjmp	.+140    	; 0x5a6 <main+0x300>
	else if (__tmp > 65535)
     51a:	11 e0       	ldi	r17, 0x01	; 1
     51c:	6c 89       	ldd	r22, Y+20	; 0x14
     51e:	7d 89       	ldd	r23, Y+21	; 0x15
     520:	8e 89       	ldd	r24, Y+22	; 0x16
     522:	9f 89       	ldd	r25, Y+23	; 0x17
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	3f ef       	ldi	r19, 0xFF	; 255
     528:	4f e7       	ldi	r20, 0x7F	; 127
     52a:	57 e4       	ldi	r21, 0x47	; 71
     52c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__gtsf2>
     530:	18 16       	cp	r1, r24
     532:	0c f0       	brlt	.+2      	; 0x536 <main+0x290>
     534:	10 e0       	ldi	r17, 0x00	; 0
     536:	11 23       	and	r17, r17
     538:	61 f1       	breq	.+88     	; 0x592 <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     53a:	68 89       	ldd	r22, Y+16	; 0x10
     53c:	79 89       	ldd	r23, Y+17	; 0x11
     53e:	8a 89       	ldd	r24, Y+18	; 0x12
     540:	9b 89       	ldd	r25, Y+19	; 0x13
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	40 e2       	ldi	r20, 0x20	; 32
     548:	51 e4       	ldi	r21, 0x41	; 65
     54a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     54e:	dc 01       	movw	r26, r24
     550:	cb 01       	movw	r24, r22
     552:	bc 01       	movw	r22, r24
     554:	cd 01       	movw	r24, r26
     556:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fixunssfsi>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	99 8f       	std	Y+25, r25	; 0x19
     560:	88 8f       	std	Y+24, r24	; 0x18
     562:	12 c0       	rjmp	.+36     	; 0x588 <main+0x2e2>
     564:	84 e6       	ldi	r24, 0x64	; 100
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	9b 8f       	std	Y+27, r25	; 0x1b
     56a:	8a 8f       	std	Y+26, r24	; 0x1a
     56c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     56e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     570:	8c 01       	movw	r16, r24
     572:	c8 01       	movw	r24, r16
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <main+0x2ce>
     578:	8c 01       	movw	r16, r24
     57a:	1b 8f       	std	Y+27, r17	; 0x1b
     57c:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     57e:	88 8d       	ldd	r24, Y+24	; 0x18
     580:	99 8d       	ldd	r25, Y+25	; 0x19
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	99 8f       	std	Y+25, r25	; 0x19
     586:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     588:	88 8d       	ldd	r24, Y+24	; 0x18
     58a:	99 8d       	ldd	r25, Y+25	; 0x19
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	51 f7       	brne	.-44     	; 0x564 <main+0x2be>
// 		fillTxBufferMCP(2,m2s);
// 		requestToSendMCP(2);
	
	_delay_ms(50);
	
	}
     590:	2f cf       	rjmp	.-418    	; 0x3f0 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     592:	6c 89       	ldd	r22, Y+20	; 0x14
     594:	7d 89       	ldd	r23, Y+21	; 0x15
     596:	8e 89       	ldd	r24, Y+22	; 0x16
     598:	9f 89       	ldd	r25, Y+23	; 0x17
     59a:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fixunssfsi>
     59e:	dc 01       	movw	r26, r24
     5a0:	cb 01       	movw	r24, r22
     5a2:	99 8f       	std	Y+25, r25	; 0x19
     5a4:	88 8f       	std	Y+24, r24	; 0x18
     5a6:	88 8d       	ldd	r24, Y+24	; 0x18
     5a8:	99 8d       	ldd	r25, Y+25	; 0x19
     5aa:	9d 8f       	std	Y+29, r25	; 0x1d
     5ac:	8c 8f       	std	Y+28, r24	; 0x1c
     5ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5b0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5b2:	8c 01       	movw	r16, r24
     5b4:	f8 01       	movw	r30, r16
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <main+0x310>
     5ba:	8f 01       	movw	r16, r30
     5bc:	1d 8f       	std	Y+29, r17	; 0x1d
     5be:	0c 8f       	std	Y+28, r16	; 0x1c
     5c0:	17 cf       	rjmp	.-466    	; 0x3f0 <main+0x14a>

000005c2 <initPWM>:
 *  Author: jordifr
 */ 

#include "pwm.h"

void initPWM(){
     5c2:	df 93       	push	r29
     5c4:	cf 93       	push	r28
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
	ICR1 = 10400;
     5ca:	86 e4       	ldi	r24, 0x46	; 70
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	20 ea       	ldi	r18, 0xA0	; 160
     5d0:	38 e2       	ldi	r19, 0x28	; 40
     5d2:	fc 01       	movw	r30, r24
     5d4:	31 83       	std	Z+1, r19	; 0x01
     5d6:	20 83       	st	Z, r18
	OCR1B = CENTRAL_POS;
     5d8:	88 e4       	ldi	r24, 0x48	; 72
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	33 e0       	ldi	r19, 0x03	; 3
     5e0:	fc 01       	movw	r30, r24
     5e2:	31 83       	std	Z+1, r19	; 0x01
     5e4:	20 83       	st	Z, r18
	TCCR1A |= (1 << COM1B1) | (1 << WGM11);
     5e6:	8f e4       	ldi	r24, 0x4F	; 79
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	2f e4       	ldi	r18, 0x4F	; 79
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	f9 01       	movw	r30, r18
     5f0:	20 81       	ld	r18, Z
     5f2:	22 62       	ori	r18, 0x22	; 34
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10); //Sets mode 14 and preescaler to 8 
     5f8:	8e e4       	ldi	r24, 0x4E	; 78
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2e e4       	ldi	r18, 0x4E	; 78
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	2a 61       	ori	r18, 0x1A	; 26
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
	DDRB |= (1 << PB5) | (1 << PB6); //Set as output
     60a:	87 e3       	ldi	r24, 0x37	; 55
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	27 e3       	ldi	r18, 0x37	; 55
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	20 66       	ori	r18, 0x60	; 96
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
	
}
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <setPWM>:

void setPWM(uint8_t pos){
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	00 d0       	rcall	.+0      	; 0x628 <setPWM+0x6>
     628:	0f 92       	push	r0
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	8b 83       	std	Y+3, r24	; 0x03
	int16_t t;
	t = (int16_t) (MIN_POS+pos*2.4);
     630:	8b 81       	ldd	r24, Y+3	; 0x03
     632:	88 2f       	mov	r24, r24
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	aa 27       	eor	r26, r26
     638:	97 fd       	sbrc	r25, 7
     63a:	a0 95       	com	r26
     63c:	ba 2f       	mov	r27, r26
     63e:	bc 01       	movw	r22, r24
     640:	cd 01       	movw	r24, r26
     642:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	bc 01       	movw	r22, r24
     64c:	cd 01       	movw	r24, r26
     64e:	2a e9       	ldi	r18, 0x9A	; 154
     650:	39 e9       	ldi	r19, 0x99	; 153
     652:	49 e1       	ldi	r20, 0x19	; 25
     654:	50 e4       	ldi	r21, 0x40	; 64
     656:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	bc 01       	movw	r22, r24
     660:	cd 01       	movw	r24, r26
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e8       	ldi	r19, 0x80	; 128
     666:	46 ee       	ldi	r20, 0xE6	; 230
     668:	53 e4       	ldi	r21, 0x43	; 67
     66a:	0e 94 10 09 	call	0x1220	; 0x1220 <__addsf3>
     66e:	dc 01       	movw	r26, r24
     670:	cb 01       	movw	r24, r22
     672:	bc 01       	movw	r22, r24
     674:	cd 01       	movw	r24, r26
     676:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fixsfsi>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	9a 83       	std	Y+2, r25	; 0x02
     680:	89 83       	std	Y+1, r24	; 0x01
	
	if (t < MIN_POS) t = MIN_POS;
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	8d 3c       	cpi	r24, 0xCD	; 205
     68a:	92 07       	cpc	r25, r18
     68c:	24 f4       	brge	.+8      	; 0x696 <setPWM+0x74>
     68e:	8d ec       	ldi	r24, 0xCD	; 205
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	9a 83       	std	Y+2, r25	; 0x02
     694:	89 83       	std	Y+1, r24	; 0x01
	if (t > MAX_POS) t = MAX_POS;
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	e4 e0       	ldi	r30, 0x04	; 4
     69c:	84 33       	cpi	r24, 0x34	; 52
     69e:	9e 07       	cpc	r25, r30
     6a0:	24 f0       	brlt	.+8      	; 0x6aa <setPWM+0x88>
     6a2:	83 e3       	ldi	r24, 0x33	; 51
     6a4:	94 e0       	ldi	r25, 0x04	; 4
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 83       	std	Y+1, r24	; 0x01
	
	OCR1B = t;
     6aa:	88 e4       	ldi	r24, 0x48	; 72
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	29 81       	ldd	r18, Y+1	; 0x01
     6b0:	3a 81       	ldd	r19, Y+2	; 0x02
     6b2:	fc 01       	movw	r30, r24
     6b4:	31 83       	std	Z+1, r19	; 0x01
     6b6:	20 83       	st	Z, r18
	printf("pos = %d; OCR = %d;delta = %d; MIN: %d; MAX %d***  DELTA_POS/255 : %d \n\r",pos,OCR1A,DELTA_POS,MIN_POS,MAX_POS, DELTA_POS/255);
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	48 2f       	mov	r20, r24
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	8a e4       	ldi	r24, 0x4A	; 74
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 81       	ld	r18, Z
     6c6:	31 81       	ldd	r19, Z+1	; 0x01
     6c8:	8d b7       	in	r24, 0x3d	; 61
     6ca:	9e b7       	in	r25, 0x3e	; 62
     6cc:	0e 97       	sbiw	r24, 0x0e	; 14
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	9e bf       	out	0x3e, r25	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	8d bf       	out	0x3d, r24	; 61
     6d8:	8d b7       	in	r24, 0x3d	; 61
     6da:	9e b7       	in	r25, 0x3e	; 62
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	69 e4       	ldi	r22, 0x49	; 73
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	fc 01       	movw	r30, r24
     6e4:	71 83       	std	Z+1, r23	; 0x01
     6e6:	60 83       	st	Z, r22
     6e8:	fc 01       	movw	r30, r24
     6ea:	53 83       	std	Z+3, r21	; 0x03
     6ec:	42 83       	std	Z+2, r20	; 0x02
     6ee:	fc 01       	movw	r30, r24
     6f0:	35 83       	std	Z+5, r19	; 0x05
     6f2:	24 83       	std	Z+4, r18	; 0x04
     6f4:	26 e6       	ldi	r18, 0x66	; 102
     6f6:	32 e0       	ldi	r19, 0x02	; 2
     6f8:	fc 01       	movw	r30, r24
     6fa:	37 83       	std	Z+7, r19	; 0x07
     6fc:	26 83       	std	Z+6, r18	; 0x06
     6fe:	2d ec       	ldi	r18, 0xCD	; 205
     700:	31 e0       	ldi	r19, 0x01	; 1
     702:	fc 01       	movw	r30, r24
     704:	31 87       	std	Z+9, r19	; 0x09
     706:	20 87       	std	Z+8, r18	; 0x08
     708:	23 e3       	ldi	r18, 0x33	; 51
     70a:	34 e0       	ldi	r19, 0x04	; 4
     70c:	fc 01       	movw	r30, r24
     70e:	33 87       	std	Z+11, r19	; 0x0b
     710:	22 87       	std	Z+10, r18	; 0x0a
     712:	22 e0       	ldi	r18, 0x02	; 2
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	fc 01       	movw	r30, r24
     718:	35 87       	std	Z+13, r19	; 0x0d
     71a:	24 87       	std	Z+12, r18	; 0x0c
     71c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <printf>
     720:	8d b7       	in	r24, 0x3d	; 61
     722:	9e b7       	in	r25, 0x3e	; 62
     724:	0e 96       	adiw	r24, 0x0e	; 14
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	9e bf       	out	0x3e, r25	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	8d bf       	out	0x3d, r24	; 61
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	cf 91       	pop	r28
     738:	df 91       	pop	r29
     73a:	08 95       	ret

0000073c <initSPI>:
 */ 


#include "spi.h"

void initSPI(){
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
	//Setting pins and directions 
	//MOSI, SCK, !SS as output
	DDRB = (1 << DDB2) | (1 << DDB1)  | (1 << DDB0);
     744:	87 e3       	ldi	r24, 0x37	; 55
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	27 e0       	ldi	r18, 0x07	; 7
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
	//DDRB &= ~(1 << PB6);
	PORTB |=  (1 << PB0); //Pullup to avoid wrong fallback to slave mode
     74e:	88 e3       	ldi	r24, 0x38	; 56
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	28 e3       	ldi	r18, 0x38	; 56
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	f9 01       	movw	r30, r18
     758:	20 81       	ld	r18, Z
     75a:	21 60       	ori	r18, 0x01	; 1
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
	//MISO is Overriden as input, TODO: check if it work
	SPCR |=   (1 << SPE) | (1 << MSTR) | (1<<SPR0) ; // fosc/16
     760:	8d e2       	ldi	r24, 0x2D	; 45
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	2d e2       	ldi	r18, 0x2D	; 45
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	21 65       	ori	r18, 0x51	; 81
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	//configured as Master, NOT producing interrupts
	
}
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <resetMCP>:

void resetMCP(){
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	2e 97       	sbiw	r28, 0x0e	; 14
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
	select_mcp();
     790:	88 e3       	ldi	r24, 0x38	; 56
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	28 e3       	ldi	r18, 0x38	; 56
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	f9 01       	movw	r30, r18
     79a:	20 81       	ld	r18, Z
     79c:	2e 7f       	andi	r18, 0xFE	; 254
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
	SPDR = MCP_RESET;
     7a2:	8f e2       	ldi	r24, 0x2F	; 47
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	20 ec       	ldi	r18, 0xC0	; 192
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
     wait_spi();
     7ac:	8e e2       	ldi	r24, 0x2E	; 46
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	fc 01       	movw	r30, r24
     7b2:	80 81       	ld	r24, Z
     7b4:	88 23       	and	r24, r24
     7b6:	d4 f7       	brge	.-12     	; 0x7ac <resetMCP+0x34>
	deselect_mcp();
     7b8:	88 e3       	ldi	r24, 0x38	; 56
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	28 e3       	ldi	r18, 0x38	; 56
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	21 60       	ori	r18, 0x01	; 1
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	a0 e2       	ldi	r26, 0x20	; 32
     7d0:	b1 e4       	ldi	r27, 0x41	; 65
     7d2:	89 83       	std	Y+1, r24	; 0x01
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	ab 83       	std	Y+3, r26	; 0x03
     7d8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7da:	69 81       	ldd	r22, Y+1	; 0x01
     7dc:	7a 81       	ldd	r23, Y+2	; 0x02
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	9c 81       	ldd	r25, Y+4	; 0x04
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	4a e7       	ldi	r20, 0x7A	; 122
     7e8:	54 e4       	ldi	r21, 0x44	; 68
     7ea:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	8d 83       	std	Y+5, r24	; 0x05
     7f4:	9e 83       	std	Y+6, r25	; 0x06
     7f6:	af 83       	std	Y+7, r26	; 0x07
     7f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7fa:	11 e0       	ldi	r17, 0x01	; 1
     7fc:	6d 81       	ldd	r22, Y+5	; 0x05
     7fe:	7e 81       	ldd	r23, Y+6	; 0x06
     800:	8f 81       	ldd	r24, Y+7	; 0x07
     802:	98 85       	ldd	r25, Y+8	; 0x08
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__ltsf2>
     810:	88 23       	and	r24, r24
     812:	0c f0       	brlt	.+2      	; 0x816 <resetMCP+0x9e>
     814:	10 e0       	ldi	r17, 0x00	; 0
     816:	11 23       	and	r17, r17
     818:	29 f0       	breq	.+10     	; 0x824 <resetMCP+0xac>
		__ticks = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9a 87       	std	Y+10, r25	; 0x0a
     820:	89 87       	std	Y+9, r24	; 0x09
     822:	46 c0       	rjmp	.+140    	; 0x8b0 <resetMCP+0x138>
	else if (__tmp > 65535)
     824:	11 e0       	ldi	r17, 0x01	; 1
     826:	6d 81       	ldd	r22, Y+5	; 0x05
     828:	7e 81       	ldd	r23, Y+6	; 0x06
     82a:	8f 81       	ldd	r24, Y+7	; 0x07
     82c:	98 85       	ldd	r25, Y+8	; 0x08
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	3f ef       	ldi	r19, 0xFF	; 255
     832:	4f e7       	ldi	r20, 0x7F	; 127
     834:	57 e4       	ldi	r21, 0x47	; 71
     836:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__gtsf2>
     83a:	18 16       	cp	r1, r24
     83c:	0c f0       	brlt	.+2      	; 0x840 <resetMCP+0xc8>
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	11 23       	and	r17, r17
     842:	61 f1       	breq	.+88     	; 0x89c <resetMCP+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e2       	ldi	r20, 0x20	; 32
     852:	51 e4       	ldi	r21, 0x41	; 65
     854:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	bc 01       	movw	r22, r24
     85e:	cd 01       	movw	r24, r26
     860:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fixunssfsi>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	9a 87       	std	Y+10, r25	; 0x0a
     86a:	89 87       	std	Y+9, r24	; 0x09
     86c:	12 c0       	rjmp	.+36     	; 0x892 <resetMCP+0x11a>
     86e:	84 e6       	ldi	r24, 0x64	; 100
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	9c 87       	std	Y+12, r25	; 0x0c
     874:	8b 87       	std	Y+11, r24	; 0x0b
     876:	8b 85       	ldd	r24, Y+11	; 0x0b
     878:	9c 85       	ldd	r25, Y+12	; 0x0c
     87a:	8c 01       	movw	r16, r24
     87c:	c8 01       	movw	r24, r16
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <resetMCP+0x106>
     882:	8c 01       	movw	r16, r24
     884:	1c 87       	std	Y+12, r17	; 0x0c
     886:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     888:	89 85       	ldd	r24, Y+9	; 0x09
     88a:	9a 85       	ldd	r25, Y+10	; 0x0a
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	9a 87       	std	Y+10, r25	; 0x0a
     890:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     892:	89 85       	ldd	r24, Y+9	; 0x09
     894:	9a 85       	ldd	r25, Y+10	; 0x0a
     896:	00 97       	sbiw	r24, 0x00	; 0
     898:	51 f7       	brne	.-44     	; 0x86e <resetMCP+0xf6>
     89a:	17 c0       	rjmp	.+46     	; 0x8ca <resetMCP+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     89c:	6d 81       	ldd	r22, Y+5	; 0x05
     89e:	7e 81       	ldd	r23, Y+6	; 0x06
     8a0:	8f 81       	ldd	r24, Y+7	; 0x07
     8a2:	98 85       	ldd	r25, Y+8	; 0x08
     8a4:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	9a 87       	std	Y+10, r25	; 0x0a
     8ae:	89 87       	std	Y+9, r24	; 0x09
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	9e 87       	std	Y+14, r25	; 0x0e
     8b6:	8d 87       	std	Y+13, r24	; 0x0d
     8b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     8bc:	8c 01       	movw	r16, r24
     8be:	f8 01       	movw	r30, r16
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <resetMCP+0x148>
     8c4:	8f 01       	movw	r16, r30
     8c6:	1e 87       	std	Y+14, r17	; 0x0e
     8c8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	//Resets the SPI-CAN controller and waits for it to be ready
}
     8ca:	2e 96       	adiw	r28, 0x0e	; 14
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	cf 91       	pop	r28
     8d8:	df 91       	pop	r29
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <readMCP>:

uint8_t readMCP(char address){
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <readMCP+0x6>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t r;
	select_mcp();
     8ec:	88 e3       	ldi	r24, 0x38	; 56
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	28 e3       	ldi	r18, 0x38	; 56
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	f9 01       	movw	r30, r18
     8f6:	20 81       	ld	r18, Z
     8f8:	2e 7f       	andi	r18, 0xFE	; 254
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
	SPDR = MCP_READ;
     8fe:	8f e2       	ldi	r24, 0x2F	; 47
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	23 e0       	ldi	r18, 0x03	; 3
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
    wait_spi();
     908:	8e e2       	ldi	r24, 0x2E	; 46
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	fc 01       	movw	r30, r24
     90e:	80 81       	ld	r24, Z
     910:	88 23       	and	r24, r24
     912:	d4 f7       	brge	.-12     	; 0x908 <readMCP+0x28>
	SPDR = address;
     914:	8f e2       	ldi	r24, 0x2F	; 47
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	2a 81       	ldd	r18, Y+2	; 0x02
     91a:	fc 01       	movw	r30, r24
     91c:	20 83       	st	Z, r18
    wait_spi();
     91e:	8e e2       	ldi	r24, 0x2E	; 46
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	88 23       	and	r24, r24
     928:	d4 f7       	brge	.-12     	; 0x91e <readMCP+0x3e>
	SPDR = MCP_DUMMY;
     92a:	8f e2       	ldi	r24, 0x2F	; 47
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	fc 01       	movw	r30, r24
     930:	10 82       	st	Z, r1
    wait_spi();
     932:	8e e2       	ldi	r24, 0x2E	; 46
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	88 23       	and	r24, r24
     93c:	d4 f7       	brge	.-12     	; 0x932 <readMCP+0x52>
	r = SPDR;
     93e:	8f e2       	ldi	r24, 0x2F	; 47
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
     948:	88 e3       	ldi	r24, 0x38	; 56
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	28 e3       	ldi	r18, 0x38	; 56
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	f9 01       	movw	r30, r18
     952:	20 81       	ld	r18, Z
     954:	21 60       	ori	r18, 0x01	; 1
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
	return r;
     95a:	89 81       	ldd	r24, Y+1	; 0x01
}
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	08 95       	ret

00000966 <writeMCP>:

void writeMCP(char address, char data){
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	00 d0       	rcall	.+0      	; 0x96c <writeMCP+0x6>
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	6a 83       	std	Y+2, r22	; 0x02
	select_mcp();
     974:	88 e3       	ldi	r24, 0x38	; 56
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	28 e3       	ldi	r18, 0x38	; 56
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	f9 01       	movw	r30, r18
     97e:	20 81       	ld	r18, Z
     980:	2e 7f       	andi	r18, 0xFE	; 254
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
	SPDR = MCP_WRITE;
     986:	8f e2       	ldi	r24, 0x2F	; 47
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	22 e0       	ldi	r18, 0x02	; 2
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
    wait_spi();
     990:	8e e2       	ldi	r24, 0x2E	; 46
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	88 23       	and	r24, r24
     99a:	d4 f7       	brge	.-12     	; 0x990 <writeMCP+0x2a>
	SPDR = address;
     99c:	8f e2       	ldi	r24, 0x2F	; 47
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	29 81       	ldd	r18, Y+1	; 0x01
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
    wait_spi();
     9a6:	8e e2       	ldi	r24, 0x2E	; 46
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	80 81       	ld	r24, Z
     9ae:	88 23       	and	r24, r24
     9b0:	d4 f7       	brge	.-12     	; 0x9a6 <writeMCP+0x40>
	SPDR = data;
     9b2:	8f e2       	ldi	r24, 0x2F	; 47
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	2a 81       	ldd	r18, Y+2	; 0x02
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
    wait_spi();
     9bc:	8e e2       	ldi	r24, 0x2E	; 46
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	88 23       	and	r24, r24
     9c6:	d4 f7       	brge	.-12     	; 0x9bc <writeMCP+0x56>
	deselect_mcp();
     9c8:	88 e3       	ldi	r24, 0x38	; 56
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	28 e3       	ldi	r18, 0x38	; 56
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	21 60       	ori	r18, 0x01	; 1
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	08 95       	ret

000009e4 <requestToSendMCP>:


void requestToSendMCP(char buffer){
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	0f 92       	push	r0
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	89 83       	std	Y+1, r24	; 0x01
	select_mcp();
     9f0:	88 e3       	ldi	r24, 0x38	; 56
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	28 e3       	ldi	r18, 0x38	; 56
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	f9 01       	movw	r30, r18
     9fa:	20 81       	ld	r18, Z
     9fc:	2e 7f       	andi	r18, 0xFE	; 254
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
	switch(buffer) {
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	91 05       	cpc	r25, r1
     a0c:	59 f0       	breq	.+22     	; 0xa24 <requestToSendMCP+0x40>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	91 05       	cpc	r25, r1
     a12:	71 f0       	breq	.+28     	; 0xa30 <requestToSendMCP+0x4c>
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	91 f4       	brne	.+36     	; 0xa3c <requestToSendMCP+0x58>
		case 0:
			SPDR = MCP_RTS_TX0;
     a18:	8f e2       	ldi	r24, 0x2F	; 47
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	21 e8       	ldi	r18, 0x81	; 129
     a1e:	fc 01       	movw	r30, r24
     a20:	20 83       	st	Z, r18
			break;
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <requestToSendMCP+0x58>
		case 1:
		    SPDR = MCP_RTS_TX1;
     a24:	8f e2       	ldi	r24, 0x2F	; 47
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	22 e8       	ldi	r18, 0x82	; 130
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
			break;
     a2e:	06 c0       	rjmp	.+12     	; 0xa3c <requestToSendMCP+0x58>
		case 2:	
		    SPDR = MCP_RTS_TX2;
     a30:	8f e2       	ldi	r24, 0x2F	; 47
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	24 e8       	ldi	r18, 0x84	; 132
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
			break;
     a3a:	00 00       	nop
	}
	wait_spi();
     a3c:	8e e2       	ldi	r24, 0x2E	; 46
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	88 23       	and	r24, r24
     a46:	d4 f7       	brge	.-12     	; 0xa3c <requestToSendMCP+0x58>
	deselect_mcp();
     a48:	88 e3       	ldi	r24, 0x38	; 56
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	28 e3       	ldi	r18, 0x38	; 56
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	21 60       	ori	r18, 0x01	; 1
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
}
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <bitModifyMCP>:


void bitModifyMCP(char address, char mask, char data){
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	00 d0       	rcall	.+0      	; 0xa68 <bitModifyMCP+0x6>
     a68:	0f 92       	push	r0
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	6a 83       	std	Y+2, r22	; 0x02
     a72:	4b 83       	std	Y+3, r20	; 0x03
	select_mcp();
     a74:	88 e3       	ldi	r24, 0x38	; 56
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	28 e3       	ldi	r18, 0x38	; 56
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	20 81       	ld	r18, Z
     a80:	2e 7f       	andi	r18, 0xFE	; 254
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
    SPDR = MCP_BITMOD;
     a86:	8f e2       	ldi	r24, 0x2F	; 47
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	25 e0       	ldi	r18, 0x05	; 5
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
    wait_spi();
     a90:	8e e2       	ldi	r24, 0x2E	; 46
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	fc 01       	movw	r30, r24
     a96:	80 81       	ld	r24, Z
     a98:	88 23       	and	r24, r24
     a9a:	d4 f7       	brge	.-12     	; 0xa90 <bitModifyMCP+0x2e>
	SPDR = address;
     a9c:	8f e2       	ldi	r24, 0x2F	; 47
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	29 81       	ldd	r18, Y+1	; 0x01
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
    wait_spi();
     aa6:	8e e2       	ldi	r24, 0x2E	; 46
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	88 23       	and	r24, r24
     ab0:	d4 f7       	brge	.-12     	; 0xaa6 <bitModifyMCP+0x44>
	SPDR = mask;
     ab2:	8f e2       	ldi	r24, 0x2F	; 47
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	2a 81       	ldd	r18, Y+2	; 0x02
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
    wait_spi();
     abc:	8e e2       	ldi	r24, 0x2E	; 46
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	88 23       	and	r24, r24
     ac6:	d4 f7       	brge	.-12     	; 0xabc <bitModifyMCP+0x5a>
	SPDR = data;
     ac8:	8f e2       	ldi	r24, 0x2F	; 47
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	2b 81       	ldd	r18, Y+3	; 0x03
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
    wait_spi();
     ad2:	8e e2       	ldi	r24, 0x2E	; 46
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	fc 01       	movw	r30, r24
     ad8:	80 81       	ld	r24, Z
     ada:	88 23       	and	r24, r24
     adc:	d4 f7       	brge	.-12     	; 0xad2 <bitModifyMCP+0x70>
	deselect_mcp();
     ade:	88 e3       	ldi	r24, 0x38	; 56
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	28 e3       	ldi	r18, 0x38	; 56
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	21 60       	ori	r18, 0x01	; 1
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
}
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	cf 91       	pop	r28
     af8:	df 91       	pop	r29
     afa:	08 95       	ret

00000afc <readStatus>:

uint8_t readStatus(){
     afc:	df 93       	push	r29
     afe:	cf 93       	push	r28
     b00:	0f 92       	push	r0
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
	uint8_t r;
	select_mcp();
     b06:	88 e3       	ldi	r24, 0x38	; 56
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	28 e3       	ldi	r18, 0x38	; 56
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	2e 7f       	andi	r18, 0xFE	; 254
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
    SPDR = MCP_READ_STATUS;
     b18:	8f e2       	ldi	r24, 0x2F	; 47
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	20 ea       	ldi	r18, 0xA0	; 160
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
    wait_spi();
     b22:	8e e2       	ldi	r24, 0x2E	; 46
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	fc 01       	movw	r30, r24
     b28:	80 81       	ld	r24, Z
     b2a:	88 23       	and	r24, r24
     b2c:	d4 f7       	brge	.-12     	; 0xb22 <readStatus+0x26>
	SPDR = MCP_DUMMY;
     b2e:	8f e2       	ldi	r24, 0x2F	; 47
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	fc 01       	movw	r30, r24
     b34:	10 82       	st	Z, r1
    wait_spi();
     b36:	8e e2       	ldi	r24, 0x2E	; 46
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	fc 01       	movw	r30, r24
     b3c:	80 81       	ld	r24, Z
     b3e:	88 23       	and	r24, r24
     b40:	d4 f7       	brge	.-12     	; 0xb36 <readStatus+0x3a>
	r = SPDR;
     b42:	8f e2       	ldi	r24, 0x2F	; 47
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
     b4c:	88 e3       	ldi	r24, 0x38	; 56
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	28 e3       	ldi	r18, 0x38	; 56
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	f9 01       	movw	r30, r18
     b56:	20 81       	ld	r18, Z
     b58:	21 60       	ori	r18, 0x01	; 1
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
	return r;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <readRxBufferMCP>:

struct canMessage readRxBufferMCP(char buffer){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	2d 97       	sbiw	r28, 0x0d	; 13
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	ac 01       	movw	r20, r24
     b7e:	6d 87       	std	Y+13, r22	; 0x0d
	//Adresses are relative to Buffer 0
	struct canMessage m;
	
	select_mcp();
     b80:	88 e3       	ldi	r24, 0x38	; 56
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	28 e3       	ldi	r18, 0x38	; 56
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	f9 01       	movw	r30, r18
     b8a:	20 81       	ld	r18, Z
     b8c:	2e 7f       	andi	r18, 0xFE	; 254
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
     b92:	8d 85       	ldd	r24, Y+13	; 0x0d
     b94:	88 23       	and	r24, r24
     b96:	31 f4       	brne	.+12     	; 0xba4 <readRxBufferMCP+0x3c>
     b98:	8f e2       	ldi	r24, 0x2F	; 47
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	20 e9       	ldi	r18, 0x90	; 144
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18
	else SPDR = MCP_READ_RX1;
	wait_spi();
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <readRxBufferMCP+0x46>
	struct canMessage m;
	
	select_mcp();
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
	else SPDR = MCP_READ_RX1;
     ba4:	8f e2       	ldi	r24, 0x2F	; 47
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	24 e9       	ldi	r18, 0x94	; 148
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
	wait_spi();
     bae:	8e e2       	ldi	r24, 0x2E	; 46
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	d4 f7       	brge	.-12     	; 0xbae <readRxBufferMCP+0x46>
	
	SPDR = MCP_DUMMY;
     bba:	8f e2       	ldi	r24, 0x2F	; 47
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fc 01       	movw	r30, r24
     bc0:	10 82       	st	Z, r1
	wait_spi();
     bc2:	8e e2       	ldi	r24, 0x2E	; 46
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	88 23       	and	r24, r24
     bcc:	d4 f7       	brge	.-12     	; 0xbc2 <readRxBufferMCP+0x5a>
	
	m.id = SPDR<<3; //8 high bits recived and shifted to fit the 11bit format (0x61)
     bce:	8f e2       	ldi	r24, 0x2F	; 47
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	9b 83       	std	Y+3, r25	; 0x03
     be8:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
     bea:	8f e2       	ldi	r24, 0x2F	; 47
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	fc 01       	movw	r30, r24
     bf0:	10 82       	st	Z, r1
	wait_spi();    //Recive lower 3 bits of id
     bf2:	8e e2       	ldi	r24, 0x2E	; 46
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	fc 01       	movw	r30, r24
     bf8:	80 81       	ld	r24, Z
     bfa:	88 23       	and	r24, r24
     bfc:	d4 f7       	brge	.-12     	; 0xbf2 <readRxBufferMCP+0x8a>
	
	m.id |= (SPDR & 0xE0)>>5;  //Id is received, cleansed and constructed  (0x62)
     bfe:	2a 81       	ldd	r18, Y+2	; 0x02
     c00:	3b 81       	ldd	r19, Y+3	; 0x03
     c02:	8f e2       	ldi	r24, 0x2F	; 47
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	fc 01       	movw	r30, r24
     c08:	80 81       	ld	r24, Z
     c0a:	82 95       	swap	r24
     c0c:	86 95       	lsr	r24
     c0e:	87 70       	andi	r24, 0x07	; 7
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	90 70       	andi	r25, 0x00	; 0
     c16:	82 2b       	or	r24, r18
     c18:	93 2b       	or	r25, r19
     c1a:	9b 83       	std	Y+3, r25	; 0x03
     c1c:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
     c1e:	8f e2       	ldi	r24, 0x2F	; 47
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x63)
     c26:	8e e2       	ldi	r24, 0x2E	; 46
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	d4 f7       	brge	.-12     	; 0xc26 <readRxBufferMCP+0xbe>
	
	SPDR = MCP_DUMMY;  
     c32:	8f e2       	ldi	r24, 0x2F	; 47
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	fc 01       	movw	r30, r24
     c38:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x64)
     c3a:	8e e2       	ldi	r24, 0x2E	; 46
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	fc 01       	movw	r30, r24
     c40:	80 81       	ld	r24, Z
     c42:	88 23       	and	r24, r24
     c44:	d4 f7       	brge	.-12     	; 0xc3a <readRxBufferMCP+0xd2>
	
	SPDR = MCP_DUMMY;  
     c46:	8f e2       	ldi	r24, 0x2F	; 47
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	fc 01       	movw	r30, r24
     c4c:	10 82       	st	Z, r1
	wait_spi();    //Reads DLC (size) (0x65)
     c4e:	8e e2       	ldi	r24, 0x2E	; 46
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	d4 f7       	brge	.-12     	; 0xc4e <readRxBufferMCP+0xe6>
	
	m.size = SPDR & 0x0F;
     c5a:	8f e2       	ldi	r24, 0x2F	; 47
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	fc 01       	movw	r30, r24
     c60:	80 81       	ld	r24, Z
     c62:	8f 70       	andi	r24, 0x0F	; 15
     c64:	8c 83       	std	Y+4, r24	; 0x04
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     c66:	19 82       	std	Y+1, r1	; 0x01
     c68:	1b c0       	rjmp	.+54     	; 0xca0 <readRxBufferMCP+0x138>
		SPDR = MCP_DUMMY;  
     c6a:	8f e2       	ldi	r24, 0x2F	; 47
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	10 82       	st	Z, r1
		wait_spi();    //Reads data (0x66..0x6D) 
     c72:	8e e2       	ldi	r24, 0x2E	; 46
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	fc 01       	movw	r30, r24
     c78:	80 81       	ld	r24, Z
     c7a:	88 23       	and	r24, r24
     c7c:	d4 f7       	brge	.-12     	; 0xc72 <readRxBufferMCP+0x10a>
		m.data[c] = SPDR;
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	2f e2       	ldi	r18, 0x2F	; 47
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	f9 01       	movw	r30, r18
     c8a:	60 81       	ld	r22, Z
     c8c:	9e 01       	movw	r18, r28
     c8e:	2b 5f       	subi	r18, 0xFB	; 251
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	fc 01       	movw	r30, r24
     c98:	60 83       	st	Z, r22
	
	m.size = SPDR & 0x0F;
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	89 17       	cp	r24, r25
     ca6:	08 f3       	brcs	.-62     	; 0xc6a <readRxBufferMCP+0x102>
		SPDR = MCP_DUMMY;  
		wait_spi();    //Reads data (0x66..0x6D) 
		m.data[c] = SPDR;
	}
	
	deselect_mcp();
     ca8:	88 e3       	ldi	r24, 0x38	; 56
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	28 e3       	ldi	r18, 0x38	; 56
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	21 60       	ori	r18, 0x01	; 1
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
	
	return m;
     cba:	ca 01       	movw	r24, r20
     cbc:	9e 01       	movw	r18, r28
     cbe:	2e 5f       	subi	r18, 0xFE	; 254
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	6b e0       	ldi	r22, 0x0B	; 11
     cc4:	f9 01       	movw	r30, r18
     cc6:	00 80       	ld	r0, Z
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	fc 01       	movw	r30, r24
     cce:	00 82       	st	Z, r0
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	61 50       	subi	r22, 0x01	; 1
     cd4:	66 23       	and	r22, r22
     cd6:	b1 f7       	brne	.-20     	; 0xcc4 <readRxBufferMCP+0x15c>
}
     cd8:	ca 01       	movw	r24, r20
     cda:	2d 96       	adiw	r28, 0x0d	; 13
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <fillTxBufferMCP>:


void fillTxBufferMCP(char buffer, struct canMessage m){
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	2e 97       	sbiw	r28, 0x0e	; 14
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	8b 83       	std	Y+3, r24	; 0x03
     d0e:	cc 82       	std	Y+4, r12	; 0x04
     d10:	dd 82       	std	Y+5, r13	; 0x05
     d12:	ee 82       	std	Y+6, r14	; 0x06
     d14:	ff 82       	std	Y+7, r15	; 0x07
     d16:	08 87       	std	Y+8, r16	; 0x08
     d18:	19 87       	std	Y+9, r17	; 0x09
     d1a:	2a 87       	std	Y+10, r18	; 0x0a
     d1c:	3b 87       	std	Y+11, r19	; 0x0b
     d1e:	4c 87       	std	Y+12, r20	; 0x0c
     d20:	5d 87       	std	Y+13, r21	; 0x0d
     d22:	6e 87       	std	Y+14, r22	; 0x0e
	//Adresses are relative to Buffer 0
	select_mcp();
     d24:	88 e3       	ldi	r24, 0x38	; 56
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	28 e3       	ldi	r18, 0x38	; 56
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	f9 01       	movw	r30, r18
     d2e:	20 81       	ld	r18, Z
     d30:	2e 7f       	andi	r18, 0xFE	; 254
     d32:	fc 01       	movw	r30, r24
     d34:	20 83       	st	Z, r18
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	88 23       	and	r24, r24
     d3a:	29 f4       	brne	.+10     	; 0xd46 <fillTxBufferMCP+0x5a>
     d3c:	8f e2       	ldi	r24, 0x2F	; 47
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	20 e4       	ldi	r18, 0x40	; 64
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	31 f4       	brne	.+12     	; 0xd58 <fillTxBufferMCP+0x6c>
     d4c:	8f e2       	ldi	r24, 0x2F	; 47
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	22 e4       	ldi	r18, 0x42	; 66
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18
	else SPDR = MCP_LOAD_TX2;
	wait_spi();
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <fillTxBufferMCP+0x76>
void fillTxBufferMCP(char buffer, struct canMessage m){
	//Adresses are relative to Buffer 0
	select_mcp();
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
	else SPDR = MCP_LOAD_TX2;
     d58:	8f e2       	ldi	r24, 0x2F	; 47
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	24 e4       	ldi	r18, 0x44	; 68
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
	wait_spi();
     d62:	8e e2       	ldi	r24, 0x2E	; 46
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	fc 01       	movw	r30, r24
     d68:	80 81       	ld	r24, Z
     d6a:	88 23       	and	r24, r24
     d6c:	d4 f7       	brge	.-12     	; 0xd62 <fillTxBufferMCP+0x76>
	
	uint8_t t;
	
	t = m.id >> 3;
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	9d 81       	ldd	r25, Y+5	; 0x05
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	96 95       	lsr	r25
     d7c:	87 95       	ror	r24
     d7e:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
     d80:	8f e2       	ldi	r24, 0x2F	; 47
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	2a 81       	ldd	r18, Y+2	; 0x02
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
	wait_spi();  //sends higher 8 bits of ID to 0x31
     d8a:	8e e2       	ldi	r24, 0x2E	; 46
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	88 23       	and	r24, r24
     d94:	d4 f7       	brge	.-12     	; 0xd8a <fillTxBufferMCP+0x9e>
	
	t = (m.id << 5) & 0xE0;
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	9d 81       	ldd	r25, Y+5	; 0x05
     d9a:	82 95       	swap	r24
     d9c:	88 0f       	add	r24, r24
     d9e:	80 7e       	andi	r24, 0xE0	; 224
     da0:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
     da2:	8f e2       	ldi	r24, 0x2F	; 47
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	2a 81       	ldd	r18, Y+2	; 0x02
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
	wait_spi(); //sends lower 3 bits to higher bits of 0x32
     dac:	8e e2       	ldi	r24, 0x2E	; 46
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	88 23       	and	r24, r24
     db6:	d4 f7       	brge	.-12     	; 0xdac <fillTxBufferMCP+0xc0>
		
	SPDR = MCP_DUMMY;  
     db8:	8f e2       	ldi	r24, 0x2F	; 47
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	fc 01       	movw	r30, r24
     dbe:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill (0x33)
     dc0:	8e e2       	ldi	r24, 0x2E	; 46
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	88 23       	and	r24, r24
     dca:	d4 f7       	brge	.-12     	; 0xdc0 <fillTxBufferMCP+0xd4>
	
	SPDR = MCP_DUMMY;  
     dcc:	8f e2       	ldi	r24, 0x2F	; 47
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill(0x34)
     dd4:	8e e2       	ldi	r24, 0x2E	; 46
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	88 23       	and	r24, r24
     dde:	d4 f7       	brge	.-12     	; 0xdd4 <fillTxBufferMCP+0xe8>
	
	
	SPDR = m.size & 0x0F;  
     de0:	8f e2       	ldi	r24, 0x2F	; 47
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	2e 81       	ldd	r18, Y+6	; 0x06
     de6:	2f 70       	andi	r18, 0x0F	; 15
     de8:	fc 01       	movw	r30, r24
     dea:	20 83       	st	Z, r18
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
     dec:	8e e2       	ldi	r24, 0x2E	; 46
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
     df4:	88 23       	and	r24, r24
     df6:	d4 f7       	brge	.-12     	; 0xdec <fillTxBufferMCP+0x100>
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	17 c0       	rjmp	.+46     	; 0xe2a <fillTxBufferMCP+0x13e>
		SPDR = m.data[c];  
     dfc:	8f e2       	ldi	r24, 0x2F	; 47
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	29 81       	ldd	r18, Y+1	; 0x01
     e02:	22 2f       	mov	r18, r18
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	ae 01       	movw	r20, r28
     e08:	49 5f       	subi	r20, 0xF9	; 249
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	24 0f       	add	r18, r20
     e0e:	35 1f       	adc	r19, r21
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
		wait_spi();    //fills in data (0x36..0x40) 
     e18:	8e e2       	ldi	r24, 0x2E	; 46
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	fc 01       	movw	r30, r24
     e1e:	80 81       	ld	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	d4 f7       	brge	.-12     	; 0xe18 <fillTxBufferMCP+0x12c>
	SPDR = m.size & 0x0F;  
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	89 17       	cp	r24, r25
     e30:	28 f3       	brcs	.-54     	; 0xdfc <fillTxBufferMCP+0x110>
		SPDR = m.data[c];  
		wait_spi();    //fills in data (0x36..0x40) 
	}
	
	deselect_mcp();
     e32:	88 e3       	ldi	r24, 0x38	; 56
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	28 e3       	ldi	r18, 0x38	; 56
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	f9 01       	movw	r30, r18
     e3c:	20 81       	ld	r18, Z
     e3e:	21 60       	ori	r18, 0x01	; 1
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
     e44:	2e 96       	adiw	r28, 0x0e	; 14
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	08 95       	ret

00000e62 <initUART>:
 */ 


#include "uart.h"

void initUART(uint16_t ubrr ){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <initUART+0x6>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
	
	//Init clock generator reg
	UBRR1H = (unsigned char) (ubrr >> 8);
     e70:	88 e9       	ldi	r24, 0x98	; 152
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	29 81       	ldd	r18, Y+1	; 0x01
     e76:	3a 81       	ldd	r19, Y+2	; 0x02
     e78:	23 2f       	mov	r18, r19
     e7a:	33 27       	eor	r19, r19
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
	UBRR1L = (unsigned char) ubrr;
     e80:	89 e9       	ldi	r24, 0x99	; 153
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	29 81       	ldd	r18, Y+1	; 0x01
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
	//UCSR0A = 0b00000000 //TODO: Rx & Tx "polling"
	UCSR1B = 0b00011000;
     e8a:	8a e9       	ldi	r24, 0x9A	; 154
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	28 e1       	ldi	r18, 0x18	; 24
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
	UCSR1C = 0b10000110;	
     e94:	8d e9       	ldi	r24, 0x9D	; 157
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	26 e8       	ldi	r18, 0x86	; 134
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
	fdevopen(putC,getC);
     e9e:	83 e7       	ldi	r24, 0x73	; 115
     ea0:	97 e0       	ldi	r25, 0x07	; 7
     ea2:	2b e5       	ldi	r18, 0x5B	; 91
     ea4:	37 e0       	ldi	r19, 0x07	; 7
     ea6:	b9 01       	movw	r22, r18
     ea8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <fdevopen>
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <getC>:

int getC()
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while( !(UCSR1A & 1 << RXC1) );
     ec0:	00 00       	nop
     ec2:	8b e9       	ldi	r24, 0x9B	; 155
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	fc 01       	movw	r30, r24
     ec8:	80 81       	ld	r24, Z
     eca:	88 23       	and	r24, r24
     ecc:	d4 f7       	brge	.-12     	; 0xec2 <getC+0xc>
	c = UDR1;
     ece:	8c e9       	ldi	r24, 0x9C	; 156
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	89 83       	std	Y+1, r24	; 0x01
	return c;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
}
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <putC>:

int putC(char data){
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR1A & 1 << UDRE1) );
     ef2:	00 00       	nop
     ef4:	8b e9       	ldi	r24, 0x9B	; 155
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	fc 01       	movw	r30, r24
     efa:	80 81       	ld	r24, Z
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	80 72       	andi	r24, 0x20	; 32
     f02:	90 70       	andi	r25, 0x00	; 0
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	b1 f3       	breq	.-20     	; 0xef4 <putC+0xe>
	UDR1 = data;
     f08:	8c e9       	ldi	r24, 0x9C	; 156
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	29 81       	ldd	r18, Y+1	; 0x01
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
	while( !(UCSR1A & 1 << TXC1) );
     f12:	00 00       	nop
     f14:	8b e9       	ldi	r24, 0x9B	; 155
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	fc 01       	movw	r30, r24
     f1a:	80 81       	ld	r24, Z
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	80 74       	andi	r24, 0x40	; 64
     f22:	90 70       	andi	r25, 0x00	; 0
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	b1 f3       	breq	.-20     	; 0xf14 <putC+0x2e>
	return 0;
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <__fixunssfsi>:
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	7b 01       	movw	r14, r22
     f3e:	8c 01       	movw	r16, r24
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	5f e4       	ldi	r21, 0x4F	; 79
     f48:	0e 94 98 0a 	call	0x1530	; 0x1530 <__gesf2>
     f4c:	87 fd       	sbrc	r24, 7
     f4e:	11 c0       	rjmp	.+34     	; 0xf72 <__fixunssfsi+0x3e>
     f50:	c8 01       	movw	r24, r16
     f52:	b7 01       	movw	r22, r14
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	5f e4       	ldi	r21, 0x4F	; 79
     f5c:	0e 94 3d 09 	call	0x127a	; 0x127a <__subsf3>
     f60:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fixsfsi>
     f64:	9b 01       	movw	r18, r22
     f66:	ac 01       	movw	r20, r24
     f68:	20 50       	subi	r18, 0x00	; 0
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	40 40       	sbci	r20, 0x00	; 0
     f6e:	50 48       	sbci	r21, 0x80	; 128
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <__fixunssfsi+0x4a>
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fixsfsi>
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	b9 01       	movw	r22, r18
     f80:	ca 01       	movw	r24, r20
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	08 95       	ret

00000f8c <_fpadd_parts>:
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ec ec       	ldi	r30, 0xCC	; 204
     f92:	f7 e0       	ldi	r31, 0x07	; 7
     f94:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__prologue_saves__+0x8>
     f98:	fc 01       	movw	r30, r24
     f9a:	ea 01       	movw	r28, r20
     f9c:	80 81       	ld	r24, Z
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <_fpadd_parts+0x18>
     fa2:	38 c1       	rjmp	.+624    	; 0x1214 <__stack+0x115>
     fa4:	db 01       	movw	r26, r22
     fa6:	9c 91       	ld	r25, X
     fa8:	92 30       	cpi	r25, 0x02	; 2
     faa:	08 f4       	brcc	.+2      	; 0xfae <_fpadd_parts+0x22>
     fac:	30 c1       	rjmp	.+608    	; 0x120e <__stack+0x10f>
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	59 f4       	brne	.+22     	; 0xfc8 <_fpadd_parts+0x3c>
     fb2:	94 30       	cpi	r25, 0x04	; 4
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <_fpadd_parts+0x2c>
     fb6:	2e c1       	rjmp	.+604    	; 0x1214 <__stack+0x115>
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	8c 91       	ld	r24, X
     fbe:	11 97       	sbiw	r26, 0x01	; 1
     fc0:	98 17       	cp	r25, r24
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <_fpadd_parts+0x3a>
     fc4:	21 c1       	rjmp	.+578    	; 0x1208 <__stack+0x109>
     fc6:	26 c1       	rjmp	.+588    	; 0x1214 <__stack+0x115>
     fc8:	94 30       	cpi	r25, 0x04	; 4
     fca:	09 f4       	brne	.+2      	; 0xfce <_fpadd_parts+0x42>
     fcc:	20 c1       	rjmp	.+576    	; 0x120e <__stack+0x10f>
     fce:	92 30       	cpi	r25, 0x02	; 2
     fd0:	b1 f4       	brne	.+44     	; 0xffe <_fpadd_parts+0x72>
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <_fpadd_parts+0x4c>
     fd6:	1e c1       	rjmp	.+572    	; 0x1214 <__stack+0x115>
     fd8:	ca 01       	movw	r24, r20
     fda:	af 01       	movw	r20, r30
     fdc:	28 e0       	ldi	r18, 0x08	; 8
     fde:	da 01       	movw	r26, r20
     fe0:	0d 90       	ld	r0, X+
     fe2:	ad 01       	movw	r20, r26
     fe4:	dc 01       	movw	r26, r24
     fe6:	0d 92       	st	X+, r0
     fe8:	cd 01       	movw	r24, r26
     fea:	21 50       	subi	r18, 0x01	; 1
     fec:	c1 f7       	brne	.-16     	; 0xfde <_fpadd_parts+0x52>
     fee:	db 01       	movw	r26, r22
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	8c 91       	ld	r24, X
     ff4:	11 97       	sbiw	r26, 0x01	; 1
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	89 23       	and	r24, r25
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	0a c1       	rjmp	.+532    	; 0x1212 <__stack+0x113>
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	09 f4       	brne	.+2      	; 0x1004 <_fpadd_parts+0x78>
    1002:	05 c1       	rjmp	.+522    	; 0x120e <__stack+0x10f>
    1004:	c2 80       	ldd	r12, Z+2	; 0x02
    1006:	d3 80       	ldd	r13, Z+3	; 0x03
    1008:	db 01       	movw	r26, r22
    100a:	12 96       	adiw	r26, 0x02	; 2
    100c:	6d 90       	ld	r6, X+
    100e:	7c 90       	ld	r7, X
    1010:	13 97       	sbiw	r26, 0x03	; 3
    1012:	24 81       	ldd	r18, Z+4	; 0x04
    1014:	35 81       	ldd	r19, Z+5	; 0x05
    1016:	46 81       	ldd	r20, Z+6	; 0x06
    1018:	57 81       	ldd	r21, Z+7	; 0x07
    101a:	14 96       	adiw	r26, 0x04	; 4
    101c:	ed 90       	ld	r14, X+
    101e:	fd 90       	ld	r15, X+
    1020:	0d 91       	ld	r16, X+
    1022:	1c 91       	ld	r17, X
    1024:	17 97       	sbiw	r26, 0x07	; 7
    1026:	c6 01       	movw	r24, r12
    1028:	86 19       	sub	r24, r6
    102a:	97 09       	sbc	r25, r7
    102c:	5c 01       	movw	r10, r24
    102e:	97 ff       	sbrs	r25, 7
    1030:	04 c0       	rjmp	.+8      	; 0x103a <_fpadd_parts+0xae>
    1032:	aa 24       	eor	r10, r10
    1034:	bb 24       	eor	r11, r11
    1036:	a8 1a       	sub	r10, r24
    1038:	b9 0a       	sbc	r11, r25
    103a:	b0 e2       	ldi	r27, 0x20	; 32
    103c:	ab 16       	cp	r10, r27
    103e:	b1 04       	cpc	r11, r1
    1040:	0c f0       	brlt	.+2      	; 0x1044 <_fpadd_parts+0xb8>
    1042:	61 c0       	rjmp	.+194    	; 0x1106 <__stack+0x7>
    1044:	18 16       	cp	r1, r24
    1046:	19 06       	cpc	r1, r25
    1048:	6c f5       	brge	.+90     	; 0x10a4 <_fpadd_parts+0x118>
    104a:	37 01       	movw	r6, r14
    104c:	48 01       	movw	r8, r16
    104e:	0a 2c       	mov	r0, r10
    1050:	04 c0       	rjmp	.+8      	; 0x105a <_fpadd_parts+0xce>
    1052:	96 94       	lsr	r9
    1054:	87 94       	ror	r8
    1056:	77 94       	ror	r7
    1058:	67 94       	ror	r6
    105a:	0a 94       	dec	r0
    105c:	d2 f7       	brpl	.-12     	; 0x1052 <_fpadd_parts+0xc6>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	0a 2c       	mov	r0, r10
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <_fpadd_parts+0xe6>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	aa 1f       	adc	r26, r26
    1070:	bb 1f       	adc	r27, r27
    1072:	0a 94       	dec	r0
    1074:	d2 f7       	brpl	.-12     	; 0x106a <_fpadd_parts+0xde>
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	a1 09       	sbc	r26, r1
    107a:	b1 09       	sbc	r27, r1
    107c:	8e 21       	and	r24, r14
    107e:	9f 21       	and	r25, r15
    1080:	a0 23       	and	r26, r16
    1082:	b1 23       	and	r27, r17
    1084:	ee 24       	eor	r14, r14
    1086:	ff 24       	eor	r15, r15
    1088:	87 01       	movw	r16, r14
    108a:	e3 94       	inc	r14
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	a1 05       	cpc	r26, r1
    1090:	b1 05       	cpc	r27, r1
    1092:	19 f4       	brne	.+6      	; 0x109a <_fpadd_parts+0x10e>
    1094:	ee 24       	eor	r14, r14
    1096:	ff 24       	eor	r15, r15
    1098:	87 01       	movw	r16, r14
    109a:	e6 28       	or	r14, r6
    109c:	f7 28       	or	r15, r7
    109e:	08 29       	or	r16, r8
    10a0:	19 29       	or	r17, r9
    10a2:	3c c0       	rjmp	.+120    	; 0x111c <__stack+0x1d>
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	d1 f1       	breq	.+116    	; 0x111c <__stack+0x1d>
    10a8:	ca 0c       	add	r12, r10
    10aa:	db 1c       	adc	r13, r11
    10ac:	39 01       	movw	r6, r18
    10ae:	4a 01       	movw	r8, r20
    10b0:	0a 2c       	mov	r0, r10
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <_fpadd_parts+0x130>
    10b4:	96 94       	lsr	r9
    10b6:	87 94       	ror	r8
    10b8:	77 94       	ror	r7
    10ba:	67 94       	ror	r6
    10bc:	0a 94       	dec	r0
    10be:	d2 f7       	brpl	.-12     	; 0x10b4 <_fpadd_parts+0x128>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 e0       	ldi	r26, 0x00	; 0
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	0a 2c       	mov	r0, r10
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <_fpadd_parts+0x148>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	0a 94       	dec	r0
    10d6:	d2 f7       	brpl	.-12     	; 0x10cc <_fpadd_parts+0x140>
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	a1 09       	sbc	r26, r1
    10dc:	b1 09       	sbc	r27, r1
    10de:	82 23       	and	r24, r18
    10e0:	93 23       	and	r25, r19
    10e2:	a4 23       	and	r26, r20
    10e4:	b5 23       	and	r27, r21
    10e6:	21 e0       	ldi	r18, 0x01	; 1
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	a1 05       	cpc	r26, r1
    10f2:	b1 05       	cpc	r27, r1
    10f4:	19 f4       	brne	.+6      	; 0x10fc <_fpadd_parts+0x170>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	a9 01       	movw	r20, r18
    10fc:	26 29       	or	r18, r6
    10fe:	37 29       	or	r19, r7
    1100:	48 29       	or	r20, r8
    1102:	59 29       	or	r21, r9
    1104:	0b c0       	rjmp	.+22     	; 0x111c <__stack+0x1d>
    1106:	6c 14       	cp	r6, r12
    1108:	7d 04       	cpc	r7, r13
    110a:	24 f4       	brge	.+8      	; 0x1114 <__stack+0x15>
    110c:	ee 24       	eor	r14, r14
    110e:	ff 24       	eor	r15, r15
    1110:	87 01       	movw	r16, r14
    1112:	04 c0       	rjmp	.+8      	; 0x111c <__stack+0x1d>
    1114:	63 01       	movw	r12, r6
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	a9 01       	movw	r20, r18
    111c:	81 81       	ldd	r24, Z+1	; 0x01
    111e:	fb 01       	movw	r30, r22
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	89 17       	cp	r24, r25
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x29>
    1126:	45 c0       	rjmp	.+138    	; 0x11b2 <__stack+0xb3>
    1128:	88 23       	and	r24, r24
    112a:	49 f0       	breq	.+18     	; 0x113e <__stack+0x3f>
    112c:	d8 01       	movw	r26, r16
    112e:	c7 01       	movw	r24, r14
    1130:	82 1b       	sub	r24, r18
    1132:	93 0b       	sbc	r25, r19
    1134:	a4 0b       	sbc	r26, r20
    1136:	b5 0b       	sbc	r27, r21
    1138:	9c 01       	movw	r18, r24
    113a:	ad 01       	movw	r20, r26
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <__stack+0x47>
    113e:	2e 19       	sub	r18, r14
    1140:	3f 09       	sbc	r19, r15
    1142:	40 0b       	sbc	r20, r16
    1144:	51 0b       	sbc	r21, r17
    1146:	57 fd       	sbrc	r21, 7
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <__stack+0x53>
    114a:	19 82       	std	Y+1, r1	; 0x01
    114c:	db 82       	std	Y+3, r13	; 0x03
    114e:	ca 82       	std	Y+2, r12	; 0x02
    1150:	0b c0       	rjmp	.+22     	; 0x1168 <__stack+0x69>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	db 82       	std	Y+3, r13	; 0x03
    1158:	ca 82       	std	Y+2, r12	; 0x02
    115a:	50 95       	com	r21
    115c:	40 95       	com	r20
    115e:	30 95       	com	r19
    1160:	21 95       	neg	r18
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	4f 4f       	sbci	r20, 0xFF	; 255
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	2c 83       	std	Y+4, r18	; 0x04
    116a:	3d 83       	std	Y+5, r19	; 0x05
    116c:	4e 83       	std	Y+6, r20	; 0x06
    116e:	5f 83       	std	Y+7, r21	; 0x07
    1170:	0d c0       	rjmp	.+26     	; 0x118c <__stack+0x8d>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	aa 1f       	adc	r26, r26
    1178:	bb 1f       	adc	r27, r27
    117a:	8c 83       	std	Y+4, r24	; 0x04
    117c:	9d 83       	std	Y+5, r25	; 0x05
    117e:	ae 83       	std	Y+6, r26	; 0x06
    1180:	bf 83       	std	Y+7, r27	; 0x07
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	9b 81       	ldd	r25, Y+3	; 0x03
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9b 83       	std	Y+3, r25	; 0x03
    118a:	8a 83       	std	Y+2, r24	; 0x02
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	ae 81       	ldd	r26, Y+6	; 0x06
    1192:	bf 81       	ldd	r27, Y+7	; 0x07
    1194:	9c 01       	movw	r18, r24
    1196:	ad 01       	movw	r20, r26
    1198:	21 50       	subi	r18, 0x01	; 1
    119a:	30 40       	sbci	r19, 0x00	; 0
    119c:	40 40       	sbci	r20, 0x00	; 0
    119e:	50 40       	sbci	r21, 0x00	; 0
    11a0:	2f 3f       	cpi	r18, 0xFF	; 255
    11a2:	ef ef       	ldi	r30, 0xFF	; 255
    11a4:	3e 07       	cpc	r19, r30
    11a6:	ef ef       	ldi	r30, 0xFF	; 255
    11a8:	4e 07       	cpc	r20, r30
    11aa:	ef e3       	ldi	r30, 0x3F	; 63
    11ac:	5e 07       	cpc	r21, r30
    11ae:	08 f3       	brcs	.-62     	; 0x1172 <__stack+0x73>
    11b0:	0b c0       	rjmp	.+22     	; 0x11c8 <__stack+0xc9>
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	db 82       	std	Y+3, r13	; 0x03
    11b6:	ca 82       	std	Y+2, r12	; 0x02
    11b8:	2e 0d       	add	r18, r14
    11ba:	3f 1d       	adc	r19, r15
    11bc:	40 1f       	adc	r20, r16
    11be:	51 1f       	adc	r21, r17
    11c0:	2c 83       	std	Y+4, r18	; 0x04
    11c2:	3d 83       	std	Y+5, r19	; 0x05
    11c4:	4e 83       	std	Y+6, r20	; 0x06
    11c6:	5f 83       	std	Y+7, r21	; 0x07
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	88 83       	st	Y, r24
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	4e 81       	ldd	r20, Y+6	; 0x06
    11d2:	5f 81       	ldd	r21, Y+7	; 0x07
    11d4:	57 ff       	sbrs	r21, 7
    11d6:	1d c0       	rjmp	.+58     	; 0x1212 <__stack+0x113>
    11d8:	da 01       	movw	r26, r20
    11da:	c9 01       	movw	r24, r18
    11dc:	81 70       	andi	r24, 0x01	; 1
    11de:	90 70       	andi	r25, 0x00	; 0
    11e0:	a0 70       	andi	r26, 0x00	; 0
    11e2:	b0 70       	andi	r27, 0x00	; 0
    11e4:	56 95       	lsr	r21
    11e6:	47 95       	ror	r20
    11e8:	37 95       	ror	r19
    11ea:	27 95       	ror	r18
    11ec:	82 2b       	or	r24, r18
    11ee:	93 2b       	or	r25, r19
    11f0:	a4 2b       	or	r26, r20
    11f2:	b5 2b       	or	r27, r21
    11f4:	8c 83       	std	Y+4, r24	; 0x04
    11f6:	9d 83       	std	Y+5, r25	; 0x05
    11f8:	ae 83       	std	Y+6, r26	; 0x06
    11fa:	bf 83       	std	Y+7, r27	; 0x07
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9b 83       	std	Y+3, r25	; 0x03
    1204:	8a 83       	std	Y+2, r24	; 0x02
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <__stack+0x113>
    1208:	e2 e9       	ldi	r30, 0x92	; 146
    120a:	f1 e0       	ldi	r31, 0x01	; 1
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <__stack+0x115>
    120e:	fb 01       	movw	r30, r22
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <__stack+0x115>
    1212:	fe 01       	movw	r30, r28
    1214:	cf 01       	movw	r24, r30
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	ee e0       	ldi	r30, 0x0E	; 14
    121c:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__epilogue_restores__+0x8>

00001220 <__addsf3>:
    1220:	a0 e2       	ldi	r26, 0x20	; 32
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e6 e1       	ldi	r30, 0x16	; 22
    1226:	f9 e0       	ldi	r31, 0x09	; 9
    1228:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x18>
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	2d 83       	std	Y+5, r18	; 0x05
    1236:	3e 83       	std	Y+6, r19	; 0x06
    1238:	4f 83       	std	Y+7, r20	; 0x07
    123a:	58 87       	std	Y+8, r21	; 0x08
    123c:	89 e0       	ldi	r24, 0x09	; 9
    123e:	e8 2e       	mov	r14, r24
    1240:	f1 2c       	mov	r15, r1
    1242:	ec 0e       	add	r14, r28
    1244:	fd 1e       	adc	r15, r29
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	b7 01       	movw	r22, r14
    124c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    1250:	8e 01       	movw	r16, r28
    1252:	0f 5e       	subi	r16, 0xEF	; 239
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	ce 01       	movw	r24, r28
    1258:	05 96       	adiw	r24, 0x05	; 5
    125a:	b8 01       	movw	r22, r16
    125c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    1260:	c7 01       	movw	r24, r14
    1262:	b8 01       	movw	r22, r16
    1264:	ae 01       	movw	r20, r28
    1266:	47 5e       	subi	r20, 0xE7	; 231
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_fpadd_parts>
    126e:	0e 94 04 0c 	call	0x1808	; 0x1808 <__pack_f>
    1272:	a0 96       	adiw	r28, 0x20	; 32
    1274:	e6 e0       	ldi	r30, 0x06	; 6
    1276:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x18>

0000127a <__subsf3>:
    127a:	a0 e2       	ldi	r26, 0x20	; 32
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e3 e4       	ldi	r30, 0x43	; 67
    1280:	f9 e0       	ldi	r31, 0x09	; 9
    1282:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x18>
    1286:	69 83       	std	Y+1, r22	; 0x01
    1288:	7a 83       	std	Y+2, r23	; 0x02
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	2d 83       	std	Y+5, r18	; 0x05
    1290:	3e 83       	std	Y+6, r19	; 0x06
    1292:	4f 83       	std	Y+7, r20	; 0x07
    1294:	58 87       	std	Y+8, r21	; 0x08
    1296:	8e 01       	movw	r16, r28
    1298:	07 5f       	subi	r16, 0xF7	; 247
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	b8 01       	movw	r22, r16
    12a2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    12a6:	91 e1       	ldi	r25, 0x11	; 17
    12a8:	e9 2e       	mov	r14, r25
    12aa:	f1 2c       	mov	r15, r1
    12ac:	ec 0e       	add	r14, r28
    12ae:	fd 1e       	adc	r15, r29
    12b0:	ce 01       	movw	r24, r28
    12b2:	05 96       	adiw	r24, 0x05	; 5
    12b4:	b7 01       	movw	r22, r14
    12b6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    12ba:	8a 89       	ldd	r24, Y+18	; 0x12
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	89 27       	eor	r24, r25
    12c0:	8a 8b       	std	Y+18, r24	; 0x12
    12c2:	c8 01       	movw	r24, r16
    12c4:	b7 01       	movw	r22, r14
    12c6:	ae 01       	movw	r20, r28
    12c8:	47 5e       	subi	r20, 0xE7	; 231
    12ca:	5f 4f       	sbci	r21, 0xFF	; 255
    12cc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_fpadd_parts>
    12d0:	0e 94 04 0c 	call	0x1808	; 0x1808 <__pack_f>
    12d4:	a0 96       	adiw	r28, 0x20	; 32
    12d6:	e6 e0       	ldi	r30, 0x06	; 6
    12d8:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x18>

000012dc <__mulsf3>:
    12dc:	a0 e2       	ldi	r26, 0x20	; 32
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e4 e7       	ldi	r30, 0x74	; 116
    12e2:	f9 e0       	ldi	r31, 0x09	; 9
    12e4:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__prologue_saves__>
    12e8:	69 83       	std	Y+1, r22	; 0x01
    12ea:	7a 83       	std	Y+2, r23	; 0x02
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	2d 83       	std	Y+5, r18	; 0x05
    12f2:	3e 83       	std	Y+6, r19	; 0x06
    12f4:	4f 83       	std	Y+7, r20	; 0x07
    12f6:	58 87       	std	Y+8, r21	; 0x08
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	be 01       	movw	r22, r28
    12fe:	67 5f       	subi	r22, 0xF7	; 247
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    1306:	ce 01       	movw	r24, r28
    1308:	05 96       	adiw	r24, 0x05	; 5
    130a:	be 01       	movw	r22, r28
    130c:	6f 5e       	subi	r22, 0xEF	; 239
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    1314:	99 85       	ldd	r25, Y+9	; 0x09
    1316:	92 30       	cpi	r25, 0x02	; 2
    1318:	78 f0       	brcs	.+30     	; 0x1338 <__mulsf3+0x5c>
    131a:	89 89       	ldd	r24, Y+17	; 0x11
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	c0 f0       	brcs	.+48     	; 0x1350 <__mulsf3+0x74>
    1320:	94 30       	cpi	r25, 0x04	; 4
    1322:	19 f4       	brne	.+6      	; 0x132a <__mulsf3+0x4e>
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	41 f4       	brne	.+16     	; 0x1338 <__mulsf3+0x5c>
    1328:	cb c0       	rjmp	.+406    	; 0x14c0 <__mulsf3+0x1e4>
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	19 f4       	brne	.+6      	; 0x1334 <__mulsf3+0x58>
    132e:	92 30       	cpi	r25, 0x02	; 2
    1330:	79 f4       	brne	.+30     	; 0x1350 <__mulsf3+0x74>
    1332:	c6 c0       	rjmp	.+396    	; 0x14c0 <__mulsf3+0x1e4>
    1334:	92 30       	cpi	r25, 0x02	; 2
    1336:	51 f4       	brne	.+20     	; 0x134c <__mulsf3+0x70>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	2a 85       	ldd	r18, Y+10	; 0x0a
    133c:	9a 89       	ldd	r25, Y+18	; 0x12
    133e:	29 17       	cp	r18, r25
    1340:	09 f4       	brne	.+2      	; 0x1344 <__mulsf3+0x68>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	8a 87       	std	Y+10, r24	; 0x0a
    1346:	ce 01       	movw	r24, r28
    1348:	09 96       	adiw	r24, 0x09	; 9
    134a:	bc c0       	rjmp	.+376    	; 0x14c4 <__mulsf3+0x1e8>
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	51 f4       	brne	.+20     	; 0x1364 <__mulsf3+0x88>
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	2a 85       	ldd	r18, Y+10	; 0x0a
    1354:	9a 89       	ldd	r25, Y+18	; 0x12
    1356:	29 17       	cp	r18, r25
    1358:	09 f4       	brne	.+2      	; 0x135c <__mulsf3+0x80>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	8a 8b       	std	Y+18, r24	; 0x12
    135e:	ce 01       	movw	r24, r28
    1360:	41 96       	adiw	r24, 0x11	; 17
    1362:	b0 c0       	rjmp	.+352    	; 0x14c4 <__mulsf3+0x1e8>
    1364:	6d 84       	ldd	r6, Y+13	; 0x0d
    1366:	7e 84       	ldd	r7, Y+14	; 0x0e
    1368:	8f 84       	ldd	r8, Y+15	; 0x0f
    136a:	98 88       	ldd	r9, Y+16	; 0x10
    136c:	ed 88       	ldd	r14, Y+21	; 0x15
    136e:	fe 88       	ldd	r15, Y+22	; 0x16
    1370:	0f 89       	ldd	r16, Y+23	; 0x17
    1372:	18 8d       	ldd	r17, Y+24	; 0x18
    1374:	e0 e2       	ldi	r30, 0x20	; 32
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	dc 01       	movw	r26, r24
    137e:	aa 24       	eor	r10, r10
    1380:	bb 24       	eor	r11, r11
    1382:	65 01       	movw	r12, r10
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	a9 01       	movw	r20, r18
    138a:	b3 01       	movw	r22, r6
    138c:	61 70       	andi	r22, 0x01	; 1
    138e:	70 70       	andi	r23, 0x00	; 0
    1390:	61 15       	cp	r22, r1
    1392:	71 05       	cpc	r23, r1
    1394:	d1 f0       	breq	.+52     	; 0x13ca <__mulsf3+0xee>
    1396:	2e 0d       	add	r18, r14
    1398:	3f 1d       	adc	r19, r15
    139a:	40 1f       	adc	r20, r16
    139c:	51 1f       	adc	r21, r17
    139e:	15 01       	movw	r2, r10
    13a0:	26 01       	movw	r4, r12
    13a2:	28 0e       	add	r2, r24
    13a4:	39 1e       	adc	r3, r25
    13a6:	4a 1e       	adc	r4, r26
    13a8:	5b 1e       	adc	r5, r27
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	2e 15       	cp	r18, r14
    13b4:	3f 05       	cpc	r19, r15
    13b6:	40 07       	cpc	r20, r16
    13b8:	51 07       	cpc	r21, r17
    13ba:	18 f0       	brcs	.+6      	; 0x13c2 <__mulsf3+0xe6>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	dc 01       	movw	r26, r24
    13c2:	82 0d       	add	r24, r2
    13c4:	93 1d       	adc	r25, r3
    13c6:	a4 1d       	adc	r26, r4
    13c8:	b5 1d       	adc	r27, r5
    13ca:	aa 0c       	add	r10, r10
    13cc:	bb 1c       	adc	r11, r11
    13ce:	cc 1c       	adc	r12, r12
    13d0:	dd 1c       	adc	r13, r13
    13d2:	17 ff       	sbrs	r17, 7
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <__mulsf3+0x10c>
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	26 2e       	mov	r2, r22
    13da:	31 2c       	mov	r3, r1
    13dc:	41 2c       	mov	r4, r1
    13de:	51 2c       	mov	r5, r1
    13e0:	a2 28       	or	r10, r2
    13e2:	b3 28       	or	r11, r3
    13e4:	c4 28       	or	r12, r4
    13e6:	d5 28       	or	r13, r5
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	49 f0       	breq	.+18     	; 0x13fe <__mulsf3+0x122>
    13ec:	ee 0c       	add	r14, r14
    13ee:	ff 1c       	adc	r15, r15
    13f0:	00 1f       	adc	r16, r16
    13f2:	11 1f       	adc	r17, r17
    13f4:	96 94       	lsr	r9
    13f6:	87 94       	ror	r8
    13f8:	77 94       	ror	r7
    13fa:	67 94       	ror	r6
    13fc:	c6 cf       	rjmp	.-116    	; 0x138a <__mulsf3+0xae>
    13fe:	6b 89       	ldd	r22, Y+19	; 0x13
    1400:	7c 89       	ldd	r23, Y+20	; 0x14
    1402:	eb 85       	ldd	r30, Y+11	; 0x0b
    1404:	fc 85       	ldd	r31, Y+12	; 0x0c
    1406:	6e 0f       	add	r22, r30
    1408:	7f 1f       	adc	r23, r31
    140a:	6e 5f       	subi	r22, 0xFE	; 254
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	7c 8f       	std	Y+28, r23	; 0x1c
    1410:	6b 8f       	std	Y+27, r22	; 0x1b
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	ea 85       	ldd	r30, Y+10	; 0x0a
    1416:	7a 89       	ldd	r23, Y+18	; 0x12
    1418:	e7 17       	cp	r30, r23
    141a:	09 f4       	brne	.+2      	; 0x141e <__mulsf3+0x142>
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	6a 8f       	std	Y+26, r22	; 0x1a
    1420:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1422:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1424:	10 c0       	rjmp	.+32     	; 0x1446 <__mulsf3+0x16a>
    1426:	fc 01       	movw	r30, r24
    1428:	e1 70       	andi	r30, 0x01	; 1
    142a:	f0 70       	andi	r31, 0x00	; 0
    142c:	30 97       	sbiw	r30, 0x00	; 0
    142e:	29 f0       	breq	.+10     	; 0x143a <__mulsf3+0x15e>
    1430:	56 95       	lsr	r21
    1432:	47 95       	ror	r20
    1434:	37 95       	ror	r19
    1436:	27 95       	ror	r18
    1438:	50 68       	ori	r21, 0x80	; 128
    143a:	b6 95       	lsr	r27
    143c:	a7 95       	ror	r26
    143e:	97 95       	ror	r25
    1440:	87 95       	ror	r24
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	b7 fd       	sbrc	r27, 7
    1448:	ee cf       	rjmp	.-36     	; 0x1426 <__mulsf3+0x14a>
    144a:	0c c0       	rjmp	.+24     	; 0x1464 <__mulsf3+0x188>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	aa 1f       	adc	r26, r26
    1452:	bb 1f       	adc	r27, r27
    1454:	57 fd       	sbrc	r21, 7
    1456:	81 60       	ori	r24, 0x01	; 1
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	44 1f       	adc	r20, r20
    145e:	55 1f       	adc	r21, r21
    1460:	61 50       	subi	r22, 0x01	; 1
    1462:	70 40       	sbci	r23, 0x00	; 0
    1464:	80 30       	cpi	r24, 0x00	; 0
    1466:	e0 e0       	ldi	r30, 0x00	; 0
    1468:	9e 07       	cpc	r25, r30
    146a:	e0 e0       	ldi	r30, 0x00	; 0
    146c:	ae 07       	cpc	r26, r30
    146e:	e0 e4       	ldi	r30, 0x40	; 64
    1470:	be 07       	cpc	r27, r30
    1472:	60 f3       	brcs	.-40     	; 0x144c <__mulsf3+0x170>
    1474:	6b 8f       	std	Y+27, r22	; 0x1b
    1476:	7c 8f       	std	Y+28, r23	; 0x1c
    1478:	6f e7       	ldi	r22, 0x7F	; 127
    147a:	e6 2e       	mov	r14, r22
    147c:	f1 2c       	mov	r15, r1
    147e:	01 2d       	mov	r16, r1
    1480:	11 2d       	mov	r17, r1
    1482:	e8 22       	and	r14, r24
    1484:	f9 22       	and	r15, r25
    1486:	0a 23       	and	r16, r26
    1488:	1b 23       	and	r17, r27
    148a:	60 e4       	ldi	r22, 0x40	; 64
    148c:	e6 16       	cp	r14, r22
    148e:	f1 04       	cpc	r15, r1
    1490:	01 05       	cpc	r16, r1
    1492:	11 05       	cpc	r17, r1
    1494:	61 f4       	brne	.+24     	; 0x14ae <__mulsf3+0x1d2>
    1496:	87 fd       	sbrc	r24, 7
    1498:	0a c0       	rjmp	.+20     	; 0x14ae <__mulsf3+0x1d2>
    149a:	21 15       	cp	r18, r1
    149c:	31 05       	cpc	r19, r1
    149e:	41 05       	cpc	r20, r1
    14a0:	51 05       	cpc	r21, r1
    14a2:	29 f0       	breq	.+10     	; 0x14ae <__mulsf3+0x1d2>
    14a4:	80 5c       	subi	r24, 0xC0	; 192
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	af 4f       	sbci	r26, 0xFF	; 255
    14aa:	bf 4f       	sbci	r27, 0xFF	; 255
    14ac:	80 78       	andi	r24, 0x80	; 128
    14ae:	8d 8f       	std	Y+29, r24	; 0x1d
    14b0:	9e 8f       	std	Y+30, r25	; 0x1e
    14b2:	af 8f       	std	Y+31, r26	; 0x1f
    14b4:	b8 a3       	std	Y+32, r27	; 0x20
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	89 8f       	std	Y+25, r24	; 0x19
    14ba:	ce 01       	movw	r24, r28
    14bc:	49 96       	adiw	r24, 0x19	; 25
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <__mulsf3+0x1e8>
    14c0:	82 e9       	ldi	r24, 0x92	; 146
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 04 0c 	call	0x1808	; 0x1808 <__pack_f>
    14c8:	a0 96       	adiw	r28, 0x20	; 32
    14ca:	e2 e1       	ldi	r30, 0x12	; 18
    14cc:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__epilogue_restores__>

000014d0 <__gtsf2>:
    14d0:	a8 e1       	ldi	r26, 0x18	; 24
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e6       	ldi	r30, 0x6E	; 110
    14d6:	fa e0       	ldi	r31, 0x0A	; 10
    14d8:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x18>
    14dc:	69 83       	std	Y+1, r22	; 0x01
    14de:	7a 83       	std	Y+2, r23	; 0x02
    14e0:	8b 83       	std	Y+3, r24	; 0x03
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	2d 83       	std	Y+5, r18	; 0x05
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	4f 83       	std	Y+7, r20	; 0x07
    14ea:	58 87       	std	Y+8, r21	; 0x08
    14ec:	8e 01       	movw	r16, r28
    14ee:	07 5f       	subi	r16, 0xF7	; 247
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	b8 01       	movw	r22, r16
    14f8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    14fc:	81 e1       	ldi	r24, 0x11	; 17
    14fe:	e8 2e       	mov	r14, r24
    1500:	f1 2c       	mov	r15, r1
    1502:	ec 0e       	add	r14, r28
    1504:	fd 1e       	adc	r15, r29
    1506:	ce 01       	movw	r24, r28
    1508:	05 96       	adiw	r24, 0x05	; 5
    150a:	b7 01       	movw	r22, r14
    150c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	40 f0       	brcs	.+16     	; 0x1526 <__gtsf2+0x56>
    1516:	89 89       	ldd	r24, Y+17	; 0x11
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	28 f0       	brcs	.+10     	; 0x1526 <__gtsf2+0x56>
    151c:	c8 01       	movw	r24, r16
    151e:	b7 01       	movw	r22, r14
    1520:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__fpcmp_parts_f>
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <__gtsf2+0x58>
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	68 96       	adiw	r28, 0x18	; 24
    152a:	e6 e0       	ldi	r30, 0x06	; 6
    152c:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x18>

00001530 <__gesf2>:
    1530:	a8 e1       	ldi	r26, 0x18	; 24
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ee e9       	ldi	r30, 0x9E	; 158
    1536:	fa e0       	ldi	r31, 0x0A	; 10
    1538:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x18>
    153c:	69 83       	std	Y+1, r22	; 0x01
    153e:	7a 83       	std	Y+2, r23	; 0x02
    1540:	8b 83       	std	Y+3, r24	; 0x03
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	2d 83       	std	Y+5, r18	; 0x05
    1546:	3e 83       	std	Y+6, r19	; 0x06
    1548:	4f 83       	std	Y+7, r20	; 0x07
    154a:	58 87       	std	Y+8, r21	; 0x08
    154c:	8e 01       	movw	r16, r28
    154e:	07 5f       	subi	r16, 0xF7	; 247
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	b8 01       	movw	r22, r16
    1558:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    155c:	81 e1       	ldi	r24, 0x11	; 17
    155e:	e8 2e       	mov	r14, r24
    1560:	f1 2c       	mov	r15, r1
    1562:	ec 0e       	add	r14, r28
    1564:	fd 1e       	adc	r15, r29
    1566:	ce 01       	movw	r24, r28
    1568:	05 96       	adiw	r24, 0x05	; 5
    156a:	b7 01       	movw	r22, r14
    156c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	40 f0       	brcs	.+16     	; 0x1586 <__gesf2+0x56>
    1576:	89 89       	ldd	r24, Y+17	; 0x11
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	28 f0       	brcs	.+10     	; 0x1586 <__gesf2+0x56>
    157c:	c8 01       	movw	r24, r16
    157e:	b7 01       	movw	r22, r14
    1580:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__fpcmp_parts_f>
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <__gesf2+0x58>
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	68 96       	adiw	r28, 0x18	; 24
    158a:	e6 e0       	ldi	r30, 0x06	; 6
    158c:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x18>

00001590 <__ltsf2>:
    1590:	a8 e1       	ldi	r26, 0x18	; 24
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ee ec       	ldi	r30, 0xCE	; 206
    1596:	fa e0       	ldi	r31, 0x0A	; 10
    1598:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x18>
    159c:	69 83       	std	Y+1, r22	; 0x01
    159e:	7a 83       	std	Y+2, r23	; 0x02
    15a0:	8b 83       	std	Y+3, r24	; 0x03
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	2d 83       	std	Y+5, r18	; 0x05
    15a6:	3e 83       	std	Y+6, r19	; 0x06
    15a8:	4f 83       	std	Y+7, r20	; 0x07
    15aa:	58 87       	std	Y+8, r21	; 0x08
    15ac:	8e 01       	movw	r16, r28
    15ae:	07 5f       	subi	r16, 0xF7	; 247
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	b8 01       	movw	r22, r16
    15b8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    15bc:	81 e1       	ldi	r24, 0x11	; 17
    15be:	e8 2e       	mov	r14, r24
    15c0:	f1 2c       	mov	r15, r1
    15c2:	ec 0e       	add	r14, r28
    15c4:	fd 1e       	adc	r15, r29
    15c6:	ce 01       	movw	r24, r28
    15c8:	05 96       	adiw	r24, 0x05	; 5
    15ca:	b7 01       	movw	r22, r14
    15cc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	40 f0       	brcs	.+16     	; 0x15e6 <__ltsf2+0x56>
    15d6:	89 89       	ldd	r24, Y+17	; 0x11
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	28 f0       	brcs	.+10     	; 0x15e6 <__ltsf2+0x56>
    15dc:	c8 01       	movw	r24, r16
    15de:	b7 01       	movw	r22, r14
    15e0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__fpcmp_parts_f>
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <__ltsf2+0x58>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	68 96       	adiw	r28, 0x18	; 24
    15ea:	e6 e0       	ldi	r30, 0x06	; 6
    15ec:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x18>

000015f0 <__floatsisf>:
    15f0:	a8 e0       	ldi	r26, 0x08	; 8
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ee ef       	ldi	r30, 0xFE	; 254
    15f6:	fa e0       	ldi	r31, 0x0A	; 10
    15f8:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x18>
    15fc:	7b 01       	movw	r14, r22
    15fe:	8c 01       	movw	r16, r24
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	d8 01       	movw	r26, r16
    1606:	c7 01       	movw	r24, r14
    1608:	88 27       	eor	r24, r24
    160a:	b7 fd       	sbrc	r27, 7
    160c:	83 95       	inc	r24
    160e:	99 27       	eor	r25, r25
    1610:	aa 27       	eor	r26, r26
    1612:	bb 27       	eor	r27, r27
    1614:	28 2f       	mov	r18, r24
    1616:	8a 83       	std	Y+2, r24	; 0x02
    1618:	e1 14       	cp	r14, r1
    161a:	f1 04       	cpc	r15, r1
    161c:	01 05       	cpc	r16, r1
    161e:	11 05       	cpc	r17, r1
    1620:	19 f4       	brne	.+6      	; 0x1628 <__floatsisf+0x38>
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	37 c0       	rjmp	.+110    	; 0x1696 <__floatsisf+0xa6>
    1628:	8e e1       	ldi	r24, 0x1E	; 30
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
    1630:	22 23       	and	r18, r18
    1632:	89 f0       	breq	.+34     	; 0x1656 <__floatsisf+0x66>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	e8 16       	cp	r14, r24
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	f8 06       	cpc	r15, r24
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	08 07       	cpc	r16, r24
    1640:	80 e8       	ldi	r24, 0x80	; 128
    1642:	18 07       	cpc	r17, r24
    1644:	69 f1       	breq	.+90     	; 0x16a0 <__floatsisf+0xb0>
    1646:	10 95       	com	r17
    1648:	00 95       	com	r16
    164a:	f0 94       	com	r15
    164c:	e0 94       	com	r14
    164e:	e1 1c       	adc	r14, r1
    1650:	f1 1c       	adc	r15, r1
    1652:	01 1d       	adc	r16, r1
    1654:	11 1d       	adc	r17, r1
    1656:	ed 82       	std	Y+5, r14	; 0x05
    1658:	fe 82       	std	Y+6, r15	; 0x06
    165a:	0f 83       	std	Y+7, r16	; 0x07
    165c:	18 87       	std	Y+8, r17	; 0x08
    165e:	c8 01       	movw	r24, r16
    1660:	b7 01       	movw	r22, r14
    1662:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__clzsi2>
    1666:	9c 01       	movw	r18, r24
    1668:	21 50       	subi	r18, 0x01	; 1
    166a:	30 40       	sbci	r19, 0x00	; 0
    166c:	12 16       	cp	r1, r18
    166e:	13 06       	cpc	r1, r19
    1670:	94 f4       	brge	.+36     	; 0x1696 <__floatsisf+0xa6>
    1672:	02 2e       	mov	r0, r18
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__floatsisf+0x8e>
    1676:	ee 0c       	add	r14, r14
    1678:	ff 1c       	adc	r15, r15
    167a:	00 1f       	adc	r16, r16
    167c:	11 1f       	adc	r17, r17
    167e:	0a 94       	dec	r0
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <__floatsisf+0x86>
    1682:	ed 82       	std	Y+5, r14	; 0x05
    1684:	fe 82       	std	Y+6, r15	; 0x06
    1686:	0f 83       	std	Y+7, r16	; 0x07
    1688:	18 87       	std	Y+8, r17	; 0x08
    168a:	8e e1       	ldi	r24, 0x1E	; 30
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	82 1b       	sub	r24, r18
    1690:	93 0b       	sbc	r25, r19
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	0e 94 04 0c 	call	0x1808	; 0x1808 <__pack_f>
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <__floatsisf+0xb8>
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	9f ec       	ldi	r25, 0xCF	; 207
    16a8:	28 96       	adiw	r28, 0x08	; 8
    16aa:	e6 e0       	ldi	r30, 0x06	; 6
    16ac:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x18>

000016b0 <__fixsfsi>:
    16b0:	ac e0       	ldi	r26, 0x0C	; 12
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e5       	ldi	r30, 0x5E	; 94
    16b6:	fb e0       	ldi	r31, 0x0B	; 11
    16b8:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__prologue_saves__+0x20>
    16bc:	69 83       	std	Y+1, r22	; 0x01
    16be:	7a 83       	std	Y+2, r23	; 0x02
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	ce 01       	movw	r24, r28
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	be 01       	movw	r22, r28
    16ca:	6b 5f       	subi	r22, 0xFB	; 251
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__unpack_f>
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	81 f1       	breq	.+96     	; 0x1738 <__fixsfsi+0x88>
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	70 f1       	brcs	.+92     	; 0x1738 <__fixsfsi+0x88>
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	21 f4       	brne	.+8      	; 0x16e8 <__fixsfsi+0x38>
    16e0:	8e 81       	ldd	r24, Y+6	; 0x06
    16e2:	88 23       	and	r24, r24
    16e4:	69 f1       	breq	.+90     	; 0x1740 <__fixsfsi+0x90>
    16e6:	0a c0       	rjmp	.+20     	; 0x16fc <__fixsfsi+0x4c>
    16e8:	2f 81       	ldd	r18, Y+7	; 0x07
    16ea:	38 85       	ldd	r19, Y+8	; 0x08
    16ec:	37 fd       	sbrc	r19, 7
    16ee:	24 c0       	rjmp	.+72     	; 0x1738 <__fixsfsi+0x88>
    16f0:	6e 81       	ldd	r22, Y+6	; 0x06
    16f2:	2f 31       	cpi	r18, 0x1F	; 31
    16f4:	31 05       	cpc	r19, r1
    16f6:	3c f0       	brlt	.+14     	; 0x1706 <__fixsfsi+0x56>
    16f8:	66 23       	and	r22, r22
    16fa:	11 f1       	breq	.+68     	; 0x1740 <__fixsfsi+0x90>
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e8       	ldi	r21, 0x80	; 128
    1704:	21 c0       	rjmp	.+66     	; 0x1748 <__fixsfsi+0x98>
    1706:	8e e1       	ldi	r24, 0x1E	; 30
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	82 1b       	sub	r24, r18
    170c:	93 0b       	sbc	r25, r19
    170e:	29 85       	ldd	r18, Y+9	; 0x09
    1710:	3a 85       	ldd	r19, Y+10	; 0x0a
    1712:	4b 85       	ldd	r20, Y+11	; 0x0b
    1714:	5c 85       	ldd	r21, Y+12	; 0x0c
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <__fixsfsi+0x70>
    1718:	56 95       	lsr	r21
    171a:	47 95       	ror	r20
    171c:	37 95       	ror	r19
    171e:	27 95       	ror	r18
    1720:	8a 95       	dec	r24
    1722:	d2 f7       	brpl	.-12     	; 0x1718 <__fixsfsi+0x68>
    1724:	66 23       	and	r22, r22
    1726:	81 f0       	breq	.+32     	; 0x1748 <__fixsfsi+0x98>
    1728:	50 95       	com	r21
    172a:	40 95       	com	r20
    172c:	30 95       	com	r19
    172e:	21 95       	neg	r18
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	4f 4f       	sbci	r20, 0xFF	; 255
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	08 c0       	rjmp	.+16     	; 0x1748 <__fixsfsi+0x98>
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__fixsfsi+0x98>
    1740:	2f ef       	ldi	r18, 0xFF	; 255
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f ef       	ldi	r20, 0xFF	; 255
    1746:	5f e7       	ldi	r21, 0x7F	; 127
    1748:	b9 01       	movw	r22, r18
    174a:	ca 01       	movw	r24, r20
    174c:	2c 96       	adiw	r28, 0x0c	; 12
    174e:	e2 e0       	ldi	r30, 0x02	; 2
    1750:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__epilogue_restores__+0x20>

00001754 <__clzsi2>:
    1754:	af 92       	push	r10
    1756:	bf 92       	push	r11
    1758:	cf 92       	push	r12
    175a:	df 92       	push	r13
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	7b 01       	movw	r14, r22
    1766:	8c 01       	movw	r16, r24
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	e8 16       	cp	r14, r24
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	f8 06       	cpc	r15, r24
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	08 07       	cpc	r16, r24
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	18 07       	cpc	r17, r24
    1778:	58 f4       	brcc	.+22     	; 0x1790 <__clzsi2+0x3c>
    177a:	ef ef       	ldi	r30, 0xFF	; 255
    177c:	ee 16       	cp	r14, r30
    177e:	f1 04       	cpc	r15, r1
    1780:	01 05       	cpc	r16, r1
    1782:	11 05       	cpc	r17, r1
    1784:	09 f0       	breq	.+2      	; 0x1788 <__clzsi2+0x34>
    1786:	90 f4       	brcc	.+36     	; 0x17ac <__clzsi2+0x58>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	dc 01       	movw	r26, r24
    178e:	17 c0       	rjmp	.+46     	; 0x17be <__clzsi2+0x6a>
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	ef 16       	cp	r14, r31
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	ff 06       	cpc	r15, r31
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	0f 07       	cpc	r16, r31
    179c:	f1 e0       	ldi	r31, 0x01	; 1
    179e:	1f 07       	cpc	r17, r31
    17a0:	50 f4       	brcc	.+20     	; 0x17b6 <__clzsi2+0x62>
    17a2:	80 e1       	ldi	r24, 0x10	; 16
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <__clzsi2+0x6a>
    17ac:	88 e0       	ldi	r24, 0x08	; 8
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 e0       	ldi	r26, 0x00	; 0
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <__clzsi2+0x6a>
    17b6:	88 e1       	ldi	r24, 0x18	; 24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e0       	ldi	r26, 0x00	; 0
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	20 e2       	ldi	r18, 0x20	; 32
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	28 1b       	sub	r18, r24
    17c8:	39 0b       	sbc	r19, r25
    17ca:	4a 0b       	sbc	r20, r26
    17cc:	5b 0b       	sbc	r21, r27
    17ce:	57 01       	movw	r10, r14
    17d0:	68 01       	movw	r12, r16
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__clzsi2+0x88>
    17d4:	d6 94       	lsr	r13
    17d6:	c7 94       	ror	r12
    17d8:	b7 94       	ror	r11
    17da:	a7 94       	ror	r10
    17dc:	8a 95       	dec	r24
    17de:	d2 f7       	brpl	.-12     	; 0x17d4 <__clzsi2+0x80>
    17e0:	d6 01       	movw	r26, r12
    17e2:	c5 01       	movw	r24, r10
    17e4:	86 56       	subi	r24, 0x66	; 102
    17e6:	9e 4f       	sbci	r25, 0xFE	; 254
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	28 1b       	sub	r18, r24
    17ee:	31 09       	sbc	r19, r1
    17f0:	41 09       	sbc	r20, r1
    17f2:	51 09       	sbc	r21, r1
    17f4:	c9 01       	movw	r24, r18
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	08 95       	ret

00001808 <__pack_f>:
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	fc 01       	movw	r30, r24
    1816:	24 81       	ldd	r18, Z+4	; 0x04
    1818:	35 81       	ldd	r19, Z+5	; 0x05
    181a:	46 81       	ldd	r20, Z+6	; 0x06
    181c:	57 81       	ldd	r21, Z+7	; 0x07
    181e:	61 81       	ldd	r22, Z+1	; 0x01
    1820:	80 81       	ld	r24, Z
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	20 f4       	brcc	.+8      	; 0x182e <__pack_f+0x26>
    1826:	40 61       	ori	r20, 0x10	; 16
    1828:	ef ef       	ldi	r30, 0xFF	; 255
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	a3 c0       	rjmp	.+326    	; 0x1974 <__pack_f+0x16c>
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	09 f4       	brne	.+2      	; 0x1834 <__pack_f+0x2c>
    1832:	9b c0       	rjmp	.+310    	; 0x196a <__pack_f+0x162>
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	09 f4       	brne	.+2      	; 0x183a <__pack_f+0x32>
    1838:	92 c0       	rjmp	.+292    	; 0x195e <__pack_f+0x156>
    183a:	21 15       	cp	r18, r1
    183c:	31 05       	cpc	r19, r1
    183e:	41 05       	cpc	r20, r1
    1840:	51 05       	cpc	r21, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <__pack_f+0x3e>
    1844:	8f c0       	rjmp	.+286    	; 0x1964 <__pack_f+0x15c>
    1846:	02 80       	ldd	r0, Z+2	; 0x02
    1848:	f3 81       	ldd	r31, Z+3	; 0x03
    184a:	e0 2d       	mov	r30, r0
    184c:	8f ef       	ldi	r24, 0xFF	; 255
    184e:	e2 38       	cpi	r30, 0x82	; 130
    1850:	f8 07       	cpc	r31, r24
    1852:	0c f0       	brlt	.+2      	; 0x1856 <__pack_f+0x4e>
    1854:	5a c0       	rjmp	.+180    	; 0x190a <__pack_f+0x102>
    1856:	c2 e8       	ldi	r28, 0x82	; 130
    1858:	df ef       	ldi	r29, 0xFF	; 255
    185a:	ce 1b       	sub	r28, r30
    185c:	df 0b       	sbc	r29, r31
    185e:	ca 31       	cpi	r28, 0x1A	; 26
    1860:	d1 05       	cpc	r29, r1
    1862:	6c f5       	brge	.+90     	; 0x18be <__pack_f+0xb6>
    1864:	79 01       	movw	r14, r18
    1866:	8a 01       	movw	r16, r20
    1868:	0c 2e       	mov	r0, r28
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <__pack_f+0x6c>
    186c:	16 95       	lsr	r17
    186e:	07 95       	ror	r16
    1870:	f7 94       	ror	r15
    1872:	e7 94       	ror	r14
    1874:	0a 94       	dec	r0
    1876:	d2 f7       	brpl	.-12     	; 0x186c <__pack_f+0x64>
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e0       	ldi	r26, 0x00	; 0
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	0c 2e       	mov	r0, r28
    1882:	04 c0       	rjmp	.+8      	; 0x188c <__pack_f+0x84>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	aa 1f       	adc	r26, r26
    188a:	bb 1f       	adc	r27, r27
    188c:	0a 94       	dec	r0
    188e:	d2 f7       	brpl	.-12     	; 0x1884 <__pack_f+0x7c>
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	a1 09       	sbc	r26, r1
    1894:	b1 09       	sbc	r27, r1
    1896:	82 23       	and	r24, r18
    1898:	93 23       	and	r25, r19
    189a:	a4 23       	and	r26, r20
    189c:	b5 23       	and	r27, r21
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	a1 05       	cpc	r26, r1
    18aa:	b1 05       	cpc	r27, r1
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <__pack_f+0xac>
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	2e 29       	or	r18, r14
    18b6:	3f 29       	or	r19, r15
    18b8:	40 2b       	or	r20, r16
    18ba:	51 2b       	or	r21, r17
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <__pack_f+0xbc>
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	da 01       	movw	r26, r20
    18c6:	c9 01       	movw	r24, r18
    18c8:	8f 77       	andi	r24, 0x7F	; 127
    18ca:	90 70       	andi	r25, 0x00	; 0
    18cc:	a0 70       	andi	r26, 0x00	; 0
    18ce:	b0 70       	andi	r27, 0x00	; 0
    18d0:	80 34       	cpi	r24, 0x40	; 64
    18d2:	91 05       	cpc	r25, r1
    18d4:	a1 05       	cpc	r26, r1
    18d6:	b1 05       	cpc	r27, r1
    18d8:	39 f4       	brne	.+14     	; 0x18e8 <__pack_f+0xe0>
    18da:	27 ff       	sbrs	r18, 7
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <__pack_f+0xe8>
    18de:	20 5c       	subi	r18, 0xC0	; 192
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	4f 4f       	sbci	r20, 0xFF	; 255
    18e4:	5f 4f       	sbci	r21, 0xFF	; 255
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <__pack_f+0xe8>
    18e8:	21 5c       	subi	r18, 0xC1	; 193
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	4f 4f       	sbci	r20, 0xFF	; 255
    18ee:	5f 4f       	sbci	r21, 0xFF	; 255
    18f0:	e1 e0       	ldi	r30, 0x01	; 1
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	20 30       	cpi	r18, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	38 07       	cpc	r19, r24
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	48 07       	cpc	r20, r24
    18fe:	80 e4       	ldi	r24, 0x40	; 64
    1900:	58 07       	cpc	r21, r24
    1902:	28 f5       	brcc	.+74     	; 0x194e <__pack_f+0x146>
    1904:	e0 e0       	ldi	r30, 0x00	; 0
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	22 c0       	rjmp	.+68     	; 0x194e <__pack_f+0x146>
    190a:	e0 38       	cpi	r30, 0x80	; 128
    190c:	f1 05       	cpc	r31, r1
    190e:	6c f5       	brge	.+90     	; 0x196a <__pack_f+0x162>
    1910:	e1 58       	subi	r30, 0x81	; 129
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	da 01       	movw	r26, r20
    1916:	c9 01       	movw	r24, r18
    1918:	8f 77       	andi	r24, 0x7F	; 127
    191a:	90 70       	andi	r25, 0x00	; 0
    191c:	a0 70       	andi	r26, 0x00	; 0
    191e:	b0 70       	andi	r27, 0x00	; 0
    1920:	80 34       	cpi	r24, 0x40	; 64
    1922:	91 05       	cpc	r25, r1
    1924:	a1 05       	cpc	r26, r1
    1926:	b1 05       	cpc	r27, r1
    1928:	39 f4       	brne	.+14     	; 0x1938 <__pack_f+0x130>
    192a:	27 ff       	sbrs	r18, 7
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <__pack_f+0x138>
    192e:	20 5c       	subi	r18, 0xC0	; 192
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	4f 4f       	sbci	r20, 0xFF	; 255
    1934:	5f 4f       	sbci	r21, 0xFF	; 255
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <__pack_f+0x138>
    1938:	21 5c       	subi	r18, 0xC1	; 193
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	4f 4f       	sbci	r20, 0xFF	; 255
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	57 ff       	sbrs	r21, 7
    1942:	05 c0       	rjmp	.+10     	; 0x194e <__pack_f+0x146>
    1944:	56 95       	lsr	r21
    1946:	47 95       	ror	r20
    1948:	37 95       	ror	r19
    194a:	27 95       	ror	r18
    194c:	31 96       	adiw	r30, 0x01	; 1
    194e:	87 e0       	ldi	r24, 0x07	; 7
    1950:	56 95       	lsr	r21
    1952:	47 95       	ror	r20
    1954:	37 95       	ror	r19
    1956:	27 95       	ror	r18
    1958:	8a 95       	dec	r24
    195a:	d1 f7       	brne	.-12     	; 0x1950 <__pack_f+0x148>
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <__pack_f+0x16c>
    195e:	e0 e0       	ldi	r30, 0x00	; 0
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	05 c0       	rjmp	.+10     	; 0x196e <__pack_f+0x166>
    1964:	e0 e0       	ldi	r30, 0x00	; 0
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <__pack_f+0x16c>
    196a:	ef ef       	ldi	r30, 0xFF	; 255
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	a9 01       	movw	r20, r18
    1974:	8e 2f       	mov	r24, r30
    1976:	87 95       	ror	r24
    1978:	88 27       	eor	r24, r24
    197a:	87 95       	ror	r24
    197c:	94 2f       	mov	r25, r20
    197e:	9f 77       	andi	r25, 0x7F	; 127
    1980:	67 95       	ror	r22
    1982:	66 27       	eor	r22, r22
    1984:	67 95       	ror	r22
    1986:	e6 95       	lsr	r30
    1988:	e2 2e       	mov	r14, r18
    198a:	a9 2f       	mov	r26, r25
    198c:	a8 2b       	or	r26, r24
    198e:	fe 2f       	mov	r31, r30
    1990:	f6 2b       	or	r31, r22
    1992:	62 2f       	mov	r22, r18
    1994:	73 2f       	mov	r23, r19
    1996:	8a 2f       	mov	r24, r26
    1998:	9f 2f       	mov	r25, r31
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	e6 e0       	ldi	r30, 0x06	; 6
    19a0:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x18>

000019a4 <__unpack_f>:
    19a4:	dc 01       	movw	r26, r24
    19a6:	fb 01       	movw	r30, r22
    19a8:	2c 91       	ld	r18, X
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	3c 91       	ld	r19, X
    19ae:	11 97       	sbiw	r26, 0x01	; 1
    19b0:	12 96       	adiw	r26, 0x02	; 2
    19b2:	8c 91       	ld	r24, X
    19b4:	12 97       	sbiw	r26, 0x02	; 2
    19b6:	48 2f       	mov	r20, r24
    19b8:	4f 77       	andi	r20, 0x7F	; 127
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	98 2f       	mov	r25, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	99 27       	eor	r25, r25
    19c2:	99 1f       	adc	r25, r25
    19c4:	13 96       	adiw	r26, 0x03	; 3
    19c6:	6c 91       	ld	r22, X
    19c8:	13 97       	sbiw	r26, 0x03	; 3
    19ca:	86 2f       	mov	r24, r22
    19cc:	88 0f       	add	r24, r24
    19ce:	89 2b       	or	r24, r25
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	66 1f       	adc	r22, r22
    19d4:	66 27       	eor	r22, r22
    19d6:	66 1f       	adc	r22, r22
    19d8:	61 83       	std	Z+1, r22	; 0x01
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	39 f5       	brne	.+78     	; 0x1a2c <__unpack_f+0x88>
    19de:	21 15       	cp	r18, r1
    19e0:	31 05       	cpc	r19, r1
    19e2:	41 05       	cpc	r20, r1
    19e4:	51 05       	cpc	r21, r1
    19e6:	11 f4       	brne	.+4      	; 0x19ec <__unpack_f+0x48>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	29 c0       	rjmp	.+82     	; 0x1a3e <__unpack_f+0x9a>
    19ec:	82 e8       	ldi	r24, 0x82	; 130
    19ee:	9f ef       	ldi	r25, 0xFF	; 255
    19f0:	93 83       	std	Z+3, r25	; 0x03
    19f2:	82 83       	std	Z+2, r24	; 0x02
    19f4:	67 e0       	ldi	r22, 0x07	; 7
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	44 1f       	adc	r20, r20
    19fc:	55 1f       	adc	r21, r21
    19fe:	6a 95       	dec	r22
    1a00:	d1 f7       	brne	.-12     	; 0x19f6 <__unpack_f+0x52>
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	80 83       	st	Z, r24
    1a06:	09 c0       	rjmp	.+18     	; 0x1a1a <__unpack_f+0x76>
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	44 1f       	adc	r20, r20
    1a0e:	55 1f       	adc	r21, r21
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	93 83       	std	Z+3, r25	; 0x03
    1a18:	82 83       	std	Z+2, r24	; 0x02
    1a1a:	20 30       	cpi	r18, 0x00	; 0
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	38 07       	cpc	r19, r24
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	48 07       	cpc	r20, r24
    1a24:	80 e4       	ldi	r24, 0x40	; 64
    1a26:	58 07       	cpc	r21, r24
    1a28:	78 f3       	brcs	.-34     	; 0x1a08 <__unpack_f+0x64>
    1a2a:	20 c0       	rjmp	.+64     	; 0x1a6c <__unpack_f+0xc8>
    1a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a2e:	91 05       	cpc	r25, r1
    1a30:	79 f4       	brne	.+30     	; 0x1a50 <__unpack_f+0xac>
    1a32:	21 15       	cp	r18, r1
    1a34:	31 05       	cpc	r19, r1
    1a36:	41 05       	cpc	r20, r1
    1a38:	51 05       	cpc	r21, r1
    1a3a:	19 f4       	brne	.+6      	; 0x1a42 <__unpack_f+0x9e>
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	80 83       	st	Z, r24
    1a40:	08 95       	ret
    1a42:	44 ff       	sbrs	r20, 4
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <__unpack_f+0xa8>
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 83       	st	Z, r24
    1a4a:	10 c0       	rjmp	.+32     	; 0x1a6c <__unpack_f+0xc8>
    1a4c:	10 82       	st	Z, r1
    1a4e:	0e c0       	rjmp	.+28     	; 0x1a6c <__unpack_f+0xc8>
    1a50:	8f 57       	subi	r24, 0x7F	; 127
    1a52:	90 40       	sbci	r25, 0x00	; 0
    1a54:	93 83       	std	Z+3, r25	; 0x03
    1a56:	82 83       	std	Z+2, r24	; 0x02
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	80 83       	st	Z, r24
    1a5c:	87 e0       	ldi	r24, 0x07	; 7
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	44 1f       	adc	r20, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	8a 95       	dec	r24
    1a68:	d1 f7       	brne	.-12     	; 0x1a5e <__unpack_f+0xba>
    1a6a:	50 64       	ori	r21, 0x40	; 64
    1a6c:	24 83       	std	Z+4, r18	; 0x04
    1a6e:	35 83       	std	Z+5, r19	; 0x05
    1a70:	46 83       	std	Z+6, r20	; 0x06
    1a72:	57 83       	std	Z+7, r21	; 0x07
    1a74:	08 95       	ret

00001a76 <__fpcmp_parts_f>:
    1a76:	fc 01       	movw	r30, r24
    1a78:	db 01       	movw	r26, r22
    1a7a:	90 81       	ld	r25, Z
    1a7c:	92 30       	cpi	r25, 0x02	; 2
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <__fpcmp_parts_f+0xc>
    1a80:	49 c0       	rjmp	.+146    	; 0x1b14 <__fpcmp_parts_f+0x9e>
    1a82:	8c 91       	ld	r24, X
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	08 f4       	brcc	.+2      	; 0x1a8a <__fpcmp_parts_f+0x14>
    1a88:	45 c0       	rjmp	.+138    	; 0x1b14 <__fpcmp_parts_f+0x9e>
    1a8a:	94 30       	cpi	r25, 0x04	; 4
    1a8c:	51 f4       	brne	.+20     	; 0x1aa2 <__fpcmp_parts_f+0x2c>
    1a8e:	61 81       	ldd	r22, Z+1	; 0x01
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	b1 f5       	brne	.+108    	; 0x1b00 <__fpcmp_parts_f+0x8a>
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	2c 91       	ld	r18, X
    1a98:	11 97       	sbiw	r26, 0x01	; 1
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	26 1b       	sub	r18, r22
    1a9e:	31 09       	sbc	r19, r1
    1aa0:	41 c0       	rjmp	.+130    	; 0x1b24 <__fpcmp_parts_f+0xae>
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	21 f0       	breq	.+8      	; 0x1aae <__fpcmp_parts_f+0x38>
    1aa6:	92 30       	cpi	r25, 0x02	; 2
    1aa8:	41 f4       	brne	.+16     	; 0x1aba <__fpcmp_parts_f+0x44>
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	b1 f1       	breq	.+108    	; 0x1b1a <__fpcmp_parts_f+0xa4>
    1aae:	11 96       	adiw	r26, 0x01	; 1
    1ab0:	8c 91       	ld	r24, X
    1ab2:	11 97       	sbiw	r26, 0x01	; 1
    1ab4:	88 23       	and	r24, r24
    1ab6:	a1 f1       	breq	.+104    	; 0x1b20 <__fpcmp_parts_f+0xaa>
    1ab8:	2d c0       	rjmp	.+90     	; 0x1b14 <__fpcmp_parts_f+0x9e>
    1aba:	61 81       	ldd	r22, Z+1	; 0x01
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	01 f1       	breq	.+64     	; 0x1b00 <__fpcmp_parts_f+0x8a>
    1ac0:	11 96       	adiw	r26, 0x01	; 1
    1ac2:	8c 91       	ld	r24, X
    1ac4:	11 97       	sbiw	r26, 0x01	; 1
    1ac6:	68 17       	cp	r22, r24
    1ac8:	d9 f4       	brne	.+54     	; 0x1b00 <__fpcmp_parts_f+0x8a>
    1aca:	22 81       	ldd	r18, Z+2	; 0x02
    1acc:	33 81       	ldd	r19, Z+3	; 0x03
    1ace:	12 96       	adiw	r26, 0x02	; 2
    1ad0:	8d 91       	ld	r24, X+
    1ad2:	9c 91       	ld	r25, X
    1ad4:	13 97       	sbiw	r26, 0x03	; 3
    1ad6:	82 17       	cp	r24, r18
    1ad8:	93 07       	cpc	r25, r19
    1ada:	94 f0       	brlt	.+36     	; 0x1b00 <__fpcmp_parts_f+0x8a>
    1adc:	28 17       	cp	r18, r24
    1ade:	39 07       	cpc	r19, r25
    1ae0:	bc f0       	brlt	.+46     	; 0x1b10 <__fpcmp_parts_f+0x9a>
    1ae2:	24 81       	ldd	r18, Z+4	; 0x04
    1ae4:	35 81       	ldd	r19, Z+5	; 0x05
    1ae6:	46 81       	ldd	r20, Z+6	; 0x06
    1ae8:	57 81       	ldd	r21, Z+7	; 0x07
    1aea:	14 96       	adiw	r26, 0x04	; 4
    1aec:	8d 91       	ld	r24, X+
    1aee:	9d 91       	ld	r25, X+
    1af0:	0d 90       	ld	r0, X+
    1af2:	bc 91       	ld	r27, X
    1af4:	a0 2d       	mov	r26, r0
    1af6:	82 17       	cp	r24, r18
    1af8:	93 07       	cpc	r25, r19
    1afa:	a4 07       	cpc	r26, r20
    1afc:	b5 07       	cpc	r27, r21
    1afe:	18 f4       	brcc	.+6      	; 0x1b06 <__fpcmp_parts_f+0x90>
    1b00:	66 23       	and	r22, r22
    1b02:	41 f0       	breq	.+16     	; 0x1b14 <__fpcmp_parts_f+0x9e>
    1b04:	0d c0       	rjmp	.+26     	; 0x1b20 <__fpcmp_parts_f+0xaa>
    1b06:	28 17       	cp	r18, r24
    1b08:	39 07       	cpc	r19, r25
    1b0a:	4a 07       	cpc	r20, r26
    1b0c:	5b 07       	cpc	r21, r27
    1b0e:	28 f4       	brcc	.+10     	; 0x1b1a <__fpcmp_parts_f+0xa4>
    1b10:	66 23       	and	r22, r22
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <__fpcmp_parts_f+0xaa>
    1b14:	21 e0       	ldi	r18, 0x01	; 1
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <__fpcmp_parts_f+0xae>
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <__fpcmp_parts_f+0xae>
    1b20:	2f ef       	ldi	r18, 0xFF	; 255
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	c9 01       	movw	r24, r18
    1b26:	08 95       	ret

00001b28 <__prologue_saves__>:
    1b28:	2f 92       	push	r2
    1b2a:	3f 92       	push	r3
    1b2c:	4f 92       	push	r4
    1b2e:	5f 92       	push	r5
    1b30:	6f 92       	push	r6
    1b32:	7f 92       	push	r7
    1b34:	8f 92       	push	r8
    1b36:	9f 92       	push	r9
    1b38:	af 92       	push	r10
    1b3a:	bf 92       	push	r11
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	ca 1b       	sub	r28, r26
    1b52:	db 0b       	sbc	r29, r27
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	09 94       	ijmp

00001b60 <__epilogue_restores__>:
    1b60:	2a 88       	ldd	r2, Y+18	; 0x12
    1b62:	39 88       	ldd	r3, Y+17	; 0x11
    1b64:	48 88       	ldd	r4, Y+16	; 0x10
    1b66:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b68:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b70:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b72:	b9 84       	ldd	r11, Y+9	; 0x09
    1b74:	c8 84       	ldd	r12, Y+8	; 0x08
    1b76:	df 80       	ldd	r13, Y+7	; 0x07
    1b78:	ee 80       	ldd	r14, Y+6	; 0x06
    1b7a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b7c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b7e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b80:	aa 81       	ldd	r26, Y+2	; 0x02
    1b82:	b9 81       	ldd	r27, Y+1	; 0x01
    1b84:	ce 0f       	add	r28, r30
    1b86:	d1 1d       	adc	r29, r1
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	ed 01       	movw	r28, r26
    1b94:	08 95       	ret

00001b96 <fdevopen>:
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	8c 01       	movw	r16, r24
    1ba0:	eb 01       	movw	r28, r22
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <fdevopen+0x14>
    1ba6:	20 97       	sbiw	r28, 0x00	; 0
    1ba8:	c9 f1       	breq	.+114    	; 0x1c1c <fdevopen+0x86>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	6e e0       	ldi	r22, 0x0E	; 14
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	0e 94 6f 10 	call	0x20de	; 0x20de <calloc>
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	9c 01       	movw	r18, r24
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	89 f1       	breq	.+98     	; 0x1c20 <fdevopen+0x8a>
    1bbe:	80 e8       	ldi	r24, 0x80	; 128
    1bc0:	83 83       	std	Z+3, r24	; 0x03
    1bc2:	20 97       	sbiw	r28, 0x00	; 0
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <fdevopen+0x4c>
    1bc6:	d3 87       	std	Z+11, r29	; 0x0b
    1bc8:	c2 87       	std	Z+10, r28	; 0x0a
    1bca:	81 e8       	ldi	r24, 0x81	; 129
    1bcc:	83 83       	std	Z+3, r24	; 0x03
    1bce:	80 91 a1 02 	lds	r24, 0x02A1
    1bd2:	90 91 a2 02 	lds	r25, 0x02A2
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <fdevopen+0x4c>
    1bda:	f0 93 a2 02 	sts	0x02A2, r31
    1bde:	e0 93 a1 02 	sts	0x02A1, r30
    1be2:	01 15       	cp	r16, r1
    1be4:	11 05       	cpc	r17, r1
    1be6:	e1 f0       	breq	.+56     	; 0x1c20 <fdevopen+0x8a>
    1be8:	11 87       	std	Z+9, r17	; 0x09
    1bea:	00 87       	std	Z+8, r16	; 0x08
    1bec:	83 81       	ldd	r24, Z+3	; 0x03
    1bee:	82 60       	ori	r24, 0x02	; 2
    1bf0:	83 83       	std	Z+3, r24	; 0x03
    1bf2:	80 91 a3 02 	lds	r24, 0x02A3
    1bf6:	90 91 a4 02 	lds	r25, 0x02A4
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	89 f4       	brne	.+34     	; 0x1c20 <fdevopen+0x8a>
    1bfe:	f0 93 a4 02 	sts	0x02A4, r31
    1c02:	e0 93 a3 02 	sts	0x02A3, r30
    1c06:	80 91 a5 02 	lds	r24, 0x02A5
    1c0a:	90 91 a6 02 	lds	r25, 0x02A6
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	39 f4       	brne	.+14     	; 0x1c20 <fdevopen+0x8a>
    1c12:	f0 93 a6 02 	sts	0x02A6, r31
    1c16:	e0 93 a5 02 	sts	0x02A5, r30
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <fdevopen+0x8a>
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	c9 01       	movw	r24, r18
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <printf>:
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	fe 01       	movw	r30, r28
    1c36:	35 96       	adiw	r30, 0x05	; 5
    1c38:	61 91       	ld	r22, Z+
    1c3a:	71 91       	ld	r23, Z+
    1c3c:	80 91 a3 02 	lds	r24, 0x02A3
    1c40:	90 91 a4 02 	lds	r25, 0x02A4
    1c44:	af 01       	movw	r20, r30
    1c46:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <vfprintf>
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <puts>:
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	8c 01       	movw	r16, r24
    1c5e:	e0 91 a3 02 	lds	r30, 0x02A3
    1c62:	f0 91 a4 02 	lds	r31, 0x02A4
    1c66:	83 81       	ldd	r24, Z+3	; 0x03
    1c68:	81 ff       	sbrs	r24, 1
    1c6a:	1f c0       	rjmp	.+62     	; 0x1caa <puts+0x5a>
    1c6c:	c0 e0       	ldi	r28, 0x00	; 0
    1c6e:	d0 e0       	ldi	r29, 0x00	; 0
    1c70:	0a c0       	rjmp	.+20     	; 0x1c86 <puts+0x36>
    1c72:	db 01       	movw	r26, r22
    1c74:	18 96       	adiw	r26, 0x08	; 8
    1c76:	ed 91       	ld	r30, X+
    1c78:	fc 91       	ld	r31, X
    1c7a:	19 97       	sbiw	r26, 0x09	; 9
    1c7c:	09 95       	icall
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <puts+0x36>
    1c82:	cf ef       	ldi	r28, 0xFF	; 255
    1c84:	df ef       	ldi	r29, 0xFF	; 255
    1c86:	f8 01       	movw	r30, r16
    1c88:	81 91       	ld	r24, Z+
    1c8a:	8f 01       	movw	r16, r30
    1c8c:	60 91 a3 02 	lds	r22, 0x02A3
    1c90:	70 91 a4 02 	lds	r23, 0x02A4
    1c94:	88 23       	and	r24, r24
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <puts+0x22>
    1c98:	db 01       	movw	r26, r22
    1c9a:	18 96       	adiw	r26, 0x08	; 8
    1c9c:	ed 91       	ld	r30, X+
    1c9e:	fc 91       	ld	r31, X
    1ca0:	19 97       	sbiw	r26, 0x09	; 9
    1ca2:	8a e0       	ldi	r24, 0x0A	; 10
    1ca4:	09 95       	icall
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <puts+0x5e>
    1caa:	cf ef       	ldi	r28, 0xFF	; 255
    1cac:	df ef       	ldi	r29, 0xFF	; 255
    1cae:	ce 01       	movw	r24, r28
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	08 95       	ret

00001cbe <vfprintf>:
    1cbe:	2f 92       	push	r2
    1cc0:	3f 92       	push	r3
    1cc2:	4f 92       	push	r4
    1cc4:	5f 92       	push	r5
    1cc6:	6f 92       	push	r6
    1cc8:	7f 92       	push	r7
    1cca:	8f 92       	push	r8
    1ccc:	9f 92       	push	r9
    1cce:	af 92       	push	r10
    1cd0:	bf 92       	push	r11
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	6c 01       	movw	r12, r24
    1cf4:	1b 01       	movw	r2, r22
    1cf6:	8a 01       	movw	r16, r20
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	17 82       	std	Z+7, r1	; 0x07
    1cfc:	16 82       	std	Z+6, r1	; 0x06
    1cfe:	83 81       	ldd	r24, Z+3	; 0x03
    1d00:	81 ff       	sbrs	r24, 1
    1d02:	d1 c1       	rjmp	.+930    	; 0x20a6 <vfprintf+0x3e8>
    1d04:	2e 01       	movw	r4, r28
    1d06:	08 94       	sec
    1d08:	41 1c       	adc	r4, r1
    1d0a:	51 1c       	adc	r5, r1
    1d0c:	f6 01       	movw	r30, r12
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	f1 01       	movw	r30, r2
    1d12:	93 fd       	sbrc	r25, 3
    1d14:	85 91       	lpm	r24, Z+
    1d16:	93 ff       	sbrs	r25, 3
    1d18:	81 91       	ld	r24, Z+
    1d1a:	1f 01       	movw	r2, r30
    1d1c:	88 23       	and	r24, r24
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <vfprintf+0x64>
    1d20:	be c1       	rjmp	.+892    	; 0x209e <vfprintf+0x3e0>
    1d22:	85 32       	cpi	r24, 0x25	; 37
    1d24:	39 f4       	brne	.+14     	; 0x1d34 <vfprintf+0x76>
    1d26:	93 fd       	sbrc	r25, 3
    1d28:	85 91       	lpm	r24, Z+
    1d2a:	93 ff       	sbrs	r25, 3
    1d2c:	81 91       	ld	r24, Z+
    1d2e:	1f 01       	movw	r2, r30
    1d30:	85 32       	cpi	r24, 0x25	; 37
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <vfprintf+0x80>
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	b6 01       	movw	r22, r12
    1d38:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    1d3c:	e7 cf       	rjmp	.-50     	; 0x1d0c <vfprintf+0x4e>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	20 32       	cpi	r18, 0x20	; 32
    1d46:	b0 f4       	brcc	.+44     	; 0x1d74 <vfprintf+0xb6>
    1d48:	8b 32       	cpi	r24, 0x2B	; 43
    1d4a:	69 f0       	breq	.+26     	; 0x1d66 <vfprintf+0xa8>
    1d4c:	8c 32       	cpi	r24, 0x2C	; 44
    1d4e:	28 f4       	brcc	.+10     	; 0x1d5a <vfprintf+0x9c>
    1d50:	80 32       	cpi	r24, 0x20	; 32
    1d52:	51 f0       	breq	.+20     	; 0x1d68 <vfprintf+0xaa>
    1d54:	83 32       	cpi	r24, 0x23	; 35
    1d56:	71 f4       	brne	.+28     	; 0x1d74 <vfprintf+0xb6>
    1d58:	0b c0       	rjmp	.+22     	; 0x1d70 <vfprintf+0xb2>
    1d5a:	8d 32       	cpi	r24, 0x2D	; 45
    1d5c:	39 f0       	breq	.+14     	; 0x1d6c <vfprintf+0xae>
    1d5e:	80 33       	cpi	r24, 0x30	; 48
    1d60:	49 f4       	brne	.+18     	; 0x1d74 <vfprintf+0xb6>
    1d62:	21 60       	ori	r18, 0x01	; 1
    1d64:	2c c0       	rjmp	.+88     	; 0x1dbe <vfprintf+0x100>
    1d66:	22 60       	ori	r18, 0x02	; 2
    1d68:	24 60       	ori	r18, 0x04	; 4
    1d6a:	29 c0       	rjmp	.+82     	; 0x1dbe <vfprintf+0x100>
    1d6c:	28 60       	ori	r18, 0x08	; 8
    1d6e:	27 c0       	rjmp	.+78     	; 0x1dbe <vfprintf+0x100>
    1d70:	20 61       	ori	r18, 0x10	; 16
    1d72:	25 c0       	rjmp	.+74     	; 0x1dbe <vfprintf+0x100>
    1d74:	27 fd       	sbrc	r18, 7
    1d76:	2c c0       	rjmp	.+88     	; 0x1dd0 <vfprintf+0x112>
    1d78:	38 2f       	mov	r19, r24
    1d7a:	30 53       	subi	r19, 0x30	; 48
    1d7c:	3a 30       	cpi	r19, 0x0A	; 10
    1d7e:	98 f4       	brcc	.+38     	; 0x1da6 <vfprintf+0xe8>
    1d80:	26 ff       	sbrs	r18, 6
    1d82:	08 c0       	rjmp	.+16     	; 0x1d94 <vfprintf+0xd6>
    1d84:	8e 2d       	mov	r24, r14
    1d86:	88 0f       	add	r24, r24
    1d88:	e8 2e       	mov	r14, r24
    1d8a:	ee 0c       	add	r14, r14
    1d8c:	ee 0c       	add	r14, r14
    1d8e:	e8 0e       	add	r14, r24
    1d90:	e3 0e       	add	r14, r19
    1d92:	15 c0       	rjmp	.+42     	; 0x1dbe <vfprintf+0x100>
    1d94:	8f 2d       	mov	r24, r15
    1d96:	88 0f       	add	r24, r24
    1d98:	f8 2e       	mov	r15, r24
    1d9a:	ff 0c       	add	r15, r15
    1d9c:	ff 0c       	add	r15, r15
    1d9e:	f8 0e       	add	r15, r24
    1da0:	f3 0e       	add	r15, r19
    1da2:	20 62       	ori	r18, 0x20	; 32
    1da4:	0c c0       	rjmp	.+24     	; 0x1dbe <vfprintf+0x100>
    1da6:	8e 32       	cpi	r24, 0x2E	; 46
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <vfprintf+0xf4>
    1daa:	26 fd       	sbrc	r18, 6
    1dac:	78 c1       	rjmp	.+752    	; 0x209e <vfprintf+0x3e0>
    1dae:	20 64       	ori	r18, 0x40	; 64
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <vfprintf+0x100>
    1db2:	8c 36       	cpi	r24, 0x6C	; 108
    1db4:	11 f4       	brne	.+4      	; 0x1dba <vfprintf+0xfc>
    1db6:	20 68       	ori	r18, 0x80	; 128
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <vfprintf+0x100>
    1dba:	88 36       	cpi	r24, 0x68	; 104
    1dbc:	49 f4       	brne	.+18     	; 0x1dd0 <vfprintf+0x112>
    1dbe:	f1 01       	movw	r30, r2
    1dc0:	93 fd       	sbrc	r25, 3
    1dc2:	85 91       	lpm	r24, Z+
    1dc4:	93 ff       	sbrs	r25, 3
    1dc6:	81 91       	ld	r24, Z+
    1dc8:	1f 01       	movw	r2, r30
    1dca:	88 23       	and	r24, r24
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <vfprintf+0x112>
    1dce:	ba cf       	rjmp	.-140    	; 0x1d44 <vfprintf+0x86>
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	95 54       	subi	r25, 0x45	; 69
    1dd4:	93 30       	cpi	r25, 0x03	; 3
    1dd6:	18 f0       	brcs	.+6      	; 0x1dde <vfprintf+0x120>
    1dd8:	90 52       	subi	r25, 0x20	; 32
    1dda:	93 30       	cpi	r25, 0x03	; 3
    1ddc:	28 f4       	brcc	.+10     	; 0x1de8 <vfprintf+0x12a>
    1dde:	0c 5f       	subi	r16, 0xFC	; 252
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	ff e3       	ldi	r31, 0x3F	; 63
    1de4:	f9 83       	std	Y+1, r31	; 0x01
    1de6:	0d c0       	rjmp	.+26     	; 0x1e02 <vfprintf+0x144>
    1de8:	83 36       	cpi	r24, 0x63	; 99
    1dea:	31 f0       	breq	.+12     	; 0x1df8 <vfprintf+0x13a>
    1dec:	83 37       	cpi	r24, 0x73	; 115
    1dee:	71 f0       	breq	.+28     	; 0x1e0c <vfprintf+0x14e>
    1df0:	83 35       	cpi	r24, 0x53	; 83
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <vfprintf+0x138>
    1df4:	60 c0       	rjmp	.+192    	; 0x1eb6 <vfprintf+0x1f8>
    1df6:	22 c0       	rjmp	.+68     	; 0x1e3c <vfprintf+0x17e>
    1df8:	f8 01       	movw	r30, r16
    1dfa:	80 81       	ld	r24, Z
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	0e 5f       	subi	r16, 0xFE	; 254
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	42 01       	movw	r8, r4
    1e04:	71 e0       	ldi	r23, 0x01	; 1
    1e06:	a7 2e       	mov	r10, r23
    1e08:	b1 2c       	mov	r11, r1
    1e0a:	16 c0       	rjmp	.+44     	; 0x1e38 <vfprintf+0x17a>
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	66 2e       	mov	r6, r22
    1e10:	71 2c       	mov	r7, r1
    1e12:	60 0e       	add	r6, r16
    1e14:	71 1e       	adc	r7, r17
    1e16:	f8 01       	movw	r30, r16
    1e18:	80 80       	ld	r8, Z
    1e1a:	91 80       	ldd	r9, Z+1	; 0x01
    1e1c:	26 ff       	sbrs	r18, 6
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <vfprintf+0x168>
    1e20:	6e 2d       	mov	r22, r14
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <vfprintf+0x16c>
    1e26:	6f ef       	ldi	r22, 0xFF	; 255
    1e28:	7f ef       	ldi	r23, 0xFF	; 255
    1e2a:	c4 01       	movw	r24, r8
    1e2c:	2c 87       	std	Y+12, r18	; 0x0c
    1e2e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <strnlen>
    1e32:	5c 01       	movw	r10, r24
    1e34:	83 01       	movw	r16, r6
    1e36:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e38:	2f 77       	andi	r18, 0x7F	; 127
    1e3a:	17 c0       	rjmp	.+46     	; 0x1e6a <vfprintf+0x1ac>
    1e3c:	52 e0       	ldi	r21, 0x02	; 2
    1e3e:	65 2e       	mov	r6, r21
    1e40:	71 2c       	mov	r7, r1
    1e42:	60 0e       	add	r6, r16
    1e44:	71 1e       	adc	r7, r17
    1e46:	f8 01       	movw	r30, r16
    1e48:	80 80       	ld	r8, Z
    1e4a:	91 80       	ldd	r9, Z+1	; 0x01
    1e4c:	26 ff       	sbrs	r18, 6
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <vfprintf+0x198>
    1e50:	6e 2d       	mov	r22, r14
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <vfprintf+0x19c>
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	7f ef       	ldi	r23, 0xFF	; 255
    1e5a:	c4 01       	movw	r24, r8
    1e5c:	2c 87       	std	Y+12, r18	; 0x0c
    1e5e:	0e 94 c7 11 	call	0x238e	; 0x238e <strnlen_P>
    1e62:	5c 01       	movw	r10, r24
    1e64:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e66:	20 68       	ori	r18, 0x80	; 128
    1e68:	83 01       	movw	r16, r6
    1e6a:	23 fd       	sbrc	r18, 3
    1e6c:	20 c0       	rjmp	.+64     	; 0x1eae <vfprintf+0x1f0>
    1e6e:	08 c0       	rjmp	.+16     	; 0x1e80 <vfprintf+0x1c2>
    1e70:	80 e2       	ldi	r24, 0x20	; 32
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	b6 01       	movw	r22, r12
    1e76:	2c 87       	std	Y+12, r18	; 0x0c
    1e78:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    1e7c:	fa 94       	dec	r15
    1e7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e80:	8f 2d       	mov	r24, r15
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a8 16       	cp	r10, r24
    1e86:	b9 06       	cpc	r11, r25
    1e88:	98 f3       	brcs	.-26     	; 0x1e70 <vfprintf+0x1b2>
    1e8a:	11 c0       	rjmp	.+34     	; 0x1eae <vfprintf+0x1f0>
    1e8c:	f4 01       	movw	r30, r8
    1e8e:	27 fd       	sbrc	r18, 7
    1e90:	85 91       	lpm	r24, Z+
    1e92:	27 ff       	sbrs	r18, 7
    1e94:	81 91       	ld	r24, Z+
    1e96:	4f 01       	movw	r8, r30
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	2c 87       	std	Y+12, r18	; 0x0c
    1e9e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    1ea2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ea4:	f1 10       	cpse	r15, r1
    1ea6:	fa 94       	dec	r15
    1ea8:	08 94       	sec
    1eaa:	a1 08       	sbc	r10, r1
    1eac:	b1 08       	sbc	r11, r1
    1eae:	a1 14       	cp	r10, r1
    1eb0:	b1 04       	cpc	r11, r1
    1eb2:	61 f7       	brne	.-40     	; 0x1e8c <vfprintf+0x1ce>
    1eb4:	f1 c0       	rjmp	.+482    	; 0x2098 <vfprintf+0x3da>
    1eb6:	84 36       	cpi	r24, 0x64	; 100
    1eb8:	11 f0       	breq	.+4      	; 0x1ebe <vfprintf+0x200>
    1eba:	89 36       	cpi	r24, 0x69	; 105
    1ebc:	49 f5       	brne	.+82     	; 0x1f10 <vfprintf+0x252>
    1ebe:	27 ff       	sbrs	r18, 7
    1ec0:	08 c0       	rjmp	.+16     	; 0x1ed2 <vfprintf+0x214>
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	0c 5f       	subi	r16, 0xFC	; 252
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	09 c0       	rjmp	.+18     	; 0x1ee4 <vfprintf+0x226>
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	88 27       	eor	r24, r24
    1eda:	77 fd       	sbrc	r23, 7
    1edc:	80 95       	com	r24
    1ede:	98 2f       	mov	r25, r24
    1ee0:	0e 5f       	subi	r16, 0xFE	; 254
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	4f e6       	ldi	r20, 0x6F	; 111
    1ee6:	b4 2e       	mov	r11, r20
    1ee8:	b2 22       	and	r11, r18
    1eea:	97 ff       	sbrs	r25, 7
    1eec:	09 c0       	rjmp	.+18     	; 0x1f00 <vfprintf+0x242>
    1eee:	90 95       	com	r25
    1ef0:	80 95       	com	r24
    1ef2:	70 95       	com	r23
    1ef4:	61 95       	neg	r22
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	f0 e8       	ldi	r31, 0x80	; 128
    1efe:	bf 2a       	or	r11, r31
    1f00:	a2 01       	movw	r20, r4
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	0e 94 10 12 	call	0x2420	; 0x2420 <__ultoa_invert>
    1f0a:	78 2e       	mov	r7, r24
    1f0c:	74 18       	sub	r7, r4
    1f0e:	45 c0       	rjmp	.+138    	; 0x1f9a <vfprintf+0x2dc>
    1f10:	85 37       	cpi	r24, 0x75	; 117
    1f12:	31 f4       	brne	.+12     	; 0x1f20 <vfprintf+0x262>
    1f14:	3f ee       	ldi	r19, 0xEF	; 239
    1f16:	b3 2e       	mov	r11, r19
    1f18:	b2 22       	and	r11, r18
    1f1a:	2a e0       	ldi	r18, 0x0A	; 10
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	25 c0       	rjmp	.+74     	; 0x1f6a <vfprintf+0x2ac>
    1f20:	99 ef       	ldi	r25, 0xF9	; 249
    1f22:	b9 2e       	mov	r11, r25
    1f24:	b2 22       	and	r11, r18
    1f26:	8f 36       	cpi	r24, 0x6F	; 111
    1f28:	c1 f0       	breq	.+48     	; 0x1f5a <vfprintf+0x29c>
    1f2a:	80 37       	cpi	r24, 0x70	; 112
    1f2c:	20 f4       	brcc	.+8      	; 0x1f36 <vfprintf+0x278>
    1f2e:	88 35       	cpi	r24, 0x58	; 88
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <vfprintf+0x276>
    1f32:	b5 c0       	rjmp	.+362    	; 0x209e <vfprintf+0x3e0>
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <vfprintf+0x292>
    1f36:	80 37       	cpi	r24, 0x70	; 112
    1f38:	21 f0       	breq	.+8      	; 0x1f42 <vfprintf+0x284>
    1f3a:	88 37       	cpi	r24, 0x78	; 120
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <vfprintf+0x282>
    1f3e:	af c0       	rjmp	.+350    	; 0x209e <vfprintf+0x3e0>
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <vfprintf+0x288>
    1f42:	20 e1       	ldi	r18, 0x10	; 16
    1f44:	b2 2a       	or	r11, r18
    1f46:	b4 fe       	sbrs	r11, 4
    1f48:	0b c0       	rjmp	.+22     	; 0x1f60 <vfprintf+0x2a2>
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	b8 2a       	or	r11, r24
    1f4e:	08 c0       	rjmp	.+16     	; 0x1f60 <vfprintf+0x2a2>
    1f50:	b4 fe       	sbrs	r11, 4
    1f52:	09 c0       	rjmp	.+18     	; 0x1f66 <vfprintf+0x2a8>
    1f54:	e6 e0       	ldi	r30, 0x06	; 6
    1f56:	be 2a       	or	r11, r30
    1f58:	06 c0       	rjmp	.+12     	; 0x1f66 <vfprintf+0x2a8>
    1f5a:	28 e0       	ldi	r18, 0x08	; 8
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <vfprintf+0x2ac>
    1f60:	20 e1       	ldi	r18, 0x10	; 16
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <vfprintf+0x2ac>
    1f66:	20 e1       	ldi	r18, 0x10	; 16
    1f68:	32 e0       	ldi	r19, 0x02	; 2
    1f6a:	b7 fe       	sbrs	r11, 7
    1f6c:	08 c0       	rjmp	.+16     	; 0x1f7e <vfprintf+0x2c0>
    1f6e:	f8 01       	movw	r30, r16
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	0c 5f       	subi	r16, 0xFC	; 252
    1f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <vfprintf+0x2ce>
    1f7e:	f8 01       	movw	r30, r16
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 5f       	subi	r16, 0xFE	; 254
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	a2 01       	movw	r20, r4
    1f8e:	0e 94 10 12 	call	0x2420	; 0x2420 <__ultoa_invert>
    1f92:	78 2e       	mov	r7, r24
    1f94:	74 18       	sub	r7, r4
    1f96:	ff e7       	ldi	r31, 0x7F	; 127
    1f98:	bf 22       	and	r11, r31
    1f9a:	b6 fe       	sbrs	r11, 6
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <vfprintf+0x2f6>
    1f9e:	2e ef       	ldi	r18, 0xFE	; 254
    1fa0:	b2 22       	and	r11, r18
    1fa2:	7e 14       	cp	r7, r14
    1fa4:	38 f4       	brcc	.+14     	; 0x1fb4 <vfprintf+0x2f6>
    1fa6:	b4 fe       	sbrs	r11, 4
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <vfprintf+0x2fa>
    1faa:	b2 fc       	sbrc	r11, 2
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <vfprintf+0x2fa>
    1fae:	8f ee       	ldi	r24, 0xEF	; 239
    1fb0:	b8 22       	and	r11, r24
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <vfprintf+0x2fa>
    1fb4:	a7 2c       	mov	r10, r7
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <vfprintf+0x2fc>
    1fb8:	ae 2c       	mov	r10, r14
    1fba:	8b 2d       	mov	r24, r11
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	b4 fe       	sbrs	r11, 4
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <vfprintf+0x31e>
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e7 0d       	add	r30, r7
    1fc6:	f1 1d       	adc	r31, r1
    1fc8:	20 81       	ld	r18, Z
    1fca:	20 33       	cpi	r18, 0x30	; 48
    1fcc:	19 f4       	brne	.+6      	; 0x1fd4 <vfprintf+0x316>
    1fce:	e9 ee       	ldi	r30, 0xE9	; 233
    1fd0:	be 22       	and	r11, r30
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <vfprintf+0x328>
    1fd4:	a3 94       	inc	r10
    1fd6:	b2 fe       	sbrs	r11, 2
    1fd8:	06 c0       	rjmp	.+12     	; 0x1fe6 <vfprintf+0x328>
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <vfprintf+0x326>
    1fdc:	86 78       	andi	r24, 0x86	; 134
    1fde:	90 70       	andi	r25, 0x00	; 0
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <vfprintf+0x328>
    1fe4:	a3 94       	inc	r10
    1fe6:	8b 2c       	mov	r8, r11
    1fe8:	99 24       	eor	r9, r9
    1fea:	b3 fc       	sbrc	r11, 3
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <vfprintf+0x358>
    1fee:	b0 fe       	sbrs	r11, 0
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <vfprintf+0x352>
    1ff2:	af 14       	cp	r10, r15
    1ff4:	28 f4       	brcc	.+10     	; 0x2000 <vfprintf+0x342>
    1ff6:	e7 2c       	mov	r14, r7
    1ff8:	ef 0c       	add	r14, r15
    1ffa:	ea 18       	sub	r14, r10
    1ffc:	af 2c       	mov	r10, r15
    1ffe:	08 c0       	rjmp	.+16     	; 0x2010 <vfprintf+0x352>
    2000:	e7 2c       	mov	r14, r7
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <vfprintf+0x352>
    2004:	80 e2       	ldi	r24, 0x20	; 32
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	b6 01       	movw	r22, r12
    200a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    200e:	a3 94       	inc	r10
    2010:	af 14       	cp	r10, r15
    2012:	c0 f3       	brcs	.-16     	; 0x2004 <vfprintf+0x346>
    2014:	04 c0       	rjmp	.+8      	; 0x201e <vfprintf+0x360>
    2016:	af 14       	cp	r10, r15
    2018:	10 f4       	brcc	.+4      	; 0x201e <vfprintf+0x360>
    201a:	fa 18       	sub	r15, r10
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <vfprintf+0x362>
    201e:	ff 24       	eor	r15, r15
    2020:	84 fe       	sbrs	r8, 4
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <vfprintf+0x384>
    2024:	80 e3       	ldi	r24, 0x30	; 48
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	b6 01       	movw	r22, r12
    202a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    202e:	82 fe       	sbrs	r8, 2
    2030:	1f c0       	rjmp	.+62     	; 0x2070 <vfprintf+0x3b2>
    2032:	81 fe       	sbrs	r8, 1
    2034:	03 c0       	rjmp	.+6      	; 0x203c <vfprintf+0x37e>
    2036:	88 e5       	ldi	r24, 0x58	; 88
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	10 c0       	rjmp	.+32     	; 0x205c <vfprintf+0x39e>
    203c:	88 e7       	ldi	r24, 0x78	; 120
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0d c0       	rjmp	.+26     	; 0x205c <vfprintf+0x39e>
    2042:	c4 01       	movw	r24, r8
    2044:	86 78       	andi	r24, 0x86	; 134
    2046:	90 70       	andi	r25, 0x00	; 0
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	91 f0       	breq	.+36     	; 0x2070 <vfprintf+0x3b2>
    204c:	81 fc       	sbrc	r8, 1
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x396>
    2050:	80 e2       	ldi	r24, 0x20	; 32
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <vfprintf+0x398>
    2054:	8b e2       	ldi	r24, 0x2B	; 43
    2056:	b7 fc       	sbrc	r11, 7
    2058:	8d e2       	ldi	r24, 0x2D	; 45
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	b6 01       	movw	r22, r12
    205e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <vfprintf+0x3b2>
    2064:	80 e3       	ldi	r24, 0x30	; 48
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	b6 01       	movw	r22, r12
    206a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    206e:	ea 94       	dec	r14
    2070:	7e 14       	cp	r7, r14
    2072:	c0 f3       	brcs	.-16     	; 0x2064 <vfprintf+0x3a6>
    2074:	7a 94       	dec	r7
    2076:	f2 01       	movw	r30, r4
    2078:	e7 0d       	add	r30, r7
    207a:	f1 1d       	adc	r31, r1
    207c:	80 81       	ld	r24, Z
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	b6 01       	movw	r22, r12
    2082:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    2086:	77 20       	and	r7, r7
    2088:	a9 f7       	brne	.-22     	; 0x2074 <vfprintf+0x3b6>
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <vfprintf+0x3da>
    208c:	80 e2       	ldi	r24, 0x20	; 32
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	b6 01       	movw	r22, r12
    2092:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fputc>
    2096:	fa 94       	dec	r15
    2098:	ff 20       	and	r15, r15
    209a:	c1 f7       	brne	.-16     	; 0x208c <vfprintf+0x3ce>
    209c:	37 ce       	rjmp	.-914    	; 0x1d0c <vfprintf+0x4e>
    209e:	f6 01       	movw	r30, r12
    20a0:	26 81       	ldd	r18, Z+6	; 0x06
    20a2:	37 81       	ldd	r19, Z+7	; 0x07
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <vfprintf+0x3ec>
    20a6:	2f ef       	ldi	r18, 0xFF	; 255
    20a8:	3f ef       	ldi	r19, 0xFF	; 255
    20aa:	c9 01       	movw	r24, r18
    20ac:	2c 96       	adiw	r28, 0x0c	; 12
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	9f 90       	pop	r9
    20ce:	8f 90       	pop	r8
    20d0:	7f 90       	pop	r7
    20d2:	6f 90       	pop	r6
    20d4:	5f 90       	pop	r5
    20d6:	4f 90       	pop	r4
    20d8:	3f 90       	pop	r3
    20da:	2f 90       	pop	r2
    20dc:	08 95       	ret

000020de <calloc>:
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	68 9f       	mul	r22, r24
    20ec:	80 01       	movw	r16, r0
    20ee:	69 9f       	mul	r22, r25
    20f0:	10 0d       	add	r17, r0
    20f2:	78 9f       	mul	r23, r24
    20f4:	10 0d       	add	r17, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	c8 01       	movw	r24, r16
    20fa:	0e 94 94 10 	call	0x2128	; 0x2128 <malloc>
    20fe:	e8 2e       	mov	r14, r24
    2100:	e7 01       	movw	r28, r14
    2102:	7e 01       	movw	r14, r28
    2104:	f9 2e       	mov	r15, r25
    2106:	e7 01       	movw	r28, r14
    2108:	20 97       	sbiw	r28, 0x00	; 0
    210a:	31 f0       	breq	.+12     	; 0x2118 <calloc+0x3a>
    210c:	8e 2d       	mov	r24, r14
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	a8 01       	movw	r20, r16
    2114:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <memset>
    2118:	ce 01       	movw	r24, r28
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	08 95       	ret

00002128 <malloc>:
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	82 30       	cpi	r24, 0x02	; 2
    212e:	91 05       	cpc	r25, r1
    2130:	10 f4       	brcc	.+4      	; 0x2136 <malloc+0xe>
    2132:	82 e0       	ldi	r24, 0x02	; 2
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	e0 91 a9 02 	lds	r30, 0x02A9
    213a:	f0 91 aa 02 	lds	r31, 0x02AA
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	26 c0       	rjmp	.+76     	; 0x2194 <malloc+0x6c>
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	68 17       	cp	r22, r24
    214e:	79 07       	cpc	r23, r25
    2150:	e0 f0       	brcs	.+56     	; 0x218a <malloc+0x62>
    2152:	68 17       	cp	r22, r24
    2154:	79 07       	cpc	r23, r25
    2156:	81 f4       	brne	.+32     	; 0x2178 <malloc+0x50>
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	21 15       	cp	r18, r1
    215e:	31 05       	cpc	r19, r1
    2160:	31 f0       	breq	.+12     	; 0x216e <malloc+0x46>
    2162:	d9 01       	movw	r26, r18
    2164:	13 96       	adiw	r26, 0x03	; 3
    2166:	9c 93       	st	X, r25
    2168:	8e 93       	st	-X, r24
    216a:	12 97       	sbiw	r26, 0x02	; 2
    216c:	2b c0       	rjmp	.+86     	; 0x21c4 <malloc+0x9c>
    216e:	90 93 aa 02 	sts	0x02AA, r25
    2172:	80 93 a9 02 	sts	0x02A9, r24
    2176:	26 c0       	rjmp	.+76     	; 0x21c4 <malloc+0x9c>
    2178:	41 15       	cp	r20, r1
    217a:	51 05       	cpc	r21, r1
    217c:	19 f0       	breq	.+6      	; 0x2184 <malloc+0x5c>
    217e:	64 17       	cp	r22, r20
    2180:	75 07       	cpc	r23, r21
    2182:	18 f4       	brcc	.+6      	; 0x218a <malloc+0x62>
    2184:	ab 01       	movw	r20, r22
    2186:	e9 01       	movw	r28, r18
    2188:	df 01       	movw	r26, r30
    218a:	9f 01       	movw	r18, r30
    218c:	72 81       	ldd	r23, Z+2	; 0x02
    218e:	63 81       	ldd	r22, Z+3	; 0x03
    2190:	e7 2f       	mov	r30, r23
    2192:	f6 2f       	mov	r31, r22
    2194:	30 97       	sbiw	r30, 0x00	; 0
    2196:	c1 f6       	brne	.-80     	; 0x2148 <malloc+0x20>
    2198:	41 15       	cp	r20, r1
    219a:	51 05       	cpc	r21, r1
    219c:	01 f1       	breq	.+64     	; 0x21de <malloc+0xb6>
    219e:	48 1b       	sub	r20, r24
    21a0:	59 0b       	sbc	r21, r25
    21a2:	44 30       	cpi	r20, 0x04	; 4
    21a4:	51 05       	cpc	r21, r1
    21a6:	80 f4       	brcc	.+32     	; 0x21c8 <malloc+0xa0>
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	8d 91       	ld	r24, X+
    21ac:	9c 91       	ld	r25, X
    21ae:	13 97       	sbiw	r26, 0x03	; 3
    21b0:	20 97       	sbiw	r28, 0x00	; 0
    21b2:	19 f0       	breq	.+6      	; 0x21ba <malloc+0x92>
    21b4:	9b 83       	std	Y+3, r25	; 0x03
    21b6:	8a 83       	std	Y+2, r24	; 0x02
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <malloc+0x9a>
    21ba:	90 93 aa 02 	sts	0x02AA, r25
    21be:	80 93 a9 02 	sts	0x02A9, r24
    21c2:	fd 01       	movw	r30, r26
    21c4:	32 96       	adiw	r30, 0x02	; 2
    21c6:	46 c0       	rjmp	.+140    	; 0x2254 <malloc+0x12c>
    21c8:	fd 01       	movw	r30, r26
    21ca:	e4 0f       	add	r30, r20
    21cc:	f5 1f       	adc	r31, r21
    21ce:	81 93       	st	Z+, r24
    21d0:	91 93       	st	Z+, r25
    21d2:	42 50       	subi	r20, 0x02	; 2
    21d4:	50 40       	sbci	r21, 0x00	; 0
    21d6:	11 96       	adiw	r26, 0x01	; 1
    21d8:	5c 93       	st	X, r21
    21da:	4e 93       	st	-X, r20
    21dc:	3b c0       	rjmp	.+118    	; 0x2254 <malloc+0x12c>
    21de:	20 91 a7 02 	lds	r18, 0x02A7
    21e2:	30 91 a8 02 	lds	r19, 0x02A8
    21e6:	21 15       	cp	r18, r1
    21e8:	31 05       	cpc	r19, r1
    21ea:	41 f4       	brne	.+16     	; 0x21fc <malloc+0xd4>
    21ec:	20 91 9c 02 	lds	r18, 0x029C
    21f0:	30 91 9d 02 	lds	r19, 0x029D
    21f4:	30 93 a8 02 	sts	0x02A8, r19
    21f8:	20 93 a7 02 	sts	0x02A7, r18
    21fc:	20 91 9e 02 	lds	r18, 0x029E
    2200:	30 91 9f 02 	lds	r19, 0x029F
    2204:	21 15       	cp	r18, r1
    2206:	31 05       	cpc	r19, r1
    2208:	41 f4       	brne	.+16     	; 0x221a <malloc+0xf2>
    220a:	2d b7       	in	r18, 0x3d	; 61
    220c:	3e b7       	in	r19, 0x3e	; 62
    220e:	40 91 9a 02 	lds	r20, 0x029A
    2212:	50 91 9b 02 	lds	r21, 0x029B
    2216:	24 1b       	sub	r18, r20
    2218:	35 0b       	sbc	r19, r21
    221a:	e0 91 a7 02 	lds	r30, 0x02A7
    221e:	f0 91 a8 02 	lds	r31, 0x02A8
    2222:	e2 17       	cp	r30, r18
    2224:	f3 07       	cpc	r31, r19
    2226:	a0 f4       	brcc	.+40     	; 0x2250 <malloc+0x128>
    2228:	2e 1b       	sub	r18, r30
    222a:	3f 0b       	sbc	r19, r31
    222c:	28 17       	cp	r18, r24
    222e:	39 07       	cpc	r19, r25
    2230:	78 f0       	brcs	.+30     	; 0x2250 <malloc+0x128>
    2232:	ac 01       	movw	r20, r24
    2234:	4e 5f       	subi	r20, 0xFE	; 254
    2236:	5f 4f       	sbci	r21, 0xFF	; 255
    2238:	24 17       	cp	r18, r20
    223a:	35 07       	cpc	r19, r21
    223c:	48 f0       	brcs	.+18     	; 0x2250 <malloc+0x128>
    223e:	4e 0f       	add	r20, r30
    2240:	5f 1f       	adc	r21, r31
    2242:	50 93 a8 02 	sts	0x02A8, r21
    2246:	40 93 a7 02 	sts	0x02A7, r20
    224a:	81 93       	st	Z+, r24
    224c:	91 93       	st	Z+, r25
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <malloc+0x12c>
    2250:	e0 e0       	ldi	r30, 0x00	; 0
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	cf 01       	movw	r24, r30
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <free>:
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	09 f4       	brne	.+2      	; 0x2266 <free+0xa>
    2264:	91 c0       	rjmp	.+290    	; 0x2388 <free+0x12c>
    2266:	fc 01       	movw	r30, r24
    2268:	32 97       	sbiw	r30, 0x02	; 2
    226a:	13 82       	std	Z+3, r1	; 0x03
    226c:	12 82       	std	Z+2, r1	; 0x02
    226e:	60 91 a9 02 	lds	r22, 0x02A9
    2272:	70 91 aa 02 	lds	r23, 0x02AA
    2276:	61 15       	cp	r22, r1
    2278:	71 05       	cpc	r23, r1
    227a:	81 f4       	brne	.+32     	; 0x229c <free+0x40>
    227c:	20 81       	ld	r18, Z
    227e:	31 81       	ldd	r19, Z+1	; 0x01
    2280:	28 0f       	add	r18, r24
    2282:	39 1f       	adc	r19, r25
    2284:	80 91 a7 02 	lds	r24, 0x02A7
    2288:	90 91 a8 02 	lds	r25, 0x02A8
    228c:	82 17       	cp	r24, r18
    228e:	93 07       	cpc	r25, r19
    2290:	99 f5       	brne	.+102    	; 0x22f8 <free+0x9c>
    2292:	f0 93 a8 02 	sts	0x02A8, r31
    2296:	e0 93 a7 02 	sts	0x02A7, r30
    229a:	76 c0       	rjmp	.+236    	; 0x2388 <free+0x12c>
    229c:	db 01       	movw	r26, r22
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <free+0x4c>
    22a4:	cd 01       	movw	r24, r26
    22a6:	d9 01       	movw	r26, r18
    22a8:	ae 17       	cp	r26, r30
    22aa:	bf 07       	cpc	r27, r31
    22ac:	48 f4       	brcc	.+18     	; 0x22c0 <free+0x64>
    22ae:	12 96       	adiw	r26, 0x02	; 2
    22b0:	2d 91       	ld	r18, X+
    22b2:	3c 91       	ld	r19, X
    22b4:	13 97       	sbiw	r26, 0x03	; 3
    22b6:	21 15       	cp	r18, r1
    22b8:	31 05       	cpc	r19, r1
    22ba:	a1 f7       	brne	.-24     	; 0x22a4 <free+0x48>
    22bc:	cd 01       	movw	r24, r26
    22be:	21 c0       	rjmp	.+66     	; 0x2302 <free+0xa6>
    22c0:	b3 83       	std	Z+3, r27	; 0x03
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	ef 01       	movw	r28, r30
    22c6:	49 91       	ld	r20, Y+
    22c8:	59 91       	ld	r21, Y+
    22ca:	9e 01       	movw	r18, r28
    22cc:	24 0f       	add	r18, r20
    22ce:	35 1f       	adc	r19, r21
    22d0:	a2 17       	cp	r26, r18
    22d2:	b3 07       	cpc	r27, r19
    22d4:	79 f4       	brne	.+30     	; 0x22f4 <free+0x98>
    22d6:	2d 91       	ld	r18, X+
    22d8:	3c 91       	ld	r19, X
    22da:	11 97       	sbiw	r26, 0x01	; 1
    22dc:	24 0f       	add	r18, r20
    22de:	35 1f       	adc	r19, r21
    22e0:	2e 5f       	subi	r18, 0xFE	; 254
    22e2:	3f 4f       	sbci	r19, 0xFF	; 255
    22e4:	31 83       	std	Z+1, r19	; 0x01
    22e6:	20 83       	st	Z, r18
    22e8:	12 96       	adiw	r26, 0x02	; 2
    22ea:	2d 91       	ld	r18, X+
    22ec:	3c 91       	ld	r19, X
    22ee:	13 97       	sbiw	r26, 0x03	; 3
    22f0:	33 83       	std	Z+3, r19	; 0x03
    22f2:	22 83       	std	Z+2, r18	; 0x02
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	29 f4       	brne	.+10     	; 0x2302 <free+0xa6>
    22f8:	f0 93 aa 02 	sts	0x02AA, r31
    22fc:	e0 93 a9 02 	sts	0x02A9, r30
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <free+0x12c>
    2302:	dc 01       	movw	r26, r24
    2304:	13 96       	adiw	r26, 0x03	; 3
    2306:	fc 93       	st	X, r31
    2308:	ee 93       	st	-X, r30
    230a:	12 97       	sbiw	r26, 0x02	; 2
    230c:	4d 91       	ld	r20, X+
    230e:	5d 91       	ld	r21, X+
    2310:	a4 0f       	add	r26, r20
    2312:	b5 1f       	adc	r27, r21
    2314:	ea 17       	cp	r30, r26
    2316:	fb 07       	cpc	r31, r27
    2318:	69 f4       	brne	.+26     	; 0x2334 <free+0xd8>
    231a:	20 81       	ld	r18, Z
    231c:	31 81       	ldd	r19, Z+1	; 0x01
    231e:	24 0f       	add	r18, r20
    2320:	35 1f       	adc	r19, r21
    2322:	2e 5f       	subi	r18, 0xFE	; 254
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	ec 01       	movw	r28, r24
    2328:	39 83       	std	Y+1, r19	; 0x01
    232a:	28 83       	st	Y, r18
    232c:	22 81       	ldd	r18, Z+2	; 0x02
    232e:	33 81       	ldd	r19, Z+3	; 0x03
    2330:	3b 83       	std	Y+3, r19	; 0x03
    2332:	2a 83       	std	Y+2, r18	; 0x02
    2334:	e0 e0       	ldi	r30, 0x00	; 0
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	02 c0       	rjmp	.+4      	; 0x233e <free+0xe2>
    233a:	fb 01       	movw	r30, r22
    233c:	bc 01       	movw	r22, r24
    233e:	db 01       	movw	r26, r22
    2340:	12 96       	adiw	r26, 0x02	; 2
    2342:	8d 91       	ld	r24, X+
    2344:	9c 91       	ld	r25, X
    2346:	13 97       	sbiw	r26, 0x03	; 3
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	b9 f7       	brne	.-18     	; 0x233a <free+0xde>
    234c:	9b 01       	movw	r18, r22
    234e:	2e 5f       	subi	r18, 0xFE	; 254
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	8d 91       	ld	r24, X+
    2354:	9c 91       	ld	r25, X
    2356:	11 97       	sbiw	r26, 0x01	; 1
    2358:	82 0f       	add	r24, r18
    235a:	93 1f       	adc	r25, r19
    235c:	40 91 a7 02 	lds	r20, 0x02A7
    2360:	50 91 a8 02 	lds	r21, 0x02A8
    2364:	48 17       	cp	r20, r24
    2366:	59 07       	cpc	r21, r25
    2368:	79 f4       	brne	.+30     	; 0x2388 <free+0x12c>
    236a:	30 97       	sbiw	r30, 0x00	; 0
    236c:	29 f4       	brne	.+10     	; 0x2378 <free+0x11c>
    236e:	10 92 aa 02 	sts	0x02AA, r1
    2372:	10 92 a9 02 	sts	0x02A9, r1
    2376:	02 c0       	rjmp	.+4      	; 0x237c <free+0x120>
    2378:	13 82       	std	Z+3, r1	; 0x03
    237a:	12 82       	std	Z+2, r1	; 0x02
    237c:	22 50       	subi	r18, 0x02	; 2
    237e:	30 40       	sbci	r19, 0x00	; 0
    2380:	30 93 a8 02 	sts	0x02A8, r19
    2384:	20 93 a7 02 	sts	0x02A7, r18
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	08 95       	ret

0000238e <strnlen_P>:
    238e:	fc 01       	movw	r30, r24
    2390:	05 90       	lpm	r0, Z+
    2392:	61 50       	subi	r22, 0x01	; 1
    2394:	70 40       	sbci	r23, 0x00	; 0
    2396:	01 10       	cpse	r0, r1
    2398:	d8 f7       	brcc	.-10     	; 0x2390 <strnlen_P+0x2>
    239a:	80 95       	com	r24
    239c:	90 95       	com	r25
    239e:	8e 0f       	add	r24, r30
    23a0:	9f 1f       	adc	r25, r31
    23a2:	08 95       	ret

000023a4 <memset>:
    23a4:	dc 01       	movw	r26, r24
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <memset+0x6>
    23a8:	6d 93       	st	X+, r22
    23aa:	41 50       	subi	r20, 0x01	; 1
    23ac:	50 40       	sbci	r21, 0x00	; 0
    23ae:	e0 f7       	brcc	.-8      	; 0x23a8 <memset+0x4>
    23b0:	08 95       	ret

000023b2 <strnlen>:
    23b2:	fc 01       	movw	r30, r24
    23b4:	61 50       	subi	r22, 0x01	; 1
    23b6:	70 40       	sbci	r23, 0x00	; 0
    23b8:	01 90       	ld	r0, Z+
    23ba:	01 10       	cpse	r0, r1
    23bc:	d8 f7       	brcc	.-10     	; 0x23b4 <strnlen+0x2>
    23be:	80 95       	com	r24
    23c0:	90 95       	com	r25
    23c2:	8e 0f       	add	r24, r30
    23c4:	9f 1f       	adc	r25, r31
    23c6:	08 95       	ret

000023c8 <fputc>:
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	8c 01       	movw	r16, r24
    23d2:	eb 01       	movw	r28, r22
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	81 ff       	sbrs	r24, 1
    23d8:	1b c0       	rjmp	.+54     	; 0x2410 <fputc+0x48>
    23da:	82 ff       	sbrs	r24, 2
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <fputc+0x30>
    23de:	2e 81       	ldd	r18, Y+6	; 0x06
    23e0:	3f 81       	ldd	r19, Y+7	; 0x07
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	28 17       	cp	r18, r24
    23e8:	39 07       	cpc	r19, r25
    23ea:	64 f4       	brge	.+24     	; 0x2404 <fputc+0x3c>
    23ec:	e8 81       	ld	r30, Y
    23ee:	f9 81       	ldd	r31, Y+1	; 0x01
    23f0:	01 93       	st	Z+, r16
    23f2:	f9 83       	std	Y+1, r31	; 0x01
    23f4:	e8 83       	st	Y, r30
    23f6:	06 c0       	rjmp	.+12     	; 0x2404 <fputc+0x3c>
    23f8:	e8 85       	ldd	r30, Y+8	; 0x08
    23fa:	f9 85       	ldd	r31, Y+9	; 0x09
    23fc:	80 2f       	mov	r24, r16
    23fe:	09 95       	icall
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	31 f4       	brne	.+12     	; 0x2410 <fputc+0x48>
    2404:	8e 81       	ldd	r24, Y+6	; 0x06
    2406:	9f 81       	ldd	r25, Y+7	; 0x07
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	9f 83       	std	Y+7, r25	; 0x07
    240c:	8e 83       	std	Y+6, r24	; 0x06
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <fputc+0x4c>
    2410:	0f ef       	ldi	r16, 0xFF	; 255
    2412:	1f ef       	ldi	r17, 0xFF	; 255
    2414:	c8 01       	movw	r24, r16
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	08 95       	ret

00002420 <__ultoa_invert>:
    2420:	fa 01       	movw	r30, r20
    2422:	aa 27       	eor	r26, r26
    2424:	28 30       	cpi	r18, 0x08	; 8
    2426:	51 f1       	breq	.+84     	; 0x247c <__ultoa_invert+0x5c>
    2428:	20 31       	cpi	r18, 0x10	; 16
    242a:	81 f1       	breq	.+96     	; 0x248c <__ultoa_invert+0x6c>
    242c:	e8 94       	clt
    242e:	6f 93       	push	r22
    2430:	6e 7f       	andi	r22, 0xFE	; 254
    2432:	6e 5f       	subi	r22, 0xFE	; 254
    2434:	7f 4f       	sbci	r23, 0xFF	; 255
    2436:	8f 4f       	sbci	r24, 0xFF	; 255
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	af 4f       	sbci	r26, 0xFF	; 255
    243c:	b1 e0       	ldi	r27, 0x01	; 1
    243e:	3e d0       	rcall	.+124    	; 0x24bc <__ultoa_invert+0x9c>
    2440:	b4 e0       	ldi	r27, 0x04	; 4
    2442:	3c d0       	rcall	.+120    	; 0x24bc <__ultoa_invert+0x9c>
    2444:	67 0f       	add	r22, r23
    2446:	78 1f       	adc	r23, r24
    2448:	89 1f       	adc	r24, r25
    244a:	9a 1f       	adc	r25, r26
    244c:	a1 1d       	adc	r26, r1
    244e:	68 0f       	add	r22, r24
    2450:	79 1f       	adc	r23, r25
    2452:	8a 1f       	adc	r24, r26
    2454:	91 1d       	adc	r25, r1
    2456:	a1 1d       	adc	r26, r1
    2458:	6a 0f       	add	r22, r26
    245a:	71 1d       	adc	r23, r1
    245c:	81 1d       	adc	r24, r1
    245e:	91 1d       	adc	r25, r1
    2460:	a1 1d       	adc	r26, r1
    2462:	20 d0       	rcall	.+64     	; 0x24a4 <__ultoa_invert+0x84>
    2464:	09 f4       	brne	.+2      	; 0x2468 <__ultoa_invert+0x48>
    2466:	68 94       	set
    2468:	3f 91       	pop	r19
    246a:	2a e0       	ldi	r18, 0x0A	; 10
    246c:	26 9f       	mul	r18, r22
    246e:	11 24       	eor	r1, r1
    2470:	30 19       	sub	r19, r0
    2472:	30 5d       	subi	r19, 0xD0	; 208
    2474:	31 93       	st	Z+, r19
    2476:	de f6       	brtc	.-74     	; 0x242e <__ultoa_invert+0xe>
    2478:	cf 01       	movw	r24, r30
    247a:	08 95       	ret
    247c:	46 2f       	mov	r20, r22
    247e:	47 70       	andi	r20, 0x07	; 7
    2480:	40 5d       	subi	r20, 0xD0	; 208
    2482:	41 93       	st	Z+, r20
    2484:	b3 e0       	ldi	r27, 0x03	; 3
    2486:	0f d0       	rcall	.+30     	; 0x24a6 <__ultoa_invert+0x86>
    2488:	c9 f7       	brne	.-14     	; 0x247c <__ultoa_invert+0x5c>
    248a:	f6 cf       	rjmp	.-20     	; 0x2478 <__ultoa_invert+0x58>
    248c:	46 2f       	mov	r20, r22
    248e:	4f 70       	andi	r20, 0x0F	; 15
    2490:	40 5d       	subi	r20, 0xD0	; 208
    2492:	4a 33       	cpi	r20, 0x3A	; 58
    2494:	18 f0       	brcs	.+6      	; 0x249c <__ultoa_invert+0x7c>
    2496:	49 5d       	subi	r20, 0xD9	; 217
    2498:	31 fd       	sbrc	r19, 1
    249a:	40 52       	subi	r20, 0x20	; 32
    249c:	41 93       	st	Z+, r20
    249e:	02 d0       	rcall	.+4      	; 0x24a4 <__ultoa_invert+0x84>
    24a0:	a9 f7       	brne	.-22     	; 0x248c <__ultoa_invert+0x6c>
    24a2:	ea cf       	rjmp	.-44     	; 0x2478 <__ultoa_invert+0x58>
    24a4:	b4 e0       	ldi	r27, 0x04	; 4
    24a6:	a6 95       	lsr	r26
    24a8:	97 95       	ror	r25
    24aa:	87 95       	ror	r24
    24ac:	77 95       	ror	r23
    24ae:	67 95       	ror	r22
    24b0:	ba 95       	dec	r27
    24b2:	c9 f7       	brne	.-14     	; 0x24a6 <__ultoa_invert+0x86>
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	61 05       	cpc	r22, r1
    24b8:	71 05       	cpc	r23, r1
    24ba:	08 95       	ret
    24bc:	9b 01       	movw	r18, r22
    24be:	ac 01       	movw	r20, r24
    24c0:	0a 2e       	mov	r0, r26
    24c2:	06 94       	lsr	r0
    24c4:	57 95       	ror	r21
    24c6:	47 95       	ror	r20
    24c8:	37 95       	ror	r19
    24ca:	27 95       	ror	r18
    24cc:	ba 95       	dec	r27
    24ce:	c9 f7       	brne	.-14     	; 0x24c2 <__ultoa_invert+0xa2>
    24d0:	62 0f       	add	r22, r18
    24d2:	73 1f       	adc	r23, r19
    24d4:	84 1f       	adc	r24, r20
    24d6:	95 1f       	adc	r25, r21
    24d8:	a0 1d       	adc	r26, r0
    24da:	08 95       	ret

000024dc <_exit>:
    24dc:	f8 94       	cli

000024de <__stop_program>:
    24de:	ff cf       	rjmp	.-2      	; 0x24de <__stop_program>
