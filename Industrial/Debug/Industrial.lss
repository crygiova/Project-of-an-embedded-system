
Industrial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800100  0000296e  00002a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000296e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800362  00800362  00002c64  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000308  00000000  00000000  00003b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000627  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003925  00000000  00000000  0000449b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c73  00000000  00000000  00007dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003479  00000000  00000000  00009a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000530  00000000  00000000  0000ceac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000aba  00000000  00000000  0000d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000171a  00000000  00000000  0000de96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000855  00000000  00000000  0000f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  0000fe05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_1>
       8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_2>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_15>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <myfont>:
      70:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
      80:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
      90:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
      a0:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
      b0:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
      c0:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
      d0:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
      e0:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
      f0:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
     100:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
     110:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
     120:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
     130:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
     140:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
     150:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
     160:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
     170:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
     180:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
     190:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
     1a0:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
     1b0:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
     1c0:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
     1d0:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
     1e0:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
     1f0:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
     200:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
     210:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
     220:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
     230:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
     240:	00 00 42 3c 08 00 04 02 04 02 00 00                 ..B<........

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	13 e0       	ldi	r17, 0x03	; 3
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	ee e6       	ldi	r30, 0x6E	; 110
     260:	f9 e2       	ldi	r31, 0x29	; 41
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a2 36       	cpi	r26, 0x62	; 98
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	13 e0       	ldi	r17, 0x03	; 3
     270:	a2 e6       	ldi	r26, 0x62	; 98
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a5 37       	cpi	r26, 0x75	; 117
     27a:	b1 07       	cpc	r27, r17
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <main>
     282:	0c 94 b5 14 	jmp	0x296a	; 0x296a <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <readADC>:
uint8_t resultADC;
uint8_t flagADC;

volatile char* extADC = 0x1442;

void readADC(enum channelsADC channel){
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	0f 92       	push	r0
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	89 83       	std	Y+1, r24	; 0x01
	switch(channel){
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	91 05       	cpc	r25, r1
     2a0:	69 f0       	breq	.+26     	; 0x2bc <readADC+0x32>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	1c f4       	brge	.+6      	; 0x2ae <readADC+0x24>
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	81 f0       	breq	.+32     	; 0x2cc <readADC+0x42>
     2ac:	27 c0       	rjmp	.+78     	; 0x2fc <readADC+0x72>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	91 05       	cpc	r25, r1
     2b2:	a1 f0       	breq	.+40     	; 0x2dc <readADC+0x52>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	91 05       	cpc	r25, r1
     2b8:	c9 f0       	breq	.+50     	; 0x2ec <readADC+0x62>
     2ba:	20 c0       	rjmp	.+64     	; 0x2fc <readADC+0x72>
		case Y_AXIS:
			*extADC = 0x04;
     2bc:	80 91 00 01 	lds	r24, 0x0100
     2c0:	90 91 01 01 	lds	r25, 0x0101
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
			break;
     2ca:	1f c0       	rjmp	.+62     	; 0x30a <readADC+0x80>
		case X_AXIS:
			*extADC = 0x05;
     2cc:	80 91 00 01 	lds	r24, 0x0100
     2d0:	90 91 01 01 	lds	r25, 0x0101
     2d4:	25 e0       	ldi	r18, 0x05	; 5
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
			break;
     2da:	17 c0       	rjmp	.+46     	; 0x30a <readADC+0x80>
		case L_SLIDER:
			*extADC = 0x06;
     2dc:	80 91 00 01 	lds	r24, 0x0100
     2e0:	90 91 01 01 	lds	r25, 0x0101
     2e4:	26 e0       	ldi	r18, 0x06	; 6
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
			break; 
     2ea:	0f c0       	rjmp	.+30     	; 0x30a <readADC+0x80>
		case R_SLIDER: 
			*extADC = 0x07;
     2ec:	80 91 00 01 	lds	r24, 0x0100
     2f0:	90 91 01 01 	lds	r25, 0x0101
     2f4:	27 e0       	ldi	r18, 0x07	; 7
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
			break;
     2fa:	07 c0       	rjmp	.+14     	; 0x30a <readADC+0x80>
		default:
			*extADC = 0x00;
     2fc:	80 91 00 01 	lds	r24, 0x0100
     300:	90 91 01 01 	lds	r25, 0x0101
     304:	fc 01       	movw	r30, r24
     306:	10 82       	st	Z, r1
			break;
     308:	00 00       	nop
	}
	//_delay_ms(100); //TODO: interrupt
	//result = *extADC;
	}
     30a:	0f 90       	pop	r0
     30c:	cf 91       	pop	r28
     30e:	df 91       	pop	r29
     310:	08 95       	ret

00000312 <ADC_read>:

uint8_t ADC_read(enum channelsADC channel){
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	0f 92       	push	r0
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	89 83       	std	Y+1, r24	; 0x01
	readADC(channel);
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	0e 94 45 01 	call	0x28a	; 0x28a <readADC>
	while(!flagADC); //TODO: Make it less pooling-style
     324:	00 00       	nop
     326:	80 91 66 03 	lds	r24, 0x0366
     32a:	88 23       	and	r24, r24
     32c:	e1 f3       	breq	.-8      	; 0x326 <ADC_read+0x14>
	flagADC = 0;
     32e:	10 92 66 03 	sts	0x0366, r1
	return resultADC;
     332:	80 91 67 03 	lds	r24, 0x0367
     336:	0f 90       	pop	r0
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <printMenu>:
														"Options",
														"Help"
	
};

void printMenu(uint8_t menuOption){
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <printMenu+0x6>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     34a:	19 82       	std	Y+1, r1	; 0x01
     34c:	34 c0       	rjmp	.+104    	; 0x3b6 <printMenu+0x78>
		gotoCharOLED(c,0);
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
		if (c == menuOption) putInvertedSOLED(menu[c]);
     356:	99 81       	ldd	r25, Y+1	; 0x01
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	98 17       	cp	r25, r24
     35c:	a9 f4       	brne	.+42     	; 0x388 <printMenu+0x4a>
     35e:	42 e0       	ldi	r20, 0x02	; 2
     360:	51 e0       	ldi	r21, 0x01	; 1
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	28 2f       	mov	r18, r24
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	c9 01       	movw	r24, r18
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	84 0f       	add	r24, r20
     380:	95 1f       	adc	r25, r21
     382:	0e 94 38 06 	call	0xc70	; 0xc70 <putInvertedSOLED>
     386:	14 c0       	rjmp	.+40     	; 0x3b0 <printMenu+0x72>
		else putsOLED(menu[c]);
     388:	42 e0       	ldi	r20, 0x02	; 2
     38a:	51 e0       	ldi	r21, 0x01	; 1
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	28 2f       	mov	r18, r24
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	c9 01       	movw	r24, r18
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	84 0f       	add	r24, r20
     3aa:	95 1f       	adc	r25, r21
     3ac:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
	
};

void printMenu(uint8_t menuOption){
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	83 30       	cpi	r24, 0x03	; 3
     3ba:	48 f2       	brcs	.-110    	; 0x34e <printMenu+0x10>
		gotoCharOLED(c,0);
		if (c == menuOption) putInvertedSOLED(menu[c]);
		else putsOLED(menu[c]);
	}
}
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	08 95       	ret

000003c6 <initExtMemIface>:

void initExtMemIface(){
     3c6:	df 93       	push	r29
     3c8:	cf 93       	push	r28
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1 << SRE);
     3ce:	85 e5       	ldi	r24, 0x55	; 85
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	25 e5       	ldi	r18, 0x55	; 85
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	20 68       	ori	r18, 0x80	; 128
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
}
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	08 95       	ret

000003e6 <initTimer>:

void initTimer(){ //It will raise a timer interrupt every aprox 10th of sec.
     3e6:	df 93       	push	r29
     3e8:	cf 93       	push	r28
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	//TCCR1B = 0b00000101; //Set source and prescaler
	TCCR1B |= (1 << CS11);
     3ee:	8e e4       	ldi	r24, 0x4E	; 78
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	2e e4       	ldi	r18, 0x4E	; 78
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	f9 01       	movw	r30, r18
     3f8:	20 81       	ld	r18, Z
     3fa:	22 60       	ori	r18, 0x02	; 2
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
	TIMSK  |= (1 << TOIE1); //Enable interrupt by overlfow
     400:	89 e5       	ldi	r24, 0x59	; 89
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	29 e5       	ldi	r18, 0x59	; 89
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	f9 01       	movw	r30, r18
     40a:	20 81       	ld	r18, Z
     40c:	20 68       	ori	r18, 0x80	; 128
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18
}
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <stopTimer>:

void stopTimer(){
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS11);
     420:	8e e4       	ldi	r24, 0x4E	; 78
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	2e e4       	ldi	r18, 0x4E	; 78
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	2d 7f       	andi	r18, 0xFD	; 253
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
	
}
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <__vector_1>:




ISR(INT0_vect) //Interrupt routine for the ADC
{
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
	resultADC = *extADC;
     452:	80 91 00 01 	lds	r24, 0x0100
     456:	90 91 01 01 	lds	r25, 0x0101
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	80 93 67 03 	sts	0x0367, r24
	flagADC = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 66 03 	sts	0x0366, r24
}	
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	ff 91       	pop	r31
     46e:	ef 91       	pop	r30
     470:	9f 91       	pop	r25
     472:	8f 91       	pop	r24
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_2>:

ISR(INT1_vect) //Interrupt routine for the Int1 (Joystick Button)
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	8f 93       	push	r24
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
	flagJoyButton = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 65 03 	sts	0x0365, r24
}
     498:	cf 91       	pop	r28
     49a:	df 91       	pop	r29
     49c:	8f 91       	pop	r24
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_15>:

ISR(TIMER1_OVF_vect)
{
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     4be:	80 91 62 03 	lds	r24, 0x0362
     4c2:	90 91 63 03 	lds	r25, 0x0363
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	90 93 63 03 	sts	0x0363, r25
     4cc:	80 93 62 03 	sts	0x0362, r24
	if( ticks >= 5 ) {
     4d0:	80 91 62 03 	lds	r24, 0x0362
     4d4:	90 91 63 03 	lds	r25, 0x0363
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	91 05       	cpc	r25, r1
     4dc:	18 f0       	brcs	.+6      	; 0x4e4 <__vector_15+0x3c>
			readControl = 1;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 68 03 	sts	0x0368, r24
	}
}	
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <initInterrupts>:
 

void initInterrupts(){
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= ~(1<<PD3); //Set INT1/PD3 as Input
     4fe:	81 e3       	ldi	r24, 0x31	; 49
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	21 e3       	ldi	r18, 0x31	; 49
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z
     50a:	27 7f       	andi	r18, 0xF7	; 247
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
	PORTD |= (1<<PD3); //Set pullup
     510:	82 e3       	ldi	r24, 0x32	; 50
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	22 e3       	ldi	r18, 0x32	; 50
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	28 60       	ori	r18, 0x08	; 8
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
	MCUCR |= 1<<ISC11; //Set interrupt on falling edge
     522:	85 e5       	ldi	r24, 0x55	; 85
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	25 e5       	ldi	r18, 0x55	; 85
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	28 60       	ori	r18, 0x08	; 8
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
	GICR |= (1<<INT1);
     534:	8b e5       	ldi	r24, 0x5B	; 91
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	2b e5       	ldi	r18, 0x5B	; 91
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	f9 01       	movw	r30, r18
     53e:	20 81       	ld	r18, Z
     540:	20 68       	ori	r18, 0x80	; 128
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
	GICR |= (1<<INT0); 
     546:	8b e5       	ldi	r24, 0x5B	; 91
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	2b e5       	ldi	r18, 0x5B	; 91
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	20 64       	ori	r18, 0x40	; 64
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
	sei();
     558:	78 94       	sei
}
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <printHelp>:

void printHelp(){
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	2e 97       	sbiw	r28, 0x0e	; 14
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
	gotoCharOLED(0,0);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
	putsOLED("Need help ?");
     580:	82 e9       	ldi	r24, 0x92	; 146
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
	gotoCharOLED(1,0);
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
	putsOLED("Try google ...");
     590:	8e e9       	ldi	r24, 0x9E	; 158
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
	gotoCharOLED(2,0);
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
	putsOLED("or buy me beer");
     5a0:	8d ea       	ldi	r24, 0xAD	; 173
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e4       	ldi	r25, 0x40	; 64
     5ac:	ac e9       	ldi	r26, 0x9C	; 156
     5ae:	b5 e4       	ldi	r27, 0x45	; 69
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	9a 83       	std	Y+2, r25	; 0x02
     5b4:	ab 83       	std	Y+3, r26	; 0x03
     5b6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5b8:	69 81       	ldd	r22, Y+1	; 0x01
     5ba:	7a 81       	ldd	r23, Y+2	; 0x02
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	2a e9       	ldi	r18, 0x9A	; 154
     5c2:	39 e9       	ldi	r19, 0x99	; 153
     5c4:	49 e9       	ldi	r20, 0x99	; 153
     5c6:	54 e4       	ldi	r21, 0x44	; 68
     5c8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__mulsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	8d 83       	std	Y+5, r24	; 0x05
     5d2:	9e 83       	std	Y+6, r25	; 0x06
     5d4:	af 83       	std	Y+7, r26	; 0x07
     5d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5d8:	11 e0       	ldi	r17, 0x01	; 1
     5da:	6d 81       	ldd	r22, Y+5	; 0x05
     5dc:	7e 81       	ldd	r23, Y+6	; 0x06
     5de:	8f 81       	ldd	r24, Y+7	; 0x07
     5e0:	98 85       	ldd	r25, Y+8	; 0x08
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e8       	ldi	r20, 0x80	; 128
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__ltsf2>
     5ee:	88 23       	and	r24, r24
     5f0:	0c f0       	brlt	.+2      	; 0x5f4 <printHelp+0x94>
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	11 23       	and	r17, r17
     5f6:	29 f0       	breq	.+10     	; 0x602 <printHelp+0xa2>
		__ticks = 1;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	9a 87       	std	Y+10, r25	; 0x0a
     5fe:	89 87       	std	Y+9, r24	; 0x09
     600:	46 c0       	rjmp	.+140    	; 0x68e <printHelp+0x12e>
	else if (__tmp > 65535)
     602:	11 e0       	ldi	r17, 0x01	; 1
     604:	6d 81       	ldd	r22, Y+5	; 0x05
     606:	7e 81       	ldd	r23, Y+6	; 0x06
     608:	8f 81       	ldd	r24, Y+7	; 0x07
     60a:	98 85       	ldd	r25, Y+8	; 0x08
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	3f ef       	ldi	r19, 0xFF	; 255
     610:	4f e7       	ldi	r20, 0x7F	; 127
     612:	57 e4       	ldi	r21, 0x47	; 71
     614:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gtsf2>
     618:	18 16       	cp	r1, r24
     61a:	0c f0       	brlt	.+2      	; 0x61e <printHelp+0xbe>
     61c:	10 e0       	ldi	r17, 0x00	; 0
     61e:	11 23       	and	r17, r17
     620:	61 f1       	breq	.+88     	; 0x67a <printHelp+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     622:	69 81       	ldd	r22, Y+1	; 0x01
     624:	7a 81       	ldd	r23, Y+2	; 0x02
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	40 e2       	ldi	r20, 0x20	; 32
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__mulsf3>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	bc 01       	movw	r22, r24
     63c:	cd 01       	movw	r24, r26
     63e:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	9a 87       	std	Y+10, r25	; 0x0a
     648:	89 87       	std	Y+9, r24	; 0x09
     64a:	12 c0       	rjmp	.+36     	; 0x670 <printHelp+0x110>
     64c:	8a e7       	ldi	r24, 0x7A	; 122
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	9c 87       	std	Y+12, r25	; 0x0c
     652:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     654:	8b 85       	ldd	r24, Y+11	; 0x0b
     656:	9c 85       	ldd	r25, Y+12	; 0x0c
     658:	8c 01       	movw	r16, r24
     65a:	c8 01       	movw	r24, r16
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <printHelp+0xfc>
     660:	8c 01       	movw	r16, r24
     662:	1c 87       	std	Y+12, r17	; 0x0c
     664:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     666:	89 85       	ldd	r24, Y+9	; 0x09
     668:	9a 85       	ldd	r25, Y+10	; 0x0a
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	9a 87       	std	Y+10, r25	; 0x0a
     66e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     670:	89 85       	ldd	r24, Y+9	; 0x09
     672:	9a 85       	ldd	r25, Y+10	; 0x0a
     674:	00 97       	sbiw	r24, 0x00	; 0
     676:	51 f7       	brne	.-44     	; 0x64c <printHelp+0xec>
     678:	17 c0       	rjmp	.+46     	; 0x6a8 <printHelp+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     67a:	6d 81       	ldd	r22, Y+5	; 0x05
     67c:	7e 81       	ldd	r23, Y+6	; 0x06
     67e:	8f 81       	ldd	r24, Y+7	; 0x07
     680:	98 85       	ldd	r25, Y+8	; 0x08
     682:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	9a 87       	std	Y+10, r25	; 0x0a
     68c:	89 87       	std	Y+9, r24	; 0x09
     68e:	89 85       	ldd	r24, Y+9	; 0x09
     690:	9a 85       	ldd	r25, Y+10	; 0x0a
     692:	9e 87       	std	Y+14, r25	; 0x0e
     694:	8d 87       	std	Y+13, r24	; 0x0d
     696:	8d 85       	ldd	r24, Y+13	; 0x0d
     698:	9e 85       	ldd	r25, Y+14	; 0x0e
     69a:	8c 01       	movw	r16, r24
     69c:	c8 01       	movw	r24, r16
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <printHelp+0x13e>
     6a2:	8c 01       	movw	r16, r24
     6a4:	1e 87       	std	Y+14, r17	; 0x0e
     6a6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(5000);
	clearOLED();
     6a8:	0e 94 d4 06 	call	0xda8	; 0xda8 <clearOLED>
}
     6ac:	2e 96       	adiw	r28, 0x0e	; 14
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <main>:


int main(void)
{
     6c2:	df 93       	push	r29
     6c4:	cf 93       	push	r28
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <main+0x6>
     6c8:	0f 92       	push	r0
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
	initUART(UBBR);
     6ce:	8f e1       	ldi	r24, 0x1F	; 31
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <initUART>
	printf("Simple RAM TEST \r\n");
     6d6:	8c eb       	ldi	r24, 0xBC	; 188
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
	initExtMemIface();
     6de:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <initExtMemIface>
	initTimer();
     6e2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <initTimer>
	initInterrupts();
     6e6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <initInterrupts>
	SRAM_test();
     6ea:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SRAM_test>
	joyInit();
     6ee:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <joyInit>
	initOLED();
     6f2:	0e 94 5b 05 	call	0xab6	; 0xab6 <initOLED>
	initSPI();
     6f6:	0e 94 f7 06 	call	0xdee	; 0xdee <initSPI>
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <main+0x3c>
		
		

		
		
	}
     6fc:	00 00       	nop
	struct joypos_t c;
	enum joydir_t d;
	
	
	 while(1){
		if (readControl) {
     6fe:	80 91 68 03 	lds	r24, 0x0368
     702:	88 23       	and	r24, r24
     704:	a1 f1       	breq	.+104    	; 0x76e <main+0xac>
			readControl = 0;
     706:	10 92 68 03 	sts	0x0368, r1
			d = getJoyDirection();
     70a:	0e 94 15 04 	call	0x82a	; 0x82a <getJoyDirection>
     70e:	89 83       	std	Y+1, r24	; 0x01
			if (d == TOP || d == RIGHT_TOP || d == LEFT_TOP) menuOption = (menuOption-1)%NUM_MENU_OPTIONS;
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	84 30       	cpi	r24, 0x04	; 4
     714:	31 f0       	breq	.+12     	; 0x722 <main+0x60>
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	83 30       	cpi	r24, 0x03	; 3
     71a:	19 f0       	breq	.+6      	; 0x722 <main+0x60>
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	69 f4       	brne	.+26     	; 0x73c <main+0x7a>
     722:	80 91 64 03 	lds	r24, 0x0364
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	23 e0       	ldi	r18, 0x03	; 3
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	b9 01       	movw	r22, r18
     732:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divmodhi4>
     736:	80 93 64 03 	sts	0x0364, r24
     73a:	15 c0       	rjmp	.+42     	; 0x766 <main+0xa4>
			else if (d == BOTTOM || d == RIGHT_BOTTOM|| d == LEFT_BOTTOM) menuOption = (menuOption+1)%NUM_MENU_OPTIONS;
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	85 30       	cpi	r24, 0x05	; 5
     740:	31 f0       	breq	.+12     	; 0x74e <main+0x8c>
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	19 f0       	breq	.+6      	; 0x74e <main+0x8c>
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	88 23       	and	r24, r24
     74c:	61 f4       	brne	.+24     	; 0x766 <main+0xa4>
     74e:	80 91 64 03 	lds	r24, 0x0364
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	23 e0       	ldi	r18, 0x03	; 3
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	b9 01       	movw	r22, r18
     75e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divmodhi4>
     762:	80 93 64 03 	sts	0x0364, r24
			printMenu(menuOption);
     766:	80 91 64 03 	lds	r24, 0x0364
     76a:	0e 94 9f 01 	call	0x33e	; 0x33e <printMenu>
		} if (flagJoyButton) {
     76e:	80 91 65 03 	lds	r24, 0x0365
     772:	88 23       	and	r24, r24
     774:	19 f2       	breq	.-122    	; 0x6fc <main+0x3a>
		
			flagJoyButton = 0;
     776:	10 92 65 03 	sts	0x0365, r1
			gotoCharOLED(7,0);
     77a:	87 e0       	ldi	r24, 0x07	; 7
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
			putsOLED("                        "); //Cleans last selected option from screen
     782:	8e ec       	ldi	r24, 0xCE	; 206
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
			switch(menuOption){
     78a:	80 91 64 03 	lds	r24, 0x0364
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	91 05       	cpc	r25, r1
     796:	71 f0       	breq	.+28     	; 0x7b4 <main+0xf2>
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	91 05       	cpc	r25, r1
     79c:	a1 f0       	breq	.+40     	; 0x7c6 <main+0x104>
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	a9 f4       	brne	.+42     	; 0x7cc <main+0x10a>
				case 0: //Play
					gotoCharOLED(7,0);
     7a2:	87 e0       	ldi	r24, 0x07	; 7
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
					putsOLED("PLAY");
     7aa:	87 ee       	ldi	r24, 0xE7	; 231
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
					break;
     7b2:	15 c0       	rjmp	.+42     	; 0x7de <main+0x11c>
					
			   case 1: //Options
					gotoCharOLED(7,0);
     7b4:	87 e0       	ldi	r24, 0x07	; 7
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
					putsOLED("OPTIONS");
     7bc:	8c ee       	ldi	r24, 0xEC	; 236
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
					break;
     7c4:	0c c0       	rjmp	.+24     	; 0x7de <main+0x11c>
					
			   case 2: //Help
				    printHelp();
     7c6:	0e 94 b0 02 	call	0x560	; 0x560 <printHelp>
					break;
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <main+0x11c>
					
			  default:
					gotoCharOLED(7,0);
     7cc:	87 e0       	ldi	r24, 0x07	; 7
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <gotoCharOLED>
					putsOLED("Stick to the OPTIONS !!!");
     7d4:	84 ef       	ldi	r24, 0xF4	; 244
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <putsOLED>
					break;
     7dc:	00 00       	nop
		
		

		
		
	}
     7de:	8f cf       	rjmp	.-226    	; 0x6fe <main+0x3c>

000007e0 <joyInit>:

volatile uint8_t flagJoyButton = 0; //Initialize flag for joybutton
struct joypos_t mPoint; //Will be initialized in runntime


void joyInit(){
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
	mPoint.x = ADC_read(X_AXIS);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     7ee:	80 93 69 03 	sts	0x0369, r24
	mPoint.y = ADC_read(Y_AXIS);
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     7f8:	80 93 6a 03 	sts	0x036A, r24
}
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <getJoyPosition>:

struct joypos_t getJoyPosition(){
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	00 d0       	rcall	.+0      	; 0x808 <getJoyPosition+0x6>
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
	r.x = ADC_read(X_AXIS);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     812:	89 83       	std	Y+1, r24	; 0x01
	r.y = ADC_read(Y_AXIS);
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     81a:	8a 83       	std	Y+2, r24	; 0x02
	return r;	
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	08 95       	ret

0000082a <getJoyDirection>:

enum joydir_t getJoyDirection(){
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	00 d0       	rcall	.+0      	; 0x830 <getJoyDirection+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
    r = getJoyPosition();
     834:	0e 94 01 04 	call	0x802	; 0x802 <getJoyPosition>
     838:	9a 83       	std	Y+2, r25	; 0x02
     83a:	89 83       	std	Y+1, r24	; 0x01
	if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) return CENTER;
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	28 2f       	mov	r18, r24
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	80 91 69 03 	lds	r24, 0x0369
     846:	88 2f       	mov	r24, r24
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a9 01       	movw	r20, r18
     84c:	48 1b       	sub	r20, r24
     84e:	59 0b       	sbc	r21, r25
     850:	ca 01       	movw	r24, r20
     852:	5f ef       	ldi	r21, 0xFF	; 255
     854:	88 3e       	cpi	r24, 0xE8	; 232
     856:	95 07       	cpc	r25, r21
     858:	6c f1       	brlt	.+90     	; 0x8b4 <getJoyDirection+0x8a>
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	28 2f       	mov	r18, r24
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	80 91 69 03 	lds	r24, 0x0369
     864:	88 2f       	mov	r24, r24
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a9 01       	movw	r20, r18
     86a:	48 1b       	sub	r20, r24
     86c:	59 0b       	sbc	r21, r25
     86e:	ca 01       	movw	r24, r20
     870:	89 31       	cpi	r24, 0x19	; 25
     872:	91 05       	cpc	r25, r1
     874:	fc f4       	brge	.+62     	; 0x8b4 <getJoyDirection+0x8a>
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	80 91 6a 03 	lds	r24, 0x036A
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	48 1b       	sub	r20, r24
     888:	59 0b       	sbc	r21, r25
     88a:	ca 01       	movw	r24, r20
     88c:	5f ef       	ldi	r21, 0xFF	; 255
     88e:	88 3e       	cpi	r24, 0xE8	; 232
     890:	95 07       	cpc	r25, r21
     892:	84 f0       	brlt	.+32     	; 0x8b4 <getJoyDirection+0x8a>
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	80 91 6a 03 	lds	r24, 0x036A
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a9 01       	movw	r20, r18
     8a4:	48 1b       	sub	r20, r24
     8a6:	59 0b       	sbc	r21, r25
     8a8:	ca 01       	movw	r24, r20
     8aa:	89 31       	cpi	r24, 0x19	; 25
     8ac:	91 05       	cpc	r25, r1
     8ae:	14 f4       	brge	.+4      	; 0x8b4 <getJoyDirection+0x8a>
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	7d c0       	rjmp	.+250    	; 0x9ae <getJoyDirection+0x184>
	else {
		if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && !abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	28 2f       	mov	r18, r24
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	80 91 69 03 	lds	r24, 0x0369
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	48 1b       	sub	r20, r24
     8c6:	59 0b       	sbc	r21, r25
     8c8:	ca 01       	movw	r24, r20
     8ca:	5f ef       	ldi	r21, 0xFF	; 255
     8cc:	88 3e       	cpi	r24, 0xE8	; 232
     8ce:	95 07       	cpc	r25, r21
     8d0:	bc f0       	brlt	.+46     	; 0x900 <getJoyDirection+0xd6>
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	28 2f       	mov	r18, r24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	80 91 69 03 	lds	r24, 0x0369
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	48 1b       	sub	r20, r24
     8e4:	59 0b       	sbc	r21, r25
     8e6:	ca 01       	movw	r24, r20
     8e8:	89 31       	cpi	r24, 0x19	; 25
     8ea:	91 05       	cpc	r25, r1
     8ec:	4c f4       	brge	.+18     	; 0x900 <getJoyDirection+0xd6>
			if (r.y > mPoint.y) return TOP;
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	80 91 6a 03 	lds	r24, 0x036A
     8f4:	89 17       	cp	r24, r25
     8f6:	10 f4       	brcc	.+4      	; 0x8fc <getJoyDirection+0xd2>
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	59 c0       	rjmp	.+178    	; 0x9ae <getJoyDirection+0x184>
			else return BOTTOM;
     8fc:	85 e0       	ldi	r24, 0x05	; 5
     8fe:	57 c0       	rjmp	.+174    	; 0x9ae <getJoyDirection+0x184>
		}
		if (!abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	80 91 6a 03 	lds	r24, 0x036A
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a9 01       	movw	r20, r18
     910:	48 1b       	sub	r20, r24
     912:	59 0b       	sbc	r21, r25
     914:	ca 01       	movw	r24, r20
     916:	5f ef       	ldi	r21, 0xFF	; 255
     918:	88 3e       	cpi	r24, 0xE8	; 232
     91a:	95 07       	cpc	r25, r21
     91c:	bc f0       	brlt	.+46     	; 0x94c <getJoyDirection+0x122>
     91e:	8a 81       	ldd	r24, Y+2	; 0x02
     920:	28 2f       	mov	r18, r24
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	80 91 6a 03 	lds	r24, 0x036A
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	a9 01       	movw	r20, r18
     92e:	48 1b       	sub	r20, r24
     930:	59 0b       	sbc	r21, r25
     932:	ca 01       	movw	r24, r20
     934:	89 31       	cpi	r24, 0x19	; 25
     936:	91 05       	cpc	r25, r1
     938:	4c f4       	brge	.+18     	; 0x94c <getJoyDirection+0x122>
			if (r.x > mPoint.x) return RIGHT;
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	80 91 69 03 	lds	r24, 0x0369
     940:	89 17       	cp	r24, r25
     942:	10 f4       	brcc	.+4      	; 0x948 <getJoyDirection+0x11e>
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	33 c0       	rjmp	.+102    	; 0x9ae <getJoyDirection+0x184>
			else return LEFT;
     948:	86 e0       	ldi	r24, 0x06	; 6
     94a:	31 c0       	rjmp	.+98     	; 0x9ae <getJoyDirection+0x184>
		} 
		if (r.x < mPoint.x && r.y < mPoint.y) return LEFT_BOTTOM; 
     94c:	99 81       	ldd	r25, Y+1	; 0x01
     94e:	80 91 69 03 	lds	r24, 0x0369
     952:	98 17       	cp	r25, r24
     954:	38 f4       	brcc	.+14     	; 0x964 <getJoyDirection+0x13a>
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	80 91 6a 03 	lds	r24, 0x036A
     95c:	98 17       	cp	r25, r24
     95e:	10 f4       	brcc	.+4      	; 0x964 <getJoyDirection+0x13a>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	25 c0       	rjmp	.+74     	; 0x9ae <getJoyDirection+0x184>
		if (r.x < mPoint.x && r.y > mPoint.y) return LEFT_TOP;
     964:	99 81       	ldd	r25, Y+1	; 0x01
     966:	80 91 69 03 	lds	r24, 0x0369
     96a:	98 17       	cp	r25, r24
     96c:	38 f4       	brcc	.+14     	; 0x97c <getJoyDirection+0x152>
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	80 91 6a 03 	lds	r24, 0x036A
     974:	89 17       	cp	r24, r25
     976:	10 f4       	brcc	.+4      	; 0x97c <getJoyDirection+0x152>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	19 c0       	rjmp	.+50     	; 0x9ae <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y < mPoint.y) return RIGHT_BOTTOM;
     97c:	99 81       	ldd	r25, Y+1	; 0x01
     97e:	80 91 69 03 	lds	r24, 0x0369
     982:	89 17       	cp	r24, r25
     984:	38 f4       	brcc	.+14     	; 0x994 <getJoyDirection+0x16a>
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	80 91 6a 03 	lds	r24, 0x036A
     98c:	98 17       	cp	r25, r24
     98e:	10 f4       	brcc	.+4      	; 0x994 <getJoyDirection+0x16a>
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	0d c0       	rjmp	.+26     	; 0x9ae <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y > mPoint.y) return RIGHT_TOP;
     994:	99 81       	ldd	r25, Y+1	; 0x01
     996:	80 91 69 03 	lds	r24, 0x0369
     99a:	89 17       	cp	r24, r25
     99c:	38 f4       	brcc	.+14     	; 0x9ac <getJoyDirection+0x182>
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	80 91 6a 03 	lds	r24, 0x036A
     9a4:	89 17       	cp	r24, r25
     9a6:	10 f4       	brcc	.+4      	; 0x9ac <getJoyDirection+0x182>
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <getJoyDirection+0x184>
	}
	
	return CENTER; //In case of error return inhert NEVER USED
     9ac:	88 e0       	ldi	r24, 0x08	; 8
}
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	cf 91       	pop	r28
     9b4:	df 91       	pop	r29
     9b6:	08 95       	ret

000009b8 <printdir>:



	
	void printdir(enum joydir_t d) {
     9b8:	df 93       	push	r29
     9ba:	cf 93       	push	r28
     9bc:	0f 92       	push	r0
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	89 83       	std	Y+1, r24	; 0x01
		switch (d){
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	88 2f       	mov	r24, r24
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	84 30       	cpi	r24, 0x04	; 4
     9cc:	91 05       	cpc	r25, r1
     9ce:	01 f1       	breq	.+64     	; 0xa10 <printdir+0x58>
     9d0:	85 30       	cpi	r24, 0x05	; 5
     9d2:	91 05       	cpc	r25, r1
     9d4:	84 f4       	brge	.+32     	; 0x9f6 <printdir+0x3e>
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	91 05       	cpc	r25, r1
     9da:	c1 f1       	breq	.+112    	; 0xa4c <printdir+0x94>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	91 05       	cpc	r25, r1
     9e0:	1c f4       	brge	.+6      	; 0x9e8 <printdir+0x30>
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	c1 f1       	breq	.+112    	; 0xa56 <printdir+0x9e>
     9e6:	41 c0       	rjmp	.+130    	; 0xa6a <printdir+0xb2>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	91 05       	cpc	r25, r1
     9ec:	29 f1       	breq	.+74     	; 0xa38 <printdir+0x80>
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	91 05       	cpc	r25, r1
     9f2:	39 f1       	breq	.+78     	; 0xa42 <printdir+0x8a>
     9f4:	3a c0       	rjmp	.+116    	; 0xa6a <printdir+0xb2>
     9f6:	86 30       	cpi	r24, 0x06	; 6
     9f8:	91 05       	cpc	r25, r1
     9fa:	a1 f0       	breq	.+40     	; 0xa24 <printdir+0x6c>
     9fc:	86 30       	cpi	r24, 0x06	; 6
     9fe:	91 05       	cpc	r25, r1
     a00:	64 f0       	brlt	.+24     	; 0xa1a <printdir+0x62>
     a02:	87 30       	cpi	r24, 0x07	; 7
     a04:	91 05       	cpc	r25, r1
     a06:	99 f0       	breq	.+38     	; 0xa2e <printdir+0x76>
     a08:	88 30       	cpi	r24, 0x08	; 8
     a0a:	91 05       	cpc	r25, r1
     a0c:	49 f1       	breq	.+82     	; 0xa60 <printdir+0xa8>
     a0e:	2d c0       	rjmp	.+90     	; 0xa6a <printdir+0xb2>
			case TOP: printf("TOP \r\n"); break;
     a10:	8d e0       	ldi	r24, 0x0D	; 13
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a18:	28 c0       	rjmp	.+80     	; 0xa6a <printdir+0xb2>
			case BOTTOM: printf("BOTTOM \r\n"); break;
     a1a:	83 e1       	ldi	r24, 0x13	; 19
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a22:	23 c0       	rjmp	.+70     	; 0xa6a <printdir+0xb2>
			case LEFT: printf("LEFT \r\n"); break;
     a24:	8c e1       	ldi	r24, 0x1C	; 28
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a2c:	1e c0       	rjmp	.+60     	; 0xa6a <printdir+0xb2>
			case RIGHT: printf("RIGHT \r\n"); break;
     a2e:	83 e2       	ldi	r24, 0x23	; 35
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a36:	19 c0       	rjmp	.+50     	; 0xa6a <printdir+0xb2>
			case RIGHT_BOTTOM: printf("RIGHT_BOTTOM \r\n"); break;
     a38:	8b e2       	ldi	r24, 0x2B	; 43
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a40:	14 c0       	rjmp	.+40     	; 0xa6a <printdir+0xb2>
			case RIGHT_TOP: printf("RIGHT_TOP \r\n"); break;
     a42:	8a e3       	ldi	r24, 0x3A	; 58
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a4a:	0f c0       	rjmp	.+30     	; 0xa6a <printdir+0xb2>
			case LEFT_TOP: printf("LEFT_TOP \r\n"); break;
     a4c:	86 e4       	ldi	r24, 0x46	; 70
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <printdir+0xb2>
			case LEFT_BOTTOM: printf("LEFT_BOTTOM \r\n"); break;
     a56:	81 e5       	ldi	r24, 0x51	; 81
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <printdir+0xb2>
			case CENTER: printf("SENTRUM \r\n"); break;	
     a60:	8f e5       	ldi	r24, 0x5F	; 95
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>
     a68:	00 00       	nop
		}	
		
	}
     a6a:	0f 90       	pop	r0
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <writeDataOLED>:
#include "font_5x7.h"

volatile char* extDataOled = 0x1242; //Adress for the Data reg of the OLED DC=0       0b0001 0010 0100 0010
volatile char* extCommandOled = 0x1001; //Adress for the Command reg of the OLED DC=1 0b0001 0000 0000 0001

void writeDataOLED(uint8_t c){
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	0f 92       	push	r0
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	89 83       	std	Y+1, r24	; 0x01
	*extDataOled = c;
     a7e:	80 91 69 02 	lds	r24, 0x0269
     a82:	90 91 6a 02 	lds	r25, 0x026A
     a86:	29 81       	ldd	r18, Y+1	; 0x01
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
}
     a8c:	0f 90       	pop	r0
     a8e:	cf 91       	pop	r28
     a90:	df 91       	pop	r29
     a92:	08 95       	ret

00000a94 <writeCommandOLED>:

void writeCommandOLED(uint8_t c){
     a94:	df 93       	push	r29
     a96:	cf 93       	push	r28
     a98:	0f 92       	push	r0
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	89 83       	std	Y+1, r24	; 0x01
	*extCommandOled = c;
     aa0:	80 91 6b 02 	lds	r24, 0x026B
     aa4:	90 91 6c 02 	lds	r25, 0x026C
     aa8:	29 81       	ldd	r18, Y+1	; 0x01
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
}
     aae:	0f 90       	pop	r0
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	08 95       	ret

00000ab6 <initOLED>:

void initOLED()
{
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
    writeCommandOLED(0xae); // display off
     abe:	8e ea       	ldi	r24, 0xAE	; 174
     ac0:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xa1); //segment remap
     ac4:	81 ea       	ldi	r24, 0xA1	; 161
     ac6:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xda); //common pads hardware: alternative
     aca:	8a ed       	ldi	r24, 0xDA	; 218
     acc:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x12);
     ad0:	82 e1       	ldi	r24, 0x12	; 18
     ad2:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xc8); //common output scan direction:com63~com0
     ad6:	88 ec       	ldi	r24, 0xC8	; 200
     ad8:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xa8); //multiplex ration mode:63
     adc:	88 ea       	ldi	r24, 0xA8	; 168
     ade:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x3f);
     ae2:	8f e3       	ldi	r24, 0x3F	; 63
     ae4:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xd5); //display divide ratio/osc. freq. mode
     ae8:	85 ed       	ldi	r24, 0xD5	; 213
     aea:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x80);
     aee:	80 e8       	ldi	r24, 0x80	; 128
     af0:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x81); //contrast control
     af4:	81 e8       	ldi	r24, 0x81	; 129
     af6:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x50);
     afa:	80 e5       	ldi	r24, 0x50	; 80
     afc:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xd9); //set pre-charge period
     b00:	89 ed       	ldi	r24, 0xD9	; 217
     b02:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x21);
     b06:	81 e2       	ldi	r24, 0x21	; 33
     b08:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x20); //Set Memory Addressing Mode
     b0c:	80 e2       	ldi	r24, 0x20	; 32
     b0e:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x00); // horizontal
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xdb); //VCOM deselect level mode
     b18:	8b ed       	ldi	r24, 0xDB	; 219
     b1a:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x30);
     b1e:	80 e3       	ldi	r24, 0x30	; 48
     b20:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xad); //master configuration
     b24:	8d ea       	ldi	r24, 0xAD	; 173
     b26:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0x00);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>

    //oled_home();
    writeCommandOLED(0x21); //Set column
     b30:	81 e2       	ldi	r24, 0x21	; 33
     b32:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x00);
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x7F);
     b3c:	8f e7       	ldi	r24, 0x7F	; 127
     b3e:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	
	writeCommandOLED(0x22); //Set row
     b42:	82 e2       	ldi	r24, 0x22	; 34
     b44:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x00);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x07);
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	
	writeCommandOLED(0x40); //Set start line to 0th
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>

    writeCommandOLED(0xa4); //out follows RAM content
     b5a:	84 ea       	ldi	r24, 0xA4	; 164
     b5c:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xa6); //set normal display
     b60:	86 ea       	ldi	r24, 0xA6	; 166
     b62:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
    writeCommandOLED(0xaf); // display on
     b66:	8f ea       	ldi	r24, 0xAF	; 175
     b68:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	
	clearOLED();
     b6c:	0e 94 d4 06 	call	0xda8	; 0xda8 <clearOLED>
	
	
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <invertModeOLED>:


void invertModeOLED() {
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa7);	
     b7e:	87 ea       	ldi	r24, 0xA7	; 167
     b80:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <normalModeOLED>:

void normalModeOLED() {
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa6);	
     b92:	86 ea       	ldi	r24, 0xA6	; 166
     b94:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <gotoCharOLED>:

//Treats the OLED as a display char of 25 characters long by 8 lines
//It will write from the given position to the end of the line and display
void gotoCharOLED(char line, char pos){
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <gotoCharOLED+0x6>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     bac:	81 e2       	ldi	r24, 0x21	; 33
     bae:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(pos*5);
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	98 2f       	mov	r25, r24
     bb6:	99 0f       	add	r25, r25
     bb8:	99 0f       	add	r25, r25
     bba:	89 0f       	add	r24, r25
     bbc:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x7F);
     bc0:	8f e7       	ldi	r24, 0x7F	; 127
     bc2:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     bc6:	82 e2       	ldi	r24, 0x22	; 34
     bc8:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(line);
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x07);
     bd2:	87 e0       	ldi	r24, 0x07	; 7
     bd4:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <gotoPosOLED>:

void gotoPosOLED(char x, char y){
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <gotoPosOLED+0x6>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     bf0:	81 e2       	ldi	r24, 0x21	; 33
     bf2:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(x);
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x7F);
     bfc:	8f e7       	ldi	r24, 0x7F	; 127
     bfe:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     c02:	82 e2       	ldi	r24, 0x22	; 34
     c04:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(y);
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
	writeCommandOLED(0x07);
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	0e 94 4a 05 	call	0xa94	; 0xa94 <writeCommandOLED>
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <putsOLED>:

void putsOLED(char* s){
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <putsOLED+0x6>
     c24:	0f 92       	push	r0
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9b 83       	std	Y+3, r25	; 0x03
     c2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putcOLED(s[counter]);
     c2e:	19 82       	std	Y+1, r1	; 0x01
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <putsOLED+0x30>
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	2a 81       	ldd	r18, Y+2	; 0x02
     c3a:	3b 81       	ldd	r19, Y+3	; 0x03
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	0e 94 61 06 	call	0xcc2	; 0xcc2 <putcOLED>
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	2a 81       	ldd	r18, Y+2	; 0x02
     c56:	3b 81       	ldd	r19, Y+3	; 0x03
     c58:	82 0f       	add	r24, r18
     c5a:	93 1f       	adc	r25, r19
     c5c:	fc 01       	movw	r30, r24
     c5e:	80 81       	ld	r24, Z
     c60:	88 23       	and	r24, r24
     c62:	39 f7       	brne	.-50     	; 0xc32 <putsOLED+0x14>
}
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <putInvertedSOLED>:

void putInvertedSOLED(char* s){
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <putInvertedSOLED+0x6>
     c76:	0f 92       	push	r0
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9b 83       	std	Y+3, r25	; 0x03
     c7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putInvertedCOLED(s[counter]);
     c80:	19 82       	std	Y+1, r1	; 0x01
     c82:	0e c0       	rjmp	.+28     	; 0xca0 <putInvertedSOLED+0x30>
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	2a 81       	ldd	r18, Y+2	; 0x02
     c8c:	3b 81       	ldd	r19, Y+3	; 0x03
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	0e 94 9a 06 	call	0xd34	; 0xd34 <putInvertedCOLED>
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	2a 81       	ldd	r18, Y+2	; 0x02
     ca8:	3b 81       	ldd	r19, Y+3	; 0x03
     caa:	82 0f       	add	r24, r18
     cac:	93 1f       	adc	r25, r19
     cae:	fc 01       	movw	r30, r24
     cb0:	80 81       	ld	r24, Z
     cb2:	88 23       	and	r24, r24
     cb4:	39 f7       	brne	.-50     	; 0xc84 <putInvertedSOLED+0x14>
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <putcOLED>:

void putcOLED(char c){
     cc2:	1f 93       	push	r17
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	00 d0       	rcall	.+0      	; 0xcca <putcOLED+0x8>
     cca:	00 d0       	rcall	.+0      	; 0xccc <putcOLED+0xa>
     ccc:	0f 92       	push	r0
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(pgm_read_byte(&(myfont[c-32][counter]))); //-32 is to compensate for the offset between our fontfile and the true ascii table
     cd4:	19 82       	std	Y+1, r1	; 0x01
     cd6:	22 c0       	rjmp	.+68     	; 0xd1c <putcOLED+0x5a>
     cd8:	20 e7       	ldi	r18, 0x70	; 112
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	8d 81       	ldd	r24, Y+5	; 0x05
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	ac 01       	movw	r20, r24
     ce4:	44 0f       	add	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	44 0f       	add	r20, r20
     cea:	55 1f       	adc	r21, r21
     cec:	48 0f       	add	r20, r24
     cee:	59 1f       	adc	r21, r25
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	84 0f       	add	r24, r20
     cf8:	95 1f       	adc	r25, r21
     cfa:	80 5a       	subi	r24, 0xA0	; 160
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	9b 83       	std	Y+3, r25	; 0x03
     d04:	8a 83       	std	Y+2, r24	; 0x02
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	fc 01       	movw	r30, r24
     d0c:	14 91       	lpm	r17, Z+
     d0e:	1c 83       	std	Y+4, r17	; 0x04
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	0e 94 39 05 	call	0xa72	; 0xa72 <writeDataOLED>
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	85 30       	cpi	r24, 0x05	; 5
     d20:	d8 f2       	brcs	.-74     	; 0xcd8 <putcOLED+0x16>
}
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	1f 91       	pop	r17
     d32:	08 95       	ret

00000d34 <putInvertedCOLED>:

void putInvertedCOLED(char c){
     d34:	1f 93       	push	r17
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <putInvertedCOLED+0x8>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <putInvertedCOLED+0xa>
     d3e:	0f 92       	push	r0
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(~pgm_read_byte(&(myfont[c-32][counter]))); 
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	23 c0       	rjmp	.+70     	; 0xd90 <putInvertedCOLED+0x5c>
     d4a:	20 e7       	ldi	r18, 0x70	; 112
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	8d 81       	ldd	r24, Y+5	; 0x05
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	ac 01       	movw	r20, r24
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	44 0f       	add	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	48 0f       	add	r20, r24
     d60:	59 1f       	adc	r21, r25
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	84 0f       	add	r24, r20
     d6a:	95 1f       	adc	r25, r21
     d6c:	80 5a       	subi	r24, 0xA0	; 160
     d6e:	90 40       	sbci	r25, 0x00	; 0
     d70:	82 0f       	add	r24, r18
     d72:	93 1f       	adc	r25, r19
     d74:	9b 83       	std	Y+3, r25	; 0x03
     d76:	8a 83       	std	Y+2, r24	; 0x02
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	9b 81       	ldd	r25, Y+3	; 0x03
     d7c:	fc 01       	movw	r30, r24
     d7e:	14 91       	lpm	r17, Z+
     d80:	1c 83       	std	Y+4, r17	; 0x04
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	80 95       	com	r24
     d86:	0e 94 39 05 	call	0xa72	; 0xa72 <writeDataOLED>
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	85 30       	cpi	r24, 0x05	; 5
     d94:	d0 f2       	brcs	.-76     	; 0xd4a <putInvertedCOLED+0x16>
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	1f 91       	pop	r17
     da6:	08 95       	ret

00000da8 <clearOLED>:

void clearOLED(){
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <clearOLED+0x6>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	gotoPosOLED(0,0);
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <gotoPosOLED>
	uint16_t i;
	for(i = 0; i < 128*8; i++) writeDataOLED(0x00);
     dba:	1a 82       	std	Y+2, r1	; 0x02
     dbc:	19 82       	std	Y+1, r1	; 0x01
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <clearOLED+0x28>
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 39 05 	call	0xa72	; 0xa72 <writeDataOLED>
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	24 e0       	ldi	r18, 0x04	; 4
     dd6:	80 30       	cpi	r24, 0x00	; 0
     dd8:	92 07       	cpc	r25, r18
     dda:	90 f3       	brcs	.-28     	; 0xdc0 <clearOLED+0x18>
	gotoPosOLED(0,0);
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <gotoPosOLED>
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <initSPI>:
 */ 


#include "spi.h"

void initSPI(){
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	//Setting pins and directions 
	//MOSI, SCK, !SS as output
	DDRB |= (1 << PB7) | (1 << PB5)  | (1 << PB4);
     df6:	87 e3       	ldi	r24, 0x37	; 55
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	27 e3       	ldi	r18, 0x37	; 55
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	f9 01       	movw	r30, r18
     e00:	20 81       	ld	r18, Z
     e02:	20 6b       	ori	r18, 0xB0	; 176
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
	PORTB |=  (1 << PB4); //Pullup to avoid wrong fallback to slave mode
     e08:	88 e3       	ldi	r24, 0x38	; 56
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	28 e3       	ldi	r18, 0x38	; 56
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	20 61       	ori	r18, 0x10	; 16
     e16:	fc 01       	movw	r30, r24
     e18:	20 83       	st	Z, r18
	//MISO is Overriden as input, TODO: check if it work
	SPCR |=   (1 << SPE) | (1 << MSTR) | (1<<SPR0);
     e1a:	8d e2       	ldi	r24, 0x2D	; 45
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	2d e2       	ldi	r18, 0x2D	; 45
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	f9 01       	movw	r30, r18
     e24:	20 81       	ld	r18, Z
     e26:	21 65       	ori	r18, 0x51	; 81
     e28:	fc 01       	movw	r30, r24
     e2a:	20 83       	st	Z, r18
	//configured as Master, NOT producing interrupts and Mode 1;
	
}
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <writeSPI>:

void writeSPI(char data){
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
   //Lower !SS
   PORTB &= ~(1<<PB4);
     e3e:	88 e3       	ldi	r24, 0x38	; 56
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	28 e3       	ldi	r18, 0x38	; 56
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	f9 01       	movw	r30, r18
     e48:	20 81       	ld	r18, Z
     e4a:	2f 7e       	andi	r18, 0xEF	; 239
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
      
   SPDR = data;
     e50:	8f e2       	ldi	r24, 0x2F	; 47
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	29 81       	ldd	r18, Y+1	; 0x01
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
   
   while (!((SPSR) & (1 << SPIF))); //TODO: Make it interrupt based maybe
     e5a:	00 00       	nop
     e5c:	8e e2       	ldi	r24, 0x2E	; 46
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	88 23       	and	r24, r24
     e66:	d4 f7       	brge	.-12     	; 0xe5c <writeSPI+0x2a>
   
   //Rise !SS
   PORTB |= (1<<PB4);	 
     e68:	88 e3       	ldi	r24, 0x38	; 56
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	28 e3       	ldi	r18, 0x38	; 56
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	f9 01       	movw	r30, r18
     e72:	20 81       	ld	r18, Z
     e74:	20 61       	ori	r18, 0x10	; 16
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
}
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <readCANCTL>:


uint8_t readCANCTL(){
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	
   PORTB &= ~(1<<PB4);
     e8a:	88 e3       	ldi	r24, 0x38	; 56
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	28 e3       	ldi	r18, 0x38	; 56
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	2f 7e       	andi	r18, 0xEF	; 239
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
      
   SPDR = 0x03;
     e9c:	8f e2       	ldi	r24, 0x2F	; 47
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	23 e0       	ldi	r18, 0x03	; 3
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18
   while (!((SPSR) & (1 << SPIF))); //TODO: Make it interrupt based maybe
     ea6:	00 00       	nop
     ea8:	8e e2       	ldi	r24, 0x2E	; 46
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	d4 f7       	brge	.-12     	; 0xea8 <readCANCTL+0x26>
   
   SPDR = 0x0F;
     eb4:	8f e2       	ldi	r24, 0x2F	; 47
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	2f e0       	ldi	r18, 0x0F	; 15
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
   while (!((SPSR) & (1 << SPIF))); //TODO: Make it interrupt based maybe
     ebe:	00 00       	nop
     ec0:	8e e2       	ldi	r24, 0x2E	; 46
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 81       	ld	r24, Z
     ec8:	88 23       	and	r24, r24
     eca:	d4 f7       	brge	.-12     	; 0xec0 <readCANCTL+0x3e>
   
   while (!((SPSR) & (1 << SPIF))); //TODO: Make it interrupt based maybe
     ecc:	00 00       	nop
     ece:	8e e2       	ldi	r24, 0x2E	; 46
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	88 23       	and	r24, r24
     ed8:	d4 f7       	brge	.-12     	; 0xece <readCANCTL+0x4c>
   
   
   //Rise !SS
   PORTB |= (1<<PB4);
     eda:	88 e3       	ldi	r24, 0x38	; 56
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	28 e3       	ldi	r18, 0x38	; 56
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	f9 01       	movw	r30, r18
     ee4:	20 81       	ld	r18, Z
     ee6:	20 61       	ori	r18, 0x10	; 16
     ee8:	fc 01       	movw	r30, r24
     eea:	20 83       	st	Z, r18
   
   return SPDR;	
     eec:	8f e2       	ldi	r24, 0x2F	; 47
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <readSPI>:

uint8_t readSPI(){
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
   uint8_t r;
   
   //Lower !SS
   PORTB &= ~(1<<PB4);
     f04:	88 e3       	ldi	r24, 0x38	; 56
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	28 e3       	ldi	r18, 0x38	; 56
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	f9 01       	movw	r30, r18
     f0e:	20 81       	ld	r18, Z
     f10:	2f 7e       	andi	r18, 0xEF	; 239
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18
      
   SPDR = 0x42; //Dummy write to enable SCLK
     f16:	8f e2       	ldi	r24, 0x2F	; 47
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	22 e4       	ldi	r18, 0x42	; 66
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
      
   while (!(SPSR) & (1 << SPIF)); //TODO: Make it interrupt based maybe
     f20:	8e e2       	ldi	r24, 0x2E	; 46
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	fc 01       	movw	r30, r24
     f26:	80 81       	ld	r24, Z
   
   r = SPDR; //Reads the SPI recive buffer
     f28:	8f e2       	ldi	r24, 0x2F	; 47
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	fc 01       	movw	r30, r24
     f2e:	80 81       	ld	r24, Z
     f30:	89 83       	std	Y+1, r24	; 0x01
   
   //Rise !SS
   PORTB |= (1<<PB4);	 
     f32:	88 e3       	ldi	r24, 0x38	; 56
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	28 e3       	ldi	r18, 0x38	; 56
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	f9 01       	movw	r30, r18
     f3c:	20 81       	ld	r18, Z
     f3e:	20 61       	ori	r18, 0x10	; 16
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
   
   return r;
     f44:	89 81       	ldd	r24, Y+1	; 0x01
}
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <setClockSpeedSPI>:

void setClockSpeedSPI(){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	 PORTB &= ~(1<<PB4);
     f56:	88 e3       	ldi	r24, 0x38	; 56
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	28 e3       	ldi	r18, 0x38	; 56
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	2f 7e       	andi	r18, 0xEF	; 239
     f64:	fc 01       	movw	r30, r24
     f66:	20 83       	st	Z, r18

	SPDR = 0b00000000; //Data
	 while (!(SPSR) & (1 << SPIF)); //TODO: Make it interrupt based maybe
    */
	 
	 SPDR = 0b00000010;
     f68:	8f e2       	ldi	r24, 0x2F	; 47
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	22 e0       	ldi	r18, 0x02	; 2
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
	 while (!(SPSR) & (1 << SPIF)); //TODO: Make it interrupt based maybe
     f72:	8e e2       	ldi	r24, 0x2E	; 46
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	80 81       	ld	r24, Z
	 
	 SPDR = 0x0F;
     f7a:	8f e2       	ldi	r24, 0x2F	; 47
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	2f e0       	ldi	r18, 0x0F	; 15
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
	 while (!(SPSR) & (1 << SPIF)); //TODO: Make it interrupt based maybe
     f84:	8e e2       	ldi	r24, 0x2E	; 46
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	80 81       	ld	r24, Z
	 
	 SPDR=0b00000100;
     f8c:	8f e2       	ldi	r24, 0x2F	; 47
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	24 e0       	ldi	r18, 0x04	; 4
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
	 while (!(SPSR) & (1 << SPIF)); //TODO: Make it interrupt based maybe
     f96:	8e e2       	ldi	r24, 0x2E	; 46
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
	 
	 
	PORTB |= (1<<PB4);
     f9e:	88 e3       	ldi	r24, 0x38	; 56
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	28 e3       	ldi	r18, 0x38	; 56
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	f9 01       	movw	r30, r18
     fa8:	20 81       	ld	r18, Z
     faa:	20 61       	ori	r18, 0x10	; 16
     fac:	fc 01       	movw	r30, r24
     fae:	20 83       	st	Z, r18
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <initUART>:
 */ 


#include "uart.h"

void initUART(uint16_t ubrr ){
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <initUART+0x6>
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
	
	//Init clock generator reg
	UBRR0H = (unsigned char) (ubrr >> 8);
     fc4:	80 e4       	ldi	r24, 0x40	; 64
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	29 81       	ldd	r18, Y+1	; 0x01
     fca:	3a 81       	ldd	r19, Y+2	; 0x02
     fcc:	23 2f       	mov	r18, r19
     fce:	33 27       	eor	r19, r19
     fd0:	fc 01       	movw	r30, r24
     fd2:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
     fd4:	89 e2       	ldi	r24, 0x29	; 41
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	29 81       	ldd	r18, Y+1	; 0x01
     fda:	fc 01       	movw	r30, r24
     fdc:	20 83       	st	Z, r18
	//UCSR0A = 0b00000000 //TODO: Rx & Tx "polling"
	UCSR0B = 0b00011000;
     fde:	8a e2       	ldi	r24, 0x2A	; 42
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	28 e1       	ldi	r18, 0x18	; 24
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
	UCSR0C = 0b10000110;
     fe8:	80 e4       	ldi	r24, 0x40	; 64
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	26 e8       	ldi	r18, 0x86	; 134
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
	
	fdevopen(putC,getC);
     ff2:	8d e1       	ldi	r24, 0x1D	; 29
     ff4:	98 e0       	ldi	r25, 0x08	; 8
     ff6:	25 e0       	ldi	r18, 0x05	; 5
     ff8:	38 e0       	ldi	r19, 0x08	; 8
     ffa:	b9 01       	movw	r22, r18
     ffc:	0e 94 3b 10 	call	0x2076	; 0x2076 <fdevopen>
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <getC>:

int getC()
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	0f 92       	push	r0
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while( !(UCSR0A & 1 << RXC0) );
    1014:	00 00       	nop
    1016:	8b e2       	ldi	r24, 0x2B	; 43
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	fc 01       	movw	r30, r24
    101c:	80 81       	ld	r24, Z
    101e:	88 23       	and	r24, r24
    1020:	d4 f7       	brge	.-12     	; 0x1016 <getC+0xc>
	c = UDR0;
    1022:	8c e2       	ldi	r24, 0x2C	; 44
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	fc 01       	movw	r30, r24
    1028:	80 81       	ld	r24, Z
    102a:	89 83       	std	Y+1, r24	; 0x01
	return c;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
}
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <putC>:

int putC(char data){
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & 1 << UDRE0) );
    1046:	00 00       	nop
    1048:	8b e2       	ldi	r24, 0x2B	; 43
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	fc 01       	movw	r30, r24
    104e:	80 81       	ld	r24, Z
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	80 72       	andi	r24, 0x20	; 32
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	b1 f3       	breq	.-20     	; 0x1048 <putC+0xe>
	UDR0 = data;
    105c:	8c e2       	ldi	r24, 0x2C	; 44
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	29 81       	ldd	r18, Y+1	; 0x01
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18
	while( !(UCSR0A & 1 << TXC0) );
    1066:	00 00       	nop
    1068:	8b e2       	ldi	r24, 0x2B	; 43
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	fc 01       	movw	r30, r24
    106e:	80 81       	ld	r24, Z
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	80 74       	andi	r24, 0x40	; 64
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	b1 f3       	breq	.-20     	; 0x1068 <putC+0x2e>
	return 0;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <testLatch>:


#include "utils.h"

void testLatch()
{
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	2e 97       	sbiw	r28, 0x0e	; 14
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
    10a0:	8a e3       	ldi	r24, 0x3A	; 58
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	2f ef       	ldi	r18, 0xFF	; 255
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
	DDRE = 0xFF;
    10aa:	86 e2       	ldi	r24, 0x26	; 38
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	2f ef       	ldi	r18, 0xFF	; 255
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x55;
    10b4:	8b e3       	ldi	r24, 0x3B	; 59
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	25 e5       	ldi	r18, 0x55	; 85
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
	PORT_E.b1 = 1;
    10be:	87 e2       	ldi	r24, 0x27	; 39
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 81       	ld	r18, Z
    10c6:	22 60       	ori	r18, 0x02	; 2
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a0 e2       	ldi	r26, 0x20	; 32
    10d2:	b1 e4       	ldi	r27, 0x41	; 65
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	ab 83       	std	Y+3, r26	; 0x03
    10da:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    10dc:	69 81       	ldd	r22, Y+1	; 0x01
    10de:	7a 81       	ldd	r23, Y+2	; 0x02
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	2a e9       	ldi	r18, 0x9A	; 154
    10e6:	39 e9       	ldi	r19, 0x99	; 153
    10e8:	49 e9       	ldi	r20, 0x99	; 153
    10ea:	54 e4       	ldi	r21, 0x44	; 68
    10ec:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	af 83       	std	Y+7, r26	; 0x07
    10fa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    10fc:	11 e0       	ldi	r17, 0x01	; 1
    10fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1100:	7e 81       	ldd	r23, Y+6	; 0x06
    1102:	8f 81       	ldd	r24, Y+7	; 0x07
    1104:	98 85       	ldd	r25, Y+8	; 0x08
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__ltsf2>
    1112:	88 23       	and	r24, r24
    1114:	0c f0       	brlt	.+2      	; 0x1118 <testLatch+0x90>
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	11 23       	and	r17, r17
    111a:	29 f0       	breq	.+10     	; 0x1126 <testLatch+0x9e>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9a 87       	std	Y+10, r25	; 0x0a
    1122:	89 87       	std	Y+9, r24	; 0x09
    1124:	46 c0       	rjmp	.+140    	; 0x11b2 <testLatch+0x12a>
	else if (__tmp > 65535)
    1126:	11 e0       	ldi	r17, 0x01	; 1
    1128:	6d 81       	ldd	r22, Y+5	; 0x05
    112a:	7e 81       	ldd	r23, Y+6	; 0x06
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	98 85       	ldd	r25, Y+8	; 0x08
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	0c f0       	brlt	.+2      	; 0x1142 <testLatch+0xba>
    1140:	10 e0       	ldi	r17, 0x00	; 0
    1142:	11 23       	and	r17, r17
    1144:	61 f1       	breq	.+88     	; 0x119e <testLatch+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	69 81       	ldd	r22, Y+1	; 0x01
    1148:	7a 81       	ldd	r23, Y+2	; 0x02
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9a 87       	std	Y+10, r25	; 0x0a
    116c:	89 87       	std	Y+9, r24	; 0x09
    116e:	12 c0       	rjmp	.+36     	; 0x1194 <testLatch+0x10c>
    1170:	8a e7       	ldi	r24, 0x7A	; 122
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9c 87       	std	Y+12, r25	; 0x0c
    1176:	8b 87       	std	Y+11, r24	; 0x0b
    1178:	8b 85       	ldd	r24, Y+11	; 0x0b
    117a:	9c 85       	ldd	r25, Y+12	; 0x0c
    117c:	8c 01       	movw	r16, r24
    117e:	c8 01       	movw	r24, r16
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <testLatch+0xf8>
    1184:	8c 01       	movw	r16, r24
    1186:	1c 87       	std	Y+12, r17	; 0x0c
    1188:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	89 85       	ldd	r24, Y+9	; 0x09
    118c:	9a 85       	ldd	r25, Y+10	; 0x0a
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9a 87       	std	Y+10, r25	; 0x0a
    1192:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	9a 85       	ldd	r25, Y+10	; 0x0a
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	51 f7       	brne	.-44     	; 0x1170 <testLatch+0xe8>
    119c:	17 c0       	rjmp	.+46     	; 0x11cc <testLatch+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	6d 81       	ldd	r22, Y+5	; 0x05
    11a0:	7e 81       	ldd	r23, Y+6	; 0x06
    11a2:	8f 81       	ldd	r24, Y+7	; 0x07
    11a4:	98 85       	ldd	r25, Y+8	; 0x08
    11a6:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9a 87       	std	Y+10, r25	; 0x0a
    11b0:	89 87       	std	Y+9, r24	; 0x09
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	9e 87       	std	Y+14, r25	; 0x0e
    11b8:	8d 87       	std	Y+13, r24	; 0x0d
    11ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    11bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11be:	8c 01       	movw	r16, r24
    11c0:	f8 01       	movw	r30, r16
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <testLatch+0x13a>
    11c6:	8f 01       	movw	r16, r30
    11c8:	1e 87       	std	Y+14, r17	; 0x0e
    11ca:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	PORT_E.b1 = 0;
    11cc:	87 e2       	ldi	r24, 0x27	; 39
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 81       	ld	r18, Z
    11d4:	2d 7f       	andi	r18, 0xFD	; 253
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x00;
    11da:	8b e3       	ldi	r24, 0x3B	; 59
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	fc 01       	movw	r30, r24
    11e0:	10 82       	st	Z, r1
}
    11e2:	2e 96       	adiw	r28, 0x0e	; 14
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <SRAM_test>:

void SRAM_test(void)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	29 97       	sbiw	r28, 0x09	; 9
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
	// Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	98 e1       	ldi	r25, 0x18	; 24
    1210:	98 87       	std	Y+8, r25	; 0x08
    1212:	8f 83       	std	Y+7, r24	; 0x07
	
	unsigned int i, werrors, rerrors;
	werrors = 0;
    1214:	1c 82       	std	Y+4, r1	; 0x04
    1216:	1b 82       	std	Y+3, r1	; 0x03
	rerrors = 0;
    1218:	1e 82       	std	Y+6, r1	; 0x06
    121a:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
    121c:	8d e6       	ldi	r24, 0x6D	; 109
    121e:	92 e0       	ldi	r25, 0x02	; 2
    1220:	0e 94 9b 10 	call	0x2136	; 0x2136 <puts>

	for (i = 0; i < 0x800; i++) {
    1224:	1a 82       	std	Y+2, r1	; 0x02
    1226:	19 82       	std	Y+1, r1	; 0x01
    1228:	53 c0       	rjmp	.+166    	; 0x12d0 <SRAM_test+0xd8>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	80 95       	com	r24
    122e:	89 87       	std	Y+9, r24	; 0x09
		ext_ram[i] = testvalue;
    1230:	2f 81       	ldd	r18, Y+7	; 0x07
    1232:	38 85       	ldd	r19, Y+8	; 0x08
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	82 0f       	add	r24, r18
    123a:	93 1f       	adc	r25, r19
    123c:	29 85       	ldd	r18, Y+9	; 0x09
    123e:	fc 01       	movw	r30, r24
    1240:	20 83       	st	Z, r18
		//printf("WRITE: current i: %d \r\n",i);
		if (ext_ram[i] != testvalue) {
    1242:	2f 81       	ldd	r18, Y+7	; 0x07
    1244:	38 85       	ldd	r19, Y+8	; 0x08
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	82 0f       	add	r24, r18
    124c:	93 1f       	adc	r25, r19
    124e:	fc 01       	movw	r30, r24
    1250:	90 81       	ld	r25, Z
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	98 17       	cp	r25, r24
    1256:	b9 f1       	breq	.+110    	; 0x12c6 <SRAM_test+0xce>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    1258:	2f 81       	ldd	r18, Y+7	; 0x07
    125a:	38 85       	ldd	r19, Y+8	; 0x08
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	82 0f       	add	r24, r18
    1262:	93 1f       	adc	r25, r19
    1264:	fc 01       	movw	r30, r24
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	89 85       	ldd	r24, Y+9	; 0x09
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8d b7       	in	r24, 0x3d	; 61
    1274:	9e b7       	in	r25, 0x3e	; 62
    1276:	08 97       	sbiw	r24, 0x08	; 8
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	9e bf       	out	0x3e, r25	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	8d bf       	out	0x3d, r24	; 61
    1282:	8d b7       	in	r24, 0x3d	; 61
    1284:	9e b7       	in	r25, 0x3e	; 62
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	64 e8       	ldi	r22, 0x84	; 132
    128a:	72 e0       	ldi	r23, 0x02	; 2
    128c:	fc 01       	movw	r30, r24
    128e:	71 83       	std	Z+1, r23	; 0x01
    1290:	60 83       	st	Z, r22
    1292:	69 81       	ldd	r22, Y+1	; 0x01
    1294:	7a 81       	ldd	r23, Y+2	; 0x02
    1296:	fc 01       	movw	r30, r24
    1298:	73 83       	std	Z+3, r23	; 0x03
    129a:	62 83       	std	Z+2, r22	; 0x02
    129c:	fc 01       	movw	r30, r24
    129e:	55 83       	std	Z+5, r21	; 0x05
    12a0:	44 83       	std	Z+4, r20	; 0x04
    12a2:	fc 01       	movw	r30, r24
    12a4:	37 83       	std	Z+7, r19	; 0x07
    12a6:	26 83       	std	Z+6, r18	; 0x06
    12a8:	0e 94 86 10 	call	0x210c	; 0x210c <printf>
    12ac:	8d b7       	in	r24, 0x3d	; 61
    12ae:	9e b7       	in	r25, 0x3e	; 62
    12b0:	08 96       	adiw	r24, 0x08	; 8
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	9e bf       	out	0x3e, r25	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	8d bf       	out	0x3d, r24	; 61
			werrors++;
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	e8 e0       	ldi	r30, 0x08	; 8
    12d6:	80 30       	cpi	r24, 0x00	; 0
    12d8:	9e 07       	cpc	r25, r30
    12da:	08 f4       	brcc	.+2      	; 0x12de <SRAM_test+0xe6>
    12dc:	a6 cf       	rjmp	.-180    	; 0x122a <SRAM_test+0x32>
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    12de:	1a 82       	std	Y+2, r1	; 0x02
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	4a c0       	rjmp	.+148    	; 0x1378 <SRAM_test+0x180>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	80 95       	com	r24
    12e8:	89 87       	std	Y+9, r24	; 0x09
		//printf("READ: current i: %d \r\n",i);
  		if (ext_ram[i] != testvalue) {
    12ea:	2f 81       	ldd	r18, Y+7	; 0x07
    12ec:	38 85       	ldd	r19, Y+8	; 0x08
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	82 0f       	add	r24, r18
    12f4:	93 1f       	adc	r25, r19
    12f6:	fc 01       	movw	r30, r24
    12f8:	90 81       	ld	r25, Z
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	98 17       	cp	r25, r24
    12fe:	b9 f1       	breq	.+110    	; 0x136e <SRAM_test+0x176>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    1300:	2f 81       	ldd	r18, Y+7	; 0x07
    1302:	38 85       	ldd	r19, Y+8	; 0x08
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	89 85       	ldd	r24, Y+9	; 0x09
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8d b7       	in	r24, 0x3d	; 61
    131c:	9e b7       	in	r25, 0x3e	; 62
    131e:	08 97       	sbiw	r24, 0x08	; 8
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	9e bf       	out	0x3e, r25	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	8d bf       	out	0x3d, r24	; 61
    132a:	8d b7       	in	r24, 0x3d	; 61
    132c:	9e b7       	in	r25, 0x3e	; 62
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	64 ec       	ldi	r22, 0xC4	; 196
    1332:	72 e0       	ldi	r23, 0x02	; 2
    1334:	fc 01       	movw	r30, r24
    1336:	71 83       	std	Z+1, r23	; 0x01
    1338:	60 83       	st	Z, r22
    133a:	69 81       	ldd	r22, Y+1	; 0x01
    133c:	7a 81       	ldd	r23, Y+2	; 0x02
    133e:	fc 01       	movw	r30, r24
    1340:	73 83       	std	Z+3, r23	; 0x03
    1342:	62 83       	std	Z+2, r22	; 0x02
    1344:	fc 01       	movw	r30, r24
    1346:	55 83       	std	Z+5, r21	; 0x05
    1348:	44 83       	std	Z+4, r20	; 0x04
    134a:	fc 01       	movw	r30, r24
    134c:	37 83       	std	Z+7, r19	; 0x07
    134e:	26 83       	std	Z+6, r18	; 0x06
    1350:	0e 94 86 10 	call	0x210c	; 0x210c <printf>
    1354:	8d b7       	in	r24, 0x3d	; 61
    1356:	9e b7       	in	r25, 0x3e	; 62
    1358:	08 96       	adiw	r24, 0x08	; 8
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	9e bf       	out	0x3e, r25	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	8d bf       	out	0x3d, r24	; 61
			rerrors++;
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	e8 e0       	ldi	r30, 0x08	; 8
    137e:	80 30       	cpi	r24, 0x00	; 0
    1380:	9e 07       	cpc	r25, r30
    1382:	08 f4       	brcc	.+2      	; 0x1386 <SRAM_test+0x18e>
    1384:	af cf       	rjmp	.-162    	; 0x12e4 <SRAM_test+0xec>
			rerrors++;
		} else {
			//printf("SRAM READ OK \r\n "); 
		}
	}
	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
    1386:	00 d0       	rcall	.+0      	; 0x1388 <SRAM_test+0x190>
    1388:	00 d0       	rcall	.+0      	; 0x138a <SRAM_test+0x192>
    138a:	00 d0       	rcall	.+0      	; 0x138c <SRAM_test+0x194>
    138c:	8d b7       	in	r24, 0x3d	; 61
    138e:	9e b7       	in	r25, 0x3e	; 62
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	23 e0       	ldi	r18, 0x03	; 3
    1394:	33 e0       	ldi	r19, 0x03	; 3
    1396:	fc 01       	movw	r30, r24
    1398:	31 83       	std	Z+1, r19	; 0x01
    139a:	20 83       	st	Z, r18
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	fc 01       	movw	r30, r24
    13a2:	33 83       	std	Z+3, r19	; 0x03
    13a4:	22 83       	std	Z+2, r18	; 0x02
    13a6:	2d 81       	ldd	r18, Y+5	; 0x05
    13a8:	3e 81       	ldd	r19, Y+6	; 0x06
    13aa:	fc 01       	movw	r30, r24
    13ac:	35 83       	std	Z+5, r19	; 0x05
    13ae:	24 83       	std	Z+4, r18	; 0x04
    13b0:	0e 94 86 10 	call	0x210c	; 0x210c <printf>
    13b4:	8d b7       	in	r24, 0x3d	; 61
    13b6:	9e b7       	in	r25, 0x3e	; 62
    13b8:	06 96       	adiw	r24, 0x06	; 6
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	9e bf       	out	0x3e, r25	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	8d bf       	out	0x3d, r24	; 61
}
    13c4:	29 96       	adiw	r28, 0x09	; 9
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <GAL_test>:




void GAL_test(void* start, void* stop){
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	64 97       	sbiw	r28, 0x14	; 20
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	9a 8b       	std	Y+18, r25	; 0x12
    13f0:	89 8b       	std	Y+17, r24	; 0x11
    13f2:	7c 8b       	std	Y+20, r23	; 0x14
    13f4:	6b 8b       	std	Y+19, r22	; 0x13
	volatile char* access = (char *) start;
    13f6:	89 89       	ldd	r24, Y+17	; 0x11
    13f8:	9a 89       	ldd	r25, Y+18	; 0x12
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01
	while(access != (char* ) stop ) {
    13fe:	8a c0       	rjmp	.+276    	; 0x1514 <GAL_test+0x13e>
		*access = 0x42;
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	22 e4       	ldi	r18, 0x42	; 66
    1406:	fc 01       	movw	r30, r24
    1408:	20 83       	st	Z, r18
		++access;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e2       	ldi	r26, 0x20	; 32
    141a:	b1 e4       	ldi	r27, 0x41	; 65
    141c:	8b 83       	std	Y+3, r24	; 0x03
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	ad 83       	std	Y+5, r26	; 0x05
    1422:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1424:	6b 81       	ldd	r22, Y+3	; 0x03
    1426:	7c 81       	ldd	r23, Y+4	; 0x04
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	2a e9       	ldi	r18, 0x9A	; 154
    142e:	39 e9       	ldi	r19, 0x99	; 153
    1430:	49 e9       	ldi	r20, 0x99	; 153
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8f 83       	std	Y+7, r24	; 0x07
    143e:	98 87       	std	Y+8, r25	; 0x08
    1440:	a9 87       	std	Y+9, r26	; 0x09
    1442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1444:	11 e0       	ldi	r17, 0x01	; 1
    1446:	6f 81       	ldd	r22, Y+7	; 0x07
    1448:	78 85       	ldd	r23, Y+8	; 0x08
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e8       	ldi	r20, 0x80	; 128
    1454:	5f e3       	ldi	r21, 0x3F	; 63
    1456:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__ltsf2>
    145a:	88 23       	and	r24, r24
    145c:	0c f0       	brlt	.+2      	; 0x1460 <GAL_test+0x8a>
    145e:	10 e0       	ldi	r17, 0x00	; 0
    1460:	11 23       	and	r17, r17
    1462:	29 f0       	breq	.+10     	; 0x146e <GAL_test+0x98>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9c 87       	std	Y+12, r25	; 0x0c
    146a:	8b 87       	std	Y+11, r24	; 0x0b
    146c:	46 c0       	rjmp	.+140    	; 0x14fa <GAL_test+0x124>
	else if (__tmp > 65535)
    146e:	11 e0       	ldi	r17, 0x01	; 1
    1470:	6f 81       	ldd	r22, Y+7	; 0x07
    1472:	78 85       	ldd	r23, Y+8	; 0x08
    1474:	89 85       	ldd	r24, Y+9	; 0x09
    1476:	9a 85       	ldd	r25, Y+10	; 0x0a
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	3f ef       	ldi	r19, 0xFF	; 255
    147c:	4f e7       	ldi	r20, 0x7F	; 127
    147e:	57 e4       	ldi	r21, 0x47	; 71
    1480:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gtsf2>
    1484:	18 16       	cp	r1, r24
    1486:	0c f0       	brlt	.+2      	; 0x148a <GAL_test+0xb4>
    1488:	10 e0       	ldi	r17, 0x00	; 0
    148a:	11 23       	and	r17, r17
    148c:	61 f1       	breq	.+88     	; 0x14e6 <GAL_test+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6b 81       	ldd	r22, Y+3	; 0x03
    1490:	7c 81       	ldd	r23, Y+4	; 0x04
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9c 87       	std	Y+12, r25	; 0x0c
    14b4:	8b 87       	std	Y+11, r24	; 0x0b
    14b6:	12 c0       	rjmp	.+36     	; 0x14dc <GAL_test+0x106>
    14b8:	8a e7       	ldi	r24, 0x7A	; 122
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9e 87       	std	Y+14, r25	; 0x0e
    14be:	8d 87       	std	Y+13, r24	; 0x0d
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	8c 01       	movw	r16, r24
    14c6:	c8 01       	movw	r24, r16
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <GAL_test+0xf2>
    14cc:	8c 01       	movw	r16, r24
    14ce:	1e 87       	std	Y+14, r17	; 0x0e
    14d0:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9c 87       	std	Y+12, r25	; 0x0c
    14da:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    14de:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	51 f7       	brne	.-44     	; 0x14b8 <GAL_test+0xe2>
    14e4:	17 c0       	rjmp	.+46     	; 0x1514 <GAL_test+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9c 87       	std	Y+12, r25	; 0x0c
    14f8:	8b 87       	std	Y+11, r24	; 0x0b
    14fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    14fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    14fe:	98 8b       	std	Y+16, r25	; 0x10
    1500:	8f 87       	std	Y+15, r24	; 0x0f
    1502:	8f 85       	ldd	r24, Y+15	; 0x0f
    1504:	98 89       	ldd	r25, Y+16	; 0x10
    1506:	8c 01       	movw	r16, r24
    1508:	f8 01       	movw	r30, r16
    150a:	31 97       	sbiw	r30, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <GAL_test+0x134>
    150e:	8f 01       	movw	r16, r30
    1510:	18 8b       	std	Y+16, r17	; 0x10
    1512:	0f 87       	std	Y+15, r16	; 0x0f



void GAL_test(void* start, void* stop){
	volatile char* access = (char *) start;
	while(access != (char* ) stop ) {
    1514:	8b 89       	ldd	r24, Y+19	; 0x13
    1516:	9c 89       	ldd	r25, Y+20	; 0x14
    1518:	29 81       	ldd	r18, Y+1	; 0x01
    151a:	3a 81       	ldd	r19, Y+2	; 0x02
    151c:	28 17       	cp	r18, r24
    151e:	39 07       	cpc	r19, r25
    1520:	09 f0       	breq	.+2      	; 0x1524 <GAL_test+0x14e>
    1522:	6e cf       	rjmp	.-292    	; 0x1400 <GAL_test+0x2a>
		++access;
		_delay_ms(10);
	}
		
	
    1524:	64 96       	adiw	r28, 0x14	; 20
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	08 95       	ret

0000153a <__fixunssfsi>:
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	7b 01       	movw	r14, r22
    1544:	8c 01       	movw	r16, r24
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	5f e4       	ldi	r21, 0x4F	; 79
    154e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__gesf2>
    1552:	87 fd       	sbrc	r24, 7
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <__fixunssfsi+0x3e>
    1556:	c8 01       	movw	r24, r16
    1558:	b7 01       	movw	r22, r14
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	5f e4       	ldi	r21, 0x4F	; 79
    1562:	0e 94 40 0c 	call	0x1880	; 0x1880 <__subsf3>
    1566:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fixsfsi>
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	20 50       	subi	r18, 0x00	; 0
    1570:	30 40       	sbci	r19, 0x00	; 0
    1572:	40 40       	sbci	r20, 0x00	; 0
    1574:	50 48       	sbci	r21, 0x80	; 128
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <__fixunssfsi+0x4a>
    1578:	c8 01       	movw	r24, r16
    157a:	b7 01       	movw	r22, r14
    157c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fixsfsi>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	b9 01       	movw	r22, r18
    1586:	ca 01       	movw	r24, r20
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <_fpadd_parts>:
    1592:	a0 e0       	ldi	r26, 0x00	; 0
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	ef ec       	ldi	r30, 0xCF	; 207
    1598:	fa e0       	ldi	r31, 0x0A	; 10
    159a:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x8>
    159e:	fc 01       	movw	r30, r24
    15a0:	ea 01       	movw	r28, r20
    15a2:	80 81       	ld	r24, Z
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <_fpadd_parts+0x18>
    15a8:	38 c1       	rjmp	.+624    	; 0x181a <_fpadd_parts+0x288>
    15aa:	db 01       	movw	r26, r22
    15ac:	9c 91       	ld	r25, X
    15ae:	92 30       	cpi	r25, 0x02	; 2
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <_fpadd_parts+0x22>
    15b2:	30 c1       	rjmp	.+608    	; 0x1814 <_fpadd_parts+0x282>
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	59 f4       	brne	.+22     	; 0x15ce <_fpadd_parts+0x3c>
    15b8:	94 30       	cpi	r25, 0x04	; 4
    15ba:	09 f0       	breq	.+2      	; 0x15be <_fpadd_parts+0x2c>
    15bc:	2e c1       	rjmp	.+604    	; 0x181a <_fpadd_parts+0x288>
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	11 96       	adiw	r26, 0x01	; 1
    15c2:	8c 91       	ld	r24, X
    15c4:	11 97       	sbiw	r26, 0x01	; 1
    15c6:	98 17       	cp	r25, r24
    15c8:	09 f0       	breq	.+2      	; 0x15cc <_fpadd_parts+0x3a>
    15ca:	21 c1       	rjmp	.+578    	; 0x180e <_fpadd_parts+0x27c>
    15cc:	26 c1       	rjmp	.+588    	; 0x181a <_fpadd_parts+0x288>
    15ce:	94 30       	cpi	r25, 0x04	; 4
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <_fpadd_parts+0x42>
    15d2:	20 c1       	rjmp	.+576    	; 0x1814 <_fpadd_parts+0x282>
    15d4:	92 30       	cpi	r25, 0x02	; 2
    15d6:	b1 f4       	brne	.+44     	; 0x1604 <_fpadd_parts+0x72>
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	09 f0       	breq	.+2      	; 0x15de <_fpadd_parts+0x4c>
    15dc:	1e c1       	rjmp	.+572    	; 0x181a <_fpadd_parts+0x288>
    15de:	ca 01       	movw	r24, r20
    15e0:	af 01       	movw	r20, r30
    15e2:	28 e0       	ldi	r18, 0x08	; 8
    15e4:	da 01       	movw	r26, r20
    15e6:	0d 90       	ld	r0, X+
    15e8:	ad 01       	movw	r20, r26
    15ea:	dc 01       	movw	r26, r24
    15ec:	0d 92       	st	X+, r0
    15ee:	cd 01       	movw	r24, r26
    15f0:	21 50       	subi	r18, 0x01	; 1
    15f2:	c1 f7       	brne	.-16     	; 0x15e4 <_fpadd_parts+0x52>
    15f4:	db 01       	movw	r26, r22
    15f6:	11 96       	adiw	r26, 0x01	; 1
    15f8:	8c 91       	ld	r24, X
    15fa:	11 97       	sbiw	r26, 0x01	; 1
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	89 23       	and	r24, r25
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	0a c1       	rjmp	.+532    	; 0x1818 <_fpadd_parts+0x286>
    1604:	82 30       	cpi	r24, 0x02	; 2
    1606:	09 f4       	brne	.+2      	; 0x160a <_fpadd_parts+0x78>
    1608:	05 c1       	rjmp	.+522    	; 0x1814 <_fpadd_parts+0x282>
    160a:	c2 80       	ldd	r12, Z+2	; 0x02
    160c:	d3 80       	ldd	r13, Z+3	; 0x03
    160e:	db 01       	movw	r26, r22
    1610:	12 96       	adiw	r26, 0x02	; 2
    1612:	6d 90       	ld	r6, X+
    1614:	7c 90       	ld	r7, X
    1616:	13 97       	sbiw	r26, 0x03	; 3
    1618:	24 81       	ldd	r18, Z+4	; 0x04
    161a:	35 81       	ldd	r19, Z+5	; 0x05
    161c:	46 81       	ldd	r20, Z+6	; 0x06
    161e:	57 81       	ldd	r21, Z+7	; 0x07
    1620:	14 96       	adiw	r26, 0x04	; 4
    1622:	ed 90       	ld	r14, X+
    1624:	fd 90       	ld	r15, X+
    1626:	0d 91       	ld	r16, X+
    1628:	1c 91       	ld	r17, X
    162a:	17 97       	sbiw	r26, 0x07	; 7
    162c:	c6 01       	movw	r24, r12
    162e:	86 19       	sub	r24, r6
    1630:	97 09       	sbc	r25, r7
    1632:	5c 01       	movw	r10, r24
    1634:	97 ff       	sbrs	r25, 7
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <_fpadd_parts+0xae>
    1638:	aa 24       	eor	r10, r10
    163a:	bb 24       	eor	r11, r11
    163c:	a8 1a       	sub	r10, r24
    163e:	b9 0a       	sbc	r11, r25
    1640:	b0 e2       	ldi	r27, 0x20	; 32
    1642:	ab 16       	cp	r10, r27
    1644:	b1 04       	cpc	r11, r1
    1646:	0c f0       	brlt	.+2      	; 0x164a <_fpadd_parts+0xb8>
    1648:	61 c0       	rjmp	.+194    	; 0x170c <_fpadd_parts+0x17a>
    164a:	18 16       	cp	r1, r24
    164c:	19 06       	cpc	r1, r25
    164e:	6c f5       	brge	.+90     	; 0x16aa <_fpadd_parts+0x118>
    1650:	37 01       	movw	r6, r14
    1652:	48 01       	movw	r8, r16
    1654:	0a 2c       	mov	r0, r10
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <_fpadd_parts+0xce>
    1658:	96 94       	lsr	r9
    165a:	87 94       	ror	r8
    165c:	77 94       	ror	r7
    165e:	67 94       	ror	r6
    1660:	0a 94       	dec	r0
    1662:	d2 f7       	brpl	.-12     	; 0x1658 <_fpadd_parts+0xc6>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a0 e0       	ldi	r26, 0x00	; 0
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	0a 2c       	mov	r0, r10
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <_fpadd_parts+0xe6>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	aa 1f       	adc	r26, r26
    1676:	bb 1f       	adc	r27, r27
    1678:	0a 94       	dec	r0
    167a:	d2 f7       	brpl	.-12     	; 0x1670 <_fpadd_parts+0xde>
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	a1 09       	sbc	r26, r1
    1680:	b1 09       	sbc	r27, r1
    1682:	8e 21       	and	r24, r14
    1684:	9f 21       	and	r25, r15
    1686:	a0 23       	and	r26, r16
    1688:	b1 23       	and	r27, r17
    168a:	ee 24       	eor	r14, r14
    168c:	ff 24       	eor	r15, r15
    168e:	87 01       	movw	r16, r14
    1690:	e3 94       	inc	r14
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	a1 05       	cpc	r26, r1
    1696:	b1 05       	cpc	r27, r1
    1698:	19 f4       	brne	.+6      	; 0x16a0 <_fpadd_parts+0x10e>
    169a:	ee 24       	eor	r14, r14
    169c:	ff 24       	eor	r15, r15
    169e:	87 01       	movw	r16, r14
    16a0:	e6 28       	or	r14, r6
    16a2:	f7 28       	or	r15, r7
    16a4:	08 29       	or	r16, r8
    16a6:	19 29       	or	r17, r9
    16a8:	3c c0       	rjmp	.+120    	; 0x1722 <_fpadd_parts+0x190>
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	d1 f1       	breq	.+116    	; 0x1722 <_fpadd_parts+0x190>
    16ae:	ca 0c       	add	r12, r10
    16b0:	db 1c       	adc	r13, r11
    16b2:	39 01       	movw	r6, r18
    16b4:	4a 01       	movw	r8, r20
    16b6:	0a 2c       	mov	r0, r10
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <_fpadd_parts+0x130>
    16ba:	96 94       	lsr	r9
    16bc:	87 94       	ror	r8
    16be:	77 94       	ror	r7
    16c0:	67 94       	ror	r6
    16c2:	0a 94       	dec	r0
    16c4:	d2 f7       	brpl	.-12     	; 0x16ba <_fpadd_parts+0x128>
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e0       	ldi	r26, 0x00	; 0
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	0a 2c       	mov	r0, r10
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <_fpadd_parts+0x148>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	aa 1f       	adc	r26, r26
    16d8:	bb 1f       	adc	r27, r27
    16da:	0a 94       	dec	r0
    16dc:	d2 f7       	brpl	.-12     	; 0x16d2 <_fpadd_parts+0x140>
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	a1 09       	sbc	r26, r1
    16e2:	b1 09       	sbc	r27, r1
    16e4:	82 23       	and	r24, r18
    16e6:	93 23       	and	r25, r19
    16e8:	a4 23       	and	r26, r20
    16ea:	b5 23       	and	r27, r21
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	a1 05       	cpc	r26, r1
    16f8:	b1 05       	cpc	r27, r1
    16fa:	19 f4       	brne	.+6      	; 0x1702 <_fpadd_parts+0x170>
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	a9 01       	movw	r20, r18
    1702:	26 29       	or	r18, r6
    1704:	37 29       	or	r19, r7
    1706:	48 29       	or	r20, r8
    1708:	59 29       	or	r21, r9
    170a:	0b c0       	rjmp	.+22     	; 0x1722 <_fpadd_parts+0x190>
    170c:	6c 14       	cp	r6, r12
    170e:	7d 04       	cpc	r7, r13
    1710:	24 f4       	brge	.+8      	; 0x171a <_fpadd_parts+0x188>
    1712:	ee 24       	eor	r14, r14
    1714:	ff 24       	eor	r15, r15
    1716:	87 01       	movw	r16, r14
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <_fpadd_parts+0x190>
    171a:	63 01       	movw	r12, r6
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	81 81       	ldd	r24, Z+1	; 0x01
    1724:	fb 01       	movw	r30, r22
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	89 17       	cp	r24, r25
    172a:	09 f4       	brne	.+2      	; 0x172e <_fpadd_parts+0x19c>
    172c:	45 c0       	rjmp	.+138    	; 0x17b8 <_fpadd_parts+0x226>
    172e:	88 23       	and	r24, r24
    1730:	49 f0       	breq	.+18     	; 0x1744 <_fpadd_parts+0x1b2>
    1732:	d8 01       	movw	r26, r16
    1734:	c7 01       	movw	r24, r14
    1736:	82 1b       	sub	r24, r18
    1738:	93 0b       	sbc	r25, r19
    173a:	a4 0b       	sbc	r26, r20
    173c:	b5 0b       	sbc	r27, r21
    173e:	9c 01       	movw	r18, r24
    1740:	ad 01       	movw	r20, r26
    1742:	04 c0       	rjmp	.+8      	; 0x174c <_fpadd_parts+0x1ba>
    1744:	2e 19       	sub	r18, r14
    1746:	3f 09       	sbc	r19, r15
    1748:	40 0b       	sbc	r20, r16
    174a:	51 0b       	sbc	r21, r17
    174c:	57 fd       	sbrc	r21, 7
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <_fpadd_parts+0x1c6>
    1750:	19 82       	std	Y+1, r1	; 0x01
    1752:	db 82       	std	Y+3, r13	; 0x03
    1754:	ca 82       	std	Y+2, r12	; 0x02
    1756:	0b c0       	rjmp	.+22     	; 0x176e <_fpadd_parts+0x1dc>
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	db 82       	std	Y+3, r13	; 0x03
    175e:	ca 82       	std	Y+2, r12	; 0x02
    1760:	50 95       	com	r21
    1762:	40 95       	com	r20
    1764:	30 95       	com	r19
    1766:	21 95       	neg	r18
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	4f 4f       	sbci	r20, 0xFF	; 255
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
    176e:	2c 83       	std	Y+4, r18	; 0x04
    1770:	3d 83       	std	Y+5, r19	; 0x05
    1772:	4e 83       	std	Y+6, r20	; 0x06
    1774:	5f 83       	std	Y+7, r21	; 0x07
    1776:	0d c0       	rjmp	.+26     	; 0x1792 <_fpadd_parts+0x200>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	aa 1f       	adc	r26, r26
    177e:	bb 1f       	adc	r27, r27
    1780:	8c 83       	std	Y+4, r24	; 0x04
    1782:	9d 83       	std	Y+5, r25	; 0x05
    1784:	ae 83       	std	Y+6, r26	; 0x06
    1786:	bf 83       	std	Y+7, r27	; 0x07
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	9b 83       	std	Y+3, r25	; 0x03
    1790:	8a 83       	std	Y+2, r24	; 0x02
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	ae 81       	ldd	r26, Y+6	; 0x06
    1798:	bf 81       	ldd	r27, Y+7	; 0x07
    179a:	9c 01       	movw	r18, r24
    179c:	ad 01       	movw	r20, r26
    179e:	21 50       	subi	r18, 0x01	; 1
    17a0:	30 40       	sbci	r19, 0x00	; 0
    17a2:	40 40       	sbci	r20, 0x00	; 0
    17a4:	50 40       	sbci	r21, 0x00	; 0
    17a6:	2f 3f       	cpi	r18, 0xFF	; 255
    17a8:	ef ef       	ldi	r30, 0xFF	; 255
    17aa:	3e 07       	cpc	r19, r30
    17ac:	ef ef       	ldi	r30, 0xFF	; 255
    17ae:	4e 07       	cpc	r20, r30
    17b0:	ef e3       	ldi	r30, 0x3F	; 63
    17b2:	5e 07       	cpc	r21, r30
    17b4:	08 f3       	brcs	.-62     	; 0x1778 <_fpadd_parts+0x1e6>
    17b6:	0b c0       	rjmp	.+22     	; 0x17ce <_fpadd_parts+0x23c>
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	db 82       	std	Y+3, r13	; 0x03
    17bc:	ca 82       	std	Y+2, r12	; 0x02
    17be:	2e 0d       	add	r18, r14
    17c0:	3f 1d       	adc	r19, r15
    17c2:	40 1f       	adc	r20, r16
    17c4:	51 1f       	adc	r21, r17
    17c6:	2c 83       	std	Y+4, r18	; 0x04
    17c8:	3d 83       	std	Y+5, r19	; 0x05
    17ca:	4e 83       	std	Y+6, r20	; 0x06
    17cc:	5f 83       	std	Y+7, r21	; 0x07
    17ce:	83 e0       	ldi	r24, 0x03	; 3
    17d0:	88 83       	st	Y, r24
    17d2:	2c 81       	ldd	r18, Y+4	; 0x04
    17d4:	3d 81       	ldd	r19, Y+5	; 0x05
    17d6:	4e 81       	ldd	r20, Y+6	; 0x06
    17d8:	5f 81       	ldd	r21, Y+7	; 0x07
    17da:	57 ff       	sbrs	r21, 7
    17dc:	1d c0       	rjmp	.+58     	; 0x1818 <_fpadd_parts+0x286>
    17de:	da 01       	movw	r26, r20
    17e0:	c9 01       	movw	r24, r18
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	90 70       	andi	r25, 0x00	; 0
    17e6:	a0 70       	andi	r26, 0x00	; 0
    17e8:	b0 70       	andi	r27, 0x00	; 0
    17ea:	56 95       	lsr	r21
    17ec:	47 95       	ror	r20
    17ee:	37 95       	ror	r19
    17f0:	27 95       	ror	r18
    17f2:	82 2b       	or	r24, r18
    17f4:	93 2b       	or	r25, r19
    17f6:	a4 2b       	or	r26, r20
    17f8:	b5 2b       	or	r27, r21
    17fa:	8c 83       	std	Y+4, r24	; 0x04
    17fc:	9d 83       	std	Y+5, r25	; 0x05
    17fe:	ae 83       	std	Y+6, r26	; 0x06
    1800:	bf 83       	std	Y+7, r27	; 0x07
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <_fpadd_parts+0x286>
    180e:	e3 e5       	ldi	r30, 0x53	; 83
    1810:	f3 e0       	ldi	r31, 0x03	; 3
    1812:	03 c0       	rjmp	.+6      	; 0x181a <_fpadd_parts+0x288>
    1814:	fb 01       	movw	r30, r22
    1816:	01 c0       	rjmp	.+2      	; 0x181a <_fpadd_parts+0x288>
    1818:	fe 01       	movw	r30, r28
    181a:	cf 01       	movw	r24, r30
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	ee e0       	ldi	r30, 0x0E	; 14
    1822:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x8>

00001826 <__addsf3>:
    1826:	a0 e2       	ldi	r26, 0x20	; 32
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 e1       	ldi	r30, 0x19	; 25
    182c:	fc e0       	ldi	r31, 0x0C	; 12
    182e:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__prologue_saves__+0x18>
    1832:	69 83       	std	Y+1, r22	; 0x01
    1834:	7a 83       	std	Y+2, r23	; 0x02
    1836:	8b 83       	std	Y+3, r24	; 0x03
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	2d 83       	std	Y+5, r18	; 0x05
    183c:	3e 83       	std	Y+6, r19	; 0x06
    183e:	4f 83       	std	Y+7, r20	; 0x07
    1840:	58 87       	std	Y+8, r21	; 0x08
    1842:	89 e0       	ldi	r24, 0x09	; 9
    1844:	e8 2e       	mov	r14, r24
    1846:	f1 2c       	mov	r15, r1
    1848:	ec 0e       	add	r14, r28
    184a:	fd 1e       	adc	r15, r29
    184c:	ce 01       	movw	r24, r28
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	b7 01       	movw	r22, r14
    1852:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1856:	8e 01       	movw	r16, r28
    1858:	0f 5e       	subi	r16, 0xEF	; 239
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	ce 01       	movw	r24, r28
    185e:	05 96       	adiw	r24, 0x05	; 5
    1860:	b8 01       	movw	r22, r16
    1862:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1866:	c7 01       	movw	r24, r14
    1868:	b8 01       	movw	r22, r16
    186a:	ae 01       	movw	r20, r28
    186c:	47 5e       	subi	r20, 0xE7	; 231
    186e:	5f 4f       	sbci	r21, 0xFF	; 255
    1870:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_fpadd_parts>
    1874:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__pack_f>
    1878:	a0 96       	adiw	r28, 0x20	; 32
    187a:	e6 e0       	ldi	r30, 0x06	; 6
    187c:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

00001880 <__subsf3>:
    1880:	a0 e2       	ldi	r26, 0x20	; 32
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e6 e4       	ldi	r30, 0x46	; 70
    1886:	fc e0       	ldi	r31, 0x0C	; 12
    1888:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__prologue_saves__+0x18>
    188c:	69 83       	std	Y+1, r22	; 0x01
    188e:	7a 83       	std	Y+2, r23	; 0x02
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	2d 83       	std	Y+5, r18	; 0x05
    1896:	3e 83       	std	Y+6, r19	; 0x06
    1898:	4f 83       	std	Y+7, r20	; 0x07
    189a:	58 87       	std	Y+8, r21	; 0x08
    189c:	8e 01       	movw	r16, r28
    189e:	07 5f       	subi	r16, 0xF7	; 247
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	b8 01       	movw	r22, r16
    18a8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    18ac:	91 e1       	ldi	r25, 0x11	; 17
    18ae:	e9 2e       	mov	r14, r25
    18b0:	f1 2c       	mov	r15, r1
    18b2:	ec 0e       	add	r14, r28
    18b4:	fd 1e       	adc	r15, r29
    18b6:	ce 01       	movw	r24, r28
    18b8:	05 96       	adiw	r24, 0x05	; 5
    18ba:	b7 01       	movw	r22, r14
    18bc:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    18c0:	8a 89       	ldd	r24, Y+18	; 0x12
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	89 27       	eor	r24, r25
    18c6:	8a 8b       	std	Y+18, r24	; 0x12
    18c8:	c8 01       	movw	r24, r16
    18ca:	b7 01       	movw	r22, r14
    18cc:	ae 01       	movw	r20, r28
    18ce:	47 5e       	subi	r20, 0xE7	; 231
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255
    18d2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_fpadd_parts>
    18d6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__pack_f>
    18da:	a0 96       	adiw	r28, 0x20	; 32
    18dc:	e6 e0       	ldi	r30, 0x06	; 6
    18de:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

000018e2 <__mulsf3>:
    18e2:	a0 e2       	ldi	r26, 0x20	; 32
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e7 e7       	ldi	r30, 0x77	; 119
    18e8:	fc e0       	ldi	r31, 0x0C	; 12
    18ea:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__prologue_saves__>
    18ee:	69 83       	std	Y+1, r22	; 0x01
    18f0:	7a 83       	std	Y+2, r23	; 0x02
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	2d 83       	std	Y+5, r18	; 0x05
    18f8:	3e 83       	std	Y+6, r19	; 0x06
    18fa:	4f 83       	std	Y+7, r20	; 0x07
    18fc:	58 87       	std	Y+8, r21	; 0x08
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	be 01       	movw	r22, r28
    1904:	67 5f       	subi	r22, 0xF7	; 247
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    190c:	ce 01       	movw	r24, r28
    190e:	05 96       	adiw	r24, 0x05	; 5
    1910:	be 01       	movw	r22, r28
    1912:	6f 5e       	subi	r22, 0xEF	; 239
    1914:	7f 4f       	sbci	r23, 0xFF	; 255
    1916:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    191a:	99 85       	ldd	r25, Y+9	; 0x09
    191c:	92 30       	cpi	r25, 0x02	; 2
    191e:	78 f0       	brcs	.+30     	; 0x193e <__mulsf3+0x5c>
    1920:	89 89       	ldd	r24, Y+17	; 0x11
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	c0 f0       	brcs	.+48     	; 0x1956 <__mulsf3+0x74>
    1926:	94 30       	cpi	r25, 0x04	; 4
    1928:	19 f4       	brne	.+6      	; 0x1930 <__mulsf3+0x4e>
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	41 f4       	brne	.+16     	; 0x193e <__mulsf3+0x5c>
    192e:	cb c0       	rjmp	.+406    	; 0x1ac6 <__mulsf3+0x1e4>
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	19 f4       	brne	.+6      	; 0x193a <__mulsf3+0x58>
    1934:	92 30       	cpi	r25, 0x02	; 2
    1936:	79 f4       	brne	.+30     	; 0x1956 <__mulsf3+0x74>
    1938:	c6 c0       	rjmp	.+396    	; 0x1ac6 <__mulsf3+0x1e4>
    193a:	92 30       	cpi	r25, 0x02	; 2
    193c:	51 f4       	brne	.+20     	; 0x1952 <__mulsf3+0x70>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	2a 85       	ldd	r18, Y+10	; 0x0a
    1942:	9a 89       	ldd	r25, Y+18	; 0x12
    1944:	29 17       	cp	r18, r25
    1946:	09 f4       	brne	.+2      	; 0x194a <__mulsf3+0x68>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	8a 87       	std	Y+10, r24	; 0x0a
    194c:	ce 01       	movw	r24, r28
    194e:	09 96       	adiw	r24, 0x09	; 9
    1950:	bc c0       	rjmp	.+376    	; 0x1aca <__mulsf3+0x1e8>
    1952:	82 30       	cpi	r24, 0x02	; 2
    1954:	51 f4       	brne	.+20     	; 0x196a <__mulsf3+0x88>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	2a 85       	ldd	r18, Y+10	; 0x0a
    195a:	9a 89       	ldd	r25, Y+18	; 0x12
    195c:	29 17       	cp	r18, r25
    195e:	09 f4       	brne	.+2      	; 0x1962 <__mulsf3+0x80>
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	8a 8b       	std	Y+18, r24	; 0x12
    1964:	ce 01       	movw	r24, r28
    1966:	41 96       	adiw	r24, 0x11	; 17
    1968:	b0 c0       	rjmp	.+352    	; 0x1aca <__mulsf3+0x1e8>
    196a:	6d 84       	ldd	r6, Y+13	; 0x0d
    196c:	7e 84       	ldd	r7, Y+14	; 0x0e
    196e:	8f 84       	ldd	r8, Y+15	; 0x0f
    1970:	98 88       	ldd	r9, Y+16	; 0x10
    1972:	ed 88       	ldd	r14, Y+21	; 0x15
    1974:	fe 88       	ldd	r15, Y+22	; 0x16
    1976:	0f 89       	ldd	r16, Y+23	; 0x17
    1978:	18 8d       	ldd	r17, Y+24	; 0x18
    197a:	e0 e2       	ldi	r30, 0x20	; 32
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	dc 01       	movw	r26, r24
    1984:	aa 24       	eor	r10, r10
    1986:	bb 24       	eor	r11, r11
    1988:	65 01       	movw	r12, r10
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	a9 01       	movw	r20, r18
    1990:	b3 01       	movw	r22, r6
    1992:	61 70       	andi	r22, 0x01	; 1
    1994:	70 70       	andi	r23, 0x00	; 0
    1996:	61 15       	cp	r22, r1
    1998:	71 05       	cpc	r23, r1
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <__mulsf3+0xee>
    199c:	2e 0d       	add	r18, r14
    199e:	3f 1d       	adc	r19, r15
    19a0:	40 1f       	adc	r20, r16
    19a2:	51 1f       	adc	r21, r17
    19a4:	15 01       	movw	r2, r10
    19a6:	26 01       	movw	r4, r12
    19a8:	28 0e       	add	r2, r24
    19aa:	39 1e       	adc	r3, r25
    19ac:	4a 1e       	adc	r4, r26
    19ae:	5b 1e       	adc	r5, r27
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e0       	ldi	r26, 0x00	; 0
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	2e 15       	cp	r18, r14
    19ba:	3f 05       	cpc	r19, r15
    19bc:	40 07       	cpc	r20, r16
    19be:	51 07       	cpc	r21, r17
    19c0:	18 f0       	brcs	.+6      	; 0x19c8 <__mulsf3+0xe6>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	dc 01       	movw	r26, r24
    19c8:	82 0d       	add	r24, r2
    19ca:	93 1d       	adc	r25, r3
    19cc:	a4 1d       	adc	r26, r4
    19ce:	b5 1d       	adc	r27, r5
    19d0:	aa 0c       	add	r10, r10
    19d2:	bb 1c       	adc	r11, r11
    19d4:	cc 1c       	adc	r12, r12
    19d6:	dd 1c       	adc	r13, r13
    19d8:	17 ff       	sbrs	r17, 7
    19da:	09 c0       	rjmp	.+18     	; 0x19ee <__mulsf3+0x10c>
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	26 2e       	mov	r2, r22
    19e0:	31 2c       	mov	r3, r1
    19e2:	41 2c       	mov	r4, r1
    19e4:	51 2c       	mov	r5, r1
    19e6:	a2 28       	or	r10, r2
    19e8:	b3 28       	or	r11, r3
    19ea:	c4 28       	or	r12, r4
    19ec:	d5 28       	or	r13, r5
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	49 f0       	breq	.+18     	; 0x1a04 <__mulsf3+0x122>
    19f2:	ee 0c       	add	r14, r14
    19f4:	ff 1c       	adc	r15, r15
    19f6:	00 1f       	adc	r16, r16
    19f8:	11 1f       	adc	r17, r17
    19fa:	96 94       	lsr	r9
    19fc:	87 94       	ror	r8
    19fe:	77 94       	ror	r7
    1a00:	67 94       	ror	r6
    1a02:	c6 cf       	rjmp	.-116    	; 0x1990 <__mulsf3+0xae>
    1a04:	6b 89       	ldd	r22, Y+19	; 0x13
    1a06:	7c 89       	ldd	r23, Y+20	; 0x14
    1a08:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a0c:	6e 0f       	add	r22, r30
    1a0e:	7f 1f       	adc	r23, r31
    1a10:	6e 5f       	subi	r22, 0xFE	; 254
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	7c 8f       	std	Y+28, r23	; 0x1c
    1a16:	6b 8f       	std	Y+27, r22	; 0x1b
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a1e:	e7 17       	cp	r30, r23
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <__mulsf3+0x142>
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	6a 8f       	std	Y+26, r22	; 0x1a
    1a26:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a28:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a2a:	10 c0       	rjmp	.+32     	; 0x1a4c <__mulsf3+0x16a>
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	e1 70       	andi	r30, 0x01	; 1
    1a30:	f0 70       	andi	r31, 0x00	; 0
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	29 f0       	breq	.+10     	; 0x1a40 <__mulsf3+0x15e>
    1a36:	56 95       	lsr	r21
    1a38:	47 95       	ror	r20
    1a3a:	37 95       	ror	r19
    1a3c:	27 95       	ror	r18
    1a3e:	50 68       	ori	r21, 0x80	; 128
    1a40:	b6 95       	lsr	r27
    1a42:	a7 95       	ror	r26
    1a44:	97 95       	ror	r25
    1a46:	87 95       	ror	r24
    1a48:	6f 5f       	subi	r22, 0xFF	; 255
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	b7 fd       	sbrc	r27, 7
    1a4e:	ee cf       	rjmp	.-36     	; 0x1a2c <__mulsf3+0x14a>
    1a50:	0c c0       	rjmp	.+24     	; 0x1a6a <__mulsf3+0x188>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	aa 1f       	adc	r26, r26
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	57 fd       	sbrc	r21, 7
    1a5c:	81 60       	ori	r24, 0x01	; 1
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	44 1f       	adc	r20, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	61 50       	subi	r22, 0x01	; 1
    1a68:	70 40       	sbci	r23, 0x00	; 0
    1a6a:	80 30       	cpi	r24, 0x00	; 0
    1a6c:	e0 e0       	ldi	r30, 0x00	; 0
    1a6e:	9e 07       	cpc	r25, r30
    1a70:	e0 e0       	ldi	r30, 0x00	; 0
    1a72:	ae 07       	cpc	r26, r30
    1a74:	e0 e4       	ldi	r30, 0x40	; 64
    1a76:	be 07       	cpc	r27, r30
    1a78:	60 f3       	brcs	.-40     	; 0x1a52 <__mulsf3+0x170>
    1a7a:	6b 8f       	std	Y+27, r22	; 0x1b
    1a7c:	7c 8f       	std	Y+28, r23	; 0x1c
    1a7e:	6f e7       	ldi	r22, 0x7F	; 127
    1a80:	e6 2e       	mov	r14, r22
    1a82:	f1 2c       	mov	r15, r1
    1a84:	01 2d       	mov	r16, r1
    1a86:	11 2d       	mov	r17, r1
    1a88:	e8 22       	and	r14, r24
    1a8a:	f9 22       	and	r15, r25
    1a8c:	0a 23       	and	r16, r26
    1a8e:	1b 23       	and	r17, r27
    1a90:	60 e4       	ldi	r22, 0x40	; 64
    1a92:	e6 16       	cp	r14, r22
    1a94:	f1 04       	cpc	r15, r1
    1a96:	01 05       	cpc	r16, r1
    1a98:	11 05       	cpc	r17, r1
    1a9a:	61 f4       	brne	.+24     	; 0x1ab4 <__mulsf3+0x1d2>
    1a9c:	87 fd       	sbrc	r24, 7
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <__mulsf3+0x1d2>
    1aa0:	21 15       	cp	r18, r1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	41 05       	cpc	r20, r1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	29 f0       	breq	.+10     	; 0x1ab4 <__mulsf3+0x1d2>
    1aaa:	80 5c       	subi	r24, 0xC0	; 192
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	af 4f       	sbci	r26, 0xFF	; 255
    1ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab2:	80 78       	andi	r24, 0x80	; 128
    1ab4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab8:	af 8f       	std	Y+31, r26	; 0x1f
    1aba:	b8 a3       	std	Y+32, r27	; 0x20
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	89 8f       	std	Y+25, r24	; 0x19
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	49 96       	adiw	r24, 0x19	; 25
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <__mulsf3+0x1e8>
    1ac6:	83 e5       	ldi	r24, 0x53	; 83
    1ac8:	93 e0       	ldi	r25, 0x03	; 3
    1aca:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__pack_f>
    1ace:	a0 96       	adiw	r28, 0x20	; 32
    1ad0:	e2 e1       	ldi	r30, 0x12	; 18
    1ad2:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__epilogue_restores__>

00001ad6 <__gtsf2>:
    1ad6:	a8 e1       	ldi	r26, 0x18	; 24
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e1 e7       	ldi	r30, 0x71	; 113
    1adc:	fd e0       	ldi	r31, 0x0D	; 13
    1ade:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__prologue_saves__+0x18>
    1ae2:	69 83       	std	Y+1, r22	; 0x01
    1ae4:	7a 83       	std	Y+2, r23	; 0x02
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	2d 83       	std	Y+5, r18	; 0x05
    1aec:	3e 83       	std	Y+6, r19	; 0x06
    1aee:	4f 83       	std	Y+7, r20	; 0x07
    1af0:	58 87       	std	Y+8, r21	; 0x08
    1af2:	8e 01       	movw	r16, r28
    1af4:	07 5f       	subi	r16, 0xF7	; 247
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	ce 01       	movw	r24, r28
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	b8 01       	movw	r22, r16
    1afe:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1b02:	81 e1       	ldi	r24, 0x11	; 17
    1b04:	e8 2e       	mov	r14, r24
    1b06:	f1 2c       	mov	r15, r1
    1b08:	ec 0e       	add	r14, r28
    1b0a:	fd 1e       	adc	r15, r29
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	05 96       	adiw	r24, 0x05	; 5
    1b10:	b7 01       	movw	r22, r14
    1b12:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	82 30       	cpi	r24, 0x02	; 2
    1b1a:	40 f0       	brcs	.+16     	; 0x1b2c <__gtsf2+0x56>
    1b1c:	89 89       	ldd	r24, Y+17	; 0x11
    1b1e:	82 30       	cpi	r24, 0x02	; 2
    1b20:	28 f0       	brcs	.+10     	; 0x1b2c <__gtsf2+0x56>
    1b22:	c8 01       	movw	r24, r16
    1b24:	b7 01       	movw	r22, r14
    1b26:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__fpcmp_parts_f>
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <__gtsf2+0x58>
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	68 96       	adiw	r28, 0x18	; 24
    1b30:	e6 e0       	ldi	r30, 0x06	; 6
    1b32:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

00001b36 <__gesf2>:
    1b36:	a8 e1       	ldi	r26, 0x18	; 24
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e1 ea       	ldi	r30, 0xA1	; 161
    1b3c:	fd e0       	ldi	r31, 0x0D	; 13
    1b3e:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__prologue_saves__+0x18>
    1b42:	69 83       	std	Y+1, r22	; 0x01
    1b44:	7a 83       	std	Y+2, r23	; 0x02
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	2d 83       	std	Y+5, r18	; 0x05
    1b4c:	3e 83       	std	Y+6, r19	; 0x06
    1b4e:	4f 83       	std	Y+7, r20	; 0x07
    1b50:	58 87       	std	Y+8, r21	; 0x08
    1b52:	8e 01       	movw	r16, r28
    1b54:	07 5f       	subi	r16, 0xF7	; 247
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	ce 01       	movw	r24, r28
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	b8 01       	movw	r22, r16
    1b5e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1b62:	81 e1       	ldi	r24, 0x11	; 17
    1b64:	e8 2e       	mov	r14, r24
    1b66:	f1 2c       	mov	r15, r1
    1b68:	ec 0e       	add	r14, r28
    1b6a:	fd 1e       	adc	r15, r29
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	05 96       	adiw	r24, 0x05	; 5
    1b70:	b7 01       	movw	r22, r14
    1b72:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	40 f0       	brcs	.+16     	; 0x1b8c <__gesf2+0x56>
    1b7c:	89 89       	ldd	r24, Y+17	; 0x11
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	28 f0       	brcs	.+10     	; 0x1b8c <__gesf2+0x56>
    1b82:	c8 01       	movw	r24, r16
    1b84:	b7 01       	movw	r22, r14
    1b86:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__fpcmp_parts_f>
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <__gesf2+0x58>
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	68 96       	adiw	r28, 0x18	; 24
    1b90:	e6 e0       	ldi	r30, 0x06	; 6
    1b92:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

00001b96 <__ltsf2>:
    1b96:	a8 e1       	ldi	r26, 0x18	; 24
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e1 ed       	ldi	r30, 0xD1	; 209
    1b9c:	fd e0       	ldi	r31, 0x0D	; 13
    1b9e:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__prologue_saves__+0x18>
    1ba2:	69 83       	std	Y+1, r22	; 0x01
    1ba4:	7a 83       	std	Y+2, r23	; 0x02
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	2d 83       	std	Y+5, r18	; 0x05
    1bac:	3e 83       	std	Y+6, r19	; 0x06
    1bae:	4f 83       	std	Y+7, r20	; 0x07
    1bb0:	58 87       	std	Y+8, r21	; 0x08
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	07 5f       	subi	r16, 0xF7	; 247
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	ce 01       	movw	r24, r28
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	b8 01       	movw	r22, r16
    1bbe:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1bc2:	81 e1       	ldi	r24, 0x11	; 17
    1bc4:	e8 2e       	mov	r14, r24
    1bc6:	f1 2c       	mov	r15, r1
    1bc8:	ec 0e       	add	r14, r28
    1bca:	fd 1e       	adc	r15, r29
    1bcc:	ce 01       	movw	r24, r28
    1bce:	05 96       	adiw	r24, 0x05	; 5
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	40 f0       	brcs	.+16     	; 0x1bec <__ltsf2+0x56>
    1bdc:	89 89       	ldd	r24, Y+17	; 0x11
    1bde:	82 30       	cpi	r24, 0x02	; 2
    1be0:	28 f0       	brcs	.+10     	; 0x1bec <__ltsf2+0x56>
    1be2:	c8 01       	movw	r24, r16
    1be4:	b7 01       	movw	r22, r14
    1be6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__fpcmp_parts_f>
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <__ltsf2+0x58>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	68 96       	adiw	r28, 0x18	; 24
    1bf0:	e6 e0       	ldi	r30, 0x06	; 6
    1bf2:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

00001bf6 <__fixsfsi>:
    1bf6:	ac e0       	ldi	r26, 0x0C	; 12
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e1 e0       	ldi	r30, 0x01	; 1
    1bfc:	fe e0       	ldi	r31, 0x0E	; 14
    1bfe:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0x20>
    1c02:	69 83       	std	Y+1, r22	; 0x01
    1c04:	7a 83       	std	Y+2, r23	; 0x02
    1c06:	8b 83       	std	Y+3, r24	; 0x03
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	be 01       	movw	r22, r28
    1c10:	6b 5f       	subi	r22, 0xFB	; 251
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__unpack_f>
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	81 f1       	breq	.+96     	; 0x1c7e <__fixsfsi+0x88>
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	70 f1       	brcs	.+92     	; 0x1c7e <__fixsfsi+0x88>
    1c22:	84 30       	cpi	r24, 0x04	; 4
    1c24:	21 f4       	brne	.+8      	; 0x1c2e <__fixsfsi+0x38>
    1c26:	8e 81       	ldd	r24, Y+6	; 0x06
    1c28:	88 23       	and	r24, r24
    1c2a:	69 f1       	breq	.+90     	; 0x1c86 <__fixsfsi+0x90>
    1c2c:	0a c0       	rjmp	.+20     	; 0x1c42 <__fixsfsi+0x4c>
    1c2e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c30:	38 85       	ldd	r19, Y+8	; 0x08
    1c32:	37 fd       	sbrc	r19, 7
    1c34:	24 c0       	rjmp	.+72     	; 0x1c7e <__fixsfsi+0x88>
    1c36:	6e 81       	ldd	r22, Y+6	; 0x06
    1c38:	2f 31       	cpi	r18, 0x1F	; 31
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	3c f0       	brlt	.+14     	; 0x1c4c <__fixsfsi+0x56>
    1c3e:	66 23       	and	r22, r22
    1c40:	11 f1       	breq	.+68     	; 0x1c86 <__fixsfsi+0x90>
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	50 e8       	ldi	r21, 0x80	; 128
    1c4a:	21 c0       	rjmp	.+66     	; 0x1c8e <__fixsfsi+0x98>
    1c4c:	8e e1       	ldi	r24, 0x1E	; 30
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	82 1b       	sub	r24, r18
    1c52:	93 0b       	sbc	r25, r19
    1c54:	29 85       	ldd	r18, Y+9	; 0x09
    1c56:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c58:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c5a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <__fixsfsi+0x70>
    1c5e:	56 95       	lsr	r21
    1c60:	47 95       	ror	r20
    1c62:	37 95       	ror	r19
    1c64:	27 95       	ror	r18
    1c66:	8a 95       	dec	r24
    1c68:	d2 f7       	brpl	.-12     	; 0x1c5e <__fixsfsi+0x68>
    1c6a:	66 23       	and	r22, r22
    1c6c:	81 f0       	breq	.+32     	; 0x1c8e <__fixsfsi+0x98>
    1c6e:	50 95       	com	r21
    1c70:	40 95       	com	r20
    1c72:	30 95       	com	r19
    1c74:	21 95       	neg	r18
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	4f 4f       	sbci	r20, 0xFF	; 255
    1c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7c:	08 c0       	rjmp	.+16     	; 0x1c8e <__fixsfsi+0x98>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	a9 01       	movw	r20, r18
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <__fixsfsi+0x98>
    1c86:	2f ef       	ldi	r18, 0xFF	; 255
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f ef       	ldi	r20, 0xFF	; 255
    1c8c:	5f e7       	ldi	r21, 0x7F	; 127
    1c8e:	b9 01       	movw	r22, r18
    1c90:	ca 01       	movw	r24, r20
    1c92:	2c 96       	adiw	r28, 0x0c	; 12
    1c94:	e2 e0       	ldi	r30, 0x02	; 2
    1c96:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0x20>

00001c9a <__pack_f>:
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	24 81       	ldd	r18, Z+4	; 0x04
    1caa:	35 81       	ldd	r19, Z+5	; 0x05
    1cac:	46 81       	ldd	r20, Z+6	; 0x06
    1cae:	57 81       	ldd	r21, Z+7	; 0x07
    1cb0:	61 81       	ldd	r22, Z+1	; 0x01
    1cb2:	80 81       	ld	r24, Z
    1cb4:	82 30       	cpi	r24, 0x02	; 2
    1cb6:	20 f4       	brcc	.+8      	; 0x1cc0 <__pack_f+0x26>
    1cb8:	40 61       	ori	r20, 0x10	; 16
    1cba:	ef ef       	ldi	r30, 0xFF	; 255
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	a3 c0       	rjmp	.+326    	; 0x1e06 <__pack_f+0x16c>
    1cc0:	84 30       	cpi	r24, 0x04	; 4
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <__pack_f+0x2c>
    1cc4:	9b c0       	rjmp	.+310    	; 0x1dfc <__pack_f+0x162>
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__pack_f+0x32>
    1cca:	92 c0       	rjmp	.+292    	; 0x1df0 <__pack_f+0x156>
    1ccc:	21 15       	cp	r18, r1
    1cce:	31 05       	cpc	r19, r1
    1cd0:	41 05       	cpc	r20, r1
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <__pack_f+0x3e>
    1cd6:	8f c0       	rjmp	.+286    	; 0x1df6 <__pack_f+0x15c>
    1cd8:	02 80       	ldd	r0, Z+2	; 0x02
    1cda:	f3 81       	ldd	r31, Z+3	; 0x03
    1cdc:	e0 2d       	mov	r30, r0
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	e2 38       	cpi	r30, 0x82	; 130
    1ce2:	f8 07       	cpc	r31, r24
    1ce4:	0c f0       	brlt	.+2      	; 0x1ce8 <__pack_f+0x4e>
    1ce6:	5a c0       	rjmp	.+180    	; 0x1d9c <__pack_f+0x102>
    1ce8:	c2 e8       	ldi	r28, 0x82	; 130
    1cea:	df ef       	ldi	r29, 0xFF	; 255
    1cec:	ce 1b       	sub	r28, r30
    1cee:	df 0b       	sbc	r29, r31
    1cf0:	ca 31       	cpi	r28, 0x1A	; 26
    1cf2:	d1 05       	cpc	r29, r1
    1cf4:	6c f5       	brge	.+90     	; 0x1d50 <__pack_f+0xb6>
    1cf6:	79 01       	movw	r14, r18
    1cf8:	8a 01       	movw	r16, r20
    1cfa:	0c 2e       	mov	r0, r28
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <__pack_f+0x6c>
    1cfe:	16 95       	lsr	r17
    1d00:	07 95       	ror	r16
    1d02:	f7 94       	ror	r15
    1d04:	e7 94       	ror	r14
    1d06:	0a 94       	dec	r0
    1d08:	d2 f7       	brpl	.-12     	; 0x1cfe <__pack_f+0x64>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 e0       	ldi	r26, 0x00	; 0
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	0c 2e       	mov	r0, r28
    1d14:	04 c0       	rjmp	.+8      	; 0x1d1e <__pack_f+0x84>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	aa 1f       	adc	r26, r26
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	0a 94       	dec	r0
    1d20:	d2 f7       	brpl	.-12     	; 0x1d16 <__pack_f+0x7c>
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	a1 09       	sbc	r26, r1
    1d26:	b1 09       	sbc	r27, r1
    1d28:	82 23       	and	r24, r18
    1d2a:	93 23       	and	r25, r19
    1d2c:	a4 23       	and	r26, r20
    1d2e:	b5 23       	and	r27, r21
    1d30:	21 e0       	ldi	r18, 0x01	; 1
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	a1 05       	cpc	r26, r1
    1d3c:	b1 05       	cpc	r27, r1
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <__pack_f+0xac>
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	a9 01       	movw	r20, r18
    1d46:	2e 29       	or	r18, r14
    1d48:	3f 29       	or	r19, r15
    1d4a:	40 2b       	or	r20, r16
    1d4c:	51 2b       	or	r21, r17
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <__pack_f+0xbc>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	a9 01       	movw	r20, r18
    1d56:	da 01       	movw	r26, r20
    1d58:	c9 01       	movw	r24, r18
    1d5a:	8f 77       	andi	r24, 0x7F	; 127
    1d5c:	90 70       	andi	r25, 0x00	; 0
    1d5e:	a0 70       	andi	r26, 0x00	; 0
    1d60:	b0 70       	andi	r27, 0x00	; 0
    1d62:	80 34       	cpi	r24, 0x40	; 64
    1d64:	91 05       	cpc	r25, r1
    1d66:	a1 05       	cpc	r26, r1
    1d68:	b1 05       	cpc	r27, r1
    1d6a:	39 f4       	brne	.+14     	; 0x1d7a <__pack_f+0xe0>
    1d6c:	27 ff       	sbrs	r18, 7
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <__pack_f+0xe8>
    1d70:	20 5c       	subi	r18, 0xC0	; 192
    1d72:	3f 4f       	sbci	r19, 0xFF	; 255
    1d74:	4f 4f       	sbci	r20, 0xFF	; 255
    1d76:	5f 4f       	sbci	r21, 0xFF	; 255
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <__pack_f+0xe8>
    1d7a:	21 5c       	subi	r18, 0xC1	; 193
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255
    1d82:	e1 e0       	ldi	r30, 0x01	; 1
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	20 30       	cpi	r18, 0x00	; 0
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	38 07       	cpc	r19, r24
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	48 07       	cpc	r20, r24
    1d90:	80 e4       	ldi	r24, 0x40	; 64
    1d92:	58 07       	cpc	r21, r24
    1d94:	28 f5       	brcc	.+74     	; 0x1de0 <__pack_f+0x146>
    1d96:	e0 e0       	ldi	r30, 0x00	; 0
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	22 c0       	rjmp	.+68     	; 0x1de0 <__pack_f+0x146>
    1d9c:	e0 38       	cpi	r30, 0x80	; 128
    1d9e:	f1 05       	cpc	r31, r1
    1da0:	6c f5       	brge	.+90     	; 0x1dfc <__pack_f+0x162>
    1da2:	e1 58       	subi	r30, 0x81	; 129
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	da 01       	movw	r26, r20
    1da8:	c9 01       	movw	r24, r18
    1daa:	8f 77       	andi	r24, 0x7F	; 127
    1dac:	90 70       	andi	r25, 0x00	; 0
    1dae:	a0 70       	andi	r26, 0x00	; 0
    1db0:	b0 70       	andi	r27, 0x00	; 0
    1db2:	80 34       	cpi	r24, 0x40	; 64
    1db4:	91 05       	cpc	r25, r1
    1db6:	a1 05       	cpc	r26, r1
    1db8:	b1 05       	cpc	r27, r1
    1dba:	39 f4       	brne	.+14     	; 0x1dca <__pack_f+0x130>
    1dbc:	27 ff       	sbrs	r18, 7
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <__pack_f+0x138>
    1dc0:	20 5c       	subi	r18, 0xC0	; 192
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <__pack_f+0x138>
    1dca:	21 5c       	subi	r18, 0xC1	; 193
    1dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dce:	4f 4f       	sbci	r20, 0xFF	; 255
    1dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd2:	57 ff       	sbrs	r21, 7
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <__pack_f+0x146>
    1dd6:	56 95       	lsr	r21
    1dd8:	47 95       	ror	r20
    1dda:	37 95       	ror	r19
    1ddc:	27 95       	ror	r18
    1dde:	31 96       	adiw	r30, 0x01	; 1
    1de0:	87 e0       	ldi	r24, 0x07	; 7
    1de2:	56 95       	lsr	r21
    1de4:	47 95       	ror	r20
    1de6:	37 95       	ror	r19
    1de8:	27 95       	ror	r18
    1dea:	8a 95       	dec	r24
    1dec:	d1 f7       	brne	.-12     	; 0x1de2 <__pack_f+0x148>
    1dee:	0b c0       	rjmp	.+22     	; 0x1e06 <__pack_f+0x16c>
    1df0:	e0 e0       	ldi	r30, 0x00	; 0
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	05 c0       	rjmp	.+10     	; 0x1e00 <__pack_f+0x166>
    1df6:	e0 e0       	ldi	r30, 0x00	; 0
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	05 c0       	rjmp	.+10     	; 0x1e06 <__pack_f+0x16c>
    1dfc:	ef ef       	ldi	r30, 0xFF	; 255
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	a9 01       	movw	r20, r18
    1e06:	8e 2f       	mov	r24, r30
    1e08:	87 95       	ror	r24
    1e0a:	88 27       	eor	r24, r24
    1e0c:	87 95       	ror	r24
    1e0e:	94 2f       	mov	r25, r20
    1e10:	9f 77       	andi	r25, 0x7F	; 127
    1e12:	67 95       	ror	r22
    1e14:	66 27       	eor	r22, r22
    1e16:	67 95       	ror	r22
    1e18:	e6 95       	lsr	r30
    1e1a:	e2 2e       	mov	r14, r18
    1e1c:	a9 2f       	mov	r26, r25
    1e1e:	a8 2b       	or	r26, r24
    1e20:	fe 2f       	mov	r31, r30
    1e22:	f6 2b       	or	r31, r22
    1e24:	62 2f       	mov	r22, r18
    1e26:	73 2f       	mov	r23, r19
    1e28:	8a 2f       	mov	r24, r26
    1e2a:	9f 2f       	mov	r25, r31
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	e6 e0       	ldi	r30, 0x06	; 6
    1e32:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

00001e36 <__unpack_f>:
    1e36:	dc 01       	movw	r26, r24
    1e38:	fb 01       	movw	r30, r22
    1e3a:	2c 91       	ld	r18, X
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	3c 91       	ld	r19, X
    1e40:	11 97       	sbiw	r26, 0x01	; 1
    1e42:	12 96       	adiw	r26, 0x02	; 2
    1e44:	8c 91       	ld	r24, X
    1e46:	12 97       	sbiw	r26, 0x02	; 2
    1e48:	48 2f       	mov	r20, r24
    1e4a:	4f 77       	andi	r20, 0x7F	; 127
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	98 2f       	mov	r25, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	99 27       	eor	r25, r25
    1e54:	99 1f       	adc	r25, r25
    1e56:	13 96       	adiw	r26, 0x03	; 3
    1e58:	6c 91       	ld	r22, X
    1e5a:	13 97       	sbiw	r26, 0x03	; 3
    1e5c:	86 2f       	mov	r24, r22
    1e5e:	88 0f       	add	r24, r24
    1e60:	89 2b       	or	r24, r25
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	66 1f       	adc	r22, r22
    1e66:	66 27       	eor	r22, r22
    1e68:	66 1f       	adc	r22, r22
    1e6a:	61 83       	std	Z+1, r22	; 0x01
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	39 f5       	brne	.+78     	; 0x1ebe <__unpack_f+0x88>
    1e70:	21 15       	cp	r18, r1
    1e72:	31 05       	cpc	r19, r1
    1e74:	41 05       	cpc	r20, r1
    1e76:	51 05       	cpc	r21, r1
    1e78:	11 f4       	brne	.+4      	; 0x1e7e <__unpack_f+0x48>
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	29 c0       	rjmp	.+82     	; 0x1ed0 <__unpack_f+0x9a>
    1e7e:	82 e8       	ldi	r24, 0x82	; 130
    1e80:	9f ef       	ldi	r25, 0xFF	; 255
    1e82:	93 83       	std	Z+3, r25	; 0x03
    1e84:	82 83       	std	Z+2, r24	; 0x02
    1e86:	67 e0       	ldi	r22, 0x07	; 7
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	44 1f       	adc	r20, r20
    1e8e:	55 1f       	adc	r21, r21
    1e90:	6a 95       	dec	r22
    1e92:	d1 f7       	brne	.-12     	; 0x1e88 <__unpack_f+0x52>
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	80 83       	st	Z, r24
    1e98:	09 c0       	rjmp	.+18     	; 0x1eac <__unpack_f+0x76>
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	44 1f       	adc	r20, r20
    1ea0:	55 1f       	adc	r21, r21
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	93 83       	std	Z+3, r25	; 0x03
    1eaa:	82 83       	std	Z+2, r24	; 0x02
    1eac:	20 30       	cpi	r18, 0x00	; 0
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	38 07       	cpc	r19, r24
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	48 07       	cpc	r20, r24
    1eb6:	80 e4       	ldi	r24, 0x40	; 64
    1eb8:	58 07       	cpc	r21, r24
    1eba:	78 f3       	brcs	.-34     	; 0x1e9a <__unpack_f+0x64>
    1ebc:	20 c0       	rjmp	.+64     	; 0x1efe <__unpack_f+0xc8>
    1ebe:	8f 3f       	cpi	r24, 0xFF	; 255
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	79 f4       	brne	.+30     	; 0x1ee2 <__unpack_f+0xac>
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	41 05       	cpc	r20, r1
    1eca:	51 05       	cpc	r21, r1
    1ecc:	19 f4       	brne	.+6      	; 0x1ed4 <__unpack_f+0x9e>
    1ece:	84 e0       	ldi	r24, 0x04	; 4
    1ed0:	80 83       	st	Z, r24
    1ed2:	08 95       	ret
    1ed4:	44 ff       	sbrs	r20, 4
    1ed6:	03 c0       	rjmp	.+6      	; 0x1ede <__unpack_f+0xa8>
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	80 83       	st	Z, r24
    1edc:	10 c0       	rjmp	.+32     	; 0x1efe <__unpack_f+0xc8>
    1ede:	10 82       	st	Z, r1
    1ee0:	0e c0       	rjmp	.+28     	; 0x1efe <__unpack_f+0xc8>
    1ee2:	8f 57       	subi	r24, 0x7F	; 127
    1ee4:	90 40       	sbci	r25, 0x00	; 0
    1ee6:	93 83       	std	Z+3, r25	; 0x03
    1ee8:	82 83       	std	Z+2, r24	; 0x02
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	80 83       	st	Z, r24
    1eee:	87 e0       	ldi	r24, 0x07	; 7
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	44 1f       	adc	r20, r20
    1ef6:	55 1f       	adc	r21, r21
    1ef8:	8a 95       	dec	r24
    1efa:	d1 f7       	brne	.-12     	; 0x1ef0 <__unpack_f+0xba>
    1efc:	50 64       	ori	r21, 0x40	; 64
    1efe:	24 83       	std	Z+4, r18	; 0x04
    1f00:	35 83       	std	Z+5, r19	; 0x05
    1f02:	46 83       	std	Z+6, r20	; 0x06
    1f04:	57 83       	std	Z+7, r21	; 0x07
    1f06:	08 95       	ret

00001f08 <__fpcmp_parts_f>:
    1f08:	fc 01       	movw	r30, r24
    1f0a:	db 01       	movw	r26, r22
    1f0c:	90 81       	ld	r25, Z
    1f0e:	92 30       	cpi	r25, 0x02	; 2
    1f10:	08 f4       	brcc	.+2      	; 0x1f14 <__fpcmp_parts_f+0xc>
    1f12:	49 c0       	rjmp	.+146    	; 0x1fa6 <__fpcmp_parts_f+0x9e>
    1f14:	8c 91       	ld	r24, X
    1f16:	82 30       	cpi	r24, 0x02	; 2
    1f18:	08 f4       	brcc	.+2      	; 0x1f1c <__fpcmp_parts_f+0x14>
    1f1a:	45 c0       	rjmp	.+138    	; 0x1fa6 <__fpcmp_parts_f+0x9e>
    1f1c:	94 30       	cpi	r25, 0x04	; 4
    1f1e:	51 f4       	brne	.+20     	; 0x1f34 <__fpcmp_parts_f+0x2c>
    1f20:	61 81       	ldd	r22, Z+1	; 0x01
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	b1 f5       	brne	.+108    	; 0x1f92 <__fpcmp_parts_f+0x8a>
    1f26:	11 96       	adiw	r26, 0x01	; 1
    1f28:	2c 91       	ld	r18, X
    1f2a:	11 97       	sbiw	r26, 0x01	; 1
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	26 1b       	sub	r18, r22
    1f30:	31 09       	sbc	r19, r1
    1f32:	41 c0       	rjmp	.+130    	; 0x1fb6 <__fpcmp_parts_f+0xae>
    1f34:	84 30       	cpi	r24, 0x04	; 4
    1f36:	21 f0       	breq	.+8      	; 0x1f40 <__fpcmp_parts_f+0x38>
    1f38:	92 30       	cpi	r25, 0x02	; 2
    1f3a:	41 f4       	brne	.+16     	; 0x1f4c <__fpcmp_parts_f+0x44>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	b1 f1       	breq	.+108    	; 0x1fac <__fpcmp_parts_f+0xa4>
    1f40:	11 96       	adiw	r26, 0x01	; 1
    1f42:	8c 91       	ld	r24, X
    1f44:	11 97       	sbiw	r26, 0x01	; 1
    1f46:	88 23       	and	r24, r24
    1f48:	a1 f1       	breq	.+104    	; 0x1fb2 <__fpcmp_parts_f+0xaa>
    1f4a:	2d c0       	rjmp	.+90     	; 0x1fa6 <__fpcmp_parts_f+0x9e>
    1f4c:	61 81       	ldd	r22, Z+1	; 0x01
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	01 f1       	breq	.+64     	; 0x1f92 <__fpcmp_parts_f+0x8a>
    1f52:	11 96       	adiw	r26, 0x01	; 1
    1f54:	8c 91       	ld	r24, X
    1f56:	11 97       	sbiw	r26, 0x01	; 1
    1f58:	68 17       	cp	r22, r24
    1f5a:	d9 f4       	brne	.+54     	; 0x1f92 <__fpcmp_parts_f+0x8a>
    1f5c:	22 81       	ldd	r18, Z+2	; 0x02
    1f5e:	33 81       	ldd	r19, Z+3	; 0x03
    1f60:	12 96       	adiw	r26, 0x02	; 2
    1f62:	8d 91       	ld	r24, X+
    1f64:	9c 91       	ld	r25, X
    1f66:	13 97       	sbiw	r26, 0x03	; 3
    1f68:	82 17       	cp	r24, r18
    1f6a:	93 07       	cpc	r25, r19
    1f6c:	94 f0       	brlt	.+36     	; 0x1f92 <__fpcmp_parts_f+0x8a>
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	bc f0       	brlt	.+46     	; 0x1fa2 <__fpcmp_parts_f+0x9a>
    1f74:	24 81       	ldd	r18, Z+4	; 0x04
    1f76:	35 81       	ldd	r19, Z+5	; 0x05
    1f78:	46 81       	ldd	r20, Z+6	; 0x06
    1f7a:	57 81       	ldd	r21, Z+7	; 0x07
    1f7c:	14 96       	adiw	r26, 0x04	; 4
    1f7e:	8d 91       	ld	r24, X+
    1f80:	9d 91       	ld	r25, X+
    1f82:	0d 90       	ld	r0, X+
    1f84:	bc 91       	ld	r27, X
    1f86:	a0 2d       	mov	r26, r0
    1f88:	82 17       	cp	r24, r18
    1f8a:	93 07       	cpc	r25, r19
    1f8c:	a4 07       	cpc	r26, r20
    1f8e:	b5 07       	cpc	r27, r21
    1f90:	18 f4       	brcc	.+6      	; 0x1f98 <__fpcmp_parts_f+0x90>
    1f92:	66 23       	and	r22, r22
    1f94:	41 f0       	breq	.+16     	; 0x1fa6 <__fpcmp_parts_f+0x9e>
    1f96:	0d c0       	rjmp	.+26     	; 0x1fb2 <__fpcmp_parts_f+0xaa>
    1f98:	28 17       	cp	r18, r24
    1f9a:	39 07       	cpc	r19, r25
    1f9c:	4a 07       	cpc	r20, r26
    1f9e:	5b 07       	cpc	r21, r27
    1fa0:	28 f4       	brcc	.+10     	; 0x1fac <__fpcmp_parts_f+0xa4>
    1fa2:	66 23       	and	r22, r22
    1fa4:	31 f0       	breq	.+12     	; 0x1fb2 <__fpcmp_parts_f+0xaa>
    1fa6:	21 e0       	ldi	r18, 0x01	; 1
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <__fpcmp_parts_f+0xae>
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <__fpcmp_parts_f+0xae>
    1fb2:	2f ef       	ldi	r18, 0xFF	; 255
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	08 95       	ret

00001fba <__divmodhi4>:
    1fba:	97 fb       	bst	r25, 7
    1fbc:	09 2e       	mov	r0, r25
    1fbe:	07 26       	eor	r0, r23
    1fc0:	0a d0       	rcall	.+20     	; 0x1fd6 <__divmodhi4_neg1>
    1fc2:	77 fd       	sbrc	r23, 7
    1fc4:	04 d0       	rcall	.+8      	; 0x1fce <__divmodhi4_neg2>
    1fc6:	0c d0       	rcall	.+24     	; 0x1fe0 <__udivmodhi4>
    1fc8:	06 d0       	rcall	.+12     	; 0x1fd6 <__divmodhi4_neg1>
    1fca:	00 20       	and	r0, r0
    1fcc:	1a f4       	brpl	.+6      	; 0x1fd4 <__divmodhi4_exit>

00001fce <__divmodhi4_neg2>:
    1fce:	70 95       	com	r23
    1fd0:	61 95       	neg	r22
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255

00001fd4 <__divmodhi4_exit>:
    1fd4:	08 95       	ret

00001fd6 <__divmodhi4_neg1>:
    1fd6:	f6 f7       	brtc	.-4      	; 0x1fd4 <__divmodhi4_exit>
    1fd8:	90 95       	com	r25
    1fda:	81 95       	neg	r24
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	08 95       	ret

00001fe0 <__udivmodhi4>:
    1fe0:	aa 1b       	sub	r26, r26
    1fe2:	bb 1b       	sub	r27, r27
    1fe4:	51 e1       	ldi	r21, 0x11	; 17
    1fe6:	07 c0       	rjmp	.+14     	; 0x1ff6 <__udivmodhi4_ep>

00001fe8 <__udivmodhi4_loop>:
    1fe8:	aa 1f       	adc	r26, r26
    1fea:	bb 1f       	adc	r27, r27
    1fec:	a6 17       	cp	r26, r22
    1fee:	b7 07       	cpc	r27, r23
    1ff0:	10 f0       	brcs	.+4      	; 0x1ff6 <__udivmodhi4_ep>
    1ff2:	a6 1b       	sub	r26, r22
    1ff4:	b7 0b       	sbc	r27, r23

00001ff6 <__udivmodhi4_ep>:
    1ff6:	88 1f       	adc	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	5a 95       	dec	r21
    1ffc:	a9 f7       	brne	.-22     	; 0x1fe8 <__udivmodhi4_loop>
    1ffe:	80 95       	com	r24
    2000:	90 95       	com	r25
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	08 95       	ret

00002008 <__prologue_saves__>:
    2008:	2f 92       	push	r2
    200a:	3f 92       	push	r3
    200c:	4f 92       	push	r4
    200e:	5f 92       	push	r5
    2010:	6f 92       	push	r6
    2012:	7f 92       	push	r7
    2014:	8f 92       	push	r8
    2016:	9f 92       	push	r9
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	ca 1b       	sub	r28, r26
    2032:	db 0b       	sbc	r29, r27
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	09 94       	ijmp

00002040 <__epilogue_restores__>:
    2040:	2a 88       	ldd	r2, Y+18	; 0x12
    2042:	39 88       	ldd	r3, Y+17	; 0x11
    2044:	48 88       	ldd	r4, Y+16	; 0x10
    2046:	5f 84       	ldd	r5, Y+15	; 0x0f
    2048:	6e 84       	ldd	r6, Y+14	; 0x0e
    204a:	7d 84       	ldd	r7, Y+13	; 0x0d
    204c:	8c 84       	ldd	r8, Y+12	; 0x0c
    204e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2050:	aa 84       	ldd	r10, Y+10	; 0x0a
    2052:	b9 84       	ldd	r11, Y+9	; 0x09
    2054:	c8 84       	ldd	r12, Y+8	; 0x08
    2056:	df 80       	ldd	r13, Y+7	; 0x07
    2058:	ee 80       	ldd	r14, Y+6	; 0x06
    205a:	fd 80       	ldd	r15, Y+5	; 0x05
    205c:	0c 81       	ldd	r16, Y+4	; 0x04
    205e:	1b 81       	ldd	r17, Y+3	; 0x03
    2060:	aa 81       	ldd	r26, Y+2	; 0x02
    2062:	b9 81       	ldd	r27, Y+1	; 0x01
    2064:	ce 0f       	add	r28, r30
    2066:	d1 1d       	adc	r29, r1
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	ed 01       	movw	r28, r26
    2074:	08 95       	ret

00002076 <fdevopen>:
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	8c 01       	movw	r16, r24
    2080:	eb 01       	movw	r28, r22
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	11 f4       	brne	.+4      	; 0x208a <fdevopen+0x14>
    2086:	20 97       	sbiw	r28, 0x00	; 0
    2088:	c9 f1       	breq	.+114    	; 0x20fc <fdevopen+0x86>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	6e e0       	ldi	r22, 0x0E	; 14
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	0e 94 b7 12 	call	0x256e	; 0x256e <calloc>
    2096:	fc 01       	movw	r30, r24
    2098:	9c 01       	movw	r18, r24
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	89 f1       	breq	.+98     	; 0x2100 <fdevopen+0x8a>
    209e:	80 e8       	ldi	r24, 0x80	; 128
    20a0:	83 83       	std	Z+3, r24	; 0x03
    20a2:	20 97       	sbiw	r28, 0x00	; 0
    20a4:	71 f0       	breq	.+28     	; 0x20c2 <fdevopen+0x4c>
    20a6:	d3 87       	std	Z+11, r29	; 0x0b
    20a8:	c2 87       	std	Z+10, r28	; 0x0a
    20aa:	81 e8       	ldi	r24, 0x81	; 129
    20ac:	83 83       	std	Z+3, r24	; 0x03
    20ae:	80 91 6b 03 	lds	r24, 0x036B
    20b2:	90 91 6c 03 	lds	r25, 0x036C
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	21 f4       	brne	.+8      	; 0x20c2 <fdevopen+0x4c>
    20ba:	f0 93 6c 03 	sts	0x036C, r31
    20be:	e0 93 6b 03 	sts	0x036B, r30
    20c2:	01 15       	cp	r16, r1
    20c4:	11 05       	cpc	r17, r1
    20c6:	e1 f0       	breq	.+56     	; 0x2100 <fdevopen+0x8a>
    20c8:	11 87       	std	Z+9, r17	; 0x09
    20ca:	00 87       	std	Z+8, r16	; 0x08
    20cc:	83 81       	ldd	r24, Z+3	; 0x03
    20ce:	82 60       	ori	r24, 0x02	; 2
    20d0:	83 83       	std	Z+3, r24	; 0x03
    20d2:	80 91 6d 03 	lds	r24, 0x036D
    20d6:	90 91 6e 03 	lds	r25, 0x036E
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	89 f4       	brne	.+34     	; 0x2100 <fdevopen+0x8a>
    20de:	f0 93 6e 03 	sts	0x036E, r31
    20e2:	e0 93 6d 03 	sts	0x036D, r30
    20e6:	80 91 6f 03 	lds	r24, 0x036F
    20ea:	90 91 70 03 	lds	r25, 0x0370
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	39 f4       	brne	.+14     	; 0x2100 <fdevopen+0x8a>
    20f2:	f0 93 70 03 	sts	0x0370, r31
    20f6:	e0 93 6f 03 	sts	0x036F, r30
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <fdevopen+0x8a>
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	c9 01       	movw	r24, r18
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	08 95       	ret

0000210c <printf>:
    210c:	a0 e0       	ldi	r26, 0x00	; 0
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	ec e8       	ldi	r30, 0x8C	; 140
    2112:	f0 e1       	ldi	r31, 0x10	; 16
    2114:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0x20>
    2118:	fe 01       	movw	r30, r28
    211a:	35 96       	adiw	r30, 0x05	; 5
    211c:	61 91       	ld	r22, Z+
    211e:	71 91       	ld	r23, Z+
    2120:	80 91 6d 03 	lds	r24, 0x036D
    2124:	90 91 6e 03 	lds	r25, 0x036E
    2128:	af 01       	movw	r20, r30
    212a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <vfprintf>
    212e:	20 96       	adiw	r28, 0x00	; 0
    2130:	e2 e0       	ldi	r30, 0x02	; 2
    2132:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0x20>

00002136 <puts>:
    2136:	ef 92       	push	r14
    2138:	ff 92       	push	r15
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	8c 01       	movw	r16, r24
    2144:	e0 91 6d 03 	lds	r30, 0x036D
    2148:	f0 91 6e 03 	lds	r31, 0x036E
    214c:	83 81       	ldd	r24, Z+3	; 0x03
    214e:	81 ff       	sbrs	r24, 1
    2150:	1f c0       	rjmp	.+62     	; 0x2190 <puts+0x5a>
    2152:	c0 e0       	ldi	r28, 0x00	; 0
    2154:	d0 e0       	ldi	r29, 0x00	; 0
    2156:	0a c0       	rjmp	.+20     	; 0x216c <puts+0x36>
    2158:	db 01       	movw	r26, r22
    215a:	18 96       	adiw	r26, 0x08	; 8
    215c:	ed 91       	ld	r30, X+
    215e:	fc 91       	ld	r31, X
    2160:	19 97       	sbiw	r26, 0x09	; 9
    2162:	09 95       	icall
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	11 f0       	breq	.+4      	; 0x216c <puts+0x36>
    2168:	cf ef       	ldi	r28, 0xFF	; 255
    216a:	df ef       	ldi	r29, 0xFF	; 255
    216c:	f8 01       	movw	r30, r16
    216e:	81 91       	ld	r24, Z+
    2170:	8f 01       	movw	r16, r30
    2172:	60 91 6d 03 	lds	r22, 0x036D
    2176:	70 91 6e 03 	lds	r23, 0x036E
    217a:	88 23       	and	r24, r24
    217c:	69 f7       	brne	.-38     	; 0x2158 <puts+0x22>
    217e:	db 01       	movw	r26, r22
    2180:	18 96       	adiw	r26, 0x08	; 8
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	19 97       	sbiw	r26, 0x09	; 9
    2188:	8a e0       	ldi	r24, 0x0A	; 10
    218a:	09 95       	icall
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	11 f0       	breq	.+4      	; 0x2194 <puts+0x5e>
    2190:	cf ef       	ldi	r28, 0xFF	; 255
    2192:	df ef       	ldi	r29, 0xFF	; 255
    2194:	ce 01       	movw	r24, r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	e6 e0       	ldi	r30, 0x06	; 6
    219c:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

000021a0 <vfprintf>:
    21a0:	ac e0       	ldi	r26, 0x0C	; 12
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 ed       	ldi	r30, 0xD6	; 214
    21a6:	f0 e1       	ldi	r31, 0x10	; 16
    21a8:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__prologue_saves__>
    21ac:	6c 01       	movw	r12, r24
    21ae:	1b 01       	movw	r2, r22
    21b0:	8a 01       	movw	r16, r20
    21b2:	fc 01       	movw	r30, r24
    21b4:	17 82       	std	Z+7, r1	; 0x07
    21b6:	16 82       	std	Z+6, r1	; 0x06
    21b8:	83 81       	ldd	r24, Z+3	; 0x03
    21ba:	81 ff       	sbrs	r24, 1
    21bc:	d1 c1       	rjmp	.+930    	; 0x2560 <vfprintf+0x3c0>
    21be:	2e 01       	movw	r4, r28
    21c0:	08 94       	sec
    21c2:	41 1c       	adc	r4, r1
    21c4:	51 1c       	adc	r5, r1
    21c6:	f6 01       	movw	r30, r12
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	f1 01       	movw	r30, r2
    21cc:	93 fd       	sbrc	r25, 3
    21ce:	85 91       	lpm	r24, Z+
    21d0:	93 ff       	sbrs	r25, 3
    21d2:	81 91       	ld	r24, Z+
    21d4:	1f 01       	movw	r2, r30
    21d6:	88 23       	and	r24, r24
    21d8:	09 f4       	brne	.+2      	; 0x21dc <vfprintf+0x3c>
    21da:	be c1       	rjmp	.+892    	; 0x2558 <vfprintf+0x3b8>
    21dc:	85 32       	cpi	r24, 0x25	; 37
    21de:	39 f4       	brne	.+14     	; 0x21ee <vfprintf+0x4e>
    21e0:	93 fd       	sbrc	r25, 3
    21e2:	85 91       	lpm	r24, Z+
    21e4:	93 ff       	sbrs	r25, 3
    21e6:	81 91       	ld	r24, Z+
    21e8:	1f 01       	movw	r2, r30
    21ea:	85 32       	cpi	r24, 0x25	; 37
    21ec:	29 f4       	brne	.+10     	; 0x21f8 <vfprintf+0x58>
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	b6 01       	movw	r22, r12
    21f2:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    21f6:	e7 cf       	rjmp	.-50     	; 0x21c6 <vfprintf+0x26>
    21f8:	ee 24       	eor	r14, r14
    21fa:	ff 24       	eor	r15, r15
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	20 32       	cpi	r18, 0x20	; 32
    2200:	b0 f4       	brcc	.+44     	; 0x222e <vfprintf+0x8e>
    2202:	8b 32       	cpi	r24, 0x2B	; 43
    2204:	69 f0       	breq	.+26     	; 0x2220 <vfprintf+0x80>
    2206:	8c 32       	cpi	r24, 0x2C	; 44
    2208:	28 f4       	brcc	.+10     	; 0x2214 <vfprintf+0x74>
    220a:	80 32       	cpi	r24, 0x20	; 32
    220c:	51 f0       	breq	.+20     	; 0x2222 <vfprintf+0x82>
    220e:	83 32       	cpi	r24, 0x23	; 35
    2210:	71 f4       	brne	.+28     	; 0x222e <vfprintf+0x8e>
    2212:	0b c0       	rjmp	.+22     	; 0x222a <vfprintf+0x8a>
    2214:	8d 32       	cpi	r24, 0x2D	; 45
    2216:	39 f0       	breq	.+14     	; 0x2226 <vfprintf+0x86>
    2218:	80 33       	cpi	r24, 0x30	; 48
    221a:	49 f4       	brne	.+18     	; 0x222e <vfprintf+0x8e>
    221c:	21 60       	ori	r18, 0x01	; 1
    221e:	2c c0       	rjmp	.+88     	; 0x2278 <vfprintf+0xd8>
    2220:	22 60       	ori	r18, 0x02	; 2
    2222:	24 60       	ori	r18, 0x04	; 4
    2224:	29 c0       	rjmp	.+82     	; 0x2278 <vfprintf+0xd8>
    2226:	28 60       	ori	r18, 0x08	; 8
    2228:	27 c0       	rjmp	.+78     	; 0x2278 <vfprintf+0xd8>
    222a:	20 61       	ori	r18, 0x10	; 16
    222c:	25 c0       	rjmp	.+74     	; 0x2278 <vfprintf+0xd8>
    222e:	27 fd       	sbrc	r18, 7
    2230:	2c c0       	rjmp	.+88     	; 0x228a <vfprintf+0xea>
    2232:	38 2f       	mov	r19, r24
    2234:	30 53       	subi	r19, 0x30	; 48
    2236:	3a 30       	cpi	r19, 0x0A	; 10
    2238:	98 f4       	brcc	.+38     	; 0x2260 <vfprintf+0xc0>
    223a:	26 ff       	sbrs	r18, 6
    223c:	08 c0       	rjmp	.+16     	; 0x224e <vfprintf+0xae>
    223e:	8e 2d       	mov	r24, r14
    2240:	88 0f       	add	r24, r24
    2242:	e8 2e       	mov	r14, r24
    2244:	ee 0c       	add	r14, r14
    2246:	ee 0c       	add	r14, r14
    2248:	e8 0e       	add	r14, r24
    224a:	e3 0e       	add	r14, r19
    224c:	15 c0       	rjmp	.+42     	; 0x2278 <vfprintf+0xd8>
    224e:	8f 2d       	mov	r24, r15
    2250:	88 0f       	add	r24, r24
    2252:	f8 2e       	mov	r15, r24
    2254:	ff 0c       	add	r15, r15
    2256:	ff 0c       	add	r15, r15
    2258:	f8 0e       	add	r15, r24
    225a:	f3 0e       	add	r15, r19
    225c:	20 62       	ori	r18, 0x20	; 32
    225e:	0c c0       	rjmp	.+24     	; 0x2278 <vfprintf+0xd8>
    2260:	8e 32       	cpi	r24, 0x2E	; 46
    2262:	21 f4       	brne	.+8      	; 0x226c <vfprintf+0xcc>
    2264:	26 fd       	sbrc	r18, 6
    2266:	78 c1       	rjmp	.+752    	; 0x2558 <vfprintf+0x3b8>
    2268:	20 64       	ori	r18, 0x40	; 64
    226a:	06 c0       	rjmp	.+12     	; 0x2278 <vfprintf+0xd8>
    226c:	8c 36       	cpi	r24, 0x6C	; 108
    226e:	11 f4       	brne	.+4      	; 0x2274 <vfprintf+0xd4>
    2270:	20 68       	ori	r18, 0x80	; 128
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <vfprintf+0xd8>
    2274:	88 36       	cpi	r24, 0x68	; 104
    2276:	49 f4       	brne	.+18     	; 0x228a <vfprintf+0xea>
    2278:	f1 01       	movw	r30, r2
    227a:	93 fd       	sbrc	r25, 3
    227c:	85 91       	lpm	r24, Z+
    227e:	93 ff       	sbrs	r25, 3
    2280:	81 91       	ld	r24, Z+
    2282:	1f 01       	movw	r2, r30
    2284:	88 23       	and	r24, r24
    2286:	09 f0       	breq	.+2      	; 0x228a <vfprintf+0xea>
    2288:	ba cf       	rjmp	.-140    	; 0x21fe <vfprintf+0x5e>
    228a:	98 2f       	mov	r25, r24
    228c:	95 54       	subi	r25, 0x45	; 69
    228e:	93 30       	cpi	r25, 0x03	; 3
    2290:	18 f0       	brcs	.+6      	; 0x2298 <vfprintf+0xf8>
    2292:	90 52       	subi	r25, 0x20	; 32
    2294:	93 30       	cpi	r25, 0x03	; 3
    2296:	28 f4       	brcc	.+10     	; 0x22a2 <vfprintf+0x102>
    2298:	0c 5f       	subi	r16, 0xFC	; 252
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	ff e3       	ldi	r31, 0x3F	; 63
    229e:	f9 83       	std	Y+1, r31	; 0x01
    22a0:	0d c0       	rjmp	.+26     	; 0x22bc <vfprintf+0x11c>
    22a2:	83 36       	cpi	r24, 0x63	; 99
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <vfprintf+0x112>
    22a6:	83 37       	cpi	r24, 0x73	; 115
    22a8:	71 f0       	breq	.+28     	; 0x22c6 <vfprintf+0x126>
    22aa:	83 35       	cpi	r24, 0x53	; 83
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <vfprintf+0x110>
    22ae:	60 c0       	rjmp	.+192    	; 0x2370 <vfprintf+0x1d0>
    22b0:	22 c0       	rjmp	.+68     	; 0x22f6 <vfprintf+0x156>
    22b2:	f8 01       	movw	r30, r16
    22b4:	80 81       	ld	r24, Z
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	0e 5f       	subi	r16, 0xFE	; 254
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	42 01       	movw	r8, r4
    22be:	71 e0       	ldi	r23, 0x01	; 1
    22c0:	a7 2e       	mov	r10, r23
    22c2:	b1 2c       	mov	r11, r1
    22c4:	16 c0       	rjmp	.+44     	; 0x22f2 <vfprintf+0x152>
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	66 2e       	mov	r6, r22
    22ca:	71 2c       	mov	r7, r1
    22cc:	60 0e       	add	r6, r16
    22ce:	71 1e       	adc	r7, r17
    22d0:	f8 01       	movw	r30, r16
    22d2:	80 80       	ld	r8, Z
    22d4:	91 80       	ldd	r9, Z+1	; 0x01
    22d6:	26 ff       	sbrs	r18, 6
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <vfprintf+0x140>
    22da:	6e 2d       	mov	r22, r14
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <vfprintf+0x144>
    22e0:	6f ef       	ldi	r22, 0xFF	; 255
    22e2:	7f ef       	ldi	r23, 0xFF	; 255
    22e4:	c4 01       	movw	r24, r8
    22e6:	2c 87       	std	Y+12, r18	; 0x0c
    22e8:	0e 94 20 14 	call	0x2840	; 0x2840 <strnlen>
    22ec:	5c 01       	movw	r10, r24
    22ee:	83 01       	movw	r16, r6
    22f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    22f2:	2f 77       	andi	r18, 0x7F	; 127
    22f4:	17 c0       	rjmp	.+46     	; 0x2324 <vfprintf+0x184>
    22f6:	52 e0       	ldi	r21, 0x02	; 2
    22f8:	65 2e       	mov	r6, r21
    22fa:	71 2c       	mov	r7, r1
    22fc:	60 0e       	add	r6, r16
    22fe:	71 1e       	adc	r7, r17
    2300:	f8 01       	movw	r30, r16
    2302:	80 80       	ld	r8, Z
    2304:	91 80       	ldd	r9, Z+1	; 0x01
    2306:	26 ff       	sbrs	r18, 6
    2308:	03 c0       	rjmp	.+6      	; 0x2310 <vfprintf+0x170>
    230a:	6e 2d       	mov	r22, r14
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <vfprintf+0x174>
    2310:	6f ef       	ldi	r22, 0xFF	; 255
    2312:	7f ef       	ldi	r23, 0xFF	; 255
    2314:	c4 01       	movw	r24, r8
    2316:	2c 87       	std	Y+12, r18	; 0x0c
    2318:	0e 94 0e 14 	call	0x281c	; 0x281c <strnlen_P>
    231c:	5c 01       	movw	r10, r24
    231e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2320:	20 68       	ori	r18, 0x80	; 128
    2322:	83 01       	movw	r16, r6
    2324:	23 fd       	sbrc	r18, 3
    2326:	20 c0       	rjmp	.+64     	; 0x2368 <vfprintf+0x1c8>
    2328:	08 c0       	rjmp	.+16     	; 0x233a <vfprintf+0x19a>
    232a:	80 e2       	ldi	r24, 0x20	; 32
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	b6 01       	movw	r22, r12
    2330:	2c 87       	std	Y+12, r18	; 0x0c
    2332:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    2336:	fa 94       	dec	r15
    2338:	2c 85       	ldd	r18, Y+12	; 0x0c
    233a:	8f 2d       	mov	r24, r15
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a8 16       	cp	r10, r24
    2340:	b9 06       	cpc	r11, r25
    2342:	98 f3       	brcs	.-26     	; 0x232a <vfprintf+0x18a>
    2344:	11 c0       	rjmp	.+34     	; 0x2368 <vfprintf+0x1c8>
    2346:	f4 01       	movw	r30, r8
    2348:	27 fd       	sbrc	r18, 7
    234a:	85 91       	lpm	r24, Z+
    234c:	27 ff       	sbrs	r18, 7
    234e:	81 91       	ld	r24, Z+
    2350:	4f 01       	movw	r8, r30
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	b6 01       	movw	r22, r12
    2356:	2c 87       	std	Y+12, r18	; 0x0c
    2358:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    235c:	2c 85       	ldd	r18, Y+12	; 0x0c
    235e:	f1 10       	cpse	r15, r1
    2360:	fa 94       	dec	r15
    2362:	08 94       	sec
    2364:	a1 08       	sbc	r10, r1
    2366:	b1 08       	sbc	r11, r1
    2368:	a1 14       	cp	r10, r1
    236a:	b1 04       	cpc	r11, r1
    236c:	61 f7       	brne	.-40     	; 0x2346 <vfprintf+0x1a6>
    236e:	f1 c0       	rjmp	.+482    	; 0x2552 <vfprintf+0x3b2>
    2370:	84 36       	cpi	r24, 0x64	; 100
    2372:	11 f0       	breq	.+4      	; 0x2378 <vfprintf+0x1d8>
    2374:	89 36       	cpi	r24, 0x69	; 105
    2376:	49 f5       	brne	.+82     	; 0x23ca <vfprintf+0x22a>
    2378:	27 ff       	sbrs	r18, 7
    237a:	08 c0       	rjmp	.+16     	; 0x238c <vfprintf+0x1ec>
    237c:	f8 01       	movw	r30, r16
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	0c 5f       	subi	r16, 0xFC	; 252
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	09 c0       	rjmp	.+18     	; 0x239e <vfprintf+0x1fe>
    238c:	f8 01       	movw	r30, r16
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	88 27       	eor	r24, r24
    2394:	77 fd       	sbrc	r23, 7
    2396:	80 95       	com	r24
    2398:	98 2f       	mov	r25, r24
    239a:	0e 5f       	subi	r16, 0xFE	; 254
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	4f e6       	ldi	r20, 0x6F	; 111
    23a0:	b4 2e       	mov	r11, r20
    23a2:	b2 22       	and	r11, r18
    23a4:	97 ff       	sbrs	r25, 7
    23a6:	09 c0       	rjmp	.+18     	; 0x23ba <vfprintf+0x21a>
    23a8:	90 95       	com	r25
    23aa:	80 95       	com	r24
    23ac:	70 95       	com	r23
    23ae:	61 95       	neg	r22
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	8f 4f       	sbci	r24, 0xFF	; 255
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	f0 e8       	ldi	r31, 0x80	; 128
    23b8:	bf 2a       	or	r11, r31
    23ba:	a2 01       	movw	r20, r4
    23bc:	2a e0       	ldi	r18, 0x0A	; 10
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	0e 94 57 14 	call	0x28ae	; 0x28ae <__ultoa_invert>
    23c4:	78 2e       	mov	r7, r24
    23c6:	74 18       	sub	r7, r4
    23c8:	45 c0       	rjmp	.+138    	; 0x2454 <vfprintf+0x2b4>
    23ca:	85 37       	cpi	r24, 0x75	; 117
    23cc:	31 f4       	brne	.+12     	; 0x23da <vfprintf+0x23a>
    23ce:	3f ee       	ldi	r19, 0xEF	; 239
    23d0:	b3 2e       	mov	r11, r19
    23d2:	b2 22       	and	r11, r18
    23d4:	2a e0       	ldi	r18, 0x0A	; 10
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	25 c0       	rjmp	.+74     	; 0x2424 <vfprintf+0x284>
    23da:	99 ef       	ldi	r25, 0xF9	; 249
    23dc:	b9 2e       	mov	r11, r25
    23de:	b2 22       	and	r11, r18
    23e0:	8f 36       	cpi	r24, 0x6F	; 111
    23e2:	c1 f0       	breq	.+48     	; 0x2414 <vfprintf+0x274>
    23e4:	80 37       	cpi	r24, 0x70	; 112
    23e6:	20 f4       	brcc	.+8      	; 0x23f0 <vfprintf+0x250>
    23e8:	88 35       	cpi	r24, 0x58	; 88
    23ea:	09 f0       	breq	.+2      	; 0x23ee <vfprintf+0x24e>
    23ec:	b5 c0       	rjmp	.+362    	; 0x2558 <vfprintf+0x3b8>
    23ee:	0d c0       	rjmp	.+26     	; 0x240a <vfprintf+0x26a>
    23f0:	80 37       	cpi	r24, 0x70	; 112
    23f2:	21 f0       	breq	.+8      	; 0x23fc <vfprintf+0x25c>
    23f4:	88 37       	cpi	r24, 0x78	; 120
    23f6:	09 f0       	breq	.+2      	; 0x23fa <vfprintf+0x25a>
    23f8:	af c0       	rjmp	.+350    	; 0x2558 <vfprintf+0x3b8>
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <vfprintf+0x260>
    23fc:	20 e1       	ldi	r18, 0x10	; 16
    23fe:	b2 2a       	or	r11, r18
    2400:	b4 fe       	sbrs	r11, 4
    2402:	0b c0       	rjmp	.+22     	; 0x241a <vfprintf+0x27a>
    2404:	84 e0       	ldi	r24, 0x04	; 4
    2406:	b8 2a       	or	r11, r24
    2408:	08 c0       	rjmp	.+16     	; 0x241a <vfprintf+0x27a>
    240a:	b4 fe       	sbrs	r11, 4
    240c:	09 c0       	rjmp	.+18     	; 0x2420 <vfprintf+0x280>
    240e:	e6 e0       	ldi	r30, 0x06	; 6
    2410:	be 2a       	or	r11, r30
    2412:	06 c0       	rjmp	.+12     	; 0x2420 <vfprintf+0x280>
    2414:	28 e0       	ldi	r18, 0x08	; 8
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <vfprintf+0x284>
    241a:	20 e1       	ldi	r18, 0x10	; 16
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <vfprintf+0x284>
    2420:	20 e1       	ldi	r18, 0x10	; 16
    2422:	32 e0       	ldi	r19, 0x02	; 2
    2424:	b7 fe       	sbrs	r11, 7
    2426:	08 c0       	rjmp	.+16     	; 0x2438 <vfprintf+0x298>
    2428:	f8 01       	movw	r30, r16
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	0c 5f       	subi	r16, 0xFC	; 252
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	07 c0       	rjmp	.+14     	; 0x2446 <vfprintf+0x2a6>
    2438:	f8 01       	movw	r30, r16
    243a:	60 81       	ld	r22, Z
    243c:	71 81       	ldd	r23, Z+1	; 0x01
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 5f       	subi	r16, 0xFE	; 254
    2444:	1f 4f       	sbci	r17, 0xFF	; 255
    2446:	a2 01       	movw	r20, r4
    2448:	0e 94 57 14 	call	0x28ae	; 0x28ae <__ultoa_invert>
    244c:	78 2e       	mov	r7, r24
    244e:	74 18       	sub	r7, r4
    2450:	ff e7       	ldi	r31, 0x7F	; 127
    2452:	bf 22       	and	r11, r31
    2454:	b6 fe       	sbrs	r11, 6
    2456:	0b c0       	rjmp	.+22     	; 0x246e <vfprintf+0x2ce>
    2458:	2e ef       	ldi	r18, 0xFE	; 254
    245a:	b2 22       	and	r11, r18
    245c:	7e 14       	cp	r7, r14
    245e:	38 f4       	brcc	.+14     	; 0x246e <vfprintf+0x2ce>
    2460:	b4 fe       	sbrs	r11, 4
    2462:	07 c0       	rjmp	.+14     	; 0x2472 <vfprintf+0x2d2>
    2464:	b2 fc       	sbrc	r11, 2
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <vfprintf+0x2d2>
    2468:	8f ee       	ldi	r24, 0xEF	; 239
    246a:	b8 22       	and	r11, r24
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <vfprintf+0x2d2>
    246e:	a7 2c       	mov	r10, r7
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <vfprintf+0x2d4>
    2472:	ae 2c       	mov	r10, r14
    2474:	8b 2d       	mov	r24, r11
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	b4 fe       	sbrs	r11, 4
    247a:	0d c0       	rjmp	.+26     	; 0x2496 <vfprintf+0x2f6>
    247c:	fe 01       	movw	r30, r28
    247e:	e7 0d       	add	r30, r7
    2480:	f1 1d       	adc	r31, r1
    2482:	20 81       	ld	r18, Z
    2484:	20 33       	cpi	r18, 0x30	; 48
    2486:	19 f4       	brne	.+6      	; 0x248e <vfprintf+0x2ee>
    2488:	e9 ee       	ldi	r30, 0xE9	; 233
    248a:	be 22       	and	r11, r30
    248c:	09 c0       	rjmp	.+18     	; 0x24a0 <vfprintf+0x300>
    248e:	a3 94       	inc	r10
    2490:	b2 fe       	sbrs	r11, 2
    2492:	06 c0       	rjmp	.+12     	; 0x24a0 <vfprintf+0x300>
    2494:	04 c0       	rjmp	.+8      	; 0x249e <vfprintf+0x2fe>
    2496:	86 78       	andi	r24, 0x86	; 134
    2498:	90 70       	andi	r25, 0x00	; 0
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	09 f0       	breq	.+2      	; 0x24a0 <vfprintf+0x300>
    249e:	a3 94       	inc	r10
    24a0:	8b 2c       	mov	r8, r11
    24a2:	99 24       	eor	r9, r9
    24a4:	b3 fc       	sbrc	r11, 3
    24a6:	14 c0       	rjmp	.+40     	; 0x24d0 <vfprintf+0x330>
    24a8:	b0 fe       	sbrs	r11, 0
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <vfprintf+0x32a>
    24ac:	af 14       	cp	r10, r15
    24ae:	28 f4       	brcc	.+10     	; 0x24ba <vfprintf+0x31a>
    24b0:	e7 2c       	mov	r14, r7
    24b2:	ef 0c       	add	r14, r15
    24b4:	ea 18       	sub	r14, r10
    24b6:	af 2c       	mov	r10, r15
    24b8:	08 c0       	rjmp	.+16     	; 0x24ca <vfprintf+0x32a>
    24ba:	e7 2c       	mov	r14, r7
    24bc:	06 c0       	rjmp	.+12     	; 0x24ca <vfprintf+0x32a>
    24be:	80 e2       	ldi	r24, 0x20	; 32
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	b6 01       	movw	r22, r12
    24c4:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    24c8:	a3 94       	inc	r10
    24ca:	af 14       	cp	r10, r15
    24cc:	c0 f3       	brcs	.-16     	; 0x24be <vfprintf+0x31e>
    24ce:	04 c0       	rjmp	.+8      	; 0x24d8 <vfprintf+0x338>
    24d0:	af 14       	cp	r10, r15
    24d2:	10 f4       	brcc	.+4      	; 0x24d8 <vfprintf+0x338>
    24d4:	fa 18       	sub	r15, r10
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <vfprintf+0x33a>
    24d8:	ff 24       	eor	r15, r15
    24da:	84 fe       	sbrs	r8, 4
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <vfprintf+0x35c>
    24de:	80 e3       	ldi	r24, 0x30	; 48
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	b6 01       	movw	r22, r12
    24e4:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    24e8:	82 fe       	sbrs	r8, 2
    24ea:	1f c0       	rjmp	.+62     	; 0x252a <vfprintf+0x38a>
    24ec:	81 fe       	sbrs	r8, 1
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <vfprintf+0x356>
    24f0:	88 e5       	ldi	r24, 0x58	; 88
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	10 c0       	rjmp	.+32     	; 0x2516 <vfprintf+0x376>
    24f6:	88 e7       	ldi	r24, 0x78	; 120
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0d c0       	rjmp	.+26     	; 0x2516 <vfprintf+0x376>
    24fc:	c4 01       	movw	r24, r8
    24fe:	86 78       	andi	r24, 0x86	; 134
    2500:	90 70       	andi	r25, 0x00	; 0
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	91 f0       	breq	.+36     	; 0x252a <vfprintf+0x38a>
    2506:	81 fc       	sbrc	r8, 1
    2508:	02 c0       	rjmp	.+4      	; 0x250e <vfprintf+0x36e>
    250a:	80 e2       	ldi	r24, 0x20	; 32
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <vfprintf+0x370>
    250e:	8b e2       	ldi	r24, 0x2B	; 43
    2510:	b7 fc       	sbrc	r11, 7
    2512:	8d e2       	ldi	r24, 0x2D	; 45
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	b6 01       	movw	r22, r12
    2518:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    251c:	06 c0       	rjmp	.+12     	; 0x252a <vfprintf+0x38a>
    251e:	80 e3       	ldi	r24, 0x30	; 48
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	b6 01       	movw	r22, r12
    2524:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    2528:	ea 94       	dec	r14
    252a:	7e 14       	cp	r7, r14
    252c:	c0 f3       	brcs	.-16     	; 0x251e <vfprintf+0x37e>
    252e:	7a 94       	dec	r7
    2530:	f2 01       	movw	r30, r4
    2532:	e7 0d       	add	r30, r7
    2534:	f1 1d       	adc	r31, r1
    2536:	80 81       	ld	r24, Z
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	b6 01       	movw	r22, r12
    253c:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    2540:	77 20       	and	r7, r7
    2542:	a9 f7       	brne	.-22     	; 0x252e <vfprintf+0x38e>
    2544:	06 c0       	rjmp	.+12     	; 0x2552 <vfprintf+0x3b2>
    2546:	80 e2       	ldi	r24, 0x20	; 32
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	b6 01       	movw	r22, r12
    254c:	0e 94 2b 14 	call	0x2856	; 0x2856 <fputc>
    2550:	fa 94       	dec	r15
    2552:	ff 20       	and	r15, r15
    2554:	c1 f7       	brne	.-16     	; 0x2546 <vfprintf+0x3a6>
    2556:	37 ce       	rjmp	.-914    	; 0x21c6 <vfprintf+0x26>
    2558:	f6 01       	movw	r30, r12
    255a:	26 81       	ldd	r18, Z+6	; 0x06
    255c:	37 81       	ldd	r19, Z+7	; 0x07
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <vfprintf+0x3c4>
    2560:	2f ef       	ldi	r18, 0xFF	; 255
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	c9 01       	movw	r24, r18
    2566:	2c 96       	adiw	r28, 0x0c	; 12
    2568:	e2 e1       	ldi	r30, 0x12	; 18
    256a:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__epilogue_restores__>

0000256e <calloc>:
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	68 9f       	mul	r22, r24
    257c:	80 01       	movw	r16, r0
    257e:	69 9f       	mul	r22, r25
    2580:	10 0d       	add	r17, r0
    2582:	78 9f       	mul	r23, r24
    2584:	10 0d       	add	r17, r0
    2586:	11 24       	eor	r1, r1
    2588:	c8 01       	movw	r24, r16
    258a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <malloc>
    258e:	e8 2e       	mov	r14, r24
    2590:	e7 01       	movw	r28, r14
    2592:	7e 01       	movw	r14, r28
    2594:	f9 2e       	mov	r15, r25
    2596:	e7 01       	movw	r28, r14
    2598:	20 97       	sbiw	r28, 0x00	; 0
    259a:	31 f0       	breq	.+12     	; 0x25a8 <calloc+0x3a>
    259c:	8e 2d       	mov	r24, r14
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	a8 01       	movw	r20, r16
    25a4:	0e 94 19 14 	call	0x2832	; 0x2832 <memset>
    25a8:	7e 01       	movw	r14, r28
    25aa:	ce 01       	movw	r24, r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	e6 e0       	ldi	r30, 0x06	; 6
    25b2:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__epilogue_restores__+0x18>

000025b6 <malloc>:
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	82 30       	cpi	r24, 0x02	; 2
    25bc:	91 05       	cpc	r25, r1
    25be:	10 f4       	brcc	.+4      	; 0x25c4 <malloc+0xe>
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	e0 91 73 03 	lds	r30, 0x0373
    25c8:	f0 91 74 03 	lds	r31, 0x0374
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	26 c0       	rjmp	.+76     	; 0x2622 <malloc+0x6c>
    25d6:	60 81       	ld	r22, Z
    25d8:	71 81       	ldd	r23, Z+1	; 0x01
    25da:	68 17       	cp	r22, r24
    25dc:	79 07       	cpc	r23, r25
    25de:	e0 f0       	brcs	.+56     	; 0x2618 <malloc+0x62>
    25e0:	68 17       	cp	r22, r24
    25e2:	79 07       	cpc	r23, r25
    25e4:	81 f4       	brne	.+32     	; 0x2606 <malloc+0x50>
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	21 15       	cp	r18, r1
    25ec:	31 05       	cpc	r19, r1
    25ee:	31 f0       	breq	.+12     	; 0x25fc <malloc+0x46>
    25f0:	d9 01       	movw	r26, r18
    25f2:	13 96       	adiw	r26, 0x03	; 3
    25f4:	9c 93       	st	X, r25
    25f6:	8e 93       	st	-X, r24
    25f8:	12 97       	sbiw	r26, 0x02	; 2
    25fa:	2b c0       	rjmp	.+86     	; 0x2652 <malloc+0x9c>
    25fc:	90 93 74 03 	sts	0x0374, r25
    2600:	80 93 73 03 	sts	0x0373, r24
    2604:	26 c0       	rjmp	.+76     	; 0x2652 <malloc+0x9c>
    2606:	41 15       	cp	r20, r1
    2608:	51 05       	cpc	r21, r1
    260a:	19 f0       	breq	.+6      	; 0x2612 <malloc+0x5c>
    260c:	64 17       	cp	r22, r20
    260e:	75 07       	cpc	r23, r21
    2610:	18 f4       	brcc	.+6      	; 0x2618 <malloc+0x62>
    2612:	ab 01       	movw	r20, r22
    2614:	e9 01       	movw	r28, r18
    2616:	df 01       	movw	r26, r30
    2618:	9f 01       	movw	r18, r30
    261a:	72 81       	ldd	r23, Z+2	; 0x02
    261c:	63 81       	ldd	r22, Z+3	; 0x03
    261e:	e7 2f       	mov	r30, r23
    2620:	f6 2f       	mov	r31, r22
    2622:	30 97       	sbiw	r30, 0x00	; 0
    2624:	c1 f6       	brne	.-80     	; 0x25d6 <malloc+0x20>
    2626:	41 15       	cp	r20, r1
    2628:	51 05       	cpc	r21, r1
    262a:	01 f1       	breq	.+64     	; 0x266c <malloc+0xb6>
    262c:	48 1b       	sub	r20, r24
    262e:	59 0b       	sbc	r21, r25
    2630:	44 30       	cpi	r20, 0x04	; 4
    2632:	51 05       	cpc	r21, r1
    2634:	80 f4       	brcc	.+32     	; 0x2656 <malloc+0xa0>
    2636:	12 96       	adiw	r26, 0x02	; 2
    2638:	8d 91       	ld	r24, X+
    263a:	9c 91       	ld	r25, X
    263c:	13 97       	sbiw	r26, 0x03	; 3
    263e:	20 97       	sbiw	r28, 0x00	; 0
    2640:	19 f0       	breq	.+6      	; 0x2648 <malloc+0x92>
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <malloc+0x9a>
    2648:	90 93 74 03 	sts	0x0374, r25
    264c:	80 93 73 03 	sts	0x0373, r24
    2650:	fd 01       	movw	r30, r26
    2652:	32 96       	adiw	r30, 0x02	; 2
    2654:	46 c0       	rjmp	.+140    	; 0x26e2 <malloc+0x12c>
    2656:	fd 01       	movw	r30, r26
    2658:	e4 0f       	add	r30, r20
    265a:	f5 1f       	adc	r31, r21
    265c:	81 93       	st	Z+, r24
    265e:	91 93       	st	Z+, r25
    2660:	42 50       	subi	r20, 0x02	; 2
    2662:	50 40       	sbci	r21, 0x00	; 0
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	5c 93       	st	X, r21
    2668:	4e 93       	st	-X, r20
    266a:	3b c0       	rjmp	.+118    	; 0x26e2 <malloc+0x12c>
    266c:	20 91 71 03 	lds	r18, 0x0371
    2670:	30 91 72 03 	lds	r19, 0x0372
    2674:	21 15       	cp	r18, r1
    2676:	31 05       	cpc	r19, r1
    2678:	41 f4       	brne	.+16     	; 0x268a <malloc+0xd4>
    267a:	20 91 5d 03 	lds	r18, 0x035D
    267e:	30 91 5e 03 	lds	r19, 0x035E
    2682:	30 93 72 03 	sts	0x0372, r19
    2686:	20 93 71 03 	sts	0x0371, r18
    268a:	20 91 5f 03 	lds	r18, 0x035F
    268e:	30 91 60 03 	lds	r19, 0x0360
    2692:	21 15       	cp	r18, r1
    2694:	31 05       	cpc	r19, r1
    2696:	41 f4       	brne	.+16     	; 0x26a8 <malloc+0xf2>
    2698:	2d b7       	in	r18, 0x3d	; 61
    269a:	3e b7       	in	r19, 0x3e	; 62
    269c:	40 91 5b 03 	lds	r20, 0x035B
    26a0:	50 91 5c 03 	lds	r21, 0x035C
    26a4:	24 1b       	sub	r18, r20
    26a6:	35 0b       	sbc	r19, r21
    26a8:	e0 91 71 03 	lds	r30, 0x0371
    26ac:	f0 91 72 03 	lds	r31, 0x0372
    26b0:	e2 17       	cp	r30, r18
    26b2:	f3 07       	cpc	r31, r19
    26b4:	a0 f4       	brcc	.+40     	; 0x26de <malloc+0x128>
    26b6:	2e 1b       	sub	r18, r30
    26b8:	3f 0b       	sbc	r19, r31
    26ba:	28 17       	cp	r18, r24
    26bc:	39 07       	cpc	r19, r25
    26be:	78 f0       	brcs	.+30     	; 0x26de <malloc+0x128>
    26c0:	ac 01       	movw	r20, r24
    26c2:	4e 5f       	subi	r20, 0xFE	; 254
    26c4:	5f 4f       	sbci	r21, 0xFF	; 255
    26c6:	24 17       	cp	r18, r20
    26c8:	35 07       	cpc	r19, r21
    26ca:	48 f0       	brcs	.+18     	; 0x26de <malloc+0x128>
    26cc:	4e 0f       	add	r20, r30
    26ce:	5f 1f       	adc	r21, r31
    26d0:	50 93 72 03 	sts	0x0372, r21
    26d4:	40 93 71 03 	sts	0x0371, r20
    26d8:	81 93       	st	Z+, r24
    26da:	91 93       	st	Z+, r25
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <malloc+0x12c>
    26de:	e0 e0       	ldi	r30, 0x00	; 0
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	cf 01       	movw	r24, r30
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <free>:
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <free+0xa>
    26f2:	91 c0       	rjmp	.+290    	; 0x2816 <free+0x12c>
    26f4:	fc 01       	movw	r30, r24
    26f6:	32 97       	sbiw	r30, 0x02	; 2
    26f8:	13 82       	std	Z+3, r1	; 0x03
    26fa:	12 82       	std	Z+2, r1	; 0x02
    26fc:	60 91 73 03 	lds	r22, 0x0373
    2700:	70 91 74 03 	lds	r23, 0x0374
    2704:	61 15       	cp	r22, r1
    2706:	71 05       	cpc	r23, r1
    2708:	81 f4       	brne	.+32     	; 0x272a <free+0x40>
    270a:	20 81       	ld	r18, Z
    270c:	31 81       	ldd	r19, Z+1	; 0x01
    270e:	28 0f       	add	r18, r24
    2710:	39 1f       	adc	r19, r25
    2712:	80 91 71 03 	lds	r24, 0x0371
    2716:	90 91 72 03 	lds	r25, 0x0372
    271a:	82 17       	cp	r24, r18
    271c:	93 07       	cpc	r25, r19
    271e:	99 f5       	brne	.+102    	; 0x2786 <free+0x9c>
    2720:	f0 93 72 03 	sts	0x0372, r31
    2724:	e0 93 71 03 	sts	0x0371, r30
    2728:	76 c0       	rjmp	.+236    	; 0x2816 <free+0x12c>
    272a:	db 01       	movw	r26, r22
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <free+0x4c>
    2732:	cd 01       	movw	r24, r26
    2734:	d9 01       	movw	r26, r18
    2736:	ae 17       	cp	r26, r30
    2738:	bf 07       	cpc	r27, r31
    273a:	48 f4       	brcc	.+18     	; 0x274e <free+0x64>
    273c:	12 96       	adiw	r26, 0x02	; 2
    273e:	2d 91       	ld	r18, X+
    2740:	3c 91       	ld	r19, X
    2742:	13 97       	sbiw	r26, 0x03	; 3
    2744:	21 15       	cp	r18, r1
    2746:	31 05       	cpc	r19, r1
    2748:	a1 f7       	brne	.-24     	; 0x2732 <free+0x48>
    274a:	cd 01       	movw	r24, r26
    274c:	21 c0       	rjmp	.+66     	; 0x2790 <free+0xa6>
    274e:	b3 83       	std	Z+3, r27	; 0x03
    2750:	a2 83       	std	Z+2, r26	; 0x02
    2752:	ef 01       	movw	r28, r30
    2754:	49 91       	ld	r20, Y+
    2756:	59 91       	ld	r21, Y+
    2758:	9e 01       	movw	r18, r28
    275a:	24 0f       	add	r18, r20
    275c:	35 1f       	adc	r19, r21
    275e:	a2 17       	cp	r26, r18
    2760:	b3 07       	cpc	r27, r19
    2762:	79 f4       	brne	.+30     	; 0x2782 <free+0x98>
    2764:	2d 91       	ld	r18, X+
    2766:	3c 91       	ld	r19, X
    2768:	11 97       	sbiw	r26, 0x01	; 1
    276a:	24 0f       	add	r18, r20
    276c:	35 1f       	adc	r19, r21
    276e:	2e 5f       	subi	r18, 0xFE	; 254
    2770:	3f 4f       	sbci	r19, 0xFF	; 255
    2772:	31 83       	std	Z+1, r19	; 0x01
    2774:	20 83       	st	Z, r18
    2776:	12 96       	adiw	r26, 0x02	; 2
    2778:	2d 91       	ld	r18, X+
    277a:	3c 91       	ld	r19, X
    277c:	13 97       	sbiw	r26, 0x03	; 3
    277e:	33 83       	std	Z+3, r19	; 0x03
    2780:	22 83       	std	Z+2, r18	; 0x02
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	29 f4       	brne	.+10     	; 0x2790 <free+0xa6>
    2786:	f0 93 74 03 	sts	0x0374, r31
    278a:	e0 93 73 03 	sts	0x0373, r30
    278e:	43 c0       	rjmp	.+134    	; 0x2816 <free+0x12c>
    2790:	dc 01       	movw	r26, r24
    2792:	13 96       	adiw	r26, 0x03	; 3
    2794:	fc 93       	st	X, r31
    2796:	ee 93       	st	-X, r30
    2798:	12 97       	sbiw	r26, 0x02	; 2
    279a:	4d 91       	ld	r20, X+
    279c:	5d 91       	ld	r21, X+
    279e:	a4 0f       	add	r26, r20
    27a0:	b5 1f       	adc	r27, r21
    27a2:	ea 17       	cp	r30, r26
    27a4:	fb 07       	cpc	r31, r27
    27a6:	69 f4       	brne	.+26     	; 0x27c2 <free+0xd8>
    27a8:	20 81       	ld	r18, Z
    27aa:	31 81       	ldd	r19, Z+1	; 0x01
    27ac:	24 0f       	add	r18, r20
    27ae:	35 1f       	adc	r19, r21
    27b0:	2e 5f       	subi	r18, 0xFE	; 254
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	ec 01       	movw	r28, r24
    27b6:	39 83       	std	Y+1, r19	; 0x01
    27b8:	28 83       	st	Y, r18
    27ba:	22 81       	ldd	r18, Z+2	; 0x02
    27bc:	33 81       	ldd	r19, Z+3	; 0x03
    27be:	3b 83       	std	Y+3, r19	; 0x03
    27c0:	2a 83       	std	Y+2, r18	; 0x02
    27c2:	e0 e0       	ldi	r30, 0x00	; 0
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <free+0xe2>
    27c8:	fb 01       	movw	r30, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	db 01       	movw	r26, r22
    27ce:	12 96       	adiw	r26, 0x02	; 2
    27d0:	8d 91       	ld	r24, X+
    27d2:	9c 91       	ld	r25, X
    27d4:	13 97       	sbiw	r26, 0x03	; 3
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	b9 f7       	brne	.-18     	; 0x27c8 <free+0xde>
    27da:	9b 01       	movw	r18, r22
    27dc:	2e 5f       	subi	r18, 0xFE	; 254
    27de:	3f 4f       	sbci	r19, 0xFF	; 255
    27e0:	8d 91       	ld	r24, X+
    27e2:	9c 91       	ld	r25, X
    27e4:	11 97       	sbiw	r26, 0x01	; 1
    27e6:	82 0f       	add	r24, r18
    27e8:	93 1f       	adc	r25, r19
    27ea:	40 91 71 03 	lds	r20, 0x0371
    27ee:	50 91 72 03 	lds	r21, 0x0372
    27f2:	48 17       	cp	r20, r24
    27f4:	59 07       	cpc	r21, r25
    27f6:	79 f4       	brne	.+30     	; 0x2816 <free+0x12c>
    27f8:	30 97       	sbiw	r30, 0x00	; 0
    27fa:	29 f4       	brne	.+10     	; 0x2806 <free+0x11c>
    27fc:	10 92 74 03 	sts	0x0374, r1
    2800:	10 92 73 03 	sts	0x0373, r1
    2804:	02 c0       	rjmp	.+4      	; 0x280a <free+0x120>
    2806:	13 82       	std	Z+3, r1	; 0x03
    2808:	12 82       	std	Z+2, r1	; 0x02
    280a:	22 50       	subi	r18, 0x02	; 2
    280c:	30 40       	sbci	r19, 0x00	; 0
    280e:	30 93 72 03 	sts	0x0372, r19
    2812:	20 93 71 03 	sts	0x0371, r18
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	08 95       	ret

0000281c <strnlen_P>:
    281c:	fc 01       	movw	r30, r24
    281e:	05 90       	lpm	r0, Z+
    2820:	61 50       	subi	r22, 0x01	; 1
    2822:	70 40       	sbci	r23, 0x00	; 0
    2824:	01 10       	cpse	r0, r1
    2826:	d8 f7       	brcc	.-10     	; 0x281e <strnlen_P+0x2>
    2828:	80 95       	com	r24
    282a:	90 95       	com	r25
    282c:	8e 0f       	add	r24, r30
    282e:	9f 1f       	adc	r25, r31
    2830:	08 95       	ret

00002832 <memset>:
    2832:	dc 01       	movw	r26, r24
    2834:	01 c0       	rjmp	.+2      	; 0x2838 <memset+0x6>
    2836:	6d 93       	st	X+, r22
    2838:	41 50       	subi	r20, 0x01	; 1
    283a:	50 40       	sbci	r21, 0x00	; 0
    283c:	e0 f7       	brcc	.-8      	; 0x2836 <memset+0x4>
    283e:	08 95       	ret

00002840 <strnlen>:
    2840:	fc 01       	movw	r30, r24
    2842:	61 50       	subi	r22, 0x01	; 1
    2844:	70 40       	sbci	r23, 0x00	; 0
    2846:	01 90       	ld	r0, Z+
    2848:	01 10       	cpse	r0, r1
    284a:	d8 f7       	brcc	.-10     	; 0x2842 <strnlen+0x2>
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	8e 0f       	add	r24, r30
    2852:	9f 1f       	adc	r25, r31
    2854:	08 95       	ret

00002856 <fputc>:
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	8c 01       	movw	r16, r24
    2860:	eb 01       	movw	r28, r22
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	81 ff       	sbrs	r24, 1
    2866:	1b c0       	rjmp	.+54     	; 0x289e <fputc+0x48>
    2868:	82 ff       	sbrs	r24, 2
    286a:	0d c0       	rjmp	.+26     	; 0x2886 <fputc+0x30>
    286c:	2e 81       	ldd	r18, Y+6	; 0x06
    286e:	3f 81       	ldd	r19, Y+7	; 0x07
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
    2872:	9d 81       	ldd	r25, Y+5	; 0x05
    2874:	28 17       	cp	r18, r24
    2876:	39 07       	cpc	r19, r25
    2878:	64 f4       	brge	.+24     	; 0x2892 <fputc+0x3c>
    287a:	e8 81       	ld	r30, Y
    287c:	f9 81       	ldd	r31, Y+1	; 0x01
    287e:	01 93       	st	Z+, r16
    2880:	f9 83       	std	Y+1, r31	; 0x01
    2882:	e8 83       	st	Y, r30
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <fputc+0x3c>
    2886:	e8 85       	ldd	r30, Y+8	; 0x08
    2888:	f9 85       	ldd	r31, Y+9	; 0x09
    288a:	80 2f       	mov	r24, r16
    288c:	09 95       	icall
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	31 f4       	brne	.+12     	; 0x289e <fputc+0x48>
    2892:	8e 81       	ldd	r24, Y+6	; 0x06
    2894:	9f 81       	ldd	r25, Y+7	; 0x07
    2896:	01 96       	adiw	r24, 0x01	; 1
    2898:	9f 83       	std	Y+7, r25	; 0x07
    289a:	8e 83       	std	Y+6, r24	; 0x06
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <fputc+0x4c>
    289e:	0f ef       	ldi	r16, 0xFF	; 255
    28a0:	1f ef       	ldi	r17, 0xFF	; 255
    28a2:	c8 01       	movw	r24, r16
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	08 95       	ret

000028ae <__ultoa_invert>:
    28ae:	fa 01       	movw	r30, r20
    28b0:	aa 27       	eor	r26, r26
    28b2:	28 30       	cpi	r18, 0x08	; 8
    28b4:	51 f1       	breq	.+84     	; 0x290a <__ultoa_invert+0x5c>
    28b6:	20 31       	cpi	r18, 0x10	; 16
    28b8:	81 f1       	breq	.+96     	; 0x291a <__ultoa_invert+0x6c>
    28ba:	e8 94       	clt
    28bc:	6f 93       	push	r22
    28be:	6e 7f       	andi	r22, 0xFE	; 254
    28c0:	6e 5f       	subi	r22, 0xFE	; 254
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	af 4f       	sbci	r26, 0xFF	; 255
    28ca:	b1 e0       	ldi	r27, 0x01	; 1
    28cc:	3e d0       	rcall	.+124    	; 0x294a <__ultoa_invert+0x9c>
    28ce:	b4 e0       	ldi	r27, 0x04	; 4
    28d0:	3c d0       	rcall	.+120    	; 0x294a <__ultoa_invert+0x9c>
    28d2:	67 0f       	add	r22, r23
    28d4:	78 1f       	adc	r23, r24
    28d6:	89 1f       	adc	r24, r25
    28d8:	9a 1f       	adc	r25, r26
    28da:	a1 1d       	adc	r26, r1
    28dc:	68 0f       	add	r22, r24
    28de:	79 1f       	adc	r23, r25
    28e0:	8a 1f       	adc	r24, r26
    28e2:	91 1d       	adc	r25, r1
    28e4:	a1 1d       	adc	r26, r1
    28e6:	6a 0f       	add	r22, r26
    28e8:	71 1d       	adc	r23, r1
    28ea:	81 1d       	adc	r24, r1
    28ec:	91 1d       	adc	r25, r1
    28ee:	a1 1d       	adc	r26, r1
    28f0:	20 d0       	rcall	.+64     	; 0x2932 <__ultoa_invert+0x84>
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <__ultoa_invert+0x48>
    28f4:	68 94       	set
    28f6:	3f 91       	pop	r19
    28f8:	2a e0       	ldi	r18, 0x0A	; 10
    28fa:	26 9f       	mul	r18, r22
    28fc:	11 24       	eor	r1, r1
    28fe:	30 19       	sub	r19, r0
    2900:	30 5d       	subi	r19, 0xD0	; 208
    2902:	31 93       	st	Z+, r19
    2904:	de f6       	brtc	.-74     	; 0x28bc <__ultoa_invert+0xe>
    2906:	cf 01       	movw	r24, r30
    2908:	08 95       	ret
    290a:	46 2f       	mov	r20, r22
    290c:	47 70       	andi	r20, 0x07	; 7
    290e:	40 5d       	subi	r20, 0xD0	; 208
    2910:	41 93       	st	Z+, r20
    2912:	b3 e0       	ldi	r27, 0x03	; 3
    2914:	0f d0       	rcall	.+30     	; 0x2934 <__ultoa_invert+0x86>
    2916:	c9 f7       	brne	.-14     	; 0x290a <__ultoa_invert+0x5c>
    2918:	f6 cf       	rjmp	.-20     	; 0x2906 <__ultoa_invert+0x58>
    291a:	46 2f       	mov	r20, r22
    291c:	4f 70       	andi	r20, 0x0F	; 15
    291e:	40 5d       	subi	r20, 0xD0	; 208
    2920:	4a 33       	cpi	r20, 0x3A	; 58
    2922:	18 f0       	brcs	.+6      	; 0x292a <__ultoa_invert+0x7c>
    2924:	49 5d       	subi	r20, 0xD9	; 217
    2926:	31 fd       	sbrc	r19, 1
    2928:	40 52       	subi	r20, 0x20	; 32
    292a:	41 93       	st	Z+, r20
    292c:	02 d0       	rcall	.+4      	; 0x2932 <__ultoa_invert+0x84>
    292e:	a9 f7       	brne	.-22     	; 0x291a <__ultoa_invert+0x6c>
    2930:	ea cf       	rjmp	.-44     	; 0x2906 <__ultoa_invert+0x58>
    2932:	b4 e0       	ldi	r27, 0x04	; 4
    2934:	a6 95       	lsr	r26
    2936:	97 95       	ror	r25
    2938:	87 95       	ror	r24
    293a:	77 95       	ror	r23
    293c:	67 95       	ror	r22
    293e:	ba 95       	dec	r27
    2940:	c9 f7       	brne	.-14     	; 0x2934 <__ultoa_invert+0x86>
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	61 05       	cpc	r22, r1
    2946:	71 05       	cpc	r23, r1
    2948:	08 95       	ret
    294a:	9b 01       	movw	r18, r22
    294c:	ac 01       	movw	r20, r24
    294e:	0a 2e       	mov	r0, r26
    2950:	06 94       	lsr	r0
    2952:	57 95       	ror	r21
    2954:	47 95       	ror	r20
    2956:	37 95       	ror	r19
    2958:	27 95       	ror	r18
    295a:	ba 95       	dec	r27
    295c:	c9 f7       	brne	.-14     	; 0x2950 <__ultoa_invert+0xa2>
    295e:	62 0f       	add	r22, r18
    2960:	73 1f       	adc	r23, r19
    2962:	84 1f       	adc	r24, r20
    2964:	95 1f       	adc	r25, r21
    2966:	a0 1d       	adc	r26, r0
    2968:	08 95       	ret

0000296a <_exit>:
    296a:	f8 94       	cli

0000296c <__stop_program>:
    296c:	ff cf       	rjmp	.-2      	; 0x296c <__stop_program>
