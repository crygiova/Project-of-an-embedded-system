
Industrial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f8  00800100  00003236  000032ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008003f8  008003f8  000035c2  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000006f9  00000000  00000000  000047f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003f1d  00000000  00000000  00004eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001eac  00000000  00000000  00008e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003acc  00000000  00000000  0000acb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005d0  00000000  00000000  0000e784  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bc0  00000000  00000000  0000ed54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000171a  00000000  00000000  0000f914  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000090a  00000000  00000000  0001102e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  00011938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_1>
       8:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_2>
       c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_3>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_15>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <myfont>:
      70:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
      80:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
      90:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
      a0:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
      b0:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
      c0:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
      d0:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
      e0:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
      f0:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
     100:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
     110:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
     120:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
     130:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
     140:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
     150:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
     160:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
     170:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
     180:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
     190:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
     1a0:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
     1b0:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
     1c0:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
     1d0:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
     1e0:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
     1f0:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
     200:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
     210:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
     220:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
     230:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
     240:	00 00 42 3c 08 00 04 02 04 02 00 00                 ..B<........

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	13 e0       	ldi	r17, 0x03	; 3
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e6 e3       	ldi	r30, 0x36	; 54
     260:	f2 e3       	ldi	r31, 0x32	; 50
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a8 3f       	cpi	r26, 0xF8	; 248
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	14 e0       	ldi	r17, 0x04	; 4
     270:	a8 ef       	ldi	r26, 0xF8	; 248
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	ae 30       	cpi	r26, 0x0E	; 14
     27a:	b1 07       	cpc	r27, r17
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <main>
     282:	0c 94 19 19 	jmp	0x3232	; 0x3232 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <readADC>:
uint8_t resultADC;
uint8_t flagADC;

volatile char* extADC = 0x1400;

void readADC(enum channelsADC channel){
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	0f 92       	push	r0
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	89 83       	std	Y+1, r24	; 0x01
	switch(channel){
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	91 05       	cpc	r25, r1
     2a0:	69 f0       	breq	.+26     	; 0x2bc <readADC+0x32>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	1c f4       	brge	.+6      	; 0x2ae <readADC+0x24>
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	81 f0       	breq	.+32     	; 0x2cc <readADC+0x42>
     2ac:	27 c0       	rjmp	.+78     	; 0x2fc <readADC+0x72>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	91 05       	cpc	r25, r1
     2b2:	a1 f0       	breq	.+40     	; 0x2dc <readADC+0x52>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	91 05       	cpc	r25, r1
     2b8:	c9 f0       	breq	.+50     	; 0x2ec <readADC+0x62>
     2ba:	20 c0       	rjmp	.+64     	; 0x2fc <readADC+0x72>
		case Y_AXIS:
			extADC[0] = 0x04;
     2bc:	80 91 00 01 	lds	r24, 0x0100
     2c0:	90 91 01 01 	lds	r25, 0x0101
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
			break;
     2ca:	1f c0       	rjmp	.+62     	; 0x30a <readADC+0x80>
		case X_AXIS:
			extADC[0] = 0x05;
     2cc:	80 91 00 01 	lds	r24, 0x0100
     2d0:	90 91 01 01 	lds	r25, 0x0101
     2d4:	25 e0       	ldi	r18, 0x05	; 5
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
			break;
     2da:	17 c0       	rjmp	.+46     	; 0x30a <readADC+0x80>
		case L_SLIDER:
			extADC[0] = 0x06;
     2dc:	80 91 00 01 	lds	r24, 0x0100
     2e0:	90 91 01 01 	lds	r25, 0x0101
     2e4:	26 e0       	ldi	r18, 0x06	; 6
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
			break; 
     2ea:	0f c0       	rjmp	.+30     	; 0x30a <readADC+0x80>
		case R_SLIDER: 
			extADC[0] = 0x07;
     2ec:	80 91 00 01 	lds	r24, 0x0100
     2f0:	90 91 01 01 	lds	r25, 0x0101
     2f4:	27 e0       	ldi	r18, 0x07	; 7
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
			break;
     2fa:	07 c0       	rjmp	.+14     	; 0x30a <readADC+0x80>
		default:
			extADC[0] = 0x00;
     2fc:	80 91 00 01 	lds	r24, 0x0100
     300:	90 91 01 01 	lds	r25, 0x0101
     304:	fc 01       	movw	r30, r24
     306:	10 82       	st	Z, r1
			break;
     308:	00 00       	nop
	}
	
	//_delay_ms(100); //TODO: interrupt
	//result = *extADC;
	}
     30a:	0f 90       	pop	r0
     30c:	cf 91       	pop	r28
     30e:	df 91       	pop	r29
     310:	08 95       	ret

00000312 <ADC_read>:

uint8_t ADC_read(enum channelsADC channel){
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	0f 92       	push	r0
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	89 83       	std	Y+1, r24	; 0x01
	readADC(channel);
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	0e 94 45 01 	call	0x28a	; 0x28a <readADC>
	while(!flagADC); //TODO: Make it less pooling-style
     324:	00 00       	nop
     326:	80 91 fc 03 	lds	r24, 0x03FC
     32a:	88 23       	and	r24, r24
     32c:	e1 f3       	breq	.-8      	; 0x326 <ADC_read+0x14>
	//printf("ADC[%d]: %d \n\r", channel, resultADC);
	flagADC = 0;
     32e:	10 92 fc 03 	sts	0x03FC, r1
	return resultADC;
     332:	80 91 fd 03 	lds	r24, 0x03FD
     336:	0f 90       	pop	r0
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <initCAN>:
#include "can.h"


volatile uint8_t flagMCP; //FLAG for MCP 

void initCAN(enum canMode mode){
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <initCAN+0x6>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t t;
	switch (mode){
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	91 05       	cpc	r25, r1
     354:	a9 f0       	breq	.+42     	; 0x380 <initCAN+0x42>
     356:	83 30       	cpi	r24, 0x03	; 3
     358:	91 05       	cpc	r25, r1
     35a:	34 f4       	brge	.+12     	; 0x368 <initCAN+0x2a>
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	59 f0       	breq	.+22     	; 0x376 <initCAN+0x38>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	91 05       	cpc	r25, r1
     364:	51 f0       	breq	.+20     	; 0x37a <initCAN+0x3c>
     366:	15 c0       	rjmp	.+42     	; 0x392 <initCAN+0x54>
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	91 05       	cpc	r25, r1
     36c:	61 f0       	breq	.+24     	; 0x386 <initCAN+0x48>
     36e:	84 30       	cpi	r24, 0x04	; 4
     370:	91 05       	cpc	r25, r1
     372:	61 f0       	breq	.+24     	; 0x38c <initCAN+0x4e>
     374:	0e c0       	rjmp	.+28     	; 0x392 <initCAN+0x54>
		case(NORMAL):
			t = 0x00;			
     376:	19 82       	std	Y+1, r1	; 0x01
			break;
     378:	0c c0       	rjmp	.+24     	; 0x392 <initCAN+0x54>
		case(SLEEP):
			t = 0x20;
     37a:	80 e2       	ldi	r24, 0x20	; 32
     37c:	89 83       	std	Y+1, r24	; 0x01
			break;
     37e:	09 c0       	rjmp	.+18     	; 0x392 <initCAN+0x54>
		case(LOOPBACK):
			t = 0x40;			
     380:	80 e4       	ldi	r24, 0x40	; 64
     382:	89 83       	std	Y+1, r24	; 0x01
			break;
     384:	06 c0       	rjmp	.+12     	; 0x392 <initCAN+0x54>
		case(LISTEN):
			t = 0x60;
     386:	80 e6       	ldi	r24, 0x60	; 96
     388:	89 83       	std	Y+1, r24	; 0x01
			break;		
     38a:	03 c0       	rjmp	.+6      	; 0x392 <initCAN+0x54>
		case(CONFIG):
			t = 0x80;
     38c:	80 e8       	ldi	r24, 0x80	; 128
     38e:	89 83       	std	Y+1, r24	; 0x01
			break;
     390:	00 00       	nop
	};
	
	writeMCP(MCP_CANCTRL,t); //Sets mode
     392:	8f e0       	ldi	r24, 0x0F	; 15
     394:	69 81       	ldd	r22, Y+1	; 0x01
     396:	0e 94 8b 09 	call	0x1316	; 0x1316 <writeMCP>
	writeMCP(MCP_RXB0CTRL, 0b01100000); //Disable all Filters buffer 0 //Todo, by names
     39a:	80 e6       	ldi	r24, 0x60	; 96
     39c:	60 e6       	ldi	r22, 0x60	; 96
     39e:	0e 94 8b 09 	call	0x1316	; 0x1316 <writeMCP>
	writeMCP(MCP_RXB1CTRL, 0b01100000); //Disable all Filters buffer 1
     3a2:	80 e7       	ldi	r24, 0x70	; 112
     3a4:	60 e6       	ldi	r22, 0x60	; 96
     3a6:	0e 94 8b 09 	call	0x1316	; 0x1316 <writeMCP>
	writeMCP(MCP_CANINTF,0x00); //Clear Pending Interrupts	
     3aa:	8c e2       	ldi	r24, 0x2C	; 44
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	0e 94 8b 09 	call	0x1316	; 0x1316 <writeMCP>
	writeMCP(MCP_CANINTE, 0x1C); //Enable reception interrupts on both buffers
     3b2:	8b e2       	ldi	r24, 0x2B	; 43
     3b4:	6c e1       	ldi	r22, 0x1C	; 28
     3b6:	0e 94 8b 09 	call	0x1316	; 0x1316 <writeMCP>
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	cf 91       	pop	r28
     3c0:	df 91       	pop	r29
     3c2:	08 95       	ret

000003c4 <sendCANJoy>:


void sendCANJoy(uint8_t buffer, struct joypos_t p, enum joydir_t d){
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	2f 97       	sbiw	r28, 0x0f	; 15
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	8c 87       	std	Y+12, r24	; 0x0c
     3e6:	7e 87       	std	Y+14, r23	; 0x0e
     3e8:	6d 87       	std	Y+13, r22	; 0x0d
     3ea:	4f 87       	std	Y+15, r20	; 0x0f
	struct canMessage message;
	
	message.id = JOY_MESSAGE;
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	89 83       	std	Y+1, r24	; 0x01
	message.size = 4;
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	8b 83       	std	Y+3, r24	; 0x03
	
	message.data[0] = p.x; //X component of the joy
     3f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     3fa:	8c 83       	std	Y+4, r24	; 0x04
	message.data[1] = p.y; //Y component of the joy
     3fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     3fe:	8d 83       	std	Y+5, r24	; 0x05
	message.data[2] = (uint8_t) d; //Direction according to the enum
     400:	8f 85       	ldd	r24, Y+15	; 0x0f
     402:	8e 83       	std	Y+6, r24	; 0x06
	message.data[3] = CAN_TERMINATION;
     404:	1f 82       	std	Y+7, r1	; 0x07

	
	fillTxBufferMCP(buffer,message);
     406:	8c 85       	ldd	r24, Y+12	; 0x0c
     408:	c9 80       	ldd	r12, Y+1	; 0x01
     40a:	da 80       	ldd	r13, Y+2	; 0x02
     40c:	eb 80       	ldd	r14, Y+3	; 0x03
     40e:	fc 80       	ldd	r15, Y+4	; 0x04
     410:	0d 81       	ldd	r16, Y+5	; 0x05
     412:	1e 81       	ldd	r17, Y+6	; 0x06
     414:	2f 81       	ldd	r18, Y+7	; 0x07
     416:	38 85       	ldd	r19, Y+8	; 0x08
     418:	49 85       	ldd	r20, Y+9	; 0x09
     41a:	5a 85       	ldd	r21, Y+10	; 0x0a
     41c:	6b 85       	ldd	r22, Y+11	; 0x0b
     41e:	0e 94 84 0b 	call	0x1708	; 0x1708 <fillTxBufferMCP>
	requestToSendMCP(buffer); 
     422:	8c 85       	ldd	r24, Y+12	; 0x0c
     424:	0e 94 ca 09 	call	0x1394	; 0x1394 <requestToSendMCP>
		
     428:	2f 96       	adiw	r28, 0x0f	; 15
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	08 95       	ret

00000446 <printMenu>:
														"Options",
														"Help"
	
};

void printMenu(uint8_t menuOption){
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	00 d0       	rcall	.+0      	; 0x44c <printMenu+0x6>
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     452:	19 82       	std	Y+1, r1	; 0x01
     454:	34 c0       	rjmp	.+104    	; 0x4be <printMenu+0x78>
		gotoCharOLED(c,0);
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
		if (c == menuOption) putInvertedSOLED(menu[c]);
     45e:	99 81       	ldd	r25, Y+1	; 0x01
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	98 17       	cp	r25, r24
     464:	a9 f4       	brne	.+42     	; 0x490 <printMenu+0x4a>
     466:	42 e0       	ldi	r20, 0x02	; 2
     468:	51 e0       	ldi	r21, 0x01	; 1
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	c9 01       	movw	r24, r18
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	82 0f       	add	r24, r18
     478:	93 1f       	adc	r25, r19
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	84 0f       	add	r24, r20
     488:	95 1f       	adc	r25, r21
     48a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <putInvertedSOLED>
     48e:	14 c0       	rjmp	.+40     	; 0x4b8 <printMenu+0x72>
		else putsOLED(menu[c]);
     490:	42 e0       	ldi	r20, 0x02	; 2
     492:	51 e0       	ldi	r21, 0x01	; 1
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	28 2f       	mov	r18, r24
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	c9 01       	movw	r24, r18
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	84 0f       	add	r24, r20
     4b2:	95 1f       	adc	r25, r21
     4b4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
	
};

void printMenu(uint8_t menuOption){
	uint8_t c;
	for ( c= 0; c < NUM_MENU_OPTIONS; c++) {
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	8f 5f       	subi	r24, 0xFF	; 255
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	83 30       	cpi	r24, 0x03	; 3
     4c2:	48 f2       	brcs	.-110    	; 0x456 <printMenu+0x10>
		gotoCharOLED(c,0);
		if (c == menuOption) putInvertedSOLED(menu[c]);
		else putsOLED(menu[c]);
	}
}
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <initExtMemIface>:

void initExtMemIface(){
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1 << SRE);
     4d6:	85 e5       	ldi	r24, 0x55	; 85
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	25 e5       	ldi	r18, 0x55	; 85
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	f9 01       	movw	r30, r18
     4e0:	20 81       	ld	r18, Z
     4e2:	20 68       	ori	r18, 0x80	; 128
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
}
     4e8:	cf 91       	pop	r28
     4ea:	df 91       	pop	r29
     4ec:	08 95       	ret

000004ee <initTimer>:

void initTimer(){ //It will raise a timer interrupt every aprox 10th of sec.
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	//TCCR1B = 0b00000101; //Set source and prescaler
	TCCR1B |= (1 << CS11);
     4f6:	8e e4       	ldi	r24, 0x4E	; 78
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2e e4       	ldi	r18, 0x4E	; 78
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	22 60       	ori	r18, 0x02	; 2
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18
	TIMSK  |= (1 << TOIE1); //Enable interrupt by overlfow
     508:	89 e5       	ldi	r24, 0x59	; 89
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	29 e5       	ldi	r18, 0x59	; 89
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	20 68       	ori	r18, 0x80	; 128
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
}
     51a:	cf 91       	pop	r28
     51c:	df 91       	pop	r29
     51e:	08 95       	ret

00000520 <stopTimer>:

void stopTimer(){
     520:	df 93       	push	r29
     522:	cf 93       	push	r28
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS11);
     528:	8e e4       	ldi	r24, 0x4E	; 78
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	2e e4       	ldi	r18, 0x4E	; 78
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	f9 01       	movw	r30, r18
     532:	20 81       	ld	r18, Z
     534:	2d 7f       	andi	r18, 0xFD	; 253
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
	
}
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <__vector_1>:




ISR(INT0_vect) //Interrupt routine for the ADC
{
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	8f 93       	push	r24
     54c:	9f 93       	push	r25
     54e:	ef 93       	push	r30
     550:	ff 93       	push	r31
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	resultADC = *extADC;
     55a:	80 91 00 01 	lds	r24, 0x0100
     55e:	90 91 01 01 	lds	r25, 0x0101
     562:	fc 01       	movw	r30, r24
     564:	80 81       	ld	r24, Z
     566:	80 93 fd 03 	sts	0x03FD, r24
	flagADC = 1;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 fc 03 	sts	0x03FC, r24
}	
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	9f 91       	pop	r25
     57a:	8f 91       	pop	r24
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_2>:

ISR(INT1_vect) //Interrupt routine for the Int1 (Joystick Button)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	8f 93       	push	r24
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
	flagJoyButton = 1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 fb 03 	sts	0x03FB, r24
}
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	8f 91       	pop	r24
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <__vector_3>:

ISR(INT2_vect) //Interrupt routine for the MCP2515 
{
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	2f 93       	push	r18
     5bc:	3f 93       	push	r19
     5be:	4f 93       	push	r20
     5c0:	5f 93       	push	r21
     5c2:	6f 93       	push	r22
     5c4:	7f 93       	push	r23
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
     5d2:	df 93       	push	r29
     5d4:	cf 93       	push	r28
     5d6:	0f 92       	push	r0
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	uint8_t mcp_flags;
	mcp_flags = readMCP(MCP_CANINTF);
     5dc:	8c e2       	ldi	r24, 0x2C	; 44
     5de:	0e 94 48 09 	call	0x1290	; 0x1290 <readMCP>
     5e2:	89 83       	std	Y+1, r24	; 0x01
	printf("Before Clearing: INTFs in MCP: %X \r\n", mcp_flags);
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	28 2f       	mov	r18, r24
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <__vector_3+0x3c>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <__vector_3+0x3e>
     5ee:	8d b7       	in	r24, 0x3d	; 61
     5f0:	9e b7       	in	r25, 0x3e	; 62
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	42 e9       	ldi	r20, 0x92	; 146
     5f6:	51 e0       	ldi	r21, 0x01	; 1
     5f8:	fc 01       	movw	r30, r24
     5fa:	51 83       	std	Z+1, r21	; 0x01
     5fc:	40 83       	st	Z, r20
     5fe:	fc 01       	movw	r30, r24
     600:	33 83       	std	Z+3, r19	; 0x03
     602:	22 83       	std	Z+2, r18	; 0x02
     604:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
	
	writeMCP(MCP_CANINTF,0x00); //Clear Flags
     610:	8c e2       	ldi	r24, 0x2C	; 44
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	0e 94 8b 09 	call	0x1316	; 0x1316 <writeMCP>
	
	mcp_flags = readMCP(MCP_CANINTF);
     618:	8c e2       	ldi	r24, 0x2C	; 44
     61a:	0e 94 48 09 	call	0x1290	; 0x1290 <readMCP>
     61e:	89 83       	std	Y+1, r24	; 0x01
	printf("After Clearing: INTFs in MCP: %X \r\n", mcp_flags);
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	28 2f       	mov	r18, r24
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	00 d0       	rcall	.+0      	; 0x628 <__vector_3+0x78>
     628:	00 d0       	rcall	.+0      	; 0x62a <__vector_3+0x7a>
     62a:	8d b7       	in	r24, 0x3d	; 61
     62c:	9e b7       	in	r25, 0x3e	; 62
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	47 eb       	ldi	r20, 0xB7	; 183
     632:	51 e0       	ldi	r21, 0x01	; 1
     634:	fc 01       	movw	r30, r24
     636:	51 83       	std	Z+1, r21	; 0x01
     638:	40 83       	st	Z, r20
     63a:	fc 01       	movw	r30, r24
     63c:	33 83       	std	Z+3, r19	; 0x03
     63e:	22 83       	std	Z+2, r18	; 0x02
     640:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0

	flagMCP = 1;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 fe 03 	sts	0x03FE, r24
	
}
     652:	0f 90       	pop	r0
     654:	cf 91       	pop	r28
     656:	df 91       	pop	r29
     658:	ff 91       	pop	r31
     65a:	ef 91       	pop	r30
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_15>:

ISR(TIMER1_OVF_vect)
{
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     690:	80 91 f8 03 	lds	r24, 0x03F8
     694:	90 91 f9 03 	lds	r25, 0x03F9
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 f9 03 	sts	0x03F9, r25
     69e:	80 93 f8 03 	sts	0x03F8, r24
	if( ticks >= 5 ) {
     6a2:	80 91 f8 03 	lds	r24, 0x03F8
     6a6:	90 91 f9 03 	lds	r25, 0x03F9
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	91 05       	cpc	r25, r1
     6ae:	18 f0       	brcs	.+6      	; 0x6b6 <__vector_15+0x3c>
			readControl = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 ff 03 	sts	0x03FF, r24
	}
}	
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	0f 90       	pop	r0
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	0f 90       	pop	r0
     6c4:	1f 90       	pop	r1
     6c6:	18 95       	reti

000006c8 <initInterrupts>:
 

void initInterrupts(){
     6c8:	df 93       	push	r29
     6ca:	cf 93       	push	r28
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= ~(1<<PD3); //Set INT1/PD3 as Input
     6d0:	81 e3       	ldi	r24, 0x31	; 49
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	21 e3       	ldi	r18, 0x31	; 49
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	27 7f       	andi	r18, 0xF7	; 247
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
	PORTD |= (1<<PD3); //Set pullup
     6e2:	82 e3       	ldi	r24, 0x32	; 50
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	22 e3       	ldi	r18, 0x32	; 50
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	28 60       	ori	r18, 0x08	; 8
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
	MCUCR |= 1<<ISC11; //Set interrupt on falling edge
     6f4:	85 e5       	ldi	r24, 0x55	; 85
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	25 e5       	ldi	r18, 0x55	; 85
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	28 60       	ori	r18, 0x08	; 8
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
	EMCUCR &= ~(1<<ISC2); //Set interrupt on 0 at INT2
     706:	86 e5       	ldi	r24, 0x56	; 86
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	26 e5       	ldi	r18, 0x56	; 86
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	20 81       	ld	r18, Z
     712:	2e 7f       	andi	r18, 0xFE	; 254
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
	GICR |= (1<<INT1);
     718:	8b e5       	ldi	r24, 0x5B	; 91
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2b e5       	ldi	r18, 0x5B	; 91
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	f9 01       	movw	r30, r18
     722:	20 81       	ld	r18, Z
     724:	20 68       	ori	r18, 0x80	; 128
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
	GICR |= (1<<INT0); 
     72a:	8b e5       	ldi	r24, 0x5B	; 91
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	2b e5       	ldi	r18, 0x5B	; 91
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	20 64       	ori	r18, 0x40	; 64
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
	GICR |= (1<<INT2); 
     73c:	8b e5       	ldi	r24, 0x5B	; 91
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	2b e5       	ldi	r18, 0x5B	; 91
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	f9 01       	movw	r30, r18
     746:	20 81       	ld	r18, Z
     748:	20 62       	ori	r18, 0x20	; 32
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
	sei();
     74e:	78 94       	sei
}
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <printHelp>:

void printHelp(){
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	df 93       	push	r29
     75c:	cf 93       	push	r28
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	2e 97       	sbiw	r28, 0x0e	; 14
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
	gotoCharOLED(0,0);
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
	putsOLED("Need help ?");
     776:	8b ed       	ldi	r24, 0xDB	; 219
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
	gotoCharOLED(1,0);
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
	putsOLED("Try google ...");
     786:	87 ee       	ldi	r24, 0xE7	; 231
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
	gotoCharOLED(2,0);
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
	putsOLED("or buy me beer");
     796:	86 ef       	ldi	r24, 0xF6	; 246
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e4       	ldi	r25, 0x40	; 64
     7a2:	ac e9       	ldi	r26, 0x9C	; 156
     7a4:	b5 e4       	ldi	r27, 0x45	; 69
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	ab 83       	std	Y+3, r26	; 0x03
     7ac:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ae:	69 81       	ldd	r22, Y+1	; 0x01
     7b0:	7a 81       	ldd	r23, Y+2	; 0x02
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	2a e9       	ldi	r18, 0x9A	; 154
     7b8:	39 e9       	ldi	r19, 0x99	; 153
     7ba:	49 e9       	ldi	r20, 0x99	; 153
     7bc:	54 e4       	ldi	r21, 0x44	; 68
     7be:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	8d 83       	std	Y+5, r24	; 0x05
     7c8:	9e 83       	std	Y+6, r25	; 0x06
     7ca:	af 83       	std	Y+7, r26	; 0x07
     7cc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7ce:	11 e0       	ldi	r17, 0x01	; 1
     7d0:	6d 81       	ldd	r22, Y+5	; 0x05
     7d2:	7e 81       	ldd	r23, Y+6	; 0x06
     7d4:	8f 81       	ldd	r24, Y+7	; 0x07
     7d6:	98 85       	ldd	r25, Y+8	; 0x08
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e8       	ldi	r20, 0x80	; 128
     7de:	5f e3       	ldi	r21, 0x3F	; 63
     7e0:	0e 94 2f 12 	call	0x245e	; 0x245e <__ltsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	0c f0       	brlt	.+2      	; 0x7ea <printHelp+0x94>
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	11 23       	and	r17, r17
     7ec:	29 f0       	breq	.+10     	; 0x7f8 <printHelp+0xa2>
		__ticks = 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	9a 87       	std	Y+10, r25	; 0x0a
     7f4:	89 87       	std	Y+9, r24	; 0x09
     7f6:	46 c0       	rjmp	.+140    	; 0x884 <printHelp+0x12e>
	else if (__tmp > 65535)
     7f8:	11 e0       	ldi	r17, 0x01	; 1
     7fa:	6d 81       	ldd	r22, Y+5	; 0x05
     7fc:	7e 81       	ldd	r23, Y+6	; 0x06
     7fe:	8f 81       	ldd	r24, Y+7	; 0x07
     800:	98 85       	ldd	r25, Y+8	; 0x08
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	3f ef       	ldi	r19, 0xFF	; 255
     806:	4f e7       	ldi	r20, 0x7F	; 127
     808:	57 e4       	ldi	r21, 0x47	; 71
     80a:	0e 94 cf 11 	call	0x239e	; 0x239e <__gtsf2>
     80e:	18 16       	cp	r1, r24
     810:	0c f0       	brlt	.+2      	; 0x814 <printHelp+0xbe>
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	11 23       	and	r17, r17
     816:	61 f1       	breq	.+88     	; 0x870 <printHelp+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     818:	69 81       	ldd	r22, Y+1	; 0x01
     81a:	7a 81       	ldd	r23, Y+2	; 0x02
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	9c 81       	ldd	r25, Y+4	; 0x04
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e2       	ldi	r20, 0x20	; 32
     826:	51 e4       	ldi	r21, 0x41	; 65
     828:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	bc 01       	movw	r22, r24
     832:	cd 01       	movw	r24, r26
     834:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9a 87       	std	Y+10, r25	; 0x0a
     83e:	89 87       	std	Y+9, r24	; 0x09
     840:	12 c0       	rjmp	.+36     	; 0x866 <printHelp+0x110>
     842:	8a e7       	ldi	r24, 0x7A	; 122
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9c 87       	std	Y+12, r25	; 0x0c
     848:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     84a:	8b 85       	ldd	r24, Y+11	; 0x0b
     84c:	9c 85       	ldd	r25, Y+12	; 0x0c
     84e:	8c 01       	movw	r16, r24
     850:	c8 01       	movw	r24, r16
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <printHelp+0xfc>
     856:	8c 01       	movw	r16, r24
     858:	1c 87       	std	Y+12, r17	; 0x0c
     85a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     85c:	89 85       	ldd	r24, Y+9	; 0x09
     85e:	9a 85       	ldd	r25, Y+10	; 0x0a
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	9a 87       	std	Y+10, r25	; 0x0a
     864:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	9a 85       	ldd	r25, Y+10	; 0x0a
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	51 f7       	brne	.-44     	; 0x842 <printHelp+0xec>
     86e:	17 c0       	rjmp	.+46     	; 0x89e <printHelp+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     870:	6d 81       	ldd	r22, Y+5	; 0x05
     872:	7e 81       	ldd	r23, Y+6	; 0x06
     874:	8f 81       	ldd	r24, Y+7	; 0x07
     876:	98 85       	ldd	r25, Y+8	; 0x08
     878:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	9a 87       	std	Y+10, r25	; 0x0a
     882:	89 87       	std	Y+9, r24	; 0x09
     884:	89 85       	ldd	r24, Y+9	; 0x09
     886:	9a 85       	ldd	r25, Y+10	; 0x0a
     888:	9e 87       	std	Y+14, r25	; 0x0e
     88a:	8d 87       	std	Y+13, r24	; 0x0d
     88c:	8d 85       	ldd	r24, Y+13	; 0x0d
     88e:	9e 85       	ldd	r25, Y+14	; 0x0e
     890:	8c 01       	movw	r16, r24
     892:	c8 01       	movw	r24, r16
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <printHelp+0x13e>
     898:	8c 01       	movw	r16, r24
     89a:	1e 87       	std	Y+14, r17	; 0x0e
     89c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(5000);
	clearOLED();
     89e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <clearOLED>
}
     8a2:	2e 96       	adiw	r28, 0x0e	; 14
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	cf 91       	pop	r28
     8b0:	df 91       	pop	r29
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	08 95       	ret

000008b8 <main>:


int main(void)
{
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	af 97       	sbiw	r28, 0x2f	; 47
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
	initUART(UBBR);
     8d8:	8f e1       	ldi	r24, 0x1F	; 31
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 3f 0c 	call	0x187e	; 0x187e <initUART>
	printf("Simple RAM TEST \r\n");
     8e0:	85 e0       	ldi	r24, 0x05	; 5
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
	initExtMemIface();
     8e8:	0e 94 67 02 	call	0x4ce	; 0x4ce <initExtMemIface>
	initTimer();
     8ec:	0e 94 77 02 	call	0x4ee	; 0x4ee <initTimer>
	initInterrupts();
     8f0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <initInterrupts>
	SRAM_test();
     8f4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <SRAM_test>
	joyInit();
     8f8:	0e 94 57 05 	call	0xaae	; 0xaae <joyInit>
	initOLED();
     8fc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <initOLED>
	initSPI();
     900:	0e 94 76 08 	call	0x10ec	; 0x10ec <initSPI>
	initCAN(NORMAL);
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 9f 01 	call	0x33e	; 0x33e <initCAN>
     90a:	01 c0       	rjmp	.+2      	; 0x90e <main+0x56>
			m0 = readRxBufferMCP(0);
			m1 = readRxBufferMCP(1);
			printf ("Buffer 0 ID: %d, Size: %d, Data: %s \r\n", m0.id, m0.size, m0.data);
			printf ("Buffer 1 ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
		}*/
	}
     90c:	00 00       	nop
	enum joydir_t d;
	struct canMessage m0,m1,m2s;

	 while(1){
		 
		 slide1Point=getSlidePosition(1);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <getSlidePosition>
     914:	80 93 03 04 	sts	0x0403, r24
		 slide2Point=getSlidePosition(2);
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <getSlidePosition>
     91e:	80 93 02 04 	sts	0x0402, r24
		 printf("SLIDE1 -> %d",slide1Point.x);
     922:	80 91 03 04 	lds	r24, 0x0403
     926:	28 2f       	mov	r18, r24
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	00 d0       	rcall	.+0      	; 0x92c <main+0x74>
     92c:	00 d0       	rcall	.+0      	; 0x92e <main+0x76>
     92e:	8d b7       	in	r24, 0x3d	; 61
     930:	9e b7       	in	r25, 0x3e	; 62
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	47 e1       	ldi	r20, 0x17	; 23
     936:	52 e0       	ldi	r21, 0x02	; 2
     938:	fc 01       	movw	r30, r24
     93a:	51 83       	std	Z+1, r21	; 0x01
     93c:	40 83       	st	Z, r20
     93e:	fc 01       	movw	r30, r24
     940:	33 83       	std	Z+3, r19	; 0x03
     942:	22 83       	std	Z+2, r18	; 0x02
     944:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
		 printf("SLIDE2 -> %d",slide2Point.x);
     950:	80 91 02 04 	lds	r24, 0x0402
     954:	28 2f       	mov	r18, r24
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	00 d0       	rcall	.+0      	; 0x95a <main+0xa2>
     95a:	00 d0       	rcall	.+0      	; 0x95c <main+0xa4>
     95c:	8d b7       	in	r24, 0x3d	; 61
     95e:	9e b7       	in	r25, 0x3e	; 62
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	44 e2       	ldi	r20, 0x24	; 36
     964:	52 e0       	ldi	r21, 0x02	; 2
     966:	fc 01       	movw	r30, r24
     968:	51 83       	std	Z+1, r21	; 0x01
     96a:	40 83       	st	Z, r20
     96c:	fc 01       	movw	r30, r24
     96e:	33 83       	std	Z+3, r19	; 0x03
     970:	22 83       	std	Z+2, r18	; 0x02
     972:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
		if (readControl) {
     97e:	80 91 ff 03 	lds	r24, 0x03FF
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <main+0xd0>
     986:	3f c0       	rjmp	.+126    	; 0xa06 <main+0x14e>
			readControl = 0;
     988:	10 92 ff 03 	sts	0x03FF, r1
			
			d = getJoyDirection();
     98c:	0e 94 94 05 	call	0xb28	; 0xb28 <getJoyDirection>
     990:	89 83       	std	Y+1, r24	; 0x01
			p = getJoyPosition();
     992:	0e 94 68 05 	call	0xad0	; 0xad0 <getJoyPosition>
     996:	9b 83       	std	Y+3, r25	; 0x03
     998:	8a 83       	std	Y+2, r24	; 0x02
		    sendCANJoy(2,p,d);
     99a:	2a 81       	ldd	r18, Y+2	; 0x02
     99c:	3b 81       	ldd	r19, Y+3	; 0x03
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	b9 01       	movw	r22, r18
     9a2:	49 81       	ldd	r20, Y+1	; 0x01
     9a4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sendCANJoy>
			if (d == TOP || d == RIGHT_TOP || d == LEFT_TOP) menuOption = (menuOption-1)%NUM_MENU_OPTIONS;
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	84 30       	cpi	r24, 0x04	; 4
     9ac:	31 f0       	breq	.+12     	; 0x9ba <main+0x102>
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	83 30       	cpi	r24, 0x03	; 3
     9b2:	19 f0       	breq	.+6      	; 0x9ba <main+0x102>
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	69 f4       	brne	.+26     	; 0x9d4 <main+0x11c>
     9ba:	80 91 fa 03 	lds	r24, 0x03FA
     9be:	88 2f       	mov	r24, r24
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	23 e0       	ldi	r18, 0x03	; 3
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	b9 01       	movw	r22, r18
     9ca:	0e 94 41 14 	call	0x2882	; 0x2882 <__divmodhi4>
     9ce:	80 93 fa 03 	sts	0x03FA, r24
     9d2:	15 c0       	rjmp	.+42     	; 0x9fe <main+0x146>
			else if (d == BOTTOM || d == RIGHT_BOTTOM|| d == LEFT_BOTTOM) menuOption = (menuOption+1)%NUM_MENU_OPTIONS;
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	85 30       	cpi	r24, 0x05	; 5
     9d8:	31 f0       	breq	.+12     	; 0x9e6 <main+0x12e>
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	19 f0       	breq	.+6      	; 0x9e6 <main+0x12e>
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	88 23       	and	r24, r24
     9e4:	61 f4       	brne	.+24     	; 0x9fe <main+0x146>
     9e6:	80 91 fa 03 	lds	r24, 0x03FA
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	23 e0       	ldi	r18, 0x03	; 3
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	b9 01       	movw	r22, r18
     9f6:	0e 94 41 14 	call	0x2882	; 0x2882 <__divmodhi4>
     9fa:	80 93 fa 03 	sts	0x03FA, r24
			printMenu(menuOption);
     9fe:	80 91 fa 03 	lds	r24, 0x03FA
     a02:	0e 94 23 02 	call	0x446	; 0x446 <printMenu>
		}
		if (flagJoyButton) {
     a06:	80 91 fb 03 	lds	r24, 0x03FB
     a0a:	88 23       	and	r24, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <main+0x158>
     a0e:	7e cf       	rjmp	.-260    	; 0x90c <main+0x54>
		
			m2s.id = JOY_BUTTON;
     a10:	8b e0       	ldi	r24, 0x0B	; 11
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	9b 8f       	std	Y+27, r25	; 0x1b
     a16:	8a 8f       	std	Y+26, r24	; 0x1a
			m2s.size = 0;
     a18:	1c 8e       	std	Y+28, r1	; 0x1c
			printf("Sending joy bu\r\n");
     a1a:	81 e3       	ldi	r24, 0x31	; 49
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
			fillTxBufferMCP(0,m2s);
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	ca 8c       	ldd	r12, Y+26	; 0x1a
     a26:	db 8c       	ldd	r13, Y+27	; 0x1b
     a28:	ec 8c       	ldd	r14, Y+28	; 0x1c
     a2a:	fd 8c       	ldd	r15, Y+29	; 0x1d
     a2c:	0e 8d       	ldd	r16, Y+30	; 0x1e
     a2e:	1f 8d       	ldd	r17, Y+31	; 0x1f
     a30:	28 a1       	ldd	r18, Y+32	; 0x20
     a32:	39 a1       	ldd	r19, Y+33	; 0x21
     a34:	4a a1       	ldd	r20, Y+34	; 0x22
     a36:	5b a1       	ldd	r21, Y+35	; 0x23
     a38:	6c a1       	ldd	r22, Y+36	; 0x24
     a3a:	0e 94 84 0b 	call	0x1708	; 0x1708 <fillTxBufferMCP>
			requestToSendMCP(0);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 ca 09 	call	0x1394	; 0x1394 <requestToSendMCP>
		
			struct canMessage m2s;
			flagJoyButton = 0;
     a44:	10 92 fb 03 	sts	0x03FB, r1
			gotoCharOLED(7,0);
     a48:	87 e0       	ldi	r24, 0x07	; 7
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
			putsOLED("                        "); //Cleans last selected option from screen
     a50:	81 e4       	ldi	r24, 0x41	; 65
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
			switch(menuOption){
     a58:	80 91 fa 03 	lds	r24, 0x03FA
     a5c:	88 2f       	mov	r24, r24
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	91 05       	cpc	r25, r1
     a64:	71 f0       	breq	.+28     	; 0xa82 <main+0x1ca>
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	91 05       	cpc	r25, r1
     a6a:	a1 f0       	breq	.+40     	; 0xa94 <main+0x1dc>
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a9 f4       	brne	.+42     	; 0xa9a <main+0x1e2>
				case 0: //Play
					gotoCharOLED(7,0);
     a70:	87 e0       	ldi	r24, 0x07	; 7
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
					putsOLED("PLAY");
     a78:	8a e5       	ldi	r24, 0x5A	; 90
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
					break;
     a80:	15 c0       	rjmp	.+42     	; 0xaac <main+0x1f4>
					
			   case 1: //Options
					gotoCharOLED(7,0);
     a82:	87 e0       	ldi	r24, 0x07	; 7
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
					putsOLED("OPTIONS");
     a8a:	8f e5       	ldi	r24, 0x5F	; 95
     a8c:	92 e0       	ldi	r25, 0x02	; 2
     a8e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
					break;
     a92:	0c c0       	rjmp	.+24     	; 0xaac <main+0x1f4>
					
			   case 2: //Help
					printHelp();
     a94:	0e 94 ab 03 	call	0x756	; 0x756 <printHelp>
					break;
     a98:	09 c0       	rjmp	.+18     	; 0xaac <main+0x1f4>
					
			  default:
					gotoCharOLED(7,0);
     a9a:	87 e0       	ldi	r24, 0x07	; 7
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gotoCharOLED>
					putsOLED("Stick to the OPTIONS !!!");
     aa2:	87 e6       	ldi	r24, 0x67	; 103
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <putsOLED>
					break;
     aaa:	00 00       	nop
			m0 = readRxBufferMCP(0);
			m1 = readRxBufferMCP(1);
			printf ("Buffer 0 ID: %d, Size: %d, Data: %s \r\n", m0.id, m0.size, m0.data);
			printf ("Buffer 1 ID: %d, Size: %d, Data: %s \r\n", m1.id, m1.size, m1.data);
		}*/
	}
     aac:	30 cf       	rjmp	.-416    	; 0x90e <main+0x56>

00000aae <joyInit>:

struct slidepos_t slide1Point; //Will be initialized in runtime
struct slidepos_t slide2Point; //Will be initialized in runtime


void joyInit(){
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	mPoint.x = ADC_read(X_AXIS);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     abc:	80 93 00 04 	sts	0x0400, r24
	mPoint.y = ADC_read(Y_AXIS);
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     ac6:	80 93 01 04 	sts	0x0401, r24
}
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <getJoyPosition>:

struct joypos_t getJoyPosition(){
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <getJoyPosition+0x6>
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
	r.x = ADC_read(X_AXIS);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     ae0:	89 83       	std	Y+1, r24	; 0x01
	r.y = ADC_read(Y_AXIS);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     ae8:	8a 83       	std	Y+2, r24	; 0x02
	return r;	
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	cf 91       	pop	r28
     af4:	df 91       	pop	r29
     af6:	08 95       	ret

00000af8 <getSlidePosition>:


struct slidepos_t getSlidePosition(uint8_t number)//returns the slider position
{
     af8:	df 93       	push	r29
     afa:	cf 93       	push	r28
     afc:	00 d0       	rcall	.+0      	; 0xafe <getSlidePosition+0x6>
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	8a 83       	std	Y+2, r24	; 0x02
	struct slidepos_t r;
	if(number==1)//if number is 1 we read the first slider
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	29 f4       	brne	.+10     	; 0xb14 <getSlidePosition+0x1c>
	{
		r.x=ADC_read(L_SLIDER);
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <getSlidePosition+0x24>
	}
	else//we read the second one
	{
		r.x=ADC_read(R_SLIDER);
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	0e 94 89 01 	call	0x312	; 0x312 <ADC_read>
     b1a:	89 83       	std	Y+1, r24	; 0x01
	}	
	return r;
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <getJoyDirection>:

enum joydir_t getJoyDirection(){
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <getJoyDirection+0x6>
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
	struct joypos_t r;
    r = getJoyPosition();
     b32:	0e 94 68 05 	call	0xad0	; 0xad0 <getJoyPosition>
     b36:	9a 83       	std	Y+2, r25	; 0x02
     b38:	89 83       	std	Y+1, r24	; 0x01
	if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) return CENTER;
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	28 2f       	mov	r18, r24
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	80 91 00 04 	lds	r24, 0x0400
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	a9 01       	movw	r20, r18
     b4a:	48 1b       	sub	r20, r24
     b4c:	59 0b       	sbc	r21, r25
     b4e:	ca 01       	movw	r24, r20
     b50:	5f ef       	ldi	r21, 0xFF	; 255
     b52:	88 3e       	cpi	r24, 0xE8	; 232
     b54:	95 07       	cpc	r25, r21
     b56:	6c f1       	brlt	.+90     	; 0xbb2 <getJoyDirection+0x8a>
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 91 00 04 	lds	r24, 0x0400
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a9 01       	movw	r20, r18
     b68:	48 1b       	sub	r20, r24
     b6a:	59 0b       	sbc	r21, r25
     b6c:	ca 01       	movw	r24, r20
     b6e:	89 31       	cpi	r24, 0x19	; 25
     b70:	91 05       	cpc	r25, r1
     b72:	fc f4       	brge	.+62     	; 0xbb2 <getJoyDirection+0x8a>
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	80 91 01 04 	lds	r24, 0x0401
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a9 01       	movw	r20, r18
     b84:	48 1b       	sub	r20, r24
     b86:	59 0b       	sbc	r21, r25
     b88:	ca 01       	movw	r24, r20
     b8a:	5f ef       	ldi	r21, 0xFF	; 255
     b8c:	88 3e       	cpi	r24, 0xE8	; 232
     b8e:	95 07       	cpc	r25, r21
     b90:	84 f0       	brlt	.+32     	; 0xbb2 <getJoyDirection+0x8a>
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	80 91 01 04 	lds	r24, 0x0401
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	48 1b       	sub	r20, r24
     ba4:	59 0b       	sbc	r21, r25
     ba6:	ca 01       	movw	r24, r20
     ba8:	89 31       	cpi	r24, 0x19	; 25
     baa:	91 05       	cpc	r25, r1
     bac:	14 f4       	brge	.+4      	; 0xbb2 <getJoyDirection+0x8a>
     bae:	88 e0       	ldi	r24, 0x08	; 8
     bb0:	7d c0       	rjmp	.+250    	; 0xcac <getJoyDirection+0x184>
	else {
		if (abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && !abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	80 91 00 04 	lds	r24, 0x0400
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a9 01       	movw	r20, r18
     bc2:	48 1b       	sub	r20, r24
     bc4:	59 0b       	sbc	r21, r25
     bc6:	ca 01       	movw	r24, r20
     bc8:	5f ef       	ldi	r21, 0xFF	; 255
     bca:	88 3e       	cpi	r24, 0xE8	; 232
     bcc:	95 07       	cpc	r25, r21
     bce:	bc f0       	brlt	.+46     	; 0xbfe <getJoyDirection+0xd6>
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	80 91 00 04 	lds	r24, 0x0400
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a9 01       	movw	r20, r18
     be0:	48 1b       	sub	r20, r24
     be2:	59 0b       	sbc	r21, r25
     be4:	ca 01       	movw	r24, r20
     be6:	89 31       	cpi	r24, 0x19	; 25
     be8:	91 05       	cpc	r25, r1
     bea:	4c f4       	brge	.+18     	; 0xbfe <getJoyDirection+0xd6>
			if (r.y > mPoint.y) return TOP;
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	80 91 01 04 	lds	r24, 0x0401
     bf2:	89 17       	cp	r24, r25
     bf4:	10 f4       	brcc	.+4      	; 0xbfa <getJoyDirection+0xd2>
     bf6:	84 e0       	ldi	r24, 0x04	; 4
     bf8:	59 c0       	rjmp	.+178    	; 0xcac <getJoyDirection+0x184>
			else return BOTTOM;
     bfa:	85 e0       	ldi	r24, 0x05	; 5
     bfc:	57 c0       	rjmp	.+174    	; 0xcac <getJoyDirection+0x184>
		}
		if (!abs(r.x-mPoint.x) < JOYSTICK_DEADZONE && abs(r.y-mPoint.y) < JOYSTICK_DEADZONE) {
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	80 91 01 04 	lds	r24, 0x0401
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a9 01       	movw	r20, r18
     c0e:	48 1b       	sub	r20, r24
     c10:	59 0b       	sbc	r21, r25
     c12:	ca 01       	movw	r24, r20
     c14:	5f ef       	ldi	r21, 0xFF	; 255
     c16:	88 3e       	cpi	r24, 0xE8	; 232
     c18:	95 07       	cpc	r25, r21
     c1a:	bc f0       	brlt	.+46     	; 0xc4a <getJoyDirection+0x122>
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	80 91 01 04 	lds	r24, 0x0401
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a9 01       	movw	r20, r18
     c2c:	48 1b       	sub	r20, r24
     c2e:	59 0b       	sbc	r21, r25
     c30:	ca 01       	movw	r24, r20
     c32:	89 31       	cpi	r24, 0x19	; 25
     c34:	91 05       	cpc	r25, r1
     c36:	4c f4       	brge	.+18     	; 0xc4a <getJoyDirection+0x122>
			if (r.x > mPoint.x) return RIGHT;
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	80 91 00 04 	lds	r24, 0x0400
     c3e:	89 17       	cp	r24, r25
     c40:	10 f4       	brcc	.+4      	; 0xc46 <getJoyDirection+0x11e>
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	33 c0       	rjmp	.+102    	; 0xcac <getJoyDirection+0x184>
			else return LEFT;
     c46:	86 e0       	ldi	r24, 0x06	; 6
     c48:	31 c0       	rjmp	.+98     	; 0xcac <getJoyDirection+0x184>
		} 
		if (r.x < mPoint.x && r.y < mPoint.y) return LEFT_BOTTOM; 
     c4a:	99 81       	ldd	r25, Y+1	; 0x01
     c4c:	80 91 00 04 	lds	r24, 0x0400
     c50:	98 17       	cp	r25, r24
     c52:	38 f4       	brcc	.+14     	; 0xc62 <getJoyDirection+0x13a>
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	80 91 01 04 	lds	r24, 0x0401
     c5a:	98 17       	cp	r25, r24
     c5c:	10 f4       	brcc	.+4      	; 0xc62 <getJoyDirection+0x13a>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	25 c0       	rjmp	.+74     	; 0xcac <getJoyDirection+0x184>
		if (r.x < mPoint.x && r.y > mPoint.y) return LEFT_TOP;
     c62:	99 81       	ldd	r25, Y+1	; 0x01
     c64:	80 91 00 04 	lds	r24, 0x0400
     c68:	98 17       	cp	r25, r24
     c6a:	38 f4       	brcc	.+14     	; 0xc7a <getJoyDirection+0x152>
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	80 91 01 04 	lds	r24, 0x0401
     c72:	89 17       	cp	r24, r25
     c74:	10 f4       	brcc	.+4      	; 0xc7a <getJoyDirection+0x152>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	19 c0       	rjmp	.+50     	; 0xcac <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y < mPoint.y) return RIGHT_BOTTOM;
     c7a:	99 81       	ldd	r25, Y+1	; 0x01
     c7c:	80 91 00 04 	lds	r24, 0x0400
     c80:	89 17       	cp	r24, r25
     c82:	38 f4       	brcc	.+14     	; 0xc92 <getJoyDirection+0x16a>
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	80 91 01 04 	lds	r24, 0x0401
     c8a:	98 17       	cp	r25, r24
     c8c:	10 f4       	brcc	.+4      	; 0xc92 <getJoyDirection+0x16a>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	0d c0       	rjmp	.+26     	; 0xcac <getJoyDirection+0x184>
		if (r.x > mPoint.x && r.y > mPoint.y) return RIGHT_TOP;
     c92:	99 81       	ldd	r25, Y+1	; 0x01
     c94:	80 91 00 04 	lds	r24, 0x0400
     c98:	89 17       	cp	r24, r25
     c9a:	38 f4       	brcc	.+14     	; 0xcaa <getJoyDirection+0x182>
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	80 91 01 04 	lds	r24, 0x0401
     ca2:	89 17       	cp	r24, r25
     ca4:	10 f4       	brcc	.+4      	; 0xcaa <getJoyDirection+0x182>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <getJoyDirection+0x184>
	}
	
	return CENTER; //In case of error return inhert NEVER USED
     caa:	88 e0       	ldi	r24, 0x08	; 8
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <printdir>:



	
	void printdir(enum joydir_t d) {
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	89 83       	std	Y+1, r24	; 0x01
		switch (d){
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	91 05       	cpc	r25, r1
     ccc:	01 f1       	breq	.+64     	; 0xd0e <printdir+0x58>
     cce:	85 30       	cpi	r24, 0x05	; 5
     cd0:	91 05       	cpc	r25, r1
     cd2:	84 f4       	brge	.+32     	; 0xcf4 <printdir+0x3e>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	91 05       	cpc	r25, r1
     cd8:	c1 f1       	breq	.+112    	; 0xd4a <printdir+0x94>
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	91 05       	cpc	r25, r1
     cde:	1c f4       	brge	.+6      	; 0xce6 <printdir+0x30>
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	c1 f1       	breq	.+112    	; 0xd54 <printdir+0x9e>
     ce4:	41 c0       	rjmp	.+130    	; 0xd68 <printdir+0xb2>
     ce6:	82 30       	cpi	r24, 0x02	; 2
     ce8:	91 05       	cpc	r25, r1
     cea:	29 f1       	breq	.+74     	; 0xd36 <printdir+0x80>
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	39 f1       	breq	.+78     	; 0xd40 <printdir+0x8a>
     cf2:	3a c0       	rjmp	.+116    	; 0xd68 <printdir+0xb2>
     cf4:	86 30       	cpi	r24, 0x06	; 6
     cf6:	91 05       	cpc	r25, r1
     cf8:	a1 f0       	breq	.+40     	; 0xd22 <printdir+0x6c>
     cfa:	86 30       	cpi	r24, 0x06	; 6
     cfc:	91 05       	cpc	r25, r1
     cfe:	64 f0       	brlt	.+24     	; 0xd18 <printdir+0x62>
     d00:	87 30       	cpi	r24, 0x07	; 7
     d02:	91 05       	cpc	r25, r1
     d04:	99 f0       	breq	.+38     	; 0xd2c <printdir+0x76>
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	91 05       	cpc	r25, r1
     d0a:	49 f1       	breq	.+82     	; 0xd5e <printdir+0xa8>
     d0c:	2d c0       	rjmp	.+90     	; 0xd68 <printdir+0xb2>
			case TOP: printf("TOP \r\n"); break;
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d16:	28 c0       	rjmp	.+80     	; 0xd68 <printdir+0xb2>
			case BOTTOM: printf("BOTTOM \r\n"); break;
     d18:	86 e8       	ldi	r24, 0x86	; 134
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d20:	23 c0       	rjmp	.+70     	; 0xd68 <printdir+0xb2>
			case LEFT: printf("LEFT \r\n"); break;
     d22:	8f e8       	ldi	r24, 0x8F	; 143
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d2a:	1e c0       	rjmp	.+60     	; 0xd68 <printdir+0xb2>
			case RIGHT: printf("RIGHT \r\n"); break;
     d2c:	86 e9       	ldi	r24, 0x96	; 150
     d2e:	92 e0       	ldi	r25, 0x02	; 2
     d30:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d34:	19 c0       	rjmp	.+50     	; 0xd68 <printdir+0xb2>
			case RIGHT_BOTTOM: printf("RIGHT_BOTTOM \r\n"); break;
     d36:	8e e9       	ldi	r24, 0x9E	; 158
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <printdir+0xb2>
			case RIGHT_TOP: printf("RIGHT_TOP \r\n"); break;
     d40:	8d ea       	ldi	r24, 0xAD	; 173
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <printdir+0xb2>
			case LEFT_TOP: printf("LEFT_TOP \r\n"); break;
     d4a:	89 eb       	ldi	r24, 0xB9	; 185
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d52:	0a c0       	rjmp	.+20     	; 0xd68 <printdir+0xb2>
			case LEFT_BOTTOM: printf("LEFT_BOTTOM \r\n"); break;
     d54:	84 ec       	ldi	r24, 0xC4	; 196
     d56:	92 e0       	ldi	r25, 0x02	; 2
     d58:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <printdir+0xb2>
			case CENTER: printf("SENTRUM \r\n"); break;	
     d5e:	82 ed       	ldi	r24, 0xD2	; 210
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>
     d66:	00 00       	nop
		}	
		
	}
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <writeDataOLED>:
#include "font_5x7.h"

volatile char* extDataOled = 0x1242; //Adress for the Data reg of the OLED DC=0       0b0001 0010 0100 0010
volatile char* extCommandOled = 0x1001; //Adress for the Command reg of the OLED DC=1 0b0001 0000 0000 0001

void writeDataOLED(uint8_t c){
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	*extDataOled = c;
     d7c:	80 91 dc 02 	lds	r24, 0x02DC
     d80:	90 91 dd 02 	lds	r25, 0x02DD
     d84:	29 81       	ldd	r18, Y+1	; 0x01
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
}
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <writeCommandOLED>:

void writeCommandOLED(uint8_t c){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	89 83       	std	Y+1, r24	; 0x01
	*extCommandOled = c;
     d9e:	80 91 de 02 	lds	r24, 0x02DE
     da2:	90 91 df 02 	lds	r25, 0x02DF
     da6:	29 81       	ldd	r18, Y+1	; 0x01
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
}
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <initOLED>:

void initOLED()
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
    writeCommandOLED(0xae); // display off
     dbc:	8e ea       	ldi	r24, 0xAE	; 174
     dbe:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xa1); //segment remap
     dc2:	81 ea       	ldi	r24, 0xA1	; 161
     dc4:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xda); //common pads hardware: alternative
     dc8:	8a ed       	ldi	r24, 0xDA	; 218
     dca:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x12);
     dce:	82 e1       	ldi	r24, 0x12	; 18
     dd0:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xc8); //common output scan direction:com63~com0
     dd4:	88 ec       	ldi	r24, 0xC8	; 200
     dd6:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xa8); //multiplex ration mode:63
     dda:	88 ea       	ldi	r24, 0xA8	; 168
     ddc:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x3f);
     de0:	8f e3       	ldi	r24, 0x3F	; 63
     de2:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xd5); //display divide ratio/osc. freq. mode
     de6:	85 ed       	ldi	r24, 0xD5	; 213
     de8:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x80);
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x81); //contrast control
     df2:	81 e8       	ldi	r24, 0x81	; 129
     df4:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x50);
     df8:	80 e5       	ldi	r24, 0x50	; 80
     dfa:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xd9); //set pre-charge period
     dfe:	89 ed       	ldi	r24, 0xD9	; 217
     e00:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x21);
     e04:	81 e2       	ldi	r24, 0x21	; 33
     e06:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x20); //Set Memory Addressing Mode
     e0a:	80 e2       	ldi	r24, 0x20	; 32
     e0c:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x00); // horizontal
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xdb); //VCOM deselect level mode
     e16:	8b ed       	ldi	r24, 0xDB	; 219
     e18:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x30);
     e1c:	80 e3       	ldi	r24, 0x30	; 48
     e1e:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xad); //master configuration
     e22:	8d ea       	ldi	r24, 0xAD	; 173
     e24:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0x00);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>

    //oled_home();
    writeCommandOLED(0x21); //Set column
     e2e:	81 e2       	ldi	r24, 0x21	; 33
     e30:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x00);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x7F);
     e3a:	8f e7       	ldi	r24, 0x7F	; 127
     e3c:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	
	writeCommandOLED(0x22); //Set row
     e40:	82 e2       	ldi	r24, 0x22	; 34
     e42:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x00);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x07);
     e4c:	87 e0       	ldi	r24, 0x07	; 7
     e4e:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	
	writeCommandOLED(0x40); //Set start line to 0th
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>

    writeCommandOLED(0xa4); //out follows RAM content
     e58:	84 ea       	ldi	r24, 0xA4	; 164
     e5a:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xa6); //set normal display
     e5e:	86 ea       	ldi	r24, 0xA6	; 166
     e60:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
    writeCommandOLED(0xaf); // display on
     e64:	8f ea       	ldi	r24, 0xAF	; 175
     e66:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	
	clearOLED();
     e6a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <clearOLED>
	
	
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <invertModeOLED>:


void invertModeOLED() {
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa7);	
     e7c:	87 ea       	ldi	r24, 0xA7	; 167
     e7e:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <normalModeOLED>:

void normalModeOLED() {
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	writeCommandOLED(0xa6);	
     e90:	86 ea       	ldi	r24, 0xA6	; 166
     e92:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <gotoCharOLED>:

//Treats the OLED as a display char of 25 characters long by 8 lines
//It will write from the given position to the end of the line and display
void gotoCharOLED(char line, char pos){
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <gotoCharOLED+0x6>
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     eaa:	81 e2       	ldi	r24, 0x21	; 33
     eac:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(pos*5);
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	98 2f       	mov	r25, r24
     eb4:	99 0f       	add	r25, r25
     eb6:	99 0f       	add	r25, r25
     eb8:	89 0f       	add	r24, r25
     eba:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x7F);
     ebe:	8f e7       	ldi	r24, 0x7F	; 127
     ec0:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     ec4:	82 e2       	ldi	r24, 0x22	; 34
     ec6:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(line);
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x07);
     ed0:	87 e0       	ldi	r24, 0x07	; 7
     ed2:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <gotoPosOLED>:

void gotoPosOLED(char x, char y){
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <gotoPosOLED+0x6>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	6a 83       	std	Y+2, r22	; 0x02
	writeCommandOLED(0x21);
     eee:	81 e2       	ldi	r24, 0x21	; 33
     ef0:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(x);
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x7F);
     efa:	8f e7       	ldi	r24, 0x7F	; 127
     efc:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	
	writeCommandOLED(0x22);
     f00:	82 e2       	ldi	r24, 0x22	; 34
     f02:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(y);
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
	writeCommandOLED(0x07);
     f0c:	87 e0       	ldi	r24, 0x07	; 7
     f0e:	0e 94 c9 06 	call	0xd92	; 0xd92 <writeCommandOLED>
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <putsOLED>:

void putsOLED(char* s){
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <putsOLED+0x6>
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	9b 83       	std	Y+3, r25	; 0x03
     f2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putcOLED(s[counter]);
     f2c:	19 82       	std	Y+1, r1	; 0x01
     f2e:	0e c0       	rjmp	.+28     	; 0xf4c <putsOLED+0x30>
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	2a 81       	ldd	r18, Y+2	; 0x02
     f38:	3b 81       	ldd	r19, Y+3	; 0x03
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	fc 01       	movw	r30, r24
     f40:	80 81       	ld	r24, Z
     f42:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <putcOLED>
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	2a 81       	ldd	r18, Y+2	; 0x02
     f54:	3b 81       	ldd	r19, Y+3	; 0x03
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	88 23       	and	r24, r24
     f60:	39 f7       	brne	.-50     	; 0xf30 <putsOLED+0x14>
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <putInvertedSOLED>:

void putInvertedSOLED(char* s){
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <putInvertedSOLED+0x6>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9b 83       	std	Y+3, r25	; 0x03
     f7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter;
	for(counter = 0; s[counter] !=  '\0'; counter++) putInvertedCOLED(s[counter]);
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	0e c0       	rjmp	.+28     	; 0xf9e <putInvertedSOLED+0x30>
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	2a 81       	ldd	r18, Y+2	; 0x02
     f8a:	3b 81       	ldd	r19, Y+3	; 0x03
     f8c:	82 0f       	add	r24, r18
     f8e:	93 1f       	adc	r25, r19
     f90:	fc 01       	movw	r30, r24
     f92:	80 81       	ld	r24, Z
     f94:	0e 94 19 08 	call	0x1032	; 0x1032 <putInvertedCOLED>
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	2a 81       	ldd	r18, Y+2	; 0x02
     fa6:	3b 81       	ldd	r19, Y+3	; 0x03
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	88 23       	and	r24, r24
     fb2:	39 f7       	brne	.-50     	; 0xf82 <putInvertedSOLED+0x14>
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <putcOLED>:

void putcOLED(char c){
     fc0:	1f 93       	push	r17
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <putcOLED+0x8>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <putcOLED+0xa>
     fca:	0f 92       	push	r0
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(pgm_read_byte(&(myfont[c-32][counter]))); //-32 is to compensate for the offset between our fontfile and the true ascii table
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	22 c0       	rjmp	.+68     	; 0x101a <putcOLED+0x5a>
     fd6:	20 e7       	ldi	r18, 0x70	; 112
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	ac 01       	movw	r20, r24
     fe2:	44 0f       	add	r20, r20
     fe4:	55 1f       	adc	r21, r21
     fe6:	44 0f       	add	r20, r20
     fe8:	55 1f       	adc	r21, r21
     fea:	48 0f       	add	r20, r24
     fec:	59 1f       	adc	r21, r25
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	84 0f       	add	r24, r20
     ff6:	95 1f       	adc	r25, r21
     ff8:	80 5a       	subi	r24, 0xA0	; 160
     ffa:	90 40       	sbci	r25, 0x00	; 0
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	9b 83       	std	Y+3, r25	; 0x03
    1002:	8a 83       	std	Y+2, r24	; 0x02
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	9b 81       	ldd	r25, Y+3	; 0x03
    1008:	fc 01       	movw	r30, r24
    100a:	14 91       	lpm	r17, Z+
    100c:	1c 83       	std	Y+4, r17	; 0x04
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	0e 94 b8 06 	call	0xd70	; 0xd70 <writeDataOLED>
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	85 30       	cpi	r24, 0x05	; 5
    101e:	d8 f2       	brcs	.-74     	; 0xfd6 <putcOLED+0x16>
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	1f 91       	pop	r17
    1030:	08 95       	ret

00001032 <putInvertedCOLED>:

void putInvertedCOLED(char c){
    1032:	1f 93       	push	r17
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <putInvertedCOLED+0x8>
    103a:	00 d0       	rcall	.+0      	; 0x103c <putInvertedCOLED+0xa>
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t counter;
	for(counter = 0; counter < 5; counter++) writeDataOLED(~pgm_read_byte(&(myfont[c-32][counter]))); 
    1044:	19 82       	std	Y+1, r1	; 0x01
    1046:	23 c0       	rjmp	.+70     	; 0x108e <putInvertedCOLED+0x5c>
    1048:	20 e7       	ldi	r18, 0x70	; 112
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	ac 01       	movw	r20, r24
    1054:	44 0f       	add	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	44 0f       	add	r20, r20
    105a:	55 1f       	adc	r21, r21
    105c:	48 0f       	add	r20, r24
    105e:	59 1f       	adc	r21, r25
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	84 0f       	add	r24, r20
    1068:	95 1f       	adc	r25, r21
    106a:	80 5a       	subi	r24, 0xA0	; 160
    106c:	90 40       	sbci	r25, 0x00	; 0
    106e:	82 0f       	add	r24, r18
    1070:	93 1f       	adc	r25, r19
    1072:	9b 83       	std	Y+3, r25	; 0x03
    1074:	8a 83       	std	Y+2, r24	; 0x02
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	9b 81       	ldd	r25, Y+3	; 0x03
    107a:	fc 01       	movw	r30, r24
    107c:	14 91       	lpm	r17, Z+
    107e:	1c 83       	std	Y+4, r17	; 0x04
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	80 95       	com	r24
    1084:	0e 94 b8 06 	call	0xd70	; 0xd70 <writeDataOLED>
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	85 30       	cpi	r24, 0x05	; 5
    1092:	d0 f2       	brcs	.-76     	; 0x1048 <putInvertedCOLED+0x16>
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	1f 91       	pop	r17
    10a4:	08 95       	ret

000010a6 <clearOLED>:

void clearOLED(){
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <clearOLED+0x6>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	gotoPosOLED(0,0);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	0e 94 70 07 	call	0xee0	; 0xee0 <gotoPosOLED>
	uint16_t i;
	for(i = 0; i < 128*8; i++) writeDataOLED(0x00);
    10b8:	1a 82       	std	Y+2, r1	; 0x02
    10ba:	19 82       	std	Y+1, r1	; 0x01
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <clearOLED+0x28>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 b8 06 	call	0xd70	; 0xd70 <writeDataOLED>
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	24 e0       	ldi	r18, 0x04	; 4
    10d4:	80 30       	cpi	r24, 0x00	; 0
    10d6:	92 07       	cpc	r25, r18
    10d8:	90 f3       	brcs	.-28     	; 0x10be <clearOLED+0x18>
	gotoPosOLED(0,0);
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	0e 94 70 07 	call	0xee0	; 0xee0 <gotoPosOLED>
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <initSPI>:
 */ 


#include "spi.h"

void initSPI(){
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
	//Setting pins and directions 
	//MOSI, SCK, !SS as output
	DDRB = (1 << DDB7) | (1 << DDB5)  | (1 << DDB4);
    10f4:	87 e3       	ldi	r24, 0x37	; 55
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	20 eb       	ldi	r18, 0xB0	; 176
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
	//DDRB &= ~(1 << PB6);
	PORTB |=  (1 << DDB4); //Pullup to avoid wrong fallback to slave mode
    10fe:	88 e3       	ldi	r24, 0x38	; 56
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	28 e3       	ldi	r18, 0x38	; 56
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	f9 01       	movw	r30, r18
    1108:	20 81       	ld	r18, Z
    110a:	20 61       	ori	r18, 0x10	; 16
    110c:	fc 01       	movw	r30, r24
    110e:	20 83       	st	Z, r18
	//MISO is Overriden as input, TODO: check if it work
	SPCR |=   (1 << SPE) | (1 << MSTR) | (1<<SPR0) ; // fosc/16
    1110:	8d e2       	ldi	r24, 0x2D	; 45
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	2d e2       	ldi	r18, 0x2D	; 45
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	f9 01       	movw	r30, r18
    111a:	20 81       	ld	r18, Z
    111c:	21 65       	ori	r18, 0x51	; 81
    111e:	fc 01       	movw	r30, r24
    1120:	20 83       	st	Z, r18
	//configured as Master, NOT producing interrupts
	
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <resetMCP>:

void resetMCP(){
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	2e 97       	sbiw	r28, 0x0e	; 14
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
	select_mcp();
    1140:	88 e3       	ldi	r24, 0x38	; 56
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	28 e3       	ldi	r18, 0x38	; 56
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	20 81       	ld	r18, Z
    114c:	2f 7e       	andi	r18, 0xEF	; 239
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
	SPDR = MCP_RESET;
    1152:	8f e2       	ldi	r24, 0x2F	; 47
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	20 ec       	ldi	r18, 0xC0	; 192
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
     wait_spi();
    115c:	8e e2       	ldi	r24, 0x2E	; 46
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	fc 01       	movw	r30, r24
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	d4 f7       	brge	.-12     	; 0x115c <resetMCP+0x34>
	deselect_mcp();
    1168:	88 e3       	ldi	r24, 0x38	; 56
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	28 e3       	ldi	r18, 0x38	; 56
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	f9 01       	movw	r30, r18
    1172:	20 81       	ld	r18, Z
    1174:	20 61       	ori	r18, 0x10	; 16
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e2       	ldi	r26, 0x20	; 32
    1180:	b1 e4       	ldi	r27, 0x41	; 65
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	ab 83       	std	Y+3, r26	; 0x03
    1188:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    118a:	69 81       	ldd	r22, Y+1	; 0x01
    118c:	7a 81       	ldd	r23, Y+2	; 0x02
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	2a e9       	ldi	r18, 0x9A	; 154
    1194:	39 e9       	ldi	r19, 0x99	; 153
    1196:	49 e9       	ldi	r20, 0x99	; 153
    1198:	54 e4       	ldi	r21, 0x44	; 68
    119a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	8d 83       	std	Y+5, r24	; 0x05
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	af 83       	std	Y+7, r26	; 0x07
    11a8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    11aa:	11 e0       	ldi	r17, 0x01	; 1
    11ac:	6d 81       	ldd	r22, Y+5	; 0x05
    11ae:	7e 81       	ldd	r23, Y+6	; 0x06
    11b0:	8f 81       	ldd	r24, Y+7	; 0x07
    11b2:	98 85       	ldd	r25, Y+8	; 0x08
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 2f 12 	call	0x245e	; 0x245e <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	0c f0       	brlt	.+2      	; 0x11c6 <resetMCP+0x9e>
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	11 23       	and	r17, r17
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <resetMCP+0xac>
		__ticks = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9a 87       	std	Y+10, r25	; 0x0a
    11d0:	89 87       	std	Y+9, r24	; 0x09
    11d2:	46 c0       	rjmp	.+140    	; 0x1260 <resetMCP+0x138>
	else if (__tmp > 65535)
    11d4:	11 e0       	ldi	r17, 0x01	; 1
    11d6:	6d 81       	ldd	r22, Y+5	; 0x05
    11d8:	7e 81       	ldd	r23, Y+6	; 0x06
    11da:	8f 81       	ldd	r24, Y+7	; 0x07
    11dc:	98 85       	ldd	r25, Y+8	; 0x08
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 cf 11 	call	0x239e	; 0x239e <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	0c f0       	brlt	.+2      	; 0x11f0 <resetMCP+0xc8>
    11ee:	10 e0       	ldi	r17, 0x00	; 0
    11f0:	11 23       	and	r17, r17
    11f2:	61 f1       	breq	.+88     	; 0x124c <resetMCP+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f4:	69 81       	ldd	r22, Y+1	; 0x01
    11f6:	7a 81       	ldd	r23, Y+2	; 0x02
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	9a 87       	std	Y+10, r25	; 0x0a
    121a:	89 87       	std	Y+9, r24	; 0x09
    121c:	12 c0       	rjmp	.+36     	; 0x1242 <resetMCP+0x11a>
    121e:	8a e7       	ldi	r24, 0x7A	; 122
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9c 87       	std	Y+12, r25	; 0x0c
    1224:	8b 87       	std	Y+11, r24	; 0x0b
    1226:	8b 85       	ldd	r24, Y+11	; 0x0b
    1228:	9c 85       	ldd	r25, Y+12	; 0x0c
    122a:	8c 01       	movw	r16, r24
    122c:	c8 01       	movw	r24, r16
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <resetMCP+0x106>
    1232:	8c 01       	movw	r16, r24
    1234:	1c 87       	std	Y+12, r17	; 0x0c
    1236:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	9a 87       	std	Y+10, r25	; 0x0a
    1240:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	51 f7       	brne	.-44     	; 0x121e <resetMCP+0xf6>
    124a:	17 c0       	rjmp	.+46     	; 0x127a <resetMCP+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124c:	6d 81       	ldd	r22, Y+5	; 0x05
    124e:	7e 81       	ldd	r23, Y+6	; 0x06
    1250:	8f 81       	ldd	r24, Y+7	; 0x07
    1252:	98 85       	ldd	r25, Y+8	; 0x08
    1254:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9a 87       	std	Y+10, r25	; 0x0a
    125e:	89 87       	std	Y+9, r24	; 0x09
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	9e 87       	std	Y+14, r25	; 0x0e
    1266:	8d 87       	std	Y+13, r24	; 0x0d
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	8c 01       	movw	r16, r24
    126e:	f8 01       	movw	r30, r16
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <resetMCP+0x148>
    1274:	8f 01       	movw	r16, r30
    1276:	1e 87       	std	Y+14, r17	; 0x0e
    1278:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	//Resets the SPI-CAN controller and waits for it to be ready
}
    127a:	2e 96       	adiw	r28, 0x0e	; 14
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <readMCP>:

uint8_t readMCP(char address){
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <readMCP+0x6>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t r;
	select_mcp();
    129c:	88 e3       	ldi	r24, 0x38	; 56
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	28 e3       	ldi	r18, 0x38	; 56
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	2f 7e       	andi	r18, 0xEF	; 239
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
	SPDR = MCP_READ;
    12ae:	8f e2       	ldi	r24, 0x2F	; 47
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	23 e0       	ldi	r18, 0x03	; 3
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18
    wait_spi();
    12b8:	8e e2       	ldi	r24, 0x2E	; 46
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	fc 01       	movw	r30, r24
    12be:	80 81       	ld	r24, Z
    12c0:	88 23       	and	r24, r24
    12c2:	d4 f7       	brge	.-12     	; 0x12b8 <readMCP+0x28>
	SPDR = address;
    12c4:	8f e2       	ldi	r24, 0x2F	; 47
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    wait_spi();
    12ce:	8e e2       	ldi	r24, 0x2E	; 46
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	fc 01       	movw	r30, r24
    12d4:	80 81       	ld	r24, Z
    12d6:	88 23       	and	r24, r24
    12d8:	d4 f7       	brge	.-12     	; 0x12ce <readMCP+0x3e>
	SPDR = MCP_DUMMY;
    12da:	8f e2       	ldi	r24, 0x2F	; 47
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	10 82       	st	Z, r1
    wait_spi();
    12e2:	8e e2       	ldi	r24, 0x2E	; 46
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	fc 01       	movw	r30, r24
    12e8:	80 81       	ld	r24, Z
    12ea:	88 23       	and	r24, r24
    12ec:	d4 f7       	brge	.-12     	; 0x12e2 <readMCP+0x52>
	r = SPDR;
    12ee:	8f e2       	ldi	r24, 0x2F	; 47
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	fc 01       	movw	r30, r24
    12f4:	80 81       	ld	r24, Z
    12f6:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
    12f8:	88 e3       	ldi	r24, 0x38	; 56
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	28 e3       	ldi	r18, 0x38	; 56
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	20 81       	ld	r18, Z
    1304:	20 61       	ori	r18, 0x10	; 16
    1306:	fc 01       	movw	r30, r24
    1308:	20 83       	st	Z, r18
	return r;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <writeMCP>:

void writeMCP(char address, char data){
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <writeMCP+0x6>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	6a 83       	std	Y+2, r22	; 0x02
	select_mcp();
    1324:	88 e3       	ldi	r24, 0x38	; 56
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	28 e3       	ldi	r18, 0x38	; 56
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	f9 01       	movw	r30, r18
    132e:	20 81       	ld	r18, Z
    1330:	2f 7e       	andi	r18, 0xEF	; 239
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
	SPDR = MCP_WRITE;
    1336:	8f e2       	ldi	r24, 0x2F	; 47
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	22 e0       	ldi	r18, 0x02	; 2
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
    wait_spi();
    1340:	8e e2       	ldi	r24, 0x2E	; 46
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	fc 01       	movw	r30, r24
    1346:	80 81       	ld	r24, Z
    1348:	88 23       	and	r24, r24
    134a:	d4 f7       	brge	.-12     	; 0x1340 <writeMCP+0x2a>
	SPDR = address;
    134c:	8f e2       	ldi	r24, 0x2F	; 47
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	29 81       	ldd	r18, Y+1	; 0x01
    1352:	fc 01       	movw	r30, r24
    1354:	20 83       	st	Z, r18
    wait_spi();
    1356:	8e e2       	ldi	r24, 0x2E	; 46
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	fc 01       	movw	r30, r24
    135c:	80 81       	ld	r24, Z
    135e:	88 23       	and	r24, r24
    1360:	d4 f7       	brge	.-12     	; 0x1356 <writeMCP+0x40>
	SPDR = data;
    1362:	8f e2       	ldi	r24, 0x2F	; 47
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2a 81       	ldd	r18, Y+2	; 0x02
    1368:	fc 01       	movw	r30, r24
    136a:	20 83       	st	Z, r18
    wait_spi();
    136c:	8e e2       	ldi	r24, 0x2E	; 46
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	fc 01       	movw	r30, r24
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	d4 f7       	brge	.-12     	; 0x136c <writeMCP+0x56>
	deselect_mcp();
    1378:	88 e3       	ldi	r24, 0x38	; 56
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	28 e3       	ldi	r18, 0x38	; 56
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	f9 01       	movw	r30, r18
    1382:	20 81       	ld	r18, Z
    1384:	20 61       	ori	r18, 0x10	; 16
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <requestToSendMCP>:


void requestToSendMCP(char buffer){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
	select_mcp();
    13a0:	88 e3       	ldi	r24, 0x38	; 56
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	28 e3       	ldi	r18, 0x38	; 56
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	f9 01       	movw	r30, r18
    13aa:	20 81       	ld	r18, Z
    13ac:	2f 7e       	andi	r18, 0xEF	; 239
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 83       	st	Z, r18
	switch(buffer) {
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <requestToSendMCP+0x40>
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	91 05       	cpc	r25, r1
    13c2:	71 f0       	breq	.+28     	; 0x13e0 <requestToSendMCP+0x4c>
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	91 f4       	brne	.+36     	; 0x13ec <requestToSendMCP+0x58>
		case 0:
			SPDR = MCP_RTS_TX0;
    13c8:	8f e2       	ldi	r24, 0x2F	; 47
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	21 e8       	ldi	r18, 0x81	; 129
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
			break;
    13d2:	0c c0       	rjmp	.+24     	; 0x13ec <requestToSendMCP+0x58>
		case 1:
		    SPDR = MCP_RTS_TX1;
    13d4:	8f e2       	ldi	r24, 0x2F	; 47
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	22 e8       	ldi	r18, 0x82	; 130
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
			break;
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <requestToSendMCP+0x58>
		case 2:	
		    SPDR = MCP_RTS_TX2;
    13e0:	8f e2       	ldi	r24, 0x2F	; 47
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	24 e8       	ldi	r18, 0x84	; 132
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18
			break;
    13ea:	00 00       	nop
	}
	wait_spi();
    13ec:	8e e2       	ldi	r24, 0x2E	; 46
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	fc 01       	movw	r30, r24
    13f2:	80 81       	ld	r24, Z
    13f4:	88 23       	and	r24, r24
    13f6:	d4 f7       	brge	.-12     	; 0x13ec <requestToSendMCP+0x58>
	deselect_mcp();
    13f8:	88 e3       	ldi	r24, 0x38	; 56
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	28 e3       	ldi	r18, 0x38	; 56
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	f9 01       	movw	r30, r18
    1402:	20 81       	ld	r18, Z
    1404:	20 61       	ori	r18, 0x10	; 16
    1406:	fc 01       	movw	r30, r24
    1408:	20 83       	st	Z, r18
//	writeMCP(MCP_TXB0CTRL,0b00001000);
//    uint8_t r = readMCP(0x30);
}
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <bitModifyMCP>:


void bitModifyMCP(char address, char mask, char data){
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <bitModifyMCP+0x6>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6a 83       	std	Y+2, r22	; 0x02
    1422:	4b 83       	std	Y+3, r20	; 0x03
	select_mcp();
    1424:	88 e3       	ldi	r24, 0x38	; 56
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	28 e3       	ldi	r18, 0x38	; 56
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	f9 01       	movw	r30, r18
    142e:	20 81       	ld	r18, Z
    1430:	2f 7e       	andi	r18, 0xEF	; 239
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
    SPDR = MCP_BITMOD;
    1436:	8f e2       	ldi	r24, 0x2F	; 47
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	25 e0       	ldi	r18, 0x05	; 5
    143c:	fc 01       	movw	r30, r24
    143e:	20 83       	st	Z, r18
    wait_spi();
    1440:	8e e2       	ldi	r24, 0x2E	; 46
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	fc 01       	movw	r30, r24
    1446:	80 81       	ld	r24, Z
    1448:	88 23       	and	r24, r24
    144a:	d4 f7       	brge	.-12     	; 0x1440 <bitModifyMCP+0x2e>
	SPDR = address;
    144c:	8f e2       	ldi	r24, 0x2F	; 47
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	29 81       	ldd	r18, Y+1	; 0x01
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
    wait_spi();
    1456:	8e e2       	ldi	r24, 0x2E	; 46
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	fc 01       	movw	r30, r24
    145c:	80 81       	ld	r24, Z
    145e:	88 23       	and	r24, r24
    1460:	d4 f7       	brge	.-12     	; 0x1456 <bitModifyMCP+0x44>
	SPDR = mask;
    1462:	8f e2       	ldi	r24, 0x2F	; 47
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	2a 81       	ldd	r18, Y+2	; 0x02
    1468:	fc 01       	movw	r30, r24
    146a:	20 83       	st	Z, r18
    wait_spi();
    146c:	8e e2       	ldi	r24, 0x2E	; 46
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	fc 01       	movw	r30, r24
    1472:	80 81       	ld	r24, Z
    1474:	88 23       	and	r24, r24
    1476:	d4 f7       	brge	.-12     	; 0x146c <bitModifyMCP+0x5a>
	SPDR = data;
    1478:	8f e2       	ldi	r24, 0x2F	; 47
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	2b 81       	ldd	r18, Y+3	; 0x03
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
    wait_spi();
    1482:	8e e2       	ldi	r24, 0x2E	; 46
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	fc 01       	movw	r30, r24
    1488:	80 81       	ld	r24, Z
    148a:	88 23       	and	r24, r24
    148c:	d4 f7       	brge	.-12     	; 0x1482 <bitModifyMCP+0x70>
	deselect_mcp();
    148e:	88 e3       	ldi	r24, 0x38	; 56
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	28 e3       	ldi	r18, 0x38	; 56
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	20 61       	ori	r18, 0x10	; 16
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <readStatus>:

uint8_t readStatus(){
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	uint8_t r;
	select_mcp();
    14b6:	88 e3       	ldi	r24, 0x38	; 56
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	28 e3       	ldi	r18, 0x38	; 56
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	f9 01       	movw	r30, r18
    14c0:	20 81       	ld	r18, Z
    14c2:	2f 7e       	andi	r18, 0xEF	; 239
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
    SPDR = MCP_READ_STATUS;
    14c8:	8f e2       	ldi	r24, 0x2F	; 47
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	20 ea       	ldi	r18, 0xA0	; 160
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
    wait_spi();
    14d2:	8e e2       	ldi	r24, 0x2E	; 46
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	fc 01       	movw	r30, r24
    14d8:	80 81       	ld	r24, Z
    14da:	88 23       	and	r24, r24
    14dc:	d4 f7       	brge	.-12     	; 0x14d2 <readStatus+0x26>
	SPDR = MCP_DUMMY;
    14de:	8f e2       	ldi	r24, 0x2F	; 47
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	fc 01       	movw	r30, r24
    14e4:	10 82       	st	Z, r1
    wait_spi();
    14e6:	8e e2       	ldi	r24, 0x2E	; 46
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	88 23       	and	r24, r24
    14f0:	d4 f7       	brge	.-12     	; 0x14e6 <readStatus+0x3a>
	r = SPDR;
    14f2:	8f e2       	ldi	r24, 0x2F	; 47
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	89 83       	std	Y+1, r24	; 0x01
	deselect_mcp();
    14fc:	88 e3       	ldi	r24, 0x38	; 56
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	28 e3       	ldi	r18, 0x38	; 56
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	f9 01       	movw	r30, r18
    1506:	20 81       	ld	r18, Z
    1508:	20 61       	ori	r18, 0x10	; 16
    150a:	fc 01       	movw	r30, r24
    150c:	20 83       	st	Z, r18
	return r;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <readRxBufferMCP>:

struct canMessage readRxBufferMCP(char buffer){
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	2d 97       	sbiw	r28, 0x0d	; 13
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	ac 01       	movw	r20, r24
    152e:	6d 87       	std	Y+13, r22	; 0x0d
	//Adresses are relative to Buffer 0
	struct canMessage m;
	
	select_mcp();
    1530:	88 e3       	ldi	r24, 0x38	; 56
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	28 e3       	ldi	r18, 0x38	; 56
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	f9 01       	movw	r30, r18
    153a:	20 81       	ld	r18, Z
    153c:	2f 7e       	andi	r18, 0xEF	; 239
    153e:	fc 01       	movw	r30, r24
    1540:	20 83       	st	Z, r18
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	88 23       	and	r24, r24
    1546:	31 f4       	brne	.+12     	; 0x1554 <readRxBufferMCP+0x3c>
    1548:	8f e2       	ldi	r24, 0x2F	; 47
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	20 e9       	ldi	r18, 0x90	; 144
    154e:	fc 01       	movw	r30, r24
    1550:	20 83       	st	Z, r18
	else SPDR = MCP_READ_RX1;
	wait_spi();
    1552:	05 c0       	rjmp	.+10     	; 0x155e <readRxBufferMCP+0x46>
	struct canMessage m;
	
	select_mcp();
	
	if ( buffer == 0) SPDR = MCP_READ_RX0;
	else SPDR = MCP_READ_RX1;
    1554:	8f e2       	ldi	r24, 0x2F	; 47
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	24 e9       	ldi	r18, 0x94	; 148
    155a:	fc 01       	movw	r30, r24
    155c:	20 83       	st	Z, r18
	wait_spi();
    155e:	8e e2       	ldi	r24, 0x2E	; 46
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	fc 01       	movw	r30, r24
    1564:	80 81       	ld	r24, Z
    1566:	88 23       	and	r24, r24
    1568:	d4 f7       	brge	.-12     	; 0x155e <readRxBufferMCP+0x46>
	
	SPDR = MCP_DUMMY;
    156a:	8f e2       	ldi	r24, 0x2F	; 47
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	fc 01       	movw	r30, r24
    1570:	10 82       	st	Z, r1
	wait_spi();
    1572:	8e e2       	ldi	r24, 0x2E	; 46
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	fc 01       	movw	r30, r24
    1578:	80 81       	ld	r24, Z
    157a:	88 23       	and	r24, r24
    157c:	d4 f7       	brge	.-12     	; 0x1572 <readRxBufferMCP+0x5a>
	
	m.id = SPDR<<3; //8 high bits recived and shifted to fit the 11bit format (0x61)
    157e:	8f e2       	ldi	r24, 0x2F	; 47
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	fc 01       	movw	r30, r24
    1584:	80 81       	ld	r24, Z
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	9b 83       	std	Y+3, r25	; 0x03
    1598:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
    159a:	8f e2       	ldi	r24, 0x2F	; 47
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	fc 01       	movw	r30, r24
    15a0:	10 82       	st	Z, r1
	wait_spi();    //Recive lower 3 bits of id
    15a2:	8e e2       	ldi	r24, 0x2E	; 46
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	fc 01       	movw	r30, r24
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	d4 f7       	brge	.-12     	; 0x15a2 <readRxBufferMCP+0x8a>
	
	m.id |= (SPDR & 0xE0)>>5;  //Id is received, cleansed and constructed  (0x62)
    15ae:	2a 81       	ldd	r18, Y+2	; 0x02
    15b0:	3b 81       	ldd	r19, Y+3	; 0x03
    15b2:	8f e2       	ldi	r24, 0x2F	; 47
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	fc 01       	movw	r30, r24
    15b8:	80 81       	ld	r24, Z
    15ba:	82 95       	swap	r24
    15bc:	86 95       	lsr	r24
    15be:	87 70       	andi	r24, 0x07	; 7
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	90 70       	andi	r25, 0x00	; 0
    15c6:	82 2b       	or	r24, r18
    15c8:	93 2b       	or	r25, r19
    15ca:	9b 83       	std	Y+3, r25	; 0x03
    15cc:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = MCP_DUMMY;  
    15ce:	8f e2       	ldi	r24, 0x2F	; 47
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	fc 01       	movw	r30, r24
    15d4:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x63)
    15d6:	8e e2       	ldi	r24, 0x2E	; 46
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	fc 01       	movw	r30, r24
    15dc:	80 81       	ld	r24, Z
    15de:	88 23       	and	r24, r24
    15e0:	d4 f7       	brge	.-12     	; 0x15d6 <readRxBufferMCP+0xbe>
	
	SPDR = MCP_DUMMY;  
    15e2:	8f e2       	ldi	r24, 0x2F	; 47
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	fc 01       	movw	r30, r24
    15e8:	10 82       	st	Z, r1
	wait_spi();    //Dummy to read (0x64)
    15ea:	8e e2       	ldi	r24, 0x2E	; 46
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	88 23       	and	r24, r24
    15f4:	d4 f7       	brge	.-12     	; 0x15ea <readRxBufferMCP+0xd2>
	
	SPDR = MCP_DUMMY;  
    15f6:	8f e2       	ldi	r24, 0x2F	; 47
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	fc 01       	movw	r30, r24
    15fc:	10 82       	st	Z, r1
	wait_spi();    //Reads DLC (size) (0x65)
    15fe:	8e e2       	ldi	r24, 0x2E	; 46
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	fc 01       	movw	r30, r24
    1604:	80 81       	ld	r24, Z
    1606:	88 23       	and	r24, r24
    1608:	d4 f7       	brge	.-12     	; 0x15fe <readRxBufferMCP+0xe6>
	
	m.size = SPDR & 0x0F;
    160a:	8f e2       	ldi	r24, 0x2F	; 47
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	fc 01       	movw	r30, r24
    1610:	80 81       	ld	r24, Z
    1612:	8f 70       	andi	r24, 0x0F	; 15
    1614:	8c 83       	std	Y+4, r24	; 0x04
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    1616:	19 82       	std	Y+1, r1	; 0x01
    1618:	1b c0       	rjmp	.+54     	; 0x1650 <readRxBufferMCP+0x138>
		SPDR = MCP_DUMMY;  
    161a:	8f e2       	ldi	r24, 0x2F	; 47
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	fc 01       	movw	r30, r24
    1620:	10 82       	st	Z, r1
		wait_spi();    //Reads data (0x66..0x6D) 
    1622:	8e e2       	ldi	r24, 0x2E	; 46
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	88 23       	and	r24, r24
    162c:	d4 f7       	brge	.-12     	; 0x1622 <readRxBufferMCP+0x10a>
		m.data[c] = SPDR;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	2f e2       	ldi	r18, 0x2F	; 47
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	f9 01       	movw	r30, r18
    163a:	60 81       	ld	r22, Z
    163c:	9e 01       	movw	r18, r28
    163e:	2b 5f       	subi	r18, 0xFB	; 251
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	82 0f       	add	r24, r18
    1644:	93 1f       	adc	r25, r19
    1646:	fc 01       	movw	r30, r24
    1648:	60 83       	st	Z, r22
	
	m.size = SPDR & 0x0F;
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	89 17       	cp	r24, r25
    1656:	08 f3       	brcs	.-62     	; 0x161a <readRxBufferMCP+0x102>
		SPDR = MCP_DUMMY;  
		wait_spi();    //Reads data (0x66..0x6D) 
		m.data[c] = SPDR;
	}
	
	deselect_mcp();
    1658:	88 e3       	ldi	r24, 0x38	; 56
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	28 e3       	ldi	r18, 0x38	; 56
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	20 81       	ld	r18, Z
    1664:	20 61       	ori	r18, 0x10	; 16
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18
	
	return m;
    166a:	ca 01       	movw	r24, r20
    166c:	9e 01       	movw	r18, r28
    166e:	2e 5f       	subi	r18, 0xFE	; 254
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	6b e0       	ldi	r22, 0x0B	; 11
    1674:	f9 01       	movw	r30, r18
    1676:	00 80       	ld	r0, Z
    1678:	2f 5f       	subi	r18, 0xFF	; 255
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	fc 01       	movw	r30, r24
    167e:	00 82       	st	Z, r0
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	61 50       	subi	r22, 0x01	; 1
    1684:	66 23       	and	r22, r22
    1686:	b1 f7       	brne	.-20     	; 0x1674 <readRxBufferMCP+0x15c>
}
    1688:	ca 01       	movw	r24, r20
    168a:	2d 96       	adiw	r28, 0x0d	; 13
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <bufferFree>:


char bufferFree(char buffer) {
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <bufferFree+0x6>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t canintf = readMCP(MCP_CANINTF);
    16a8:	8c e2       	ldi	r24, 0x2C	; 44
    16aa:	0e 94 48 09 	call	0x1290	; 0x1290 <readMCP>
    16ae:	89 83       	std	Y+1, r24	; 0x01
	printf("Freedom for the buffer !!!!! 0x%X\r\n",canintf);
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <bufferFree+0x1c>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <bufferFree+0x1e>
    16ba:	8d b7       	in	r24, 0x3d	; 61
    16bc:	9e b7       	in	r25, 0x3e	; 62
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	40 ee       	ldi	r20, 0xE0	; 224
    16c2:	52 e0       	ldi	r21, 0x02	; 2
    16c4:	fc 01       	movw	r30, r24
    16c6:	51 83       	std	Z+1, r21	; 0x01
    16c8:	40 83       	st	Z, r20
    16ca:	fc 01       	movw	r30, r24
    16cc:	33 83       	std	Z+3, r19	; 0x03
    16ce:	22 83       	std	Z+2, r18	; 0x02
    16d0:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
	return (canintf & (1 << (2+buffer)));
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9c 01       	movw	r18, r24
    16e4:	2e 5f       	subi	r18, 0xFE	; 254
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <bufferFree+0x58>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <bufferFree+0x54>
    16f8:	98 2f       	mov	r25, r24
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	89 23       	and	r24, r25
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <fillTxBufferMCP>:



void fillTxBufferMCP(char buffer, struct canMessage m){
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	2e 97       	sbiw	r28, 0x0e	; 14
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	cc 82       	std	Y+4, r12	; 0x04
    172c:	dd 82       	std	Y+5, r13	; 0x05
    172e:	ee 82       	std	Y+6, r14	; 0x06
    1730:	ff 82       	std	Y+7, r15	; 0x07
    1732:	08 87       	std	Y+8, r16	; 0x08
    1734:	19 87       	std	Y+9, r17	; 0x09
    1736:	2a 87       	std	Y+10, r18	; 0x0a
    1738:	3b 87       	std	Y+11, r19	; 0x0b
    173a:	4c 87       	std	Y+12, r20	; 0x0c
    173c:	5d 87       	std	Y+13, r21	; 0x0d
    173e:	6e 87       	std	Y+14, r22	; 0x0e
	//Adresses in comments are relative to Buffer 0
	

	select_mcp();
    1740:	88 e3       	ldi	r24, 0x38	; 56
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	28 e3       	ldi	r18, 0x38	; 56
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	f9 01       	movw	r30, r18
    174a:	20 81       	ld	r18, Z
    174c:	2f 7e       	andi	r18, 0xEF	; 239
    174e:	fc 01       	movw	r30, r24
    1750:	20 83       	st	Z, r18
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 23       	and	r24, r24
    1756:	29 f4       	brne	.+10     	; 0x1762 <fillTxBufferMCP+0x5a>
    1758:	8f e2       	ldi	r24, 0x2F	; 47
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	20 e4       	ldi	r18, 0x40	; 64
    175e:	fc 01       	movw	r30, r24
    1760:	20 83       	st	Z, r18
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	31 f4       	brne	.+12     	; 0x1774 <fillTxBufferMCP+0x6c>
    1768:	8f e2       	ldi	r24, 0x2F	; 47
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	22 e4       	ldi	r18, 0x42	; 66
    176e:	fc 01       	movw	r30, r24
    1770:	20 83       	st	Z, r18
	else SPDR = MCP_LOAD_TX2;
	wait_spi();
    1772:	05 c0       	rjmp	.+10     	; 0x177e <fillTxBufferMCP+0x76>
	

	select_mcp();
	if ( buffer == 0) SPDR = MCP_LOAD_TX0;
	if ( buffer == 1) SPDR = MCP_LOAD_TX1;
	else SPDR = MCP_LOAD_TX2;
    1774:	8f e2       	ldi	r24, 0x2F	; 47
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	24 e4       	ldi	r18, 0x44	; 68
    177a:	fc 01       	movw	r30, r24
    177c:	20 83       	st	Z, r18
	wait_spi();
    177e:	8e e2       	ldi	r24, 0x2E	; 46
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	fc 01       	movw	r30, r24
    1784:	80 81       	ld	r24, Z
    1786:	88 23       	and	r24, r24
    1788:	d4 f7       	brge	.-12     	; 0x177e <fillTxBufferMCP+0x76>
	
	uint8_t t;
	
	t = m.id >> 3;
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	96 95       	lsr	r25
    1790:	87 95       	ror	r24
    1792:	96 95       	lsr	r25
    1794:	87 95       	ror	r24
    1796:	96 95       	lsr	r25
    1798:	87 95       	ror	r24
    179a:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
    179c:	8f e2       	ldi	r24, 0x2F	; 47
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	2a 81       	ldd	r18, Y+2	; 0x02
    17a2:	fc 01       	movw	r30, r24
    17a4:	20 83       	st	Z, r18
	wait_spi();  //sends higher 8 bits of ID to 0x31
    17a6:	8e e2       	ldi	r24, 0x2E	; 46
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	80 81       	ld	r24, Z
    17ae:	88 23       	and	r24, r24
    17b0:	d4 f7       	brge	.-12     	; 0x17a6 <fillTxBufferMCP+0x9e>
	
	t = (m.id << 5) & 0xE0;
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	82 95       	swap	r24
    17b8:	88 0f       	add	r24, r24
    17ba:	80 7e       	andi	r24, 0xE0	; 224
    17bc:	8a 83       	std	Y+2, r24	; 0x02
	
	SPDR = t;
    17be:	8f e2       	ldi	r24, 0x2F	; 47
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	2a 81       	ldd	r18, Y+2	; 0x02
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
	wait_spi(); //sends lower 3 bits to higher bits of 0x32
    17c8:	8e e2       	ldi	r24, 0x2E	; 46
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	fc 01       	movw	r30, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	88 23       	and	r24, r24
    17d2:	d4 f7       	brge	.-12     	; 0x17c8 <fillTxBufferMCP+0xc0>
		
	SPDR = MCP_DUMMY;  
    17d4:	8f e2       	ldi	r24, 0x2F	; 47
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	fc 01       	movw	r30, r24
    17da:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill (0x33)
    17dc:	8e e2       	ldi	r24, 0x2E	; 46
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	fc 01       	movw	r30, r24
    17e2:	80 81       	ld	r24, Z
    17e4:	88 23       	and	r24, r24
    17e6:	d4 f7       	brge	.-12     	; 0x17dc <fillTxBufferMCP+0xd4>
	
	SPDR = MCP_DUMMY;  
    17e8:	8f e2       	ldi	r24, 0x2F	; 47
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	fc 01       	movw	r30, r24
    17ee:	10 82       	st	Z, r1
	wait_spi();    //Dummy to fill(0x34)
    17f0:	8e e2       	ldi	r24, 0x2E	; 46
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	88 23       	and	r24, r24
    17fa:	d4 f7       	brge	.-12     	; 0x17f0 <fillTxBufferMCP+0xe8>
	
	
	SPDR = m.size & 0x0F;  
    17fc:	8f e2       	ldi	r24, 0x2F	; 47
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	2e 81       	ldd	r18, Y+6	; 0x06
    1802:	2f 70       	andi	r18, 0x0F	; 15
    1804:	fc 01       	movw	r30, r24
    1806:	20 83       	st	Z, r18
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
    1808:	8e e2       	ldi	r24, 0x2E	; 46
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	80 81       	ld	r24, Z
    1810:	88 23       	and	r24, r24
    1812:	d4 f7       	brge	.-12     	; 0x1808 <fillTxBufferMCP+0x100>
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    1814:	19 82       	std	Y+1, r1	; 0x01
    1816:	17 c0       	rjmp	.+46     	; 0x1846 <fillTxBufferMCP+0x13e>
		SPDR = m.data[c];  
    1818:	8f e2       	ldi	r24, 0x2F	; 47
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	29 81       	ldd	r18, Y+1	; 0x01
    181e:	22 2f       	mov	r18, r18
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	ae 01       	movw	r20, r28
    1824:	49 5f       	subi	r20, 0xF9	; 249
    1826:	5f 4f       	sbci	r21, 0xFF	; 255
    1828:	24 0f       	add	r18, r20
    182a:	35 1f       	adc	r19, r21
    182c:	f9 01       	movw	r30, r18
    182e:	20 81       	ld	r18, Z
    1830:	fc 01       	movw	r30, r24
    1832:	20 83       	st	Z, r18
		wait_spi();    //fills in data (0x36..0x40) 
    1834:	8e e2       	ldi	r24, 0x2E	; 46
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	80 81       	ld	r24, Z
    183c:	88 23       	and	r24, r24
    183e:	d4 f7       	brge	.-12     	; 0x1834 <fillTxBufferMCP+0x12c>
	SPDR = m.size & 0x0F;  
	wait_spi();    //Sets 0 at the RTR and the proper size at 0x35
	
	//Reading data
	uint8_t c;
	for(c = 0; c < m.size; c++) {
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	9e 81       	ldd	r25, Y+6	; 0x06
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	89 17       	cp	r24, r25
    184c:	28 f3       	brcs	.-54     	; 0x1818 <fillTxBufferMCP+0x110>
		SPDR = m.data[c];  
		wait_spi();    //fills in data (0x36..0x40) 
	}
	
	deselect_mcp();
    184e:	88 e3       	ldi	r24, 0x38	; 56
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	28 e3       	ldi	r18, 0x38	; 56
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	f9 01       	movw	r30, r18
    1858:	20 81       	ld	r18, Z
    185a:	20 61       	ori	r18, 0x10	; 16
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18
    1860:	2e 96       	adiw	r28, 0x0e	; 14
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	08 95       	ret

0000187e <initUART>:
 */ 


#include "uart.h"

void initUART(uint16_t ubrr ){
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <initUART+0x6>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
	
	//Init clock generator reg
	UBRR0H = (unsigned char) (ubrr >> 8);
    188c:	80 e4       	ldi	r24, 0x40	; 64
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	29 81       	ldd	r18, Y+1	; 0x01
    1892:	3a 81       	ldd	r19, Y+2	; 0x02
    1894:	23 2f       	mov	r18, r19
    1896:	33 27       	eor	r19, r19
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
    189c:	89 e2       	ldi	r24, 0x29	; 41
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	29 81       	ldd	r18, Y+1	; 0x01
    18a2:	fc 01       	movw	r30, r24
    18a4:	20 83       	st	Z, r18
	//UCSR0A = 0b00000000 //TODO: Rx & Tx "polling"
	UCSR0B = 0b00011000;
    18a6:	8a e2       	ldi	r24, 0x2A	; 42
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	28 e1       	ldi	r18, 0x18	; 24
    18ac:	fc 01       	movw	r30, r24
    18ae:	20 83       	st	Z, r18
	UCSR0C = 0b10000110;
    18b0:	80 e4       	ldi	r24, 0x40	; 64
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	26 e8       	ldi	r18, 0x86	; 134
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
	
	fdevopen(putC,getC);
    18ba:	81 e8       	ldi	r24, 0x81	; 129
    18bc:	9c e0       	ldi	r25, 0x0C	; 12
    18be:	29 e6       	ldi	r18, 0x69	; 105
    18c0:	3c e0       	ldi	r19, 0x0C	; 12
    18c2:	b9 01       	movw	r22, r18
    18c4:	0e 94 9f 14 	call	0x293e	; 0x293e <fdevopen>
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <getC>:

int getC()
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	while( !(UCSR0A & 1 << RXC0) );
    18dc:	00 00       	nop
    18de:	8b e2       	ldi	r24, 0x2B	; 43
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	fc 01       	movw	r30, r24
    18e4:	80 81       	ld	r24, Z
    18e6:	88 23       	and	r24, r24
    18e8:	d4 f7       	brge	.-12     	; 0x18de <getC+0xc>
	c = UDR0;
    18ea:	8c e2       	ldi	r24, 0x2C	; 44
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 81       	ld	r24, Z
    18f2:	89 83       	std	Y+1, r24	; 0x01
	return c;
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
}
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <putC>:

int putC(char data){
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	0f 92       	push	r0
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & 1 << UDRE0) );
    190e:	00 00       	nop
    1910:	8b e2       	ldi	r24, 0x2B	; 43
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	80 72       	andi	r24, 0x20	; 32
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	b1 f3       	breq	.-20     	; 0x1910 <putC+0xe>
	UDR0 = data;
    1924:	8c e2       	ldi	r24, 0x2C	; 44
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	29 81       	ldd	r18, Y+1	; 0x01
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
	while( !(UCSR0A & 1 << TXC0) );
    192e:	00 00       	nop
    1930:	8b e2       	ldi	r24, 0x2B	; 43
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	fc 01       	movw	r30, r24
    1936:	80 81       	ld	r24, Z
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	80 74       	andi	r24, 0x40	; 64
    193e:	90 70       	andi	r25, 0x00	; 0
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	b1 f3       	breq	.-20     	; 0x1930 <putC+0x2e>
	return 0;
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <testLatch>:


#include "utils.h"

void testLatch()
{
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	2e 97       	sbiw	r28, 0x0e	; 14
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
    1968:	8a e3       	ldi	r24, 0x3A	; 58
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	2f ef       	ldi	r18, 0xFF	; 255
    196e:	fc 01       	movw	r30, r24
    1970:	20 83       	st	Z, r18
	DDRE = 0xFF;
    1972:	86 e2       	ldi	r24, 0x26	; 38
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	2f ef       	ldi	r18, 0xFF	; 255
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x55;
    197c:	8b e3       	ldi	r24, 0x3B	; 59
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	25 e5       	ldi	r18, 0x55	; 85
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
	PORT_E.b1 = 1;
    1986:	87 e2       	ldi	r24, 0x27	; 39
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	20 81       	ld	r18, Z
    198e:	22 60       	ori	r18, 0x02	; 2
    1990:	fc 01       	movw	r30, r24
    1992:	20 83       	st	Z, r18
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e2       	ldi	r26, 0x20	; 32
    199a:	b1 e4       	ldi	r27, 0x41	; 65
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	ab 83       	std	Y+3, r26	; 0x03
    19a2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	69 81       	ldd	r22, Y+1	; 0x01
    19a6:	7a 81       	ldd	r23, Y+2	; 0x02
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	2a e9       	ldi	r18, 0x9A	; 154
    19ae:	39 e9       	ldi	r19, 0x99	; 153
    19b0:	49 e9       	ldi	r20, 0x99	; 153
    19b2:	54 e4       	ldi	r21, 0x44	; 68
    19b4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8d 83       	std	Y+5, r24	; 0x05
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	af 83       	std	Y+7, r26	; 0x07
    19c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    19c4:	11 e0       	ldi	r17, 0x01	; 1
    19c6:	6d 81       	ldd	r22, Y+5	; 0x05
    19c8:	7e 81       	ldd	r23, Y+6	; 0x06
    19ca:	8f 81       	ldd	r24, Y+7	; 0x07
    19cc:	98 85       	ldd	r25, Y+8	; 0x08
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 2f 12 	call	0x245e	; 0x245e <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	0c f0       	brlt	.+2      	; 0x19e0 <testLatch+0x90>
    19de:	10 e0       	ldi	r17, 0x00	; 0
    19e0:	11 23       	and	r17, r17
    19e2:	29 f0       	breq	.+10     	; 0x19ee <testLatch+0x9e>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9a 87       	std	Y+10, r25	; 0x0a
    19ea:	89 87       	std	Y+9, r24	; 0x09
    19ec:	46 c0       	rjmp	.+140    	; 0x1a7a <testLatch+0x12a>
	else if (__tmp > 65535)
    19ee:	11 e0       	ldi	r17, 0x01	; 1
    19f0:	6d 81       	ldd	r22, Y+5	; 0x05
    19f2:	7e 81       	ldd	r23, Y+6	; 0x06
    19f4:	8f 81       	ldd	r24, Y+7	; 0x07
    19f6:	98 85       	ldd	r25, Y+8	; 0x08
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 cf 11 	call	0x239e	; 0x239e <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <testLatch+0xba>
    1a08:	10 e0       	ldi	r17, 0x00	; 0
    1a0a:	11 23       	and	r17, r17
    1a0c:	61 f1       	breq	.+88     	; 0x1a66 <testLatch+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0e:	69 81       	ldd	r22, Y+1	; 0x01
    1a10:	7a 81       	ldd	r23, Y+2	; 0x02
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9a 87       	std	Y+10, r25	; 0x0a
    1a34:	89 87       	std	Y+9, r24	; 0x09
    1a36:	12 c0       	rjmp	.+36     	; 0x1a5c <testLatch+0x10c>
    1a38:	8a e7       	ldi	r24, 0x7A	; 122
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9c 87       	std	Y+12, r25	; 0x0c
    1a3e:	8b 87       	std	Y+11, r24	; 0x0b
    1a40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a42:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a44:	8c 01       	movw	r16, r24
    1a46:	c8 01       	movw	r24, r16
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <testLatch+0xf8>
    1a4c:	8c 01       	movw	r16, r24
    1a4e:	1c 87       	std	Y+12, r17	; 0x0c
    1a50:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9a 87       	std	Y+10, r25	; 0x0a
    1a5a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	51 f7       	brne	.-44     	; 0x1a38 <testLatch+0xe8>
    1a64:	17 c0       	rjmp	.+46     	; 0x1a94 <testLatch+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6d 81       	ldd	r22, Y+5	; 0x05
    1a68:	7e 81       	ldd	r23, Y+6	; 0x06
    1a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6c:	98 85       	ldd	r25, Y+8	; 0x08
    1a6e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9a 87       	std	Y+10, r25	; 0x0a
    1a78:	89 87       	std	Y+9, r24	; 0x09
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	9e 87       	std	Y+14, r25	; 0x0e
    1a80:	8d 87       	std	Y+13, r24	; 0x0d
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	8c 01       	movw	r16, r24
    1a88:	f8 01       	movw	r30, r16
    1a8a:	31 97       	sbiw	r30, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <testLatch+0x13a>
    1a8e:	8f 01       	movw	r16, r30
    1a90:	1e 87       	std	Y+14, r17	; 0x0e
    1a92:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	PORT_E.b1 = 0;
    1a94:	87 e2       	ldi	r24, 0x27	; 39
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	fc 01       	movw	r30, r24
    1a9a:	20 81       	ld	r18, Z
    1a9c:	2d 7f       	andi	r18, 0xFD	; 253
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	20 83       	st	Z, r18
	ADDRESS_LOW = 0x00;
    1aa2:	8b e3       	ldi	r24, 0x3B	; 59
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	10 82       	st	Z, r1
}
    1aaa:	2e 96       	adiw	r28, 0x0e	; 14
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret

00001ac0 <SRAM_test>:

void SRAM_test(void)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	29 97       	sbiw	r28, 0x09	; 9
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
	// Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	98 e1       	ldi	r25, 0x18	; 24
    1ad8:	98 87       	std	Y+8, r25	; 0x08
    1ada:	8f 83       	std	Y+7, r24	; 0x07
	
	unsigned int i, werrors, rerrors;
	werrors = 0;
    1adc:	1c 82       	std	Y+4, r1	; 0x04
    1ade:	1b 82       	std	Y+3, r1	; 0x03
	rerrors = 0;
    1ae0:	1e 82       	std	Y+6, r1	; 0x06
    1ae2:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	93 e0       	ldi	r25, 0x03	; 3
    1ae8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <puts>

	for (i = 0; i < 0x800; i++) {
    1aec:	1a 82       	std	Y+2, r1	; 0x02
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	53 c0       	rjmp	.+166    	; 0x1b98 <SRAM_test+0xd8>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	80 95       	com	r24
    1af6:	89 87       	std	Y+9, r24	; 0x09
		ext_ram[i] = testvalue;
    1af8:	2f 81       	ldd	r18, Y+7	; 0x07
    1afa:	38 85       	ldd	r19, Y+8	; 0x08
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	82 0f       	add	r24, r18
    1b02:	93 1f       	adc	r25, r19
    1b04:	29 85       	ldd	r18, Y+9	; 0x09
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 83       	st	Z, r18
		//printf("WRITE: current i: %d \r\n",i);
		if (ext_ram[i] != testvalue) {
    1b0a:	2f 81       	ldd	r18, Y+7	; 0x07
    1b0c:	38 85       	ldd	r19, Y+8	; 0x08
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	82 0f       	add	r24, r18
    1b14:	93 1f       	adc	r25, r19
    1b16:	fc 01       	movw	r30, r24
    1b18:	90 81       	ld	r25, Z
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	98 17       	cp	r25, r24
    1b1e:	b9 f1       	breq	.+110    	; 0x1b8e <SRAM_test+0xce>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    1b20:	2f 81       	ldd	r18, Y+7	; 0x07
    1b22:	38 85       	ldd	r19, Y+8	; 0x08
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	82 0f       	add	r24, r18
    1b2a:	93 1f       	adc	r25, r19
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	89 85       	ldd	r24, Y+9	; 0x09
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8d b7       	in	r24, 0x3d	; 61
    1b3c:	9e b7       	in	r25, 0x3e	; 62
    1b3e:	08 97       	sbiw	r24, 0x08	; 8
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	9e bf       	out	0x3e, r25	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	8d bf       	out	0x3d, r24	; 61
    1b4a:	8d b7       	in	r24, 0x3d	; 61
    1b4c:	9e b7       	in	r25, 0x3e	; 62
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	6b e1       	ldi	r22, 0x1B	; 27
    1b52:	73 e0       	ldi	r23, 0x03	; 3
    1b54:	fc 01       	movw	r30, r24
    1b56:	71 83       	std	Z+1, r23	; 0x01
    1b58:	60 83       	st	Z, r22
    1b5a:	69 81       	ldd	r22, Y+1	; 0x01
    1b5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1b5e:	fc 01       	movw	r30, r24
    1b60:	73 83       	std	Z+3, r23	; 0x03
    1b62:	62 83       	std	Z+2, r22	; 0x02
    1b64:	fc 01       	movw	r30, r24
    1b66:	55 83       	std	Z+5, r21	; 0x05
    1b68:	44 83       	std	Z+4, r20	; 0x04
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	37 83       	std	Z+7, r19	; 0x07
    1b6e:	26 83       	std	Z+6, r18	; 0x06
    1b70:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
    1b74:	8d b7       	in	r24, 0x3d	; 61
    1b76:	9e b7       	in	r25, 0x3e	; 62
    1b78:	08 96       	adiw	r24, 0x08	; 8
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	9e bf       	out	0x3e, r25	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	8d bf       	out	0x3d, r24	; 61
			werrors++;
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	e8 e0       	ldi	r30, 0x08	; 8
    1b9e:	80 30       	cpi	r24, 0x00	; 0
    1ba0:	9e 07       	cpc	r25, r30
    1ba2:	08 f4       	brcc	.+2      	; 0x1ba6 <SRAM_test+0xe6>
    1ba4:	a6 cf       	rjmp	.-180    	; 0x1af2 <SRAM_test+0x32>
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    1ba6:	1a 82       	std	Y+2, r1	; 0x02
    1ba8:	19 82       	std	Y+1, r1	; 0x01
    1baa:	4a c0       	rjmp	.+148    	; 0x1c40 <SRAM_test+0x180>
		//_delay_ms(1);
		testvalue = ~(i % 256);
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	80 95       	com	r24
    1bb0:	89 87       	std	Y+9, r24	; 0x09
		//printf("READ: current i: %d \r\n",i);
  		if (ext_ram[i] != testvalue) {
    1bb2:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb4:	38 85       	ldd	r19, Y+8	; 0x08
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	90 81       	ld	r25, Z
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	98 17       	cp	r25, r24
    1bc6:	b9 f1       	breq	.+110    	; 0x1c36 <SRAM_test+0x176>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
    1bc8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bca:	38 85       	ldd	r19, Y+8	; 0x08
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	82 0f       	add	r24, r18
    1bd2:	93 1f       	adc	r25, r19
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8d b7       	in	r24, 0x3d	; 61
    1be4:	9e b7       	in	r25, 0x3e	; 62
    1be6:	08 97       	sbiw	r24, 0x08	; 8
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	9e bf       	out	0x3e, r25	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	8d bf       	out	0x3d, r24	; 61
    1bf2:	8d b7       	in	r24, 0x3d	; 61
    1bf4:	9e b7       	in	r25, 0x3e	; 62
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	6b e5       	ldi	r22, 0x5B	; 91
    1bfa:	73 e0       	ldi	r23, 0x03	; 3
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	71 83       	std	Z+1, r23	; 0x01
    1c00:	60 83       	st	Z, r22
    1c02:	69 81       	ldd	r22, Y+1	; 0x01
    1c04:	7a 81       	ldd	r23, Y+2	; 0x02
    1c06:	fc 01       	movw	r30, r24
    1c08:	73 83       	std	Z+3, r23	; 0x03
    1c0a:	62 83       	std	Z+2, r22	; 0x02
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	55 83       	std	Z+5, r21	; 0x05
    1c10:	44 83       	std	Z+4, r20	; 0x04
    1c12:	fc 01       	movw	r30, r24
    1c14:	37 83       	std	Z+7, r19	; 0x07
    1c16:	26 83       	std	Z+6, r18	; 0x06
    1c18:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
    1c1c:	8d b7       	in	r24, 0x3d	; 61
    1c1e:	9e b7       	in	r25, 0x3e	; 62
    1c20:	08 96       	adiw	r24, 0x08	; 8
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	9e bf       	out	0x3e, r25	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	8d bf       	out	0x3d, r24	; 61
			rerrors++;
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
		} else {
			//printf("SRAM WRITE OK \r\n "); 
		}
	}

	for (i = 0; i < 0x800; i++) {
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	e8 e0       	ldi	r30, 0x08	; 8
    1c46:	80 30       	cpi	r24, 0x00	; 0
    1c48:	9e 07       	cpc	r25, r30
    1c4a:	08 f4       	brcc	.+2      	; 0x1c4e <SRAM_test+0x18e>
    1c4c:	af cf       	rjmp	.-162    	; 0x1bac <SRAM_test+0xec>
			rerrors++;
		} else {
			//printf("SRAM READ OK \r\n "); 
		}
	}
	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <SRAM_test+0x190>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <SRAM_test+0x192>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <SRAM_test+0x194>
    1c54:	8d b7       	in	r24, 0x3d	; 61
    1c56:	9e b7       	in	r25, 0x3e	; 62
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	2a e9       	ldi	r18, 0x9A	; 154
    1c5c:	33 e0       	ldi	r19, 0x03	; 3
    1c5e:	fc 01       	movw	r30, r24
    1c60:	31 83       	std	Z+1, r19	; 0x01
    1c62:	20 83       	st	Z, r18
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	fc 01       	movw	r30, r24
    1c6a:	33 83       	std	Z+3, r19	; 0x03
    1c6c:	22 83       	std	Z+2, r18	; 0x02
    1c6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c70:	3e 81       	ldd	r19, Y+6	; 0x06
    1c72:	fc 01       	movw	r30, r24
    1c74:	35 83       	std	Z+5, r19	; 0x05
    1c76:	24 83       	std	Z+4, r18	; 0x04
    1c78:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <printf>
    1c7c:	8d b7       	in	r24, 0x3d	; 61
    1c7e:	9e b7       	in	r25, 0x3e	; 62
    1c80:	06 96       	adiw	r24, 0x06	; 6
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	9e bf       	out	0x3e, r25	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	8d bf       	out	0x3d, r24	; 61
}
    1c8c:	29 96       	adiw	r28, 0x09	; 9
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <GAL_test>:




void GAL_test(void* start, void* stop){
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	64 97       	sbiw	r28, 0x14	; 20
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	9a 8b       	std	Y+18, r25	; 0x12
    1cb8:	89 8b       	std	Y+17, r24	; 0x11
    1cba:	7c 8b       	std	Y+20, r23	; 0x14
    1cbc:	6b 8b       	std	Y+19, r22	; 0x13
	volatile char* access = (char *) start;
    1cbe:	89 89       	ldd	r24, Y+17	; 0x11
    1cc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
	while(access != (char* ) stop ) {
    1cc6:	8a c0       	rjmp	.+276    	; 0x1ddc <GAL_test+0x13e>
		*access = 0x42;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	22 e4       	ldi	r18, 0x42	; 66
    1cce:	fc 01       	movw	r30, r24
    1cd0:	20 83       	st	Z, r18
		++access;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e2       	ldi	r26, 0x20	; 32
    1ce2:	b1 e4       	ldi	r27, 0x41	; 65
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	ad 83       	std	Y+5, r26	; 0x05
    1cea:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	6b 81       	ldd	r22, Y+3	; 0x03
    1cee:	7c 81       	ldd	r23, Y+4	; 0x04
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	2a e9       	ldi	r18, 0x9A	; 154
    1cf6:	39 e9       	ldi	r19, 0x99	; 153
    1cf8:	49 e9       	ldi	r20, 0x99	; 153
    1cfa:	54 e4       	ldi	r21, 0x44	; 68
    1cfc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8f 83       	std	Y+7, r24	; 0x07
    1d06:	98 87       	std	Y+8, r25	; 0x08
    1d08:	a9 87       	std	Y+9, r26	; 0x09
    1d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0c:	11 e0       	ldi	r17, 0x01	; 1
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 2f 12 	call	0x245e	; 0x245e <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	0c f0       	brlt	.+2      	; 0x1d28 <GAL_test+0x8a>
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	11 23       	and	r17, r17
    1d2a:	29 f0       	breq	.+10     	; 0x1d36 <GAL_test+0x98>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9c 87       	std	Y+12, r25	; 0x0c
    1d32:	8b 87       	std	Y+11, r24	; 0x0b
    1d34:	46 c0       	rjmp	.+140    	; 0x1dc2 <GAL_test+0x124>
	else if (__tmp > 65535)
    1d36:	11 e0       	ldi	r17, 0x01	; 1
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 cf 11 	call	0x239e	; 0x239e <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <GAL_test+0xb4>
    1d50:	10 e0       	ldi	r17, 0x00	; 0
    1d52:	11 23       	and	r17, r17
    1d54:	61 f1       	breq	.+88     	; 0x1dae <GAL_test+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	6b 81       	ldd	r22, Y+3	; 0x03
    1d58:	7c 81       	ldd	r23, Y+4	; 0x04
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e2       	ldi	r20, 0x20	; 32
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9c 87       	std	Y+12, r25	; 0x0c
    1d7c:	8b 87       	std	Y+11, r24	; 0x0b
    1d7e:	12 c0       	rjmp	.+36     	; 0x1da4 <GAL_test+0x106>
    1d80:	8a e7       	ldi	r24, 0x7A	; 122
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9e 87       	std	Y+14, r25	; 0x0e
    1d86:	8d 87       	std	Y+13, r24	; 0x0d
    1d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	c8 01       	movw	r24, r16
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <GAL_test+0xf2>
    1d94:	8c 01       	movw	r16, r24
    1d96:	1e 87       	std	Y+14, r17	; 0x0e
    1d98:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9c 87       	std	Y+12, r25	; 0x0c
    1da2:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1da6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	51 f7       	brne	.-44     	; 0x1d80 <GAL_test+0xe2>
    1dac:	17 c0       	rjmp	.+46     	; 0x1ddc <GAL_test+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9c 87       	std	Y+12, r25	; 0x0c
    1dc0:	8b 87       	std	Y+11, r24	; 0x0b
    1dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dc6:	98 8b       	std	Y+16, r25	; 0x10
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	98 89       	ldd	r25, Y+16	; 0x10
    1dce:	8c 01       	movw	r16, r24
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	31 97       	sbiw	r30, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <GAL_test+0x134>
    1dd6:	8f 01       	movw	r16, r30
    1dd8:	18 8b       	std	Y+16, r17	; 0x10
    1dda:	0f 87       	std	Y+15, r16	; 0x0f



void GAL_test(void* start, void* stop){
	volatile char* access = (char *) start;
	while(access != (char* ) stop ) {
    1ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dde:	9c 89       	ldd	r25, Y+20	; 0x14
    1de0:	29 81       	ldd	r18, Y+1	; 0x01
    1de2:	3a 81       	ldd	r19, Y+2	; 0x02
    1de4:	28 17       	cp	r18, r24
    1de6:	39 07       	cpc	r19, r25
    1de8:	09 f0       	breq	.+2      	; 0x1dec <GAL_test+0x14e>
    1dea:	6e cf       	rjmp	.-292    	; 0x1cc8 <GAL_test+0x2a>
		++access;
		_delay_ms(10);
	}
		
	
    1dec:	64 96       	adiw	r28, 0x14	; 20
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <__fixunssfsi>:
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	7b 01       	movw	r14, r22
    1e0c:	8c 01       	movw	r16, r24
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	5f e4       	ldi	r21, 0x4F	; 79
    1e16:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__gesf2>
    1e1a:	87 fd       	sbrc	r24, 7
    1e1c:	11 c0       	rjmp	.+34     	; 0x1e40 <__fixunssfsi+0x3e>
    1e1e:	c8 01       	movw	r24, r16
    1e20:	b7 01       	movw	r22, r14
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	5f e4       	ldi	r21, 0x4F	; 79
    1e2a:	0e 94 a4 10 	call	0x2148	; 0x2148 <__subsf3>
    1e2e:	0e 94 5f 12 	call	0x24be	; 0x24be <__fixsfsi>
    1e32:	9b 01       	movw	r18, r22
    1e34:	ac 01       	movw	r20, r24
    1e36:	20 50       	subi	r18, 0x00	; 0
    1e38:	30 40       	sbci	r19, 0x00	; 0
    1e3a:	40 40       	sbci	r20, 0x00	; 0
    1e3c:	50 48       	sbci	r21, 0x80	; 128
    1e3e:	06 c0       	rjmp	.+12     	; 0x1e4c <__fixunssfsi+0x4a>
    1e40:	c8 01       	movw	r24, r16
    1e42:	b7 01       	movw	r22, r14
    1e44:	0e 94 5f 12 	call	0x24be	; 0x24be <__fixsfsi>
    1e48:	9b 01       	movw	r18, r22
    1e4a:	ac 01       	movw	r20, r24
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	ca 01       	movw	r24, r20
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	08 95       	ret

00001e5a <_fpadd_parts>:
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e3 e3       	ldi	r30, 0x33	; 51
    1e60:	ff e0       	ldi	r31, 0x0F	; 15
    1e62:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__prologue_saves__+0x8>
    1e66:	fc 01       	movw	r30, r24
    1e68:	ea 01       	movw	r28, r20
    1e6a:	80 81       	ld	r24, Z
    1e6c:	82 30       	cpi	r24, 0x02	; 2
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <_fpadd_parts+0x18>
    1e70:	38 c1       	rjmp	.+624    	; 0x20e2 <_fpadd_parts+0x288>
    1e72:	db 01       	movw	r26, r22
    1e74:	9c 91       	ld	r25, X
    1e76:	92 30       	cpi	r25, 0x02	; 2
    1e78:	08 f4       	brcc	.+2      	; 0x1e7c <_fpadd_parts+0x22>
    1e7a:	30 c1       	rjmp	.+608    	; 0x20dc <_fpadd_parts+0x282>
    1e7c:	84 30       	cpi	r24, 0x04	; 4
    1e7e:	59 f4       	brne	.+22     	; 0x1e96 <_fpadd_parts+0x3c>
    1e80:	94 30       	cpi	r25, 0x04	; 4
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <_fpadd_parts+0x2c>
    1e84:	2e c1       	rjmp	.+604    	; 0x20e2 <_fpadd_parts+0x288>
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	11 96       	adiw	r26, 0x01	; 1
    1e8a:	8c 91       	ld	r24, X
    1e8c:	11 97       	sbiw	r26, 0x01	; 1
    1e8e:	98 17       	cp	r25, r24
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <_fpadd_parts+0x3a>
    1e92:	21 c1       	rjmp	.+578    	; 0x20d6 <_fpadd_parts+0x27c>
    1e94:	26 c1       	rjmp	.+588    	; 0x20e2 <_fpadd_parts+0x288>
    1e96:	94 30       	cpi	r25, 0x04	; 4
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <_fpadd_parts+0x42>
    1e9a:	20 c1       	rjmp	.+576    	; 0x20dc <_fpadd_parts+0x282>
    1e9c:	92 30       	cpi	r25, 0x02	; 2
    1e9e:	b1 f4       	brne	.+44     	; 0x1ecc <_fpadd_parts+0x72>
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <_fpadd_parts+0x4c>
    1ea4:	1e c1       	rjmp	.+572    	; 0x20e2 <_fpadd_parts+0x288>
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	af 01       	movw	r20, r30
    1eaa:	28 e0       	ldi	r18, 0x08	; 8
    1eac:	da 01       	movw	r26, r20
    1eae:	0d 90       	ld	r0, X+
    1eb0:	ad 01       	movw	r20, r26
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	0d 92       	st	X+, r0
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	21 50       	subi	r18, 0x01	; 1
    1eba:	c1 f7       	brne	.-16     	; 0x1eac <_fpadd_parts+0x52>
    1ebc:	db 01       	movw	r26, r22
    1ebe:	11 96       	adiw	r26, 0x01	; 1
    1ec0:	8c 91       	ld	r24, X
    1ec2:	11 97       	sbiw	r26, 0x01	; 1
    1ec4:	91 81       	ldd	r25, Z+1	; 0x01
    1ec6:	89 23       	and	r24, r25
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	0a c1       	rjmp	.+532    	; 0x20e0 <_fpadd_parts+0x286>
    1ecc:	82 30       	cpi	r24, 0x02	; 2
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <_fpadd_parts+0x78>
    1ed0:	05 c1       	rjmp	.+522    	; 0x20dc <_fpadd_parts+0x282>
    1ed2:	c2 80       	ldd	r12, Z+2	; 0x02
    1ed4:	d3 80       	ldd	r13, Z+3	; 0x03
    1ed6:	db 01       	movw	r26, r22
    1ed8:	12 96       	adiw	r26, 0x02	; 2
    1eda:	6d 90       	ld	r6, X+
    1edc:	7c 90       	ld	r7, X
    1ede:	13 97       	sbiw	r26, 0x03	; 3
    1ee0:	24 81       	ldd	r18, Z+4	; 0x04
    1ee2:	35 81       	ldd	r19, Z+5	; 0x05
    1ee4:	46 81       	ldd	r20, Z+6	; 0x06
    1ee6:	57 81       	ldd	r21, Z+7	; 0x07
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	ed 90       	ld	r14, X+
    1eec:	fd 90       	ld	r15, X+
    1eee:	0d 91       	ld	r16, X+
    1ef0:	1c 91       	ld	r17, X
    1ef2:	17 97       	sbiw	r26, 0x07	; 7
    1ef4:	c6 01       	movw	r24, r12
    1ef6:	86 19       	sub	r24, r6
    1ef8:	97 09       	sbc	r25, r7
    1efa:	5c 01       	movw	r10, r24
    1efc:	97 ff       	sbrs	r25, 7
    1efe:	04 c0       	rjmp	.+8      	; 0x1f08 <_fpadd_parts+0xae>
    1f00:	aa 24       	eor	r10, r10
    1f02:	bb 24       	eor	r11, r11
    1f04:	a8 1a       	sub	r10, r24
    1f06:	b9 0a       	sbc	r11, r25
    1f08:	b0 e2       	ldi	r27, 0x20	; 32
    1f0a:	ab 16       	cp	r10, r27
    1f0c:	b1 04       	cpc	r11, r1
    1f0e:	0c f0       	brlt	.+2      	; 0x1f12 <_fpadd_parts+0xb8>
    1f10:	61 c0       	rjmp	.+194    	; 0x1fd4 <_fpadd_parts+0x17a>
    1f12:	18 16       	cp	r1, r24
    1f14:	19 06       	cpc	r1, r25
    1f16:	6c f5       	brge	.+90     	; 0x1f72 <_fpadd_parts+0x118>
    1f18:	37 01       	movw	r6, r14
    1f1a:	48 01       	movw	r8, r16
    1f1c:	0a 2c       	mov	r0, r10
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <_fpadd_parts+0xce>
    1f20:	96 94       	lsr	r9
    1f22:	87 94       	ror	r8
    1f24:	77 94       	ror	r7
    1f26:	67 94       	ror	r6
    1f28:	0a 94       	dec	r0
    1f2a:	d2 f7       	brpl	.-12     	; 0x1f20 <_fpadd_parts+0xc6>
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a0 e0       	ldi	r26, 0x00	; 0
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	0a 2c       	mov	r0, r10
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <_fpadd_parts+0xe6>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	aa 1f       	adc	r26, r26
    1f3e:	bb 1f       	adc	r27, r27
    1f40:	0a 94       	dec	r0
    1f42:	d2 f7       	brpl	.-12     	; 0x1f38 <_fpadd_parts+0xde>
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	a1 09       	sbc	r26, r1
    1f48:	b1 09       	sbc	r27, r1
    1f4a:	8e 21       	and	r24, r14
    1f4c:	9f 21       	and	r25, r15
    1f4e:	a0 23       	and	r26, r16
    1f50:	b1 23       	and	r27, r17
    1f52:	ee 24       	eor	r14, r14
    1f54:	ff 24       	eor	r15, r15
    1f56:	87 01       	movw	r16, r14
    1f58:	e3 94       	inc	r14
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	a1 05       	cpc	r26, r1
    1f5e:	b1 05       	cpc	r27, r1
    1f60:	19 f4       	brne	.+6      	; 0x1f68 <_fpadd_parts+0x10e>
    1f62:	ee 24       	eor	r14, r14
    1f64:	ff 24       	eor	r15, r15
    1f66:	87 01       	movw	r16, r14
    1f68:	e6 28       	or	r14, r6
    1f6a:	f7 28       	or	r15, r7
    1f6c:	08 29       	or	r16, r8
    1f6e:	19 29       	or	r17, r9
    1f70:	3c c0       	rjmp	.+120    	; 0x1fea <_fpadd_parts+0x190>
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	d1 f1       	breq	.+116    	; 0x1fea <_fpadd_parts+0x190>
    1f76:	ca 0c       	add	r12, r10
    1f78:	db 1c       	adc	r13, r11
    1f7a:	39 01       	movw	r6, r18
    1f7c:	4a 01       	movw	r8, r20
    1f7e:	0a 2c       	mov	r0, r10
    1f80:	04 c0       	rjmp	.+8      	; 0x1f8a <_fpadd_parts+0x130>
    1f82:	96 94       	lsr	r9
    1f84:	87 94       	ror	r8
    1f86:	77 94       	ror	r7
    1f88:	67 94       	ror	r6
    1f8a:	0a 94       	dec	r0
    1f8c:	d2 f7       	brpl	.-12     	; 0x1f82 <_fpadd_parts+0x128>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e0       	ldi	r26, 0x00	; 0
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	0a 2c       	mov	r0, r10
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <_fpadd_parts+0x148>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	0a 94       	dec	r0
    1fa4:	d2 f7       	brpl	.-12     	; 0x1f9a <_fpadd_parts+0x140>
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	a1 09       	sbc	r26, r1
    1faa:	b1 09       	sbc	r27, r1
    1fac:	82 23       	and	r24, r18
    1fae:	93 23       	and	r25, r19
    1fb0:	a4 23       	and	r26, r20
    1fb2:	b5 23       	and	r27, r21
    1fb4:	21 e0       	ldi	r18, 0x01	; 1
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	a1 05       	cpc	r26, r1
    1fc0:	b1 05       	cpc	r27, r1
    1fc2:	19 f4       	brne	.+6      	; 0x1fca <_fpadd_parts+0x170>
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	a9 01       	movw	r20, r18
    1fca:	26 29       	or	r18, r6
    1fcc:	37 29       	or	r19, r7
    1fce:	48 29       	or	r20, r8
    1fd0:	59 29       	or	r21, r9
    1fd2:	0b c0       	rjmp	.+22     	; 0x1fea <_fpadd_parts+0x190>
    1fd4:	6c 14       	cp	r6, r12
    1fd6:	7d 04       	cpc	r7, r13
    1fd8:	24 f4       	brge	.+8      	; 0x1fe2 <_fpadd_parts+0x188>
    1fda:	ee 24       	eor	r14, r14
    1fdc:	ff 24       	eor	r15, r15
    1fde:	87 01       	movw	r16, r14
    1fe0:	04 c0       	rjmp	.+8      	; 0x1fea <_fpadd_parts+0x190>
    1fe2:	63 01       	movw	r12, r6
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	a9 01       	movw	r20, r18
    1fea:	81 81       	ldd	r24, Z+1	; 0x01
    1fec:	fb 01       	movw	r30, r22
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	89 17       	cp	r24, r25
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <_fpadd_parts+0x19c>
    1ff4:	45 c0       	rjmp	.+138    	; 0x2080 <_fpadd_parts+0x226>
    1ff6:	88 23       	and	r24, r24
    1ff8:	49 f0       	breq	.+18     	; 0x200c <_fpadd_parts+0x1b2>
    1ffa:	d8 01       	movw	r26, r16
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	82 1b       	sub	r24, r18
    2000:	93 0b       	sbc	r25, r19
    2002:	a4 0b       	sbc	r26, r20
    2004:	b5 0b       	sbc	r27, r21
    2006:	9c 01       	movw	r18, r24
    2008:	ad 01       	movw	r20, r26
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <_fpadd_parts+0x1ba>
    200c:	2e 19       	sub	r18, r14
    200e:	3f 09       	sbc	r19, r15
    2010:	40 0b       	sbc	r20, r16
    2012:	51 0b       	sbc	r21, r17
    2014:	57 fd       	sbrc	r21, 7
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <_fpadd_parts+0x1c6>
    2018:	19 82       	std	Y+1, r1	; 0x01
    201a:	db 82       	std	Y+3, r13	; 0x03
    201c:	ca 82       	std	Y+2, r12	; 0x02
    201e:	0b c0       	rjmp	.+22     	; 0x2036 <_fpadd_parts+0x1dc>
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	db 82       	std	Y+3, r13	; 0x03
    2026:	ca 82       	std	Y+2, r12	; 0x02
    2028:	50 95       	com	r21
    202a:	40 95       	com	r20
    202c:	30 95       	com	r19
    202e:	21 95       	neg	r18
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	4f 4f       	sbci	r20, 0xFF	; 255
    2034:	5f 4f       	sbci	r21, 0xFF	; 255
    2036:	2c 83       	std	Y+4, r18	; 0x04
    2038:	3d 83       	std	Y+5, r19	; 0x05
    203a:	4e 83       	std	Y+6, r20	; 0x06
    203c:	5f 83       	std	Y+7, r21	; 0x07
    203e:	0d c0       	rjmp	.+26     	; 0x205a <_fpadd_parts+0x200>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	aa 1f       	adc	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	8c 83       	std	Y+4, r24	; 0x04
    204a:	9d 83       	std	Y+5, r25	; 0x05
    204c:	ae 83       	std	Y+6, r26	; 0x06
    204e:	bf 83       	std	Y+7, r27	; 0x07
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9b 83       	std	Y+3, r25	; 0x03
    2058:	8a 83       	std	Y+2, r24	; 0x02
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	9d 81       	ldd	r25, Y+5	; 0x05
    205e:	ae 81       	ldd	r26, Y+6	; 0x06
    2060:	bf 81       	ldd	r27, Y+7	; 0x07
    2062:	9c 01       	movw	r18, r24
    2064:	ad 01       	movw	r20, r26
    2066:	21 50       	subi	r18, 0x01	; 1
    2068:	30 40       	sbci	r19, 0x00	; 0
    206a:	40 40       	sbci	r20, 0x00	; 0
    206c:	50 40       	sbci	r21, 0x00	; 0
    206e:	2f 3f       	cpi	r18, 0xFF	; 255
    2070:	ef ef       	ldi	r30, 0xFF	; 255
    2072:	3e 07       	cpc	r19, r30
    2074:	ef ef       	ldi	r30, 0xFF	; 255
    2076:	4e 07       	cpc	r20, r30
    2078:	ef e3       	ldi	r30, 0x3F	; 63
    207a:	5e 07       	cpc	r21, r30
    207c:	08 f3       	brcs	.-62     	; 0x2040 <_fpadd_parts+0x1e6>
    207e:	0b c0       	rjmp	.+22     	; 0x2096 <_fpadd_parts+0x23c>
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	db 82       	std	Y+3, r13	; 0x03
    2084:	ca 82       	std	Y+2, r12	; 0x02
    2086:	2e 0d       	add	r18, r14
    2088:	3f 1d       	adc	r19, r15
    208a:	40 1f       	adc	r20, r16
    208c:	51 1f       	adc	r21, r17
    208e:	2c 83       	std	Y+4, r18	; 0x04
    2090:	3d 83       	std	Y+5, r19	; 0x05
    2092:	4e 83       	std	Y+6, r20	; 0x06
    2094:	5f 83       	std	Y+7, r21	; 0x07
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	88 83       	st	Y, r24
    209a:	2c 81       	ldd	r18, Y+4	; 0x04
    209c:	3d 81       	ldd	r19, Y+5	; 0x05
    209e:	4e 81       	ldd	r20, Y+6	; 0x06
    20a0:	5f 81       	ldd	r21, Y+7	; 0x07
    20a2:	57 ff       	sbrs	r21, 7
    20a4:	1d c0       	rjmp	.+58     	; 0x20e0 <_fpadd_parts+0x286>
    20a6:	da 01       	movw	r26, r20
    20a8:	c9 01       	movw	r24, r18
    20aa:	81 70       	andi	r24, 0x01	; 1
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	56 95       	lsr	r21
    20b4:	47 95       	ror	r20
    20b6:	37 95       	ror	r19
    20b8:	27 95       	ror	r18
    20ba:	82 2b       	or	r24, r18
    20bc:	93 2b       	or	r25, r19
    20be:	a4 2b       	or	r26, r20
    20c0:	b5 2b       	or	r27, r21
    20c2:	8c 83       	std	Y+4, r24	; 0x04
    20c4:	9d 83       	std	Y+5, r25	; 0x05
    20c6:	ae 83       	std	Y+6, r26	; 0x06
    20c8:	bf 83       	std	Y+7, r27	; 0x07
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	9b 81       	ldd	r25, Y+3	; 0x03
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	9b 83       	std	Y+3, r25	; 0x03
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <_fpadd_parts+0x286>
    20d6:	ea ee       	ldi	r30, 0xEA	; 234
    20d8:	f3 e0       	ldi	r31, 0x03	; 3
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <_fpadd_parts+0x288>
    20dc:	fb 01       	movw	r30, r22
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <_fpadd_parts+0x288>
    20e0:	fe 01       	movw	r30, r28
    20e2:	cf 01       	movw	r24, r30
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	ee e0       	ldi	r30, 0x0E	; 14
    20ea:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__epilogue_restores__+0x8>

000020ee <__addsf3>:
    20ee:	a0 e2       	ldi	r26, 0x20	; 32
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ed e7       	ldi	r30, 0x7D	; 125
    20f4:	f0 e1       	ldi	r31, 0x10	; 16
    20f6:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0x18>
    20fa:	69 83       	std	Y+1, r22	; 0x01
    20fc:	7a 83       	std	Y+2, r23	; 0x02
    20fe:	8b 83       	std	Y+3, r24	; 0x03
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	2d 83       	std	Y+5, r18	; 0x05
    2104:	3e 83       	std	Y+6, r19	; 0x06
    2106:	4f 83       	std	Y+7, r20	; 0x07
    2108:	58 87       	std	Y+8, r21	; 0x08
    210a:	89 e0       	ldi	r24, 0x09	; 9
    210c:	e8 2e       	mov	r14, r24
    210e:	f1 2c       	mov	r15, r1
    2110:	ec 0e       	add	r14, r28
    2112:	fd 1e       	adc	r15, r29
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	b7 01       	movw	r22, r14
    211a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    211e:	8e 01       	movw	r16, r28
    2120:	0f 5e       	subi	r16, 0xEF	; 239
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	ce 01       	movw	r24, r28
    2126:	05 96       	adiw	r24, 0x05	; 5
    2128:	b8 01       	movw	r22, r16
    212a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    212e:	c7 01       	movw	r24, r14
    2130:	b8 01       	movw	r22, r16
    2132:	ae 01       	movw	r20, r28
    2134:	47 5e       	subi	r20, 0xE7	; 231
    2136:	5f 4f       	sbci	r21, 0xFF	; 255
    2138:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_fpadd_parts>
    213c:	0e 94 b1 12 	call	0x2562	; 0x2562 <__pack_f>
    2140:	a0 96       	adiw	r28, 0x20	; 32
    2142:	e6 e0       	ldi	r30, 0x06	; 6
    2144:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

00002148 <__subsf3>:
    2148:	a0 e2       	ldi	r26, 0x20	; 32
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ea ea       	ldi	r30, 0xAA	; 170
    214e:	f0 e1       	ldi	r31, 0x10	; 16
    2150:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0x18>
    2154:	69 83       	std	Y+1, r22	; 0x01
    2156:	7a 83       	std	Y+2, r23	; 0x02
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	2d 83       	std	Y+5, r18	; 0x05
    215e:	3e 83       	std	Y+6, r19	; 0x06
    2160:	4f 83       	std	Y+7, r20	; 0x07
    2162:	58 87       	std	Y+8, r21	; 0x08
    2164:	8e 01       	movw	r16, r28
    2166:	07 5f       	subi	r16, 0xF7	; 247
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	ce 01       	movw	r24, r28
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	b8 01       	movw	r22, r16
    2170:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    2174:	91 e1       	ldi	r25, 0x11	; 17
    2176:	e9 2e       	mov	r14, r25
    2178:	f1 2c       	mov	r15, r1
    217a:	ec 0e       	add	r14, r28
    217c:	fd 1e       	adc	r15, r29
    217e:	ce 01       	movw	r24, r28
    2180:	05 96       	adiw	r24, 0x05	; 5
    2182:	b7 01       	movw	r22, r14
    2184:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    2188:	8a 89       	ldd	r24, Y+18	; 0x12
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	89 27       	eor	r24, r25
    218e:	8a 8b       	std	Y+18, r24	; 0x12
    2190:	c8 01       	movw	r24, r16
    2192:	b7 01       	movw	r22, r14
    2194:	ae 01       	movw	r20, r28
    2196:	47 5e       	subi	r20, 0xE7	; 231
    2198:	5f 4f       	sbci	r21, 0xFF	; 255
    219a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_fpadd_parts>
    219e:	0e 94 b1 12 	call	0x2562	; 0x2562 <__pack_f>
    21a2:	a0 96       	adiw	r28, 0x20	; 32
    21a4:	e6 e0       	ldi	r30, 0x06	; 6
    21a6:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

000021aa <__mulsf3>:
    21aa:	a0 e2       	ldi	r26, 0x20	; 32
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	eb ed       	ldi	r30, 0xDB	; 219
    21b0:	f0 e1       	ldi	r31, 0x10	; 16
    21b2:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__>
    21b6:	69 83       	std	Y+1, r22	; 0x01
    21b8:	7a 83       	std	Y+2, r23	; 0x02
    21ba:	8b 83       	std	Y+3, r24	; 0x03
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	2d 83       	std	Y+5, r18	; 0x05
    21c0:	3e 83       	std	Y+6, r19	; 0x06
    21c2:	4f 83       	std	Y+7, r20	; 0x07
    21c4:	58 87       	std	Y+8, r21	; 0x08
    21c6:	ce 01       	movw	r24, r28
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	be 01       	movw	r22, r28
    21cc:	67 5f       	subi	r22, 0xF7	; 247
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255
    21d0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    21d4:	ce 01       	movw	r24, r28
    21d6:	05 96       	adiw	r24, 0x05	; 5
    21d8:	be 01       	movw	r22, r28
    21da:	6f 5e       	subi	r22, 0xEF	; 239
    21dc:	7f 4f       	sbci	r23, 0xFF	; 255
    21de:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    21e2:	99 85       	ldd	r25, Y+9	; 0x09
    21e4:	92 30       	cpi	r25, 0x02	; 2
    21e6:	78 f0       	brcs	.+30     	; 0x2206 <__mulsf3+0x5c>
    21e8:	89 89       	ldd	r24, Y+17	; 0x11
    21ea:	82 30       	cpi	r24, 0x02	; 2
    21ec:	c0 f0       	brcs	.+48     	; 0x221e <__mulsf3+0x74>
    21ee:	94 30       	cpi	r25, 0x04	; 4
    21f0:	19 f4       	brne	.+6      	; 0x21f8 <__mulsf3+0x4e>
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	41 f4       	brne	.+16     	; 0x2206 <__mulsf3+0x5c>
    21f6:	cb c0       	rjmp	.+406    	; 0x238e <__mulsf3+0x1e4>
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	19 f4       	brne	.+6      	; 0x2202 <__mulsf3+0x58>
    21fc:	92 30       	cpi	r25, 0x02	; 2
    21fe:	79 f4       	brne	.+30     	; 0x221e <__mulsf3+0x74>
    2200:	c6 c0       	rjmp	.+396    	; 0x238e <__mulsf3+0x1e4>
    2202:	92 30       	cpi	r25, 0x02	; 2
    2204:	51 f4       	brne	.+20     	; 0x221a <__mulsf3+0x70>
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	2a 85       	ldd	r18, Y+10	; 0x0a
    220a:	9a 89       	ldd	r25, Y+18	; 0x12
    220c:	29 17       	cp	r18, r25
    220e:	09 f4       	brne	.+2      	; 0x2212 <__mulsf3+0x68>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	8a 87       	std	Y+10, r24	; 0x0a
    2214:	ce 01       	movw	r24, r28
    2216:	09 96       	adiw	r24, 0x09	; 9
    2218:	bc c0       	rjmp	.+376    	; 0x2392 <__mulsf3+0x1e8>
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	51 f4       	brne	.+20     	; 0x2232 <__mulsf3+0x88>
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	2a 85       	ldd	r18, Y+10	; 0x0a
    2222:	9a 89       	ldd	r25, Y+18	; 0x12
    2224:	29 17       	cp	r18, r25
    2226:	09 f4       	brne	.+2      	; 0x222a <__mulsf3+0x80>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	8a 8b       	std	Y+18, r24	; 0x12
    222c:	ce 01       	movw	r24, r28
    222e:	41 96       	adiw	r24, 0x11	; 17
    2230:	b0 c0       	rjmp	.+352    	; 0x2392 <__mulsf3+0x1e8>
    2232:	6d 84       	ldd	r6, Y+13	; 0x0d
    2234:	7e 84       	ldd	r7, Y+14	; 0x0e
    2236:	8f 84       	ldd	r8, Y+15	; 0x0f
    2238:	98 88       	ldd	r9, Y+16	; 0x10
    223a:	ed 88       	ldd	r14, Y+21	; 0x15
    223c:	fe 88       	ldd	r15, Y+22	; 0x16
    223e:	0f 89       	ldd	r16, Y+23	; 0x17
    2240:	18 8d       	ldd	r17, Y+24	; 0x18
    2242:	e0 e2       	ldi	r30, 0x20	; 32
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	dc 01       	movw	r26, r24
    224c:	aa 24       	eor	r10, r10
    224e:	bb 24       	eor	r11, r11
    2250:	65 01       	movw	r12, r10
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	a9 01       	movw	r20, r18
    2258:	b3 01       	movw	r22, r6
    225a:	61 70       	andi	r22, 0x01	; 1
    225c:	70 70       	andi	r23, 0x00	; 0
    225e:	61 15       	cp	r22, r1
    2260:	71 05       	cpc	r23, r1
    2262:	d1 f0       	breq	.+52     	; 0x2298 <__mulsf3+0xee>
    2264:	2e 0d       	add	r18, r14
    2266:	3f 1d       	adc	r19, r15
    2268:	40 1f       	adc	r20, r16
    226a:	51 1f       	adc	r21, r17
    226c:	15 01       	movw	r2, r10
    226e:	26 01       	movw	r4, r12
    2270:	28 0e       	add	r2, r24
    2272:	39 1e       	adc	r3, r25
    2274:	4a 1e       	adc	r4, r26
    2276:	5b 1e       	adc	r5, r27
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a0 e0       	ldi	r26, 0x00	; 0
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	2e 15       	cp	r18, r14
    2282:	3f 05       	cpc	r19, r15
    2284:	40 07       	cpc	r20, r16
    2286:	51 07       	cpc	r21, r17
    2288:	18 f0       	brcs	.+6      	; 0x2290 <__mulsf3+0xe6>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	dc 01       	movw	r26, r24
    2290:	82 0d       	add	r24, r2
    2292:	93 1d       	adc	r25, r3
    2294:	a4 1d       	adc	r26, r4
    2296:	b5 1d       	adc	r27, r5
    2298:	aa 0c       	add	r10, r10
    229a:	bb 1c       	adc	r11, r11
    229c:	cc 1c       	adc	r12, r12
    229e:	dd 1c       	adc	r13, r13
    22a0:	17 ff       	sbrs	r17, 7
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__mulsf3+0x10c>
    22a4:	61 e0       	ldi	r22, 0x01	; 1
    22a6:	26 2e       	mov	r2, r22
    22a8:	31 2c       	mov	r3, r1
    22aa:	41 2c       	mov	r4, r1
    22ac:	51 2c       	mov	r5, r1
    22ae:	a2 28       	or	r10, r2
    22b0:	b3 28       	or	r11, r3
    22b2:	c4 28       	or	r12, r4
    22b4:	d5 28       	or	r13, r5
    22b6:	31 97       	sbiw	r30, 0x01	; 1
    22b8:	49 f0       	breq	.+18     	; 0x22cc <__mulsf3+0x122>
    22ba:	ee 0c       	add	r14, r14
    22bc:	ff 1c       	adc	r15, r15
    22be:	00 1f       	adc	r16, r16
    22c0:	11 1f       	adc	r17, r17
    22c2:	96 94       	lsr	r9
    22c4:	87 94       	ror	r8
    22c6:	77 94       	ror	r7
    22c8:	67 94       	ror	r6
    22ca:	c6 cf       	rjmp	.-116    	; 0x2258 <__mulsf3+0xae>
    22cc:	6b 89       	ldd	r22, Y+19	; 0x13
    22ce:	7c 89       	ldd	r23, Y+20	; 0x14
    22d0:	eb 85       	ldd	r30, Y+11	; 0x0b
    22d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    22d4:	6e 0f       	add	r22, r30
    22d6:	7f 1f       	adc	r23, r31
    22d8:	6e 5f       	subi	r22, 0xFE	; 254
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	7c 8f       	std	Y+28, r23	; 0x1c
    22de:	6b 8f       	std	Y+27, r22	; 0x1b
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    22e4:	7a 89       	ldd	r23, Y+18	; 0x12
    22e6:	e7 17       	cp	r30, r23
    22e8:	09 f4       	brne	.+2      	; 0x22ec <__mulsf3+0x142>
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	6a 8f       	std	Y+26, r22	; 0x1a
    22ee:	6b 8d       	ldd	r22, Y+27	; 0x1b
    22f0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    22f2:	10 c0       	rjmp	.+32     	; 0x2314 <__mulsf3+0x16a>
    22f4:	fc 01       	movw	r30, r24
    22f6:	e1 70       	andi	r30, 0x01	; 1
    22f8:	f0 70       	andi	r31, 0x00	; 0
    22fa:	30 97       	sbiw	r30, 0x00	; 0
    22fc:	29 f0       	breq	.+10     	; 0x2308 <__mulsf3+0x15e>
    22fe:	56 95       	lsr	r21
    2300:	47 95       	ror	r20
    2302:	37 95       	ror	r19
    2304:	27 95       	ror	r18
    2306:	50 68       	ori	r21, 0x80	; 128
    2308:	b6 95       	lsr	r27
    230a:	a7 95       	ror	r26
    230c:	97 95       	ror	r25
    230e:	87 95       	ror	r24
    2310:	6f 5f       	subi	r22, 0xFF	; 255
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	b7 fd       	sbrc	r27, 7
    2316:	ee cf       	rjmp	.-36     	; 0x22f4 <__mulsf3+0x14a>
    2318:	0c c0       	rjmp	.+24     	; 0x2332 <__mulsf3+0x188>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	aa 1f       	adc	r26, r26
    2320:	bb 1f       	adc	r27, r27
    2322:	57 fd       	sbrc	r21, 7
    2324:	81 60       	ori	r24, 0x01	; 1
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	44 1f       	adc	r20, r20
    232c:	55 1f       	adc	r21, r21
    232e:	61 50       	subi	r22, 0x01	; 1
    2330:	70 40       	sbci	r23, 0x00	; 0
    2332:	80 30       	cpi	r24, 0x00	; 0
    2334:	e0 e0       	ldi	r30, 0x00	; 0
    2336:	9e 07       	cpc	r25, r30
    2338:	e0 e0       	ldi	r30, 0x00	; 0
    233a:	ae 07       	cpc	r26, r30
    233c:	e0 e4       	ldi	r30, 0x40	; 64
    233e:	be 07       	cpc	r27, r30
    2340:	60 f3       	brcs	.-40     	; 0x231a <__mulsf3+0x170>
    2342:	6b 8f       	std	Y+27, r22	; 0x1b
    2344:	7c 8f       	std	Y+28, r23	; 0x1c
    2346:	6f e7       	ldi	r22, 0x7F	; 127
    2348:	e6 2e       	mov	r14, r22
    234a:	f1 2c       	mov	r15, r1
    234c:	01 2d       	mov	r16, r1
    234e:	11 2d       	mov	r17, r1
    2350:	e8 22       	and	r14, r24
    2352:	f9 22       	and	r15, r25
    2354:	0a 23       	and	r16, r26
    2356:	1b 23       	and	r17, r27
    2358:	60 e4       	ldi	r22, 0x40	; 64
    235a:	e6 16       	cp	r14, r22
    235c:	f1 04       	cpc	r15, r1
    235e:	01 05       	cpc	r16, r1
    2360:	11 05       	cpc	r17, r1
    2362:	61 f4       	brne	.+24     	; 0x237c <__mulsf3+0x1d2>
    2364:	87 fd       	sbrc	r24, 7
    2366:	0a c0       	rjmp	.+20     	; 0x237c <__mulsf3+0x1d2>
    2368:	21 15       	cp	r18, r1
    236a:	31 05       	cpc	r19, r1
    236c:	41 05       	cpc	r20, r1
    236e:	51 05       	cpc	r21, r1
    2370:	29 f0       	breq	.+10     	; 0x237c <__mulsf3+0x1d2>
    2372:	80 5c       	subi	r24, 0xC0	; 192
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	af 4f       	sbci	r26, 0xFF	; 255
    2378:	bf 4f       	sbci	r27, 0xFF	; 255
    237a:	80 78       	andi	r24, 0x80	; 128
    237c:	8d 8f       	std	Y+29, r24	; 0x1d
    237e:	9e 8f       	std	Y+30, r25	; 0x1e
    2380:	af 8f       	std	Y+31, r26	; 0x1f
    2382:	b8 a3       	std	Y+32, r27	; 0x20
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	89 8f       	std	Y+25, r24	; 0x19
    2388:	ce 01       	movw	r24, r28
    238a:	49 96       	adiw	r24, 0x19	; 25
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <__mulsf3+0x1e8>
    238e:	8a ee       	ldi	r24, 0xEA	; 234
    2390:	93 e0       	ldi	r25, 0x03	; 3
    2392:	0e 94 b1 12 	call	0x2562	; 0x2562 <__pack_f>
    2396:	a0 96       	adiw	r28, 0x20	; 32
    2398:	e2 e1       	ldi	r30, 0x12	; 18
    239a:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__>

0000239e <__gtsf2>:
    239e:	a8 e1       	ldi	r26, 0x18	; 24
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e5 ed       	ldi	r30, 0xD5	; 213
    23a4:	f1 e1       	ldi	r31, 0x11	; 17
    23a6:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0x18>
    23aa:	69 83       	std	Y+1, r22	; 0x01
    23ac:	7a 83       	std	Y+2, r23	; 0x02
    23ae:	8b 83       	std	Y+3, r24	; 0x03
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	2d 83       	std	Y+5, r18	; 0x05
    23b4:	3e 83       	std	Y+6, r19	; 0x06
    23b6:	4f 83       	std	Y+7, r20	; 0x07
    23b8:	58 87       	std	Y+8, r21	; 0x08
    23ba:	8e 01       	movw	r16, r28
    23bc:	07 5f       	subi	r16, 0xF7	; 247
    23be:	1f 4f       	sbci	r17, 0xFF	; 255
    23c0:	ce 01       	movw	r24, r28
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	b8 01       	movw	r22, r16
    23c6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    23ca:	81 e1       	ldi	r24, 0x11	; 17
    23cc:	e8 2e       	mov	r14, r24
    23ce:	f1 2c       	mov	r15, r1
    23d0:	ec 0e       	add	r14, r28
    23d2:	fd 1e       	adc	r15, r29
    23d4:	ce 01       	movw	r24, r28
    23d6:	05 96       	adiw	r24, 0x05	; 5
    23d8:	b7 01       	movw	r22, r14
    23da:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	82 30       	cpi	r24, 0x02	; 2
    23e2:	40 f0       	brcs	.+16     	; 0x23f4 <__gtsf2+0x56>
    23e4:	89 89       	ldd	r24, Y+17	; 0x11
    23e6:	82 30       	cpi	r24, 0x02	; 2
    23e8:	28 f0       	brcs	.+10     	; 0x23f4 <__gtsf2+0x56>
    23ea:	c8 01       	movw	r24, r16
    23ec:	b7 01       	movw	r22, r14
    23ee:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fpcmp_parts_f>
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <__gtsf2+0x58>
    23f4:	8f ef       	ldi	r24, 0xFF	; 255
    23f6:	68 96       	adiw	r28, 0x18	; 24
    23f8:	e6 e0       	ldi	r30, 0x06	; 6
    23fa:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

000023fe <__gesf2>:
    23fe:	a8 e1       	ldi	r26, 0x18	; 24
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e5 e0       	ldi	r30, 0x05	; 5
    2404:	f2 e1       	ldi	r31, 0x12	; 18
    2406:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0x18>
    240a:	69 83       	std	Y+1, r22	; 0x01
    240c:	7a 83       	std	Y+2, r23	; 0x02
    240e:	8b 83       	std	Y+3, r24	; 0x03
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	2d 83       	std	Y+5, r18	; 0x05
    2414:	3e 83       	std	Y+6, r19	; 0x06
    2416:	4f 83       	std	Y+7, r20	; 0x07
    2418:	58 87       	std	Y+8, r21	; 0x08
    241a:	8e 01       	movw	r16, r28
    241c:	07 5f       	subi	r16, 0xF7	; 247
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	ce 01       	movw	r24, r28
    2422:	01 96       	adiw	r24, 0x01	; 1
    2424:	b8 01       	movw	r22, r16
    2426:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    242a:	81 e1       	ldi	r24, 0x11	; 17
    242c:	e8 2e       	mov	r14, r24
    242e:	f1 2c       	mov	r15, r1
    2430:	ec 0e       	add	r14, r28
    2432:	fd 1e       	adc	r15, r29
    2434:	ce 01       	movw	r24, r28
    2436:	05 96       	adiw	r24, 0x05	; 5
    2438:	b7 01       	movw	r22, r14
    243a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	40 f0       	brcs	.+16     	; 0x2454 <__gesf2+0x56>
    2444:	89 89       	ldd	r24, Y+17	; 0x11
    2446:	82 30       	cpi	r24, 0x02	; 2
    2448:	28 f0       	brcs	.+10     	; 0x2454 <__gesf2+0x56>
    244a:	c8 01       	movw	r24, r16
    244c:	b7 01       	movw	r22, r14
    244e:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fpcmp_parts_f>
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <__gesf2+0x58>
    2454:	8f ef       	ldi	r24, 0xFF	; 255
    2456:	68 96       	adiw	r28, 0x18	; 24
    2458:	e6 e0       	ldi	r30, 0x06	; 6
    245a:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

0000245e <__ltsf2>:
    245e:	a8 e1       	ldi	r26, 0x18	; 24
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e5 e3       	ldi	r30, 0x35	; 53
    2464:	f2 e1       	ldi	r31, 0x12	; 18
    2466:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0x18>
    246a:	69 83       	std	Y+1, r22	; 0x01
    246c:	7a 83       	std	Y+2, r23	; 0x02
    246e:	8b 83       	std	Y+3, r24	; 0x03
    2470:	9c 83       	std	Y+4, r25	; 0x04
    2472:	2d 83       	std	Y+5, r18	; 0x05
    2474:	3e 83       	std	Y+6, r19	; 0x06
    2476:	4f 83       	std	Y+7, r20	; 0x07
    2478:	58 87       	std	Y+8, r21	; 0x08
    247a:	8e 01       	movw	r16, r28
    247c:	07 5f       	subi	r16, 0xF7	; 247
    247e:	1f 4f       	sbci	r17, 0xFF	; 255
    2480:	ce 01       	movw	r24, r28
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	b8 01       	movw	r22, r16
    2486:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    248a:	81 e1       	ldi	r24, 0x11	; 17
    248c:	e8 2e       	mov	r14, r24
    248e:	f1 2c       	mov	r15, r1
    2490:	ec 0e       	add	r14, r28
    2492:	fd 1e       	adc	r15, r29
    2494:	ce 01       	movw	r24, r28
    2496:	05 96       	adiw	r24, 0x05	; 5
    2498:	b7 01       	movw	r22, r14
    249a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	40 f0       	brcs	.+16     	; 0x24b4 <__ltsf2+0x56>
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	28 f0       	brcs	.+10     	; 0x24b4 <__ltsf2+0x56>
    24aa:	c8 01       	movw	r24, r16
    24ac:	b7 01       	movw	r22, r14
    24ae:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fpcmp_parts_f>
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <__ltsf2+0x58>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	68 96       	adiw	r28, 0x18	; 24
    24b8:	e6 e0       	ldi	r30, 0x06	; 6
    24ba:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

000024be <__fixsfsi>:
    24be:	ac e0       	ldi	r26, 0x0C	; 12
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e5 e6       	ldi	r30, 0x65	; 101
    24c4:	f2 e1       	ldi	r31, 0x12	; 18
    24c6:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__+0x20>
    24ca:	69 83       	std	Y+1, r22	; 0x01
    24cc:	7a 83       	std	Y+2, r23	; 0x02
    24ce:	8b 83       	std	Y+3, r24	; 0x03
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	ce 01       	movw	r24, r28
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	be 01       	movw	r22, r28
    24d8:	6b 5f       	subi	r22, 0xFB	; 251
    24da:	7f 4f       	sbci	r23, 0xFF	; 255
    24dc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__unpack_f>
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	81 f1       	breq	.+96     	; 0x2546 <__fixsfsi+0x88>
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	70 f1       	brcs	.+92     	; 0x2546 <__fixsfsi+0x88>
    24ea:	84 30       	cpi	r24, 0x04	; 4
    24ec:	21 f4       	brne	.+8      	; 0x24f6 <__fixsfsi+0x38>
    24ee:	8e 81       	ldd	r24, Y+6	; 0x06
    24f0:	88 23       	and	r24, r24
    24f2:	69 f1       	breq	.+90     	; 0x254e <__fixsfsi+0x90>
    24f4:	0a c0       	rjmp	.+20     	; 0x250a <__fixsfsi+0x4c>
    24f6:	2f 81       	ldd	r18, Y+7	; 0x07
    24f8:	38 85       	ldd	r19, Y+8	; 0x08
    24fa:	37 fd       	sbrc	r19, 7
    24fc:	24 c0       	rjmp	.+72     	; 0x2546 <__fixsfsi+0x88>
    24fe:	6e 81       	ldd	r22, Y+6	; 0x06
    2500:	2f 31       	cpi	r18, 0x1F	; 31
    2502:	31 05       	cpc	r19, r1
    2504:	3c f0       	brlt	.+14     	; 0x2514 <__fixsfsi+0x56>
    2506:	66 23       	and	r22, r22
    2508:	11 f1       	breq	.+68     	; 0x254e <__fixsfsi+0x90>
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	50 e8       	ldi	r21, 0x80	; 128
    2512:	21 c0       	rjmp	.+66     	; 0x2556 <__fixsfsi+0x98>
    2514:	8e e1       	ldi	r24, 0x1E	; 30
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	82 1b       	sub	r24, r18
    251a:	93 0b       	sbc	r25, r19
    251c:	29 85       	ldd	r18, Y+9	; 0x09
    251e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2520:	4b 85       	ldd	r20, Y+11	; 0x0b
    2522:	5c 85       	ldd	r21, Y+12	; 0x0c
    2524:	04 c0       	rjmp	.+8      	; 0x252e <__fixsfsi+0x70>
    2526:	56 95       	lsr	r21
    2528:	47 95       	ror	r20
    252a:	37 95       	ror	r19
    252c:	27 95       	ror	r18
    252e:	8a 95       	dec	r24
    2530:	d2 f7       	brpl	.-12     	; 0x2526 <__fixsfsi+0x68>
    2532:	66 23       	and	r22, r22
    2534:	81 f0       	breq	.+32     	; 0x2556 <__fixsfsi+0x98>
    2536:	50 95       	com	r21
    2538:	40 95       	com	r20
    253a:	30 95       	com	r19
    253c:	21 95       	neg	r18
    253e:	3f 4f       	sbci	r19, 0xFF	; 255
    2540:	4f 4f       	sbci	r20, 0xFF	; 255
    2542:	5f 4f       	sbci	r21, 0xFF	; 255
    2544:	08 c0       	rjmp	.+16     	; 0x2556 <__fixsfsi+0x98>
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	a9 01       	movw	r20, r18
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <__fixsfsi+0x98>
    254e:	2f ef       	ldi	r18, 0xFF	; 255
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f ef       	ldi	r20, 0xFF	; 255
    2554:	5f e7       	ldi	r21, 0x7F	; 127
    2556:	b9 01       	movw	r22, r18
    2558:	ca 01       	movw	r24, r20
    255a:	2c 96       	adiw	r28, 0x0c	; 12
    255c:	e2 e0       	ldi	r30, 0x02	; 2
    255e:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__+0x20>

00002562 <__pack_f>:
    2562:	ef 92       	push	r14
    2564:	ff 92       	push	r15
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	fc 01       	movw	r30, r24
    2570:	24 81       	ldd	r18, Z+4	; 0x04
    2572:	35 81       	ldd	r19, Z+5	; 0x05
    2574:	46 81       	ldd	r20, Z+6	; 0x06
    2576:	57 81       	ldd	r21, Z+7	; 0x07
    2578:	61 81       	ldd	r22, Z+1	; 0x01
    257a:	80 81       	ld	r24, Z
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	20 f4       	brcc	.+8      	; 0x2588 <__pack_f+0x26>
    2580:	40 61       	ori	r20, 0x10	; 16
    2582:	ef ef       	ldi	r30, 0xFF	; 255
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	a3 c0       	rjmp	.+326    	; 0x26ce <__pack_f+0x16c>
    2588:	84 30       	cpi	r24, 0x04	; 4
    258a:	09 f4       	brne	.+2      	; 0x258e <__pack_f+0x2c>
    258c:	9b c0       	rjmp	.+310    	; 0x26c4 <__pack_f+0x162>
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	09 f4       	brne	.+2      	; 0x2594 <__pack_f+0x32>
    2592:	92 c0       	rjmp	.+292    	; 0x26b8 <__pack_f+0x156>
    2594:	21 15       	cp	r18, r1
    2596:	31 05       	cpc	r19, r1
    2598:	41 05       	cpc	r20, r1
    259a:	51 05       	cpc	r21, r1
    259c:	09 f4       	brne	.+2      	; 0x25a0 <__pack_f+0x3e>
    259e:	8f c0       	rjmp	.+286    	; 0x26be <__pack_f+0x15c>
    25a0:	02 80       	ldd	r0, Z+2	; 0x02
    25a2:	f3 81       	ldd	r31, Z+3	; 0x03
    25a4:	e0 2d       	mov	r30, r0
    25a6:	8f ef       	ldi	r24, 0xFF	; 255
    25a8:	e2 38       	cpi	r30, 0x82	; 130
    25aa:	f8 07       	cpc	r31, r24
    25ac:	0c f0       	brlt	.+2      	; 0x25b0 <__pack_f+0x4e>
    25ae:	5a c0       	rjmp	.+180    	; 0x2664 <__pack_f+0x102>
    25b0:	c2 e8       	ldi	r28, 0x82	; 130
    25b2:	df ef       	ldi	r29, 0xFF	; 255
    25b4:	ce 1b       	sub	r28, r30
    25b6:	df 0b       	sbc	r29, r31
    25b8:	ca 31       	cpi	r28, 0x1A	; 26
    25ba:	d1 05       	cpc	r29, r1
    25bc:	6c f5       	brge	.+90     	; 0x2618 <__pack_f+0xb6>
    25be:	79 01       	movw	r14, r18
    25c0:	8a 01       	movw	r16, r20
    25c2:	0c 2e       	mov	r0, r28
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <__pack_f+0x6c>
    25c6:	16 95       	lsr	r17
    25c8:	07 95       	ror	r16
    25ca:	f7 94       	ror	r15
    25cc:	e7 94       	ror	r14
    25ce:	0a 94       	dec	r0
    25d0:	d2 f7       	brpl	.-12     	; 0x25c6 <__pack_f+0x64>
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e0       	ldi	r26, 0x00	; 0
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	0c 2e       	mov	r0, r28
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <__pack_f+0x84>
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	aa 1f       	adc	r26, r26
    25e4:	bb 1f       	adc	r27, r27
    25e6:	0a 94       	dec	r0
    25e8:	d2 f7       	brpl	.-12     	; 0x25de <__pack_f+0x7c>
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	a1 09       	sbc	r26, r1
    25ee:	b1 09       	sbc	r27, r1
    25f0:	82 23       	and	r24, r18
    25f2:	93 23       	and	r25, r19
    25f4:	a4 23       	and	r26, r20
    25f6:	b5 23       	and	r27, r21
    25f8:	21 e0       	ldi	r18, 0x01	; 1
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	a1 05       	cpc	r26, r1
    2604:	b1 05       	cpc	r27, r1
    2606:	19 f4       	brne	.+6      	; 0x260e <__pack_f+0xac>
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	a9 01       	movw	r20, r18
    260e:	2e 29       	or	r18, r14
    2610:	3f 29       	or	r19, r15
    2612:	40 2b       	or	r20, r16
    2614:	51 2b       	or	r21, r17
    2616:	03 c0       	rjmp	.+6      	; 0x261e <__pack_f+0xbc>
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	a9 01       	movw	r20, r18
    261e:	da 01       	movw	r26, r20
    2620:	c9 01       	movw	r24, r18
    2622:	8f 77       	andi	r24, 0x7F	; 127
    2624:	90 70       	andi	r25, 0x00	; 0
    2626:	a0 70       	andi	r26, 0x00	; 0
    2628:	b0 70       	andi	r27, 0x00	; 0
    262a:	80 34       	cpi	r24, 0x40	; 64
    262c:	91 05       	cpc	r25, r1
    262e:	a1 05       	cpc	r26, r1
    2630:	b1 05       	cpc	r27, r1
    2632:	39 f4       	brne	.+14     	; 0x2642 <__pack_f+0xe0>
    2634:	27 ff       	sbrs	r18, 7
    2636:	09 c0       	rjmp	.+18     	; 0x264a <__pack_f+0xe8>
    2638:	20 5c       	subi	r18, 0xC0	; 192
    263a:	3f 4f       	sbci	r19, 0xFF	; 255
    263c:	4f 4f       	sbci	r20, 0xFF	; 255
    263e:	5f 4f       	sbci	r21, 0xFF	; 255
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__pack_f+0xe8>
    2642:	21 5c       	subi	r18, 0xC1	; 193
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	4f 4f       	sbci	r20, 0xFF	; 255
    2648:	5f 4f       	sbci	r21, 0xFF	; 255
    264a:	e1 e0       	ldi	r30, 0x01	; 1
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	20 30       	cpi	r18, 0x00	; 0
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	38 07       	cpc	r19, r24
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	48 07       	cpc	r20, r24
    2658:	80 e4       	ldi	r24, 0x40	; 64
    265a:	58 07       	cpc	r21, r24
    265c:	28 f5       	brcc	.+74     	; 0x26a8 <__pack_f+0x146>
    265e:	e0 e0       	ldi	r30, 0x00	; 0
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	22 c0       	rjmp	.+68     	; 0x26a8 <__pack_f+0x146>
    2664:	e0 38       	cpi	r30, 0x80	; 128
    2666:	f1 05       	cpc	r31, r1
    2668:	6c f5       	brge	.+90     	; 0x26c4 <__pack_f+0x162>
    266a:	e1 58       	subi	r30, 0x81	; 129
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	da 01       	movw	r26, r20
    2670:	c9 01       	movw	r24, r18
    2672:	8f 77       	andi	r24, 0x7F	; 127
    2674:	90 70       	andi	r25, 0x00	; 0
    2676:	a0 70       	andi	r26, 0x00	; 0
    2678:	b0 70       	andi	r27, 0x00	; 0
    267a:	80 34       	cpi	r24, 0x40	; 64
    267c:	91 05       	cpc	r25, r1
    267e:	a1 05       	cpc	r26, r1
    2680:	b1 05       	cpc	r27, r1
    2682:	39 f4       	brne	.+14     	; 0x2692 <__pack_f+0x130>
    2684:	27 ff       	sbrs	r18, 7
    2686:	09 c0       	rjmp	.+18     	; 0x269a <__pack_f+0x138>
    2688:	20 5c       	subi	r18, 0xC0	; 192
    268a:	3f 4f       	sbci	r19, 0xFF	; 255
    268c:	4f 4f       	sbci	r20, 0xFF	; 255
    268e:	5f 4f       	sbci	r21, 0xFF	; 255
    2690:	04 c0       	rjmp	.+8      	; 0x269a <__pack_f+0x138>
    2692:	21 5c       	subi	r18, 0xC1	; 193
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	4f 4f       	sbci	r20, 0xFF	; 255
    2698:	5f 4f       	sbci	r21, 0xFF	; 255
    269a:	57 ff       	sbrs	r21, 7
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <__pack_f+0x146>
    269e:	56 95       	lsr	r21
    26a0:	47 95       	ror	r20
    26a2:	37 95       	ror	r19
    26a4:	27 95       	ror	r18
    26a6:	31 96       	adiw	r30, 0x01	; 1
    26a8:	87 e0       	ldi	r24, 0x07	; 7
    26aa:	56 95       	lsr	r21
    26ac:	47 95       	ror	r20
    26ae:	37 95       	ror	r19
    26b0:	27 95       	ror	r18
    26b2:	8a 95       	dec	r24
    26b4:	d1 f7       	brne	.-12     	; 0x26aa <__pack_f+0x148>
    26b6:	0b c0       	rjmp	.+22     	; 0x26ce <__pack_f+0x16c>
    26b8:	e0 e0       	ldi	r30, 0x00	; 0
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	05 c0       	rjmp	.+10     	; 0x26c8 <__pack_f+0x166>
    26be:	e0 e0       	ldi	r30, 0x00	; 0
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <__pack_f+0x16c>
    26c4:	ef ef       	ldi	r30, 0xFF	; 255
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	a9 01       	movw	r20, r18
    26ce:	8e 2f       	mov	r24, r30
    26d0:	87 95       	ror	r24
    26d2:	88 27       	eor	r24, r24
    26d4:	87 95       	ror	r24
    26d6:	94 2f       	mov	r25, r20
    26d8:	9f 77       	andi	r25, 0x7F	; 127
    26da:	67 95       	ror	r22
    26dc:	66 27       	eor	r22, r22
    26de:	67 95       	ror	r22
    26e0:	e6 95       	lsr	r30
    26e2:	e2 2e       	mov	r14, r18
    26e4:	a9 2f       	mov	r26, r25
    26e6:	a8 2b       	or	r26, r24
    26e8:	fe 2f       	mov	r31, r30
    26ea:	f6 2b       	or	r31, r22
    26ec:	62 2f       	mov	r22, r18
    26ee:	73 2f       	mov	r23, r19
    26f0:	8a 2f       	mov	r24, r26
    26f2:	9f 2f       	mov	r25, r31
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	e6 e0       	ldi	r30, 0x06	; 6
    26fa:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

000026fe <__unpack_f>:
    26fe:	dc 01       	movw	r26, r24
    2700:	fb 01       	movw	r30, r22
    2702:	2c 91       	ld	r18, X
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	3c 91       	ld	r19, X
    2708:	11 97       	sbiw	r26, 0x01	; 1
    270a:	12 96       	adiw	r26, 0x02	; 2
    270c:	8c 91       	ld	r24, X
    270e:	12 97       	sbiw	r26, 0x02	; 2
    2710:	48 2f       	mov	r20, r24
    2712:	4f 77       	andi	r20, 0x7F	; 127
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	98 2f       	mov	r25, r24
    2718:	99 1f       	adc	r25, r25
    271a:	99 27       	eor	r25, r25
    271c:	99 1f       	adc	r25, r25
    271e:	13 96       	adiw	r26, 0x03	; 3
    2720:	6c 91       	ld	r22, X
    2722:	13 97       	sbiw	r26, 0x03	; 3
    2724:	86 2f       	mov	r24, r22
    2726:	88 0f       	add	r24, r24
    2728:	89 2b       	or	r24, r25
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	66 1f       	adc	r22, r22
    272e:	66 27       	eor	r22, r22
    2730:	66 1f       	adc	r22, r22
    2732:	61 83       	std	Z+1, r22	; 0x01
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	39 f5       	brne	.+78     	; 0x2786 <__unpack_f+0x88>
    2738:	21 15       	cp	r18, r1
    273a:	31 05       	cpc	r19, r1
    273c:	41 05       	cpc	r20, r1
    273e:	51 05       	cpc	r21, r1
    2740:	11 f4       	brne	.+4      	; 0x2746 <__unpack_f+0x48>
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	29 c0       	rjmp	.+82     	; 0x2798 <__unpack_f+0x9a>
    2746:	82 e8       	ldi	r24, 0x82	; 130
    2748:	9f ef       	ldi	r25, 0xFF	; 255
    274a:	93 83       	std	Z+3, r25	; 0x03
    274c:	82 83       	std	Z+2, r24	; 0x02
    274e:	67 e0       	ldi	r22, 0x07	; 7
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	44 1f       	adc	r20, r20
    2756:	55 1f       	adc	r21, r21
    2758:	6a 95       	dec	r22
    275a:	d1 f7       	brne	.-12     	; 0x2750 <__unpack_f+0x52>
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	80 83       	st	Z, r24
    2760:	09 c0       	rjmp	.+18     	; 0x2774 <__unpack_f+0x76>
    2762:	22 0f       	add	r18, r18
    2764:	33 1f       	adc	r19, r19
    2766:	44 1f       	adc	r20, r20
    2768:	55 1f       	adc	r21, r21
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	93 83       	std	Z+3, r25	; 0x03
    2772:	82 83       	std	Z+2, r24	; 0x02
    2774:	20 30       	cpi	r18, 0x00	; 0
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	38 07       	cpc	r19, r24
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	48 07       	cpc	r20, r24
    277e:	80 e4       	ldi	r24, 0x40	; 64
    2780:	58 07       	cpc	r21, r24
    2782:	78 f3       	brcs	.-34     	; 0x2762 <__unpack_f+0x64>
    2784:	20 c0       	rjmp	.+64     	; 0x27c6 <__unpack_f+0xc8>
    2786:	8f 3f       	cpi	r24, 0xFF	; 255
    2788:	91 05       	cpc	r25, r1
    278a:	79 f4       	brne	.+30     	; 0x27aa <__unpack_f+0xac>
    278c:	21 15       	cp	r18, r1
    278e:	31 05       	cpc	r19, r1
    2790:	41 05       	cpc	r20, r1
    2792:	51 05       	cpc	r21, r1
    2794:	19 f4       	brne	.+6      	; 0x279c <__unpack_f+0x9e>
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	80 83       	st	Z, r24
    279a:	08 95       	ret
    279c:	44 ff       	sbrs	r20, 4
    279e:	03 c0       	rjmp	.+6      	; 0x27a6 <__unpack_f+0xa8>
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	80 83       	st	Z, r24
    27a4:	10 c0       	rjmp	.+32     	; 0x27c6 <__unpack_f+0xc8>
    27a6:	10 82       	st	Z, r1
    27a8:	0e c0       	rjmp	.+28     	; 0x27c6 <__unpack_f+0xc8>
    27aa:	8f 57       	subi	r24, 0x7F	; 127
    27ac:	90 40       	sbci	r25, 0x00	; 0
    27ae:	93 83       	std	Z+3, r25	; 0x03
    27b0:	82 83       	std	Z+2, r24	; 0x02
    27b2:	83 e0       	ldi	r24, 0x03	; 3
    27b4:	80 83       	st	Z, r24
    27b6:	87 e0       	ldi	r24, 0x07	; 7
    27b8:	22 0f       	add	r18, r18
    27ba:	33 1f       	adc	r19, r19
    27bc:	44 1f       	adc	r20, r20
    27be:	55 1f       	adc	r21, r21
    27c0:	8a 95       	dec	r24
    27c2:	d1 f7       	brne	.-12     	; 0x27b8 <__unpack_f+0xba>
    27c4:	50 64       	ori	r21, 0x40	; 64
    27c6:	24 83       	std	Z+4, r18	; 0x04
    27c8:	35 83       	std	Z+5, r19	; 0x05
    27ca:	46 83       	std	Z+6, r20	; 0x06
    27cc:	57 83       	std	Z+7, r21	; 0x07
    27ce:	08 95       	ret

000027d0 <__fpcmp_parts_f>:
    27d0:	fc 01       	movw	r30, r24
    27d2:	db 01       	movw	r26, r22
    27d4:	90 81       	ld	r25, Z
    27d6:	92 30       	cpi	r25, 0x02	; 2
    27d8:	08 f4       	brcc	.+2      	; 0x27dc <__fpcmp_parts_f+0xc>
    27da:	49 c0       	rjmp	.+146    	; 0x286e <__fpcmp_parts_f+0x9e>
    27dc:	8c 91       	ld	r24, X
    27de:	82 30       	cpi	r24, 0x02	; 2
    27e0:	08 f4       	brcc	.+2      	; 0x27e4 <__fpcmp_parts_f+0x14>
    27e2:	45 c0       	rjmp	.+138    	; 0x286e <__fpcmp_parts_f+0x9e>
    27e4:	94 30       	cpi	r25, 0x04	; 4
    27e6:	51 f4       	brne	.+20     	; 0x27fc <__fpcmp_parts_f+0x2c>
    27e8:	61 81       	ldd	r22, Z+1	; 0x01
    27ea:	84 30       	cpi	r24, 0x04	; 4
    27ec:	b1 f5       	brne	.+108    	; 0x285a <__fpcmp_parts_f+0x8a>
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	2c 91       	ld	r18, X
    27f2:	11 97       	sbiw	r26, 0x01	; 1
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	26 1b       	sub	r18, r22
    27f8:	31 09       	sbc	r19, r1
    27fa:	41 c0       	rjmp	.+130    	; 0x287e <__fpcmp_parts_f+0xae>
    27fc:	84 30       	cpi	r24, 0x04	; 4
    27fe:	21 f0       	breq	.+8      	; 0x2808 <__fpcmp_parts_f+0x38>
    2800:	92 30       	cpi	r25, 0x02	; 2
    2802:	41 f4       	brne	.+16     	; 0x2814 <__fpcmp_parts_f+0x44>
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	b1 f1       	breq	.+108    	; 0x2874 <__fpcmp_parts_f+0xa4>
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	8c 91       	ld	r24, X
    280c:	11 97       	sbiw	r26, 0x01	; 1
    280e:	88 23       	and	r24, r24
    2810:	a1 f1       	breq	.+104    	; 0x287a <__fpcmp_parts_f+0xaa>
    2812:	2d c0       	rjmp	.+90     	; 0x286e <__fpcmp_parts_f+0x9e>
    2814:	61 81       	ldd	r22, Z+1	; 0x01
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	01 f1       	breq	.+64     	; 0x285a <__fpcmp_parts_f+0x8a>
    281a:	11 96       	adiw	r26, 0x01	; 1
    281c:	8c 91       	ld	r24, X
    281e:	11 97       	sbiw	r26, 0x01	; 1
    2820:	68 17       	cp	r22, r24
    2822:	d9 f4       	brne	.+54     	; 0x285a <__fpcmp_parts_f+0x8a>
    2824:	22 81       	ldd	r18, Z+2	; 0x02
    2826:	33 81       	ldd	r19, Z+3	; 0x03
    2828:	12 96       	adiw	r26, 0x02	; 2
    282a:	8d 91       	ld	r24, X+
    282c:	9c 91       	ld	r25, X
    282e:	13 97       	sbiw	r26, 0x03	; 3
    2830:	82 17       	cp	r24, r18
    2832:	93 07       	cpc	r25, r19
    2834:	94 f0       	brlt	.+36     	; 0x285a <__fpcmp_parts_f+0x8a>
    2836:	28 17       	cp	r18, r24
    2838:	39 07       	cpc	r19, r25
    283a:	bc f0       	brlt	.+46     	; 0x286a <__fpcmp_parts_f+0x9a>
    283c:	24 81       	ldd	r18, Z+4	; 0x04
    283e:	35 81       	ldd	r19, Z+5	; 0x05
    2840:	46 81       	ldd	r20, Z+6	; 0x06
    2842:	57 81       	ldd	r21, Z+7	; 0x07
    2844:	14 96       	adiw	r26, 0x04	; 4
    2846:	8d 91       	ld	r24, X+
    2848:	9d 91       	ld	r25, X+
    284a:	0d 90       	ld	r0, X+
    284c:	bc 91       	ld	r27, X
    284e:	a0 2d       	mov	r26, r0
    2850:	82 17       	cp	r24, r18
    2852:	93 07       	cpc	r25, r19
    2854:	a4 07       	cpc	r26, r20
    2856:	b5 07       	cpc	r27, r21
    2858:	18 f4       	brcc	.+6      	; 0x2860 <__fpcmp_parts_f+0x90>
    285a:	66 23       	and	r22, r22
    285c:	41 f0       	breq	.+16     	; 0x286e <__fpcmp_parts_f+0x9e>
    285e:	0d c0       	rjmp	.+26     	; 0x287a <__fpcmp_parts_f+0xaa>
    2860:	28 17       	cp	r18, r24
    2862:	39 07       	cpc	r19, r25
    2864:	4a 07       	cpc	r20, r26
    2866:	5b 07       	cpc	r21, r27
    2868:	28 f4       	brcc	.+10     	; 0x2874 <__fpcmp_parts_f+0xa4>
    286a:	66 23       	and	r22, r22
    286c:	31 f0       	breq	.+12     	; 0x287a <__fpcmp_parts_f+0xaa>
    286e:	21 e0       	ldi	r18, 0x01	; 1
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	05 c0       	rjmp	.+10     	; 0x287e <__fpcmp_parts_f+0xae>
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	02 c0       	rjmp	.+4      	; 0x287e <__fpcmp_parts_f+0xae>
    287a:	2f ef       	ldi	r18, 0xFF	; 255
    287c:	3f ef       	ldi	r19, 0xFF	; 255
    287e:	c9 01       	movw	r24, r18
    2880:	08 95       	ret

00002882 <__divmodhi4>:
    2882:	97 fb       	bst	r25, 7
    2884:	09 2e       	mov	r0, r25
    2886:	07 26       	eor	r0, r23
    2888:	0a d0       	rcall	.+20     	; 0x289e <__divmodhi4_neg1>
    288a:	77 fd       	sbrc	r23, 7
    288c:	04 d0       	rcall	.+8      	; 0x2896 <__divmodhi4_neg2>
    288e:	0c d0       	rcall	.+24     	; 0x28a8 <__udivmodhi4>
    2890:	06 d0       	rcall	.+12     	; 0x289e <__divmodhi4_neg1>
    2892:	00 20       	and	r0, r0
    2894:	1a f4       	brpl	.+6      	; 0x289c <__divmodhi4_exit>

00002896 <__divmodhi4_neg2>:
    2896:	70 95       	com	r23
    2898:	61 95       	neg	r22
    289a:	7f 4f       	sbci	r23, 0xFF	; 255

0000289c <__divmodhi4_exit>:
    289c:	08 95       	ret

0000289e <__divmodhi4_neg1>:
    289e:	f6 f7       	brtc	.-4      	; 0x289c <__divmodhi4_exit>
    28a0:	90 95       	com	r25
    28a2:	81 95       	neg	r24
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	08 95       	ret

000028a8 <__udivmodhi4>:
    28a8:	aa 1b       	sub	r26, r26
    28aa:	bb 1b       	sub	r27, r27
    28ac:	51 e1       	ldi	r21, 0x11	; 17
    28ae:	07 c0       	rjmp	.+14     	; 0x28be <__udivmodhi4_ep>

000028b0 <__udivmodhi4_loop>:
    28b0:	aa 1f       	adc	r26, r26
    28b2:	bb 1f       	adc	r27, r27
    28b4:	a6 17       	cp	r26, r22
    28b6:	b7 07       	cpc	r27, r23
    28b8:	10 f0       	brcs	.+4      	; 0x28be <__udivmodhi4_ep>
    28ba:	a6 1b       	sub	r26, r22
    28bc:	b7 0b       	sbc	r27, r23

000028be <__udivmodhi4_ep>:
    28be:	88 1f       	adc	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	5a 95       	dec	r21
    28c4:	a9 f7       	brne	.-22     	; 0x28b0 <__udivmodhi4_loop>
    28c6:	80 95       	com	r24
    28c8:	90 95       	com	r25
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	08 95       	ret

000028d0 <__prologue_saves__>:
    28d0:	2f 92       	push	r2
    28d2:	3f 92       	push	r3
    28d4:	4f 92       	push	r4
    28d6:	5f 92       	push	r5
    28d8:	6f 92       	push	r6
    28da:	7f 92       	push	r7
    28dc:	8f 92       	push	r8
    28de:	9f 92       	push	r9
    28e0:	af 92       	push	r10
    28e2:	bf 92       	push	r11
    28e4:	cf 92       	push	r12
    28e6:	df 92       	push	r13
    28e8:	ef 92       	push	r14
    28ea:	ff 92       	push	r15
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	ca 1b       	sub	r28, r26
    28fa:	db 0b       	sbc	r29, r27
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	09 94       	ijmp

00002908 <__epilogue_restores__>:
    2908:	2a 88       	ldd	r2, Y+18	; 0x12
    290a:	39 88       	ldd	r3, Y+17	; 0x11
    290c:	48 88       	ldd	r4, Y+16	; 0x10
    290e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2910:	6e 84       	ldd	r6, Y+14	; 0x0e
    2912:	7d 84       	ldd	r7, Y+13	; 0x0d
    2914:	8c 84       	ldd	r8, Y+12	; 0x0c
    2916:	9b 84       	ldd	r9, Y+11	; 0x0b
    2918:	aa 84       	ldd	r10, Y+10	; 0x0a
    291a:	b9 84       	ldd	r11, Y+9	; 0x09
    291c:	c8 84       	ldd	r12, Y+8	; 0x08
    291e:	df 80       	ldd	r13, Y+7	; 0x07
    2920:	ee 80       	ldd	r14, Y+6	; 0x06
    2922:	fd 80       	ldd	r15, Y+5	; 0x05
    2924:	0c 81       	ldd	r16, Y+4	; 0x04
    2926:	1b 81       	ldd	r17, Y+3	; 0x03
    2928:	aa 81       	ldd	r26, Y+2	; 0x02
    292a:	b9 81       	ldd	r27, Y+1	; 0x01
    292c:	ce 0f       	add	r28, r30
    292e:	d1 1d       	adc	r29, r1
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	ed 01       	movw	r28, r26
    293c:	08 95       	ret

0000293e <fdevopen>:
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	8c 01       	movw	r16, r24
    2948:	eb 01       	movw	r28, r22
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	11 f4       	brne	.+4      	; 0x2952 <fdevopen+0x14>
    294e:	20 97       	sbiw	r28, 0x00	; 0
    2950:	c9 f1       	breq	.+114    	; 0x29c4 <fdevopen+0x86>
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	6e e0       	ldi	r22, 0x0E	; 14
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <calloc>
    295e:	fc 01       	movw	r30, r24
    2960:	9c 01       	movw	r18, r24
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	89 f1       	breq	.+98     	; 0x29c8 <fdevopen+0x8a>
    2966:	80 e8       	ldi	r24, 0x80	; 128
    2968:	83 83       	std	Z+3, r24	; 0x03
    296a:	20 97       	sbiw	r28, 0x00	; 0
    296c:	71 f0       	breq	.+28     	; 0x298a <fdevopen+0x4c>
    296e:	d3 87       	std	Z+11, r29	; 0x0b
    2970:	c2 87       	std	Z+10, r28	; 0x0a
    2972:	81 e8       	ldi	r24, 0x81	; 129
    2974:	83 83       	std	Z+3, r24	; 0x03
    2976:	80 91 04 04 	lds	r24, 0x0404
    297a:	90 91 05 04 	lds	r25, 0x0405
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	21 f4       	brne	.+8      	; 0x298a <fdevopen+0x4c>
    2982:	f0 93 05 04 	sts	0x0405, r31
    2986:	e0 93 04 04 	sts	0x0404, r30
    298a:	01 15       	cp	r16, r1
    298c:	11 05       	cpc	r17, r1
    298e:	e1 f0       	breq	.+56     	; 0x29c8 <fdevopen+0x8a>
    2990:	11 87       	std	Z+9, r17	; 0x09
    2992:	00 87       	std	Z+8, r16	; 0x08
    2994:	83 81       	ldd	r24, Z+3	; 0x03
    2996:	82 60       	ori	r24, 0x02	; 2
    2998:	83 83       	std	Z+3, r24	; 0x03
    299a:	80 91 06 04 	lds	r24, 0x0406
    299e:	90 91 07 04 	lds	r25, 0x0407
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	89 f4       	brne	.+34     	; 0x29c8 <fdevopen+0x8a>
    29a6:	f0 93 07 04 	sts	0x0407, r31
    29aa:	e0 93 06 04 	sts	0x0406, r30
    29ae:	80 91 08 04 	lds	r24, 0x0408
    29b2:	90 91 09 04 	lds	r25, 0x0409
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	39 f4       	brne	.+14     	; 0x29c8 <fdevopen+0x8a>
    29ba:	f0 93 09 04 	sts	0x0409, r31
    29be:	e0 93 08 04 	sts	0x0408, r30
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <fdevopen+0x8a>
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	c9 01       	movw	r24, r18
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	08 95       	ret

000029d4 <printf>:
    29d4:	a0 e0       	ldi	r26, 0x00	; 0
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e0 ef       	ldi	r30, 0xF0	; 240
    29da:	f4 e1       	ldi	r31, 0x14	; 20
    29dc:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__+0x20>
    29e0:	fe 01       	movw	r30, r28
    29e2:	35 96       	adiw	r30, 0x05	; 5
    29e4:	61 91       	ld	r22, Z+
    29e6:	71 91       	ld	r23, Z+
    29e8:	80 91 06 04 	lds	r24, 0x0406
    29ec:	90 91 07 04 	lds	r25, 0x0407
    29f0:	af 01       	movw	r20, r30
    29f2:	0e 94 34 15 	call	0x2a68	; 0x2a68 <vfprintf>
    29f6:	20 96       	adiw	r28, 0x00	; 0
    29f8:	e2 e0       	ldi	r30, 0x02	; 2
    29fa:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__+0x20>

000029fe <puts>:
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	8c 01       	movw	r16, r24
    2a0c:	e0 91 06 04 	lds	r30, 0x0406
    2a10:	f0 91 07 04 	lds	r31, 0x0407
    2a14:	83 81       	ldd	r24, Z+3	; 0x03
    2a16:	81 ff       	sbrs	r24, 1
    2a18:	1f c0       	rjmp	.+62     	; 0x2a58 <puts+0x5a>
    2a1a:	c0 e0       	ldi	r28, 0x00	; 0
    2a1c:	d0 e0       	ldi	r29, 0x00	; 0
    2a1e:	0a c0       	rjmp	.+20     	; 0x2a34 <puts+0x36>
    2a20:	db 01       	movw	r26, r22
    2a22:	18 96       	adiw	r26, 0x08	; 8
    2a24:	ed 91       	ld	r30, X+
    2a26:	fc 91       	ld	r31, X
    2a28:	19 97       	sbiw	r26, 0x09	; 9
    2a2a:	09 95       	icall
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	11 f0       	breq	.+4      	; 0x2a34 <puts+0x36>
    2a30:	cf ef       	ldi	r28, 0xFF	; 255
    2a32:	df ef       	ldi	r29, 0xFF	; 255
    2a34:	f8 01       	movw	r30, r16
    2a36:	81 91       	ld	r24, Z+
    2a38:	8f 01       	movw	r16, r30
    2a3a:	60 91 06 04 	lds	r22, 0x0406
    2a3e:	70 91 07 04 	lds	r23, 0x0407
    2a42:	88 23       	and	r24, r24
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <puts+0x22>
    2a46:	db 01       	movw	r26, r22
    2a48:	18 96       	adiw	r26, 0x08	; 8
    2a4a:	ed 91       	ld	r30, X+
    2a4c:	fc 91       	ld	r31, X
    2a4e:	19 97       	sbiw	r26, 0x09	; 9
    2a50:	8a e0       	ldi	r24, 0x0A	; 10
    2a52:	09 95       	icall
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	11 f0       	breq	.+4      	; 0x2a5c <puts+0x5e>
    2a58:	cf ef       	ldi	r28, 0xFF	; 255
    2a5a:	df ef       	ldi	r29, 0xFF	; 255
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	e6 e0       	ldi	r30, 0x06	; 6
    2a64:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

00002a68 <vfprintf>:
    2a68:	ac e0       	ldi	r26, 0x0C	; 12
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	ea e3       	ldi	r30, 0x3A	; 58
    2a6e:	f5 e1       	ldi	r31, 0x15	; 21
    2a70:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__>
    2a74:	6c 01       	movw	r12, r24
    2a76:	1b 01       	movw	r2, r22
    2a78:	8a 01       	movw	r16, r20
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	17 82       	std	Z+7, r1	; 0x07
    2a7e:	16 82       	std	Z+6, r1	; 0x06
    2a80:	83 81       	ldd	r24, Z+3	; 0x03
    2a82:	81 ff       	sbrs	r24, 1
    2a84:	d1 c1       	rjmp	.+930    	; 0x2e28 <vfprintf+0x3c0>
    2a86:	2e 01       	movw	r4, r28
    2a88:	08 94       	sec
    2a8a:	41 1c       	adc	r4, r1
    2a8c:	51 1c       	adc	r5, r1
    2a8e:	f6 01       	movw	r30, r12
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	f1 01       	movw	r30, r2
    2a94:	93 fd       	sbrc	r25, 3
    2a96:	85 91       	lpm	r24, Z+
    2a98:	93 ff       	sbrs	r25, 3
    2a9a:	81 91       	ld	r24, Z+
    2a9c:	1f 01       	movw	r2, r30
    2a9e:	88 23       	and	r24, r24
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <vfprintf+0x3c>
    2aa2:	be c1       	rjmp	.+892    	; 0x2e20 <vfprintf+0x3b8>
    2aa4:	85 32       	cpi	r24, 0x25	; 37
    2aa6:	39 f4       	brne	.+14     	; 0x2ab6 <vfprintf+0x4e>
    2aa8:	93 fd       	sbrc	r25, 3
    2aaa:	85 91       	lpm	r24, Z+
    2aac:	93 ff       	sbrs	r25, 3
    2aae:	81 91       	ld	r24, Z+
    2ab0:	1f 01       	movw	r2, r30
    2ab2:	85 32       	cpi	r24, 0x25	; 37
    2ab4:	29 f4       	brne	.+10     	; 0x2ac0 <vfprintf+0x58>
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	b6 01       	movw	r22, r12
    2aba:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2abe:	e7 cf       	rjmp	.-50     	; 0x2a8e <vfprintf+0x26>
    2ac0:	ee 24       	eor	r14, r14
    2ac2:	ff 24       	eor	r15, r15
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	20 32       	cpi	r18, 0x20	; 32
    2ac8:	b0 f4       	brcc	.+44     	; 0x2af6 <vfprintf+0x8e>
    2aca:	8b 32       	cpi	r24, 0x2B	; 43
    2acc:	69 f0       	breq	.+26     	; 0x2ae8 <vfprintf+0x80>
    2ace:	8c 32       	cpi	r24, 0x2C	; 44
    2ad0:	28 f4       	brcc	.+10     	; 0x2adc <vfprintf+0x74>
    2ad2:	80 32       	cpi	r24, 0x20	; 32
    2ad4:	51 f0       	breq	.+20     	; 0x2aea <vfprintf+0x82>
    2ad6:	83 32       	cpi	r24, 0x23	; 35
    2ad8:	71 f4       	brne	.+28     	; 0x2af6 <vfprintf+0x8e>
    2ada:	0b c0       	rjmp	.+22     	; 0x2af2 <vfprintf+0x8a>
    2adc:	8d 32       	cpi	r24, 0x2D	; 45
    2ade:	39 f0       	breq	.+14     	; 0x2aee <vfprintf+0x86>
    2ae0:	80 33       	cpi	r24, 0x30	; 48
    2ae2:	49 f4       	brne	.+18     	; 0x2af6 <vfprintf+0x8e>
    2ae4:	21 60       	ori	r18, 0x01	; 1
    2ae6:	2c c0       	rjmp	.+88     	; 0x2b40 <vfprintf+0xd8>
    2ae8:	22 60       	ori	r18, 0x02	; 2
    2aea:	24 60       	ori	r18, 0x04	; 4
    2aec:	29 c0       	rjmp	.+82     	; 0x2b40 <vfprintf+0xd8>
    2aee:	28 60       	ori	r18, 0x08	; 8
    2af0:	27 c0       	rjmp	.+78     	; 0x2b40 <vfprintf+0xd8>
    2af2:	20 61       	ori	r18, 0x10	; 16
    2af4:	25 c0       	rjmp	.+74     	; 0x2b40 <vfprintf+0xd8>
    2af6:	27 fd       	sbrc	r18, 7
    2af8:	2c c0       	rjmp	.+88     	; 0x2b52 <vfprintf+0xea>
    2afa:	38 2f       	mov	r19, r24
    2afc:	30 53       	subi	r19, 0x30	; 48
    2afe:	3a 30       	cpi	r19, 0x0A	; 10
    2b00:	98 f4       	brcc	.+38     	; 0x2b28 <vfprintf+0xc0>
    2b02:	26 ff       	sbrs	r18, 6
    2b04:	08 c0       	rjmp	.+16     	; 0x2b16 <vfprintf+0xae>
    2b06:	8e 2d       	mov	r24, r14
    2b08:	88 0f       	add	r24, r24
    2b0a:	e8 2e       	mov	r14, r24
    2b0c:	ee 0c       	add	r14, r14
    2b0e:	ee 0c       	add	r14, r14
    2b10:	e8 0e       	add	r14, r24
    2b12:	e3 0e       	add	r14, r19
    2b14:	15 c0       	rjmp	.+42     	; 0x2b40 <vfprintf+0xd8>
    2b16:	8f 2d       	mov	r24, r15
    2b18:	88 0f       	add	r24, r24
    2b1a:	f8 2e       	mov	r15, r24
    2b1c:	ff 0c       	add	r15, r15
    2b1e:	ff 0c       	add	r15, r15
    2b20:	f8 0e       	add	r15, r24
    2b22:	f3 0e       	add	r15, r19
    2b24:	20 62       	ori	r18, 0x20	; 32
    2b26:	0c c0       	rjmp	.+24     	; 0x2b40 <vfprintf+0xd8>
    2b28:	8e 32       	cpi	r24, 0x2E	; 46
    2b2a:	21 f4       	brne	.+8      	; 0x2b34 <vfprintf+0xcc>
    2b2c:	26 fd       	sbrc	r18, 6
    2b2e:	78 c1       	rjmp	.+752    	; 0x2e20 <vfprintf+0x3b8>
    2b30:	20 64       	ori	r18, 0x40	; 64
    2b32:	06 c0       	rjmp	.+12     	; 0x2b40 <vfprintf+0xd8>
    2b34:	8c 36       	cpi	r24, 0x6C	; 108
    2b36:	11 f4       	brne	.+4      	; 0x2b3c <vfprintf+0xd4>
    2b38:	20 68       	ori	r18, 0x80	; 128
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <vfprintf+0xd8>
    2b3c:	88 36       	cpi	r24, 0x68	; 104
    2b3e:	49 f4       	brne	.+18     	; 0x2b52 <vfprintf+0xea>
    2b40:	f1 01       	movw	r30, r2
    2b42:	93 fd       	sbrc	r25, 3
    2b44:	85 91       	lpm	r24, Z+
    2b46:	93 ff       	sbrs	r25, 3
    2b48:	81 91       	ld	r24, Z+
    2b4a:	1f 01       	movw	r2, r30
    2b4c:	88 23       	and	r24, r24
    2b4e:	09 f0       	breq	.+2      	; 0x2b52 <vfprintf+0xea>
    2b50:	ba cf       	rjmp	.-140    	; 0x2ac6 <vfprintf+0x5e>
    2b52:	98 2f       	mov	r25, r24
    2b54:	95 54       	subi	r25, 0x45	; 69
    2b56:	93 30       	cpi	r25, 0x03	; 3
    2b58:	18 f0       	brcs	.+6      	; 0x2b60 <vfprintf+0xf8>
    2b5a:	90 52       	subi	r25, 0x20	; 32
    2b5c:	93 30       	cpi	r25, 0x03	; 3
    2b5e:	28 f4       	brcc	.+10     	; 0x2b6a <vfprintf+0x102>
    2b60:	0c 5f       	subi	r16, 0xFC	; 252
    2b62:	1f 4f       	sbci	r17, 0xFF	; 255
    2b64:	ff e3       	ldi	r31, 0x3F	; 63
    2b66:	f9 83       	std	Y+1, r31	; 0x01
    2b68:	0d c0       	rjmp	.+26     	; 0x2b84 <vfprintf+0x11c>
    2b6a:	83 36       	cpi	r24, 0x63	; 99
    2b6c:	31 f0       	breq	.+12     	; 0x2b7a <vfprintf+0x112>
    2b6e:	83 37       	cpi	r24, 0x73	; 115
    2b70:	71 f0       	breq	.+28     	; 0x2b8e <vfprintf+0x126>
    2b72:	83 35       	cpi	r24, 0x53	; 83
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <vfprintf+0x110>
    2b76:	60 c0       	rjmp	.+192    	; 0x2c38 <vfprintf+0x1d0>
    2b78:	22 c0       	rjmp	.+68     	; 0x2bbe <vfprintf+0x156>
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	80 81       	ld	r24, Z
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	0e 5f       	subi	r16, 0xFE	; 254
    2b82:	1f 4f       	sbci	r17, 0xFF	; 255
    2b84:	42 01       	movw	r8, r4
    2b86:	71 e0       	ldi	r23, 0x01	; 1
    2b88:	a7 2e       	mov	r10, r23
    2b8a:	b1 2c       	mov	r11, r1
    2b8c:	16 c0       	rjmp	.+44     	; 0x2bba <vfprintf+0x152>
    2b8e:	62 e0       	ldi	r22, 0x02	; 2
    2b90:	66 2e       	mov	r6, r22
    2b92:	71 2c       	mov	r7, r1
    2b94:	60 0e       	add	r6, r16
    2b96:	71 1e       	adc	r7, r17
    2b98:	f8 01       	movw	r30, r16
    2b9a:	80 80       	ld	r8, Z
    2b9c:	91 80       	ldd	r9, Z+1	; 0x01
    2b9e:	26 ff       	sbrs	r18, 6
    2ba0:	03 c0       	rjmp	.+6      	; 0x2ba8 <vfprintf+0x140>
    2ba2:	6e 2d       	mov	r22, r14
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <vfprintf+0x144>
    2ba8:	6f ef       	ldi	r22, 0xFF	; 255
    2baa:	7f ef       	ldi	r23, 0xFF	; 255
    2bac:	c4 01       	movw	r24, r8
    2bae:	2c 87       	std	Y+12, r18	; 0x0c
    2bb0:	0e 94 84 18 	call	0x3108	; 0x3108 <strnlen>
    2bb4:	5c 01       	movw	r10, r24
    2bb6:	83 01       	movw	r16, r6
    2bb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bba:	2f 77       	andi	r18, 0x7F	; 127
    2bbc:	17 c0       	rjmp	.+46     	; 0x2bec <vfprintf+0x184>
    2bbe:	52 e0       	ldi	r21, 0x02	; 2
    2bc0:	65 2e       	mov	r6, r21
    2bc2:	71 2c       	mov	r7, r1
    2bc4:	60 0e       	add	r6, r16
    2bc6:	71 1e       	adc	r7, r17
    2bc8:	f8 01       	movw	r30, r16
    2bca:	80 80       	ld	r8, Z
    2bcc:	91 80       	ldd	r9, Z+1	; 0x01
    2bce:	26 ff       	sbrs	r18, 6
    2bd0:	03 c0       	rjmp	.+6      	; 0x2bd8 <vfprintf+0x170>
    2bd2:	6e 2d       	mov	r22, r14
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <vfprintf+0x174>
    2bd8:	6f ef       	ldi	r22, 0xFF	; 255
    2bda:	7f ef       	ldi	r23, 0xFF	; 255
    2bdc:	c4 01       	movw	r24, r8
    2bde:	2c 87       	std	Y+12, r18	; 0x0c
    2be0:	0e 94 72 18 	call	0x30e4	; 0x30e4 <strnlen_P>
    2be4:	5c 01       	movw	r10, r24
    2be6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2be8:	20 68       	ori	r18, 0x80	; 128
    2bea:	83 01       	movw	r16, r6
    2bec:	23 fd       	sbrc	r18, 3
    2bee:	20 c0       	rjmp	.+64     	; 0x2c30 <vfprintf+0x1c8>
    2bf0:	08 c0       	rjmp	.+16     	; 0x2c02 <vfprintf+0x19a>
    2bf2:	80 e2       	ldi	r24, 0x20	; 32
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	b6 01       	movw	r22, r12
    2bf8:	2c 87       	std	Y+12, r18	; 0x0c
    2bfa:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2bfe:	fa 94       	dec	r15
    2c00:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c02:	8f 2d       	mov	r24, r15
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a8 16       	cp	r10, r24
    2c08:	b9 06       	cpc	r11, r25
    2c0a:	98 f3       	brcs	.-26     	; 0x2bf2 <vfprintf+0x18a>
    2c0c:	11 c0       	rjmp	.+34     	; 0x2c30 <vfprintf+0x1c8>
    2c0e:	f4 01       	movw	r30, r8
    2c10:	27 fd       	sbrc	r18, 7
    2c12:	85 91       	lpm	r24, Z+
    2c14:	27 ff       	sbrs	r18, 7
    2c16:	81 91       	ld	r24, Z+
    2c18:	4f 01       	movw	r8, r30
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	b6 01       	movw	r22, r12
    2c1e:	2c 87       	std	Y+12, r18	; 0x0c
    2c20:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2c24:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c26:	f1 10       	cpse	r15, r1
    2c28:	fa 94       	dec	r15
    2c2a:	08 94       	sec
    2c2c:	a1 08       	sbc	r10, r1
    2c2e:	b1 08       	sbc	r11, r1
    2c30:	a1 14       	cp	r10, r1
    2c32:	b1 04       	cpc	r11, r1
    2c34:	61 f7       	brne	.-40     	; 0x2c0e <vfprintf+0x1a6>
    2c36:	f1 c0       	rjmp	.+482    	; 0x2e1a <vfprintf+0x3b2>
    2c38:	84 36       	cpi	r24, 0x64	; 100
    2c3a:	11 f0       	breq	.+4      	; 0x2c40 <vfprintf+0x1d8>
    2c3c:	89 36       	cpi	r24, 0x69	; 105
    2c3e:	49 f5       	brne	.+82     	; 0x2c92 <vfprintf+0x22a>
    2c40:	27 ff       	sbrs	r18, 7
    2c42:	08 c0       	rjmp	.+16     	; 0x2c54 <vfprintf+0x1ec>
    2c44:	f8 01       	movw	r30, r16
    2c46:	60 81       	ld	r22, Z
    2c48:	71 81       	ldd	r23, Z+1	; 0x01
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	0c 5f       	subi	r16, 0xFC	; 252
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
    2c52:	09 c0       	rjmp	.+18     	; 0x2c66 <vfprintf+0x1fe>
    2c54:	f8 01       	movw	r30, r16
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	88 27       	eor	r24, r24
    2c5c:	77 fd       	sbrc	r23, 7
    2c5e:	80 95       	com	r24
    2c60:	98 2f       	mov	r25, r24
    2c62:	0e 5f       	subi	r16, 0xFE	; 254
    2c64:	1f 4f       	sbci	r17, 0xFF	; 255
    2c66:	4f e6       	ldi	r20, 0x6F	; 111
    2c68:	b4 2e       	mov	r11, r20
    2c6a:	b2 22       	and	r11, r18
    2c6c:	97 ff       	sbrs	r25, 7
    2c6e:	09 c0       	rjmp	.+18     	; 0x2c82 <vfprintf+0x21a>
    2c70:	90 95       	com	r25
    2c72:	80 95       	com	r24
    2c74:	70 95       	com	r23
    2c76:	61 95       	neg	r22
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	f0 e8       	ldi	r31, 0x80	; 128
    2c80:	bf 2a       	or	r11, r31
    2c82:	a2 01       	movw	r20, r4
    2c84:	2a e0       	ldi	r18, 0x0A	; 10
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	0e 94 bb 18 	call	0x3176	; 0x3176 <__ultoa_invert>
    2c8c:	78 2e       	mov	r7, r24
    2c8e:	74 18       	sub	r7, r4
    2c90:	45 c0       	rjmp	.+138    	; 0x2d1c <vfprintf+0x2b4>
    2c92:	85 37       	cpi	r24, 0x75	; 117
    2c94:	31 f4       	brne	.+12     	; 0x2ca2 <vfprintf+0x23a>
    2c96:	3f ee       	ldi	r19, 0xEF	; 239
    2c98:	b3 2e       	mov	r11, r19
    2c9a:	b2 22       	and	r11, r18
    2c9c:	2a e0       	ldi	r18, 0x0A	; 10
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	25 c0       	rjmp	.+74     	; 0x2cec <vfprintf+0x284>
    2ca2:	99 ef       	ldi	r25, 0xF9	; 249
    2ca4:	b9 2e       	mov	r11, r25
    2ca6:	b2 22       	and	r11, r18
    2ca8:	8f 36       	cpi	r24, 0x6F	; 111
    2caa:	c1 f0       	breq	.+48     	; 0x2cdc <vfprintf+0x274>
    2cac:	80 37       	cpi	r24, 0x70	; 112
    2cae:	20 f4       	brcc	.+8      	; 0x2cb8 <vfprintf+0x250>
    2cb0:	88 35       	cpi	r24, 0x58	; 88
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <vfprintf+0x24e>
    2cb4:	b5 c0       	rjmp	.+362    	; 0x2e20 <vfprintf+0x3b8>
    2cb6:	0d c0       	rjmp	.+26     	; 0x2cd2 <vfprintf+0x26a>
    2cb8:	80 37       	cpi	r24, 0x70	; 112
    2cba:	21 f0       	breq	.+8      	; 0x2cc4 <vfprintf+0x25c>
    2cbc:	88 37       	cpi	r24, 0x78	; 120
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <vfprintf+0x25a>
    2cc0:	af c0       	rjmp	.+350    	; 0x2e20 <vfprintf+0x3b8>
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <vfprintf+0x260>
    2cc4:	20 e1       	ldi	r18, 0x10	; 16
    2cc6:	b2 2a       	or	r11, r18
    2cc8:	b4 fe       	sbrs	r11, 4
    2cca:	0b c0       	rjmp	.+22     	; 0x2ce2 <vfprintf+0x27a>
    2ccc:	84 e0       	ldi	r24, 0x04	; 4
    2cce:	b8 2a       	or	r11, r24
    2cd0:	08 c0       	rjmp	.+16     	; 0x2ce2 <vfprintf+0x27a>
    2cd2:	b4 fe       	sbrs	r11, 4
    2cd4:	09 c0       	rjmp	.+18     	; 0x2ce8 <vfprintf+0x280>
    2cd6:	e6 e0       	ldi	r30, 0x06	; 6
    2cd8:	be 2a       	or	r11, r30
    2cda:	06 c0       	rjmp	.+12     	; 0x2ce8 <vfprintf+0x280>
    2cdc:	28 e0       	ldi	r18, 0x08	; 8
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	05 c0       	rjmp	.+10     	; 0x2cec <vfprintf+0x284>
    2ce2:	20 e1       	ldi	r18, 0x10	; 16
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <vfprintf+0x284>
    2ce8:	20 e1       	ldi	r18, 0x10	; 16
    2cea:	32 e0       	ldi	r19, 0x02	; 2
    2cec:	b7 fe       	sbrs	r11, 7
    2cee:	08 c0       	rjmp	.+16     	; 0x2d00 <vfprintf+0x298>
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	0c 5f       	subi	r16, 0xFC	; 252
    2cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfe:	07 c0       	rjmp	.+14     	; 0x2d0e <vfprintf+0x2a6>
    2d00:	f8 01       	movw	r30, r16
    2d02:	60 81       	ld	r22, Z
    2d04:	71 81       	ldd	r23, Z+1	; 0x01
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 5f       	subi	r16, 0xFE	; 254
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	a2 01       	movw	r20, r4
    2d10:	0e 94 bb 18 	call	0x3176	; 0x3176 <__ultoa_invert>
    2d14:	78 2e       	mov	r7, r24
    2d16:	74 18       	sub	r7, r4
    2d18:	ff e7       	ldi	r31, 0x7F	; 127
    2d1a:	bf 22       	and	r11, r31
    2d1c:	b6 fe       	sbrs	r11, 6
    2d1e:	0b c0       	rjmp	.+22     	; 0x2d36 <vfprintf+0x2ce>
    2d20:	2e ef       	ldi	r18, 0xFE	; 254
    2d22:	b2 22       	and	r11, r18
    2d24:	7e 14       	cp	r7, r14
    2d26:	38 f4       	brcc	.+14     	; 0x2d36 <vfprintf+0x2ce>
    2d28:	b4 fe       	sbrs	r11, 4
    2d2a:	07 c0       	rjmp	.+14     	; 0x2d3a <vfprintf+0x2d2>
    2d2c:	b2 fc       	sbrc	r11, 2
    2d2e:	05 c0       	rjmp	.+10     	; 0x2d3a <vfprintf+0x2d2>
    2d30:	8f ee       	ldi	r24, 0xEF	; 239
    2d32:	b8 22       	and	r11, r24
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <vfprintf+0x2d2>
    2d36:	a7 2c       	mov	r10, r7
    2d38:	01 c0       	rjmp	.+2      	; 0x2d3c <vfprintf+0x2d4>
    2d3a:	ae 2c       	mov	r10, r14
    2d3c:	8b 2d       	mov	r24, r11
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	b4 fe       	sbrs	r11, 4
    2d42:	0d c0       	rjmp	.+26     	; 0x2d5e <vfprintf+0x2f6>
    2d44:	fe 01       	movw	r30, r28
    2d46:	e7 0d       	add	r30, r7
    2d48:	f1 1d       	adc	r31, r1
    2d4a:	20 81       	ld	r18, Z
    2d4c:	20 33       	cpi	r18, 0x30	; 48
    2d4e:	19 f4       	brne	.+6      	; 0x2d56 <vfprintf+0x2ee>
    2d50:	e9 ee       	ldi	r30, 0xE9	; 233
    2d52:	be 22       	and	r11, r30
    2d54:	09 c0       	rjmp	.+18     	; 0x2d68 <vfprintf+0x300>
    2d56:	a3 94       	inc	r10
    2d58:	b2 fe       	sbrs	r11, 2
    2d5a:	06 c0       	rjmp	.+12     	; 0x2d68 <vfprintf+0x300>
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <vfprintf+0x2fe>
    2d5e:	86 78       	andi	r24, 0x86	; 134
    2d60:	90 70       	andi	r25, 0x00	; 0
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	09 f0       	breq	.+2      	; 0x2d68 <vfprintf+0x300>
    2d66:	a3 94       	inc	r10
    2d68:	8b 2c       	mov	r8, r11
    2d6a:	99 24       	eor	r9, r9
    2d6c:	b3 fc       	sbrc	r11, 3
    2d6e:	14 c0       	rjmp	.+40     	; 0x2d98 <vfprintf+0x330>
    2d70:	b0 fe       	sbrs	r11, 0
    2d72:	0f c0       	rjmp	.+30     	; 0x2d92 <vfprintf+0x32a>
    2d74:	af 14       	cp	r10, r15
    2d76:	28 f4       	brcc	.+10     	; 0x2d82 <vfprintf+0x31a>
    2d78:	e7 2c       	mov	r14, r7
    2d7a:	ef 0c       	add	r14, r15
    2d7c:	ea 18       	sub	r14, r10
    2d7e:	af 2c       	mov	r10, r15
    2d80:	08 c0       	rjmp	.+16     	; 0x2d92 <vfprintf+0x32a>
    2d82:	e7 2c       	mov	r14, r7
    2d84:	06 c0       	rjmp	.+12     	; 0x2d92 <vfprintf+0x32a>
    2d86:	80 e2       	ldi	r24, 0x20	; 32
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	b6 01       	movw	r22, r12
    2d8c:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2d90:	a3 94       	inc	r10
    2d92:	af 14       	cp	r10, r15
    2d94:	c0 f3       	brcs	.-16     	; 0x2d86 <vfprintf+0x31e>
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <vfprintf+0x338>
    2d98:	af 14       	cp	r10, r15
    2d9a:	10 f4       	brcc	.+4      	; 0x2da0 <vfprintf+0x338>
    2d9c:	fa 18       	sub	r15, r10
    2d9e:	01 c0       	rjmp	.+2      	; 0x2da2 <vfprintf+0x33a>
    2da0:	ff 24       	eor	r15, r15
    2da2:	84 fe       	sbrs	r8, 4
    2da4:	0f c0       	rjmp	.+30     	; 0x2dc4 <vfprintf+0x35c>
    2da6:	80 e3       	ldi	r24, 0x30	; 48
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	b6 01       	movw	r22, r12
    2dac:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2db0:	82 fe       	sbrs	r8, 2
    2db2:	1f c0       	rjmp	.+62     	; 0x2df2 <vfprintf+0x38a>
    2db4:	81 fe       	sbrs	r8, 1
    2db6:	03 c0       	rjmp	.+6      	; 0x2dbe <vfprintf+0x356>
    2db8:	88 e5       	ldi	r24, 0x58	; 88
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	10 c0       	rjmp	.+32     	; 0x2dde <vfprintf+0x376>
    2dbe:	88 e7       	ldi	r24, 0x78	; 120
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0d c0       	rjmp	.+26     	; 0x2dde <vfprintf+0x376>
    2dc4:	c4 01       	movw	r24, r8
    2dc6:	86 78       	andi	r24, 0x86	; 134
    2dc8:	90 70       	andi	r25, 0x00	; 0
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	91 f0       	breq	.+36     	; 0x2df2 <vfprintf+0x38a>
    2dce:	81 fc       	sbrc	r8, 1
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <vfprintf+0x36e>
    2dd2:	80 e2       	ldi	r24, 0x20	; 32
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <vfprintf+0x370>
    2dd6:	8b e2       	ldi	r24, 0x2B	; 43
    2dd8:	b7 fc       	sbrc	r11, 7
    2dda:	8d e2       	ldi	r24, 0x2D	; 45
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	b6 01       	movw	r22, r12
    2de0:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2de4:	06 c0       	rjmp	.+12     	; 0x2df2 <vfprintf+0x38a>
    2de6:	80 e3       	ldi	r24, 0x30	; 48
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	b6 01       	movw	r22, r12
    2dec:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2df0:	ea 94       	dec	r14
    2df2:	7e 14       	cp	r7, r14
    2df4:	c0 f3       	brcs	.-16     	; 0x2de6 <vfprintf+0x37e>
    2df6:	7a 94       	dec	r7
    2df8:	f2 01       	movw	r30, r4
    2dfa:	e7 0d       	add	r30, r7
    2dfc:	f1 1d       	adc	r31, r1
    2dfe:	80 81       	ld	r24, Z
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	b6 01       	movw	r22, r12
    2e04:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2e08:	77 20       	and	r7, r7
    2e0a:	a9 f7       	brne	.-22     	; 0x2df6 <vfprintf+0x38e>
    2e0c:	06 c0       	rjmp	.+12     	; 0x2e1a <vfprintf+0x3b2>
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	b6 01       	movw	r22, r12
    2e14:	0e 94 8f 18 	call	0x311e	; 0x311e <fputc>
    2e18:	fa 94       	dec	r15
    2e1a:	ff 20       	and	r15, r15
    2e1c:	c1 f7       	brne	.-16     	; 0x2e0e <vfprintf+0x3a6>
    2e1e:	37 ce       	rjmp	.-914    	; 0x2a8e <vfprintf+0x26>
    2e20:	f6 01       	movw	r30, r12
    2e22:	26 81       	ldd	r18, Z+6	; 0x06
    2e24:	37 81       	ldd	r19, Z+7	; 0x07
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <vfprintf+0x3c4>
    2e28:	2f ef       	ldi	r18, 0xFF	; 255
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	c9 01       	movw	r24, r18
    2e2e:	2c 96       	adiw	r28, 0x0c	; 12
    2e30:	e2 e1       	ldi	r30, 0x12	; 18
    2e32:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__>

00002e36 <calloc>:
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	0f 93       	push	r16
    2e3c:	1f 93       	push	r17
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	68 9f       	mul	r22, r24
    2e44:	80 01       	movw	r16, r0
    2e46:	69 9f       	mul	r22, r25
    2e48:	10 0d       	add	r17, r0
    2e4a:	78 9f       	mul	r23, r24
    2e4c:	10 0d       	add	r17, r0
    2e4e:	11 24       	eor	r1, r1
    2e50:	c8 01       	movw	r24, r16
    2e52:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <malloc>
    2e56:	e8 2e       	mov	r14, r24
    2e58:	e7 01       	movw	r28, r14
    2e5a:	7e 01       	movw	r14, r28
    2e5c:	f9 2e       	mov	r15, r25
    2e5e:	e7 01       	movw	r28, r14
    2e60:	20 97       	sbiw	r28, 0x00	; 0
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <calloc+0x3a>
    2e64:	8e 2d       	mov	r24, r14
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	a8 01       	movw	r20, r16
    2e6c:	0e 94 7d 18 	call	0x30fa	; 0x30fa <memset>
    2e70:	7e 01       	movw	r14, r28
    2e72:	ce 01       	movw	r24, r28
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	e6 e0       	ldi	r30, 0x06	; 6
    2e7a:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x18>

00002e7e <malloc>:
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	91 05       	cpc	r25, r1
    2e86:	10 f4       	brcc	.+4      	; 0x2e8c <malloc+0xe>
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	e0 91 0c 04 	lds	r30, 0x040C
    2e90:	f0 91 0d 04 	lds	r31, 0x040D
    2e94:	40 e0       	ldi	r20, 0x00	; 0
    2e96:	50 e0       	ldi	r21, 0x00	; 0
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	26 c0       	rjmp	.+76     	; 0x2eea <malloc+0x6c>
    2e9e:	60 81       	ld	r22, Z
    2ea0:	71 81       	ldd	r23, Z+1	; 0x01
    2ea2:	68 17       	cp	r22, r24
    2ea4:	79 07       	cpc	r23, r25
    2ea6:	e0 f0       	brcs	.+56     	; 0x2ee0 <malloc+0x62>
    2ea8:	68 17       	cp	r22, r24
    2eaa:	79 07       	cpc	r23, r25
    2eac:	81 f4       	brne	.+32     	; 0x2ece <malloc+0x50>
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
    2eb2:	21 15       	cp	r18, r1
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	31 f0       	breq	.+12     	; 0x2ec4 <malloc+0x46>
    2eb8:	d9 01       	movw	r26, r18
    2eba:	13 96       	adiw	r26, 0x03	; 3
    2ebc:	9c 93       	st	X, r25
    2ebe:	8e 93       	st	-X, r24
    2ec0:	12 97       	sbiw	r26, 0x02	; 2
    2ec2:	2b c0       	rjmp	.+86     	; 0x2f1a <malloc+0x9c>
    2ec4:	90 93 0d 04 	sts	0x040D, r25
    2ec8:	80 93 0c 04 	sts	0x040C, r24
    2ecc:	26 c0       	rjmp	.+76     	; 0x2f1a <malloc+0x9c>
    2ece:	41 15       	cp	r20, r1
    2ed0:	51 05       	cpc	r21, r1
    2ed2:	19 f0       	breq	.+6      	; 0x2eda <malloc+0x5c>
    2ed4:	64 17       	cp	r22, r20
    2ed6:	75 07       	cpc	r23, r21
    2ed8:	18 f4       	brcc	.+6      	; 0x2ee0 <malloc+0x62>
    2eda:	ab 01       	movw	r20, r22
    2edc:	e9 01       	movw	r28, r18
    2ede:	df 01       	movw	r26, r30
    2ee0:	9f 01       	movw	r18, r30
    2ee2:	72 81       	ldd	r23, Z+2	; 0x02
    2ee4:	63 81       	ldd	r22, Z+3	; 0x03
    2ee6:	e7 2f       	mov	r30, r23
    2ee8:	f6 2f       	mov	r31, r22
    2eea:	30 97       	sbiw	r30, 0x00	; 0
    2eec:	c1 f6       	brne	.-80     	; 0x2e9e <malloc+0x20>
    2eee:	41 15       	cp	r20, r1
    2ef0:	51 05       	cpc	r21, r1
    2ef2:	01 f1       	breq	.+64     	; 0x2f34 <malloc+0xb6>
    2ef4:	48 1b       	sub	r20, r24
    2ef6:	59 0b       	sbc	r21, r25
    2ef8:	44 30       	cpi	r20, 0x04	; 4
    2efa:	51 05       	cpc	r21, r1
    2efc:	80 f4       	brcc	.+32     	; 0x2f1e <malloc+0xa0>
    2efe:	12 96       	adiw	r26, 0x02	; 2
    2f00:	8d 91       	ld	r24, X+
    2f02:	9c 91       	ld	r25, X
    2f04:	13 97       	sbiw	r26, 0x03	; 3
    2f06:	20 97       	sbiw	r28, 0x00	; 0
    2f08:	19 f0       	breq	.+6      	; 0x2f10 <malloc+0x92>
    2f0a:	9b 83       	std	Y+3, r25	; 0x03
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
    2f0e:	04 c0       	rjmp	.+8      	; 0x2f18 <malloc+0x9a>
    2f10:	90 93 0d 04 	sts	0x040D, r25
    2f14:	80 93 0c 04 	sts	0x040C, r24
    2f18:	fd 01       	movw	r30, r26
    2f1a:	32 96       	adiw	r30, 0x02	; 2
    2f1c:	46 c0       	rjmp	.+140    	; 0x2faa <malloc+0x12c>
    2f1e:	fd 01       	movw	r30, r26
    2f20:	e4 0f       	add	r30, r20
    2f22:	f5 1f       	adc	r31, r21
    2f24:	81 93       	st	Z+, r24
    2f26:	91 93       	st	Z+, r25
    2f28:	42 50       	subi	r20, 0x02	; 2
    2f2a:	50 40       	sbci	r21, 0x00	; 0
    2f2c:	11 96       	adiw	r26, 0x01	; 1
    2f2e:	5c 93       	st	X, r21
    2f30:	4e 93       	st	-X, r20
    2f32:	3b c0       	rjmp	.+118    	; 0x2faa <malloc+0x12c>
    2f34:	20 91 0a 04 	lds	r18, 0x040A
    2f38:	30 91 0b 04 	lds	r19, 0x040B
    2f3c:	21 15       	cp	r18, r1
    2f3e:	31 05       	cpc	r19, r1
    2f40:	41 f4       	brne	.+16     	; 0x2f52 <malloc+0xd4>
    2f42:	20 91 f4 03 	lds	r18, 0x03F4
    2f46:	30 91 f5 03 	lds	r19, 0x03F5
    2f4a:	30 93 0b 04 	sts	0x040B, r19
    2f4e:	20 93 0a 04 	sts	0x040A, r18
    2f52:	20 91 f6 03 	lds	r18, 0x03F6
    2f56:	30 91 f7 03 	lds	r19, 0x03F7
    2f5a:	21 15       	cp	r18, r1
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	41 f4       	brne	.+16     	; 0x2f70 <malloc+0xf2>
    2f60:	2d b7       	in	r18, 0x3d	; 61
    2f62:	3e b7       	in	r19, 0x3e	; 62
    2f64:	40 91 f2 03 	lds	r20, 0x03F2
    2f68:	50 91 f3 03 	lds	r21, 0x03F3
    2f6c:	24 1b       	sub	r18, r20
    2f6e:	35 0b       	sbc	r19, r21
    2f70:	e0 91 0a 04 	lds	r30, 0x040A
    2f74:	f0 91 0b 04 	lds	r31, 0x040B
    2f78:	e2 17       	cp	r30, r18
    2f7a:	f3 07       	cpc	r31, r19
    2f7c:	a0 f4       	brcc	.+40     	; 0x2fa6 <malloc+0x128>
    2f7e:	2e 1b       	sub	r18, r30
    2f80:	3f 0b       	sbc	r19, r31
    2f82:	28 17       	cp	r18, r24
    2f84:	39 07       	cpc	r19, r25
    2f86:	78 f0       	brcs	.+30     	; 0x2fa6 <malloc+0x128>
    2f88:	ac 01       	movw	r20, r24
    2f8a:	4e 5f       	subi	r20, 0xFE	; 254
    2f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8e:	24 17       	cp	r18, r20
    2f90:	35 07       	cpc	r19, r21
    2f92:	48 f0       	brcs	.+18     	; 0x2fa6 <malloc+0x128>
    2f94:	4e 0f       	add	r20, r30
    2f96:	5f 1f       	adc	r21, r31
    2f98:	50 93 0b 04 	sts	0x040B, r21
    2f9c:	40 93 0a 04 	sts	0x040A, r20
    2fa0:	81 93       	st	Z+, r24
    2fa2:	91 93       	st	Z+, r25
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <malloc+0x12c>
    2fa6:	e0 e0       	ldi	r30, 0x00	; 0
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	cf 01       	movw	r24, r30
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	08 95       	ret

00002fb2 <free>:
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <free+0xa>
    2fba:	91 c0       	rjmp	.+290    	; 0x30de <free+0x12c>
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	32 97       	sbiw	r30, 0x02	; 2
    2fc0:	13 82       	std	Z+3, r1	; 0x03
    2fc2:	12 82       	std	Z+2, r1	; 0x02
    2fc4:	60 91 0c 04 	lds	r22, 0x040C
    2fc8:	70 91 0d 04 	lds	r23, 0x040D
    2fcc:	61 15       	cp	r22, r1
    2fce:	71 05       	cpc	r23, r1
    2fd0:	81 f4       	brne	.+32     	; 0x2ff2 <free+0x40>
    2fd2:	20 81       	ld	r18, Z
    2fd4:	31 81       	ldd	r19, Z+1	; 0x01
    2fd6:	28 0f       	add	r18, r24
    2fd8:	39 1f       	adc	r19, r25
    2fda:	80 91 0a 04 	lds	r24, 0x040A
    2fde:	90 91 0b 04 	lds	r25, 0x040B
    2fe2:	82 17       	cp	r24, r18
    2fe4:	93 07       	cpc	r25, r19
    2fe6:	99 f5       	brne	.+102    	; 0x304e <free+0x9c>
    2fe8:	f0 93 0b 04 	sts	0x040B, r31
    2fec:	e0 93 0a 04 	sts	0x040A, r30
    2ff0:	76 c0       	rjmp	.+236    	; 0x30de <free+0x12c>
    2ff2:	db 01       	movw	r26, r22
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <free+0x4c>
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	d9 01       	movw	r26, r18
    2ffe:	ae 17       	cp	r26, r30
    3000:	bf 07       	cpc	r27, r31
    3002:	48 f4       	brcc	.+18     	; 0x3016 <free+0x64>
    3004:	12 96       	adiw	r26, 0x02	; 2
    3006:	2d 91       	ld	r18, X+
    3008:	3c 91       	ld	r19, X
    300a:	13 97       	sbiw	r26, 0x03	; 3
    300c:	21 15       	cp	r18, r1
    300e:	31 05       	cpc	r19, r1
    3010:	a1 f7       	brne	.-24     	; 0x2ffa <free+0x48>
    3012:	cd 01       	movw	r24, r26
    3014:	21 c0       	rjmp	.+66     	; 0x3058 <free+0xa6>
    3016:	b3 83       	std	Z+3, r27	; 0x03
    3018:	a2 83       	std	Z+2, r26	; 0x02
    301a:	ef 01       	movw	r28, r30
    301c:	49 91       	ld	r20, Y+
    301e:	59 91       	ld	r21, Y+
    3020:	9e 01       	movw	r18, r28
    3022:	24 0f       	add	r18, r20
    3024:	35 1f       	adc	r19, r21
    3026:	a2 17       	cp	r26, r18
    3028:	b3 07       	cpc	r27, r19
    302a:	79 f4       	brne	.+30     	; 0x304a <free+0x98>
    302c:	2d 91       	ld	r18, X+
    302e:	3c 91       	ld	r19, X
    3030:	11 97       	sbiw	r26, 0x01	; 1
    3032:	24 0f       	add	r18, r20
    3034:	35 1f       	adc	r19, r21
    3036:	2e 5f       	subi	r18, 0xFE	; 254
    3038:	3f 4f       	sbci	r19, 0xFF	; 255
    303a:	31 83       	std	Z+1, r19	; 0x01
    303c:	20 83       	st	Z, r18
    303e:	12 96       	adiw	r26, 0x02	; 2
    3040:	2d 91       	ld	r18, X+
    3042:	3c 91       	ld	r19, X
    3044:	13 97       	sbiw	r26, 0x03	; 3
    3046:	33 83       	std	Z+3, r19	; 0x03
    3048:	22 83       	std	Z+2, r18	; 0x02
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	29 f4       	brne	.+10     	; 0x3058 <free+0xa6>
    304e:	f0 93 0d 04 	sts	0x040D, r31
    3052:	e0 93 0c 04 	sts	0x040C, r30
    3056:	43 c0       	rjmp	.+134    	; 0x30de <free+0x12c>
    3058:	dc 01       	movw	r26, r24
    305a:	13 96       	adiw	r26, 0x03	; 3
    305c:	fc 93       	st	X, r31
    305e:	ee 93       	st	-X, r30
    3060:	12 97       	sbiw	r26, 0x02	; 2
    3062:	4d 91       	ld	r20, X+
    3064:	5d 91       	ld	r21, X+
    3066:	a4 0f       	add	r26, r20
    3068:	b5 1f       	adc	r27, r21
    306a:	ea 17       	cp	r30, r26
    306c:	fb 07       	cpc	r31, r27
    306e:	69 f4       	brne	.+26     	; 0x308a <free+0xd8>
    3070:	20 81       	ld	r18, Z
    3072:	31 81       	ldd	r19, Z+1	; 0x01
    3074:	24 0f       	add	r18, r20
    3076:	35 1f       	adc	r19, r21
    3078:	2e 5f       	subi	r18, 0xFE	; 254
    307a:	3f 4f       	sbci	r19, 0xFF	; 255
    307c:	ec 01       	movw	r28, r24
    307e:	39 83       	std	Y+1, r19	; 0x01
    3080:	28 83       	st	Y, r18
    3082:	22 81       	ldd	r18, Z+2	; 0x02
    3084:	33 81       	ldd	r19, Z+3	; 0x03
    3086:	3b 83       	std	Y+3, r19	; 0x03
    3088:	2a 83       	std	Y+2, r18	; 0x02
    308a:	e0 e0       	ldi	r30, 0x00	; 0
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <free+0xe2>
    3090:	fb 01       	movw	r30, r22
    3092:	bc 01       	movw	r22, r24
    3094:	db 01       	movw	r26, r22
    3096:	12 96       	adiw	r26, 0x02	; 2
    3098:	8d 91       	ld	r24, X+
    309a:	9c 91       	ld	r25, X
    309c:	13 97       	sbiw	r26, 0x03	; 3
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	b9 f7       	brne	.-18     	; 0x3090 <free+0xde>
    30a2:	9b 01       	movw	r18, r22
    30a4:	2e 5f       	subi	r18, 0xFE	; 254
    30a6:	3f 4f       	sbci	r19, 0xFF	; 255
    30a8:	8d 91       	ld	r24, X+
    30aa:	9c 91       	ld	r25, X
    30ac:	11 97       	sbiw	r26, 0x01	; 1
    30ae:	82 0f       	add	r24, r18
    30b0:	93 1f       	adc	r25, r19
    30b2:	40 91 0a 04 	lds	r20, 0x040A
    30b6:	50 91 0b 04 	lds	r21, 0x040B
    30ba:	48 17       	cp	r20, r24
    30bc:	59 07       	cpc	r21, r25
    30be:	79 f4       	brne	.+30     	; 0x30de <free+0x12c>
    30c0:	30 97       	sbiw	r30, 0x00	; 0
    30c2:	29 f4       	brne	.+10     	; 0x30ce <free+0x11c>
    30c4:	10 92 0d 04 	sts	0x040D, r1
    30c8:	10 92 0c 04 	sts	0x040C, r1
    30cc:	02 c0       	rjmp	.+4      	; 0x30d2 <free+0x120>
    30ce:	13 82       	std	Z+3, r1	; 0x03
    30d0:	12 82       	std	Z+2, r1	; 0x02
    30d2:	22 50       	subi	r18, 0x02	; 2
    30d4:	30 40       	sbci	r19, 0x00	; 0
    30d6:	30 93 0b 04 	sts	0x040B, r19
    30da:	20 93 0a 04 	sts	0x040A, r18
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	08 95       	ret

000030e4 <strnlen_P>:
    30e4:	fc 01       	movw	r30, r24
    30e6:	05 90       	lpm	r0, Z+
    30e8:	61 50       	subi	r22, 0x01	; 1
    30ea:	70 40       	sbci	r23, 0x00	; 0
    30ec:	01 10       	cpse	r0, r1
    30ee:	d8 f7       	brcc	.-10     	; 0x30e6 <strnlen_P+0x2>
    30f0:	80 95       	com	r24
    30f2:	90 95       	com	r25
    30f4:	8e 0f       	add	r24, r30
    30f6:	9f 1f       	adc	r25, r31
    30f8:	08 95       	ret

000030fa <memset>:
    30fa:	dc 01       	movw	r26, r24
    30fc:	01 c0       	rjmp	.+2      	; 0x3100 <memset+0x6>
    30fe:	6d 93       	st	X+, r22
    3100:	41 50       	subi	r20, 0x01	; 1
    3102:	50 40       	sbci	r21, 0x00	; 0
    3104:	e0 f7       	brcc	.-8      	; 0x30fe <memset+0x4>
    3106:	08 95       	ret

00003108 <strnlen>:
    3108:	fc 01       	movw	r30, r24
    310a:	61 50       	subi	r22, 0x01	; 1
    310c:	70 40       	sbci	r23, 0x00	; 0
    310e:	01 90       	ld	r0, Z+
    3110:	01 10       	cpse	r0, r1
    3112:	d8 f7       	brcc	.-10     	; 0x310a <strnlen+0x2>
    3114:	80 95       	com	r24
    3116:	90 95       	com	r25
    3118:	8e 0f       	add	r24, r30
    311a:	9f 1f       	adc	r25, r31
    311c:	08 95       	ret

0000311e <fputc>:
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	8c 01       	movw	r16, r24
    3128:	eb 01       	movw	r28, r22
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	81 ff       	sbrs	r24, 1
    312e:	1b c0       	rjmp	.+54     	; 0x3166 <fputc+0x48>
    3130:	82 ff       	sbrs	r24, 2
    3132:	0d c0       	rjmp	.+26     	; 0x314e <fputc+0x30>
    3134:	2e 81       	ldd	r18, Y+6	; 0x06
    3136:	3f 81       	ldd	r19, Y+7	; 0x07
    3138:	8c 81       	ldd	r24, Y+4	; 0x04
    313a:	9d 81       	ldd	r25, Y+5	; 0x05
    313c:	28 17       	cp	r18, r24
    313e:	39 07       	cpc	r19, r25
    3140:	64 f4       	brge	.+24     	; 0x315a <fputc+0x3c>
    3142:	e8 81       	ld	r30, Y
    3144:	f9 81       	ldd	r31, Y+1	; 0x01
    3146:	01 93       	st	Z+, r16
    3148:	f9 83       	std	Y+1, r31	; 0x01
    314a:	e8 83       	st	Y, r30
    314c:	06 c0       	rjmp	.+12     	; 0x315a <fputc+0x3c>
    314e:	e8 85       	ldd	r30, Y+8	; 0x08
    3150:	f9 85       	ldd	r31, Y+9	; 0x09
    3152:	80 2f       	mov	r24, r16
    3154:	09 95       	icall
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	31 f4       	brne	.+12     	; 0x3166 <fputc+0x48>
    315a:	8e 81       	ldd	r24, Y+6	; 0x06
    315c:	9f 81       	ldd	r25, Y+7	; 0x07
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	9f 83       	std	Y+7, r25	; 0x07
    3162:	8e 83       	std	Y+6, r24	; 0x06
    3164:	02 c0       	rjmp	.+4      	; 0x316a <fputc+0x4c>
    3166:	0f ef       	ldi	r16, 0xFF	; 255
    3168:	1f ef       	ldi	r17, 0xFF	; 255
    316a:	c8 01       	movw	r24, r16
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	08 95       	ret

00003176 <__ultoa_invert>:
    3176:	fa 01       	movw	r30, r20
    3178:	aa 27       	eor	r26, r26
    317a:	28 30       	cpi	r18, 0x08	; 8
    317c:	51 f1       	breq	.+84     	; 0x31d2 <__ultoa_invert+0x5c>
    317e:	20 31       	cpi	r18, 0x10	; 16
    3180:	81 f1       	breq	.+96     	; 0x31e2 <__ultoa_invert+0x6c>
    3182:	e8 94       	clt
    3184:	6f 93       	push	r22
    3186:	6e 7f       	andi	r22, 0xFE	; 254
    3188:	6e 5f       	subi	r22, 0xFE	; 254
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	8f 4f       	sbci	r24, 0xFF	; 255
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	af 4f       	sbci	r26, 0xFF	; 255
    3192:	b1 e0       	ldi	r27, 0x01	; 1
    3194:	3e d0       	rcall	.+124    	; 0x3212 <__ultoa_invert+0x9c>
    3196:	b4 e0       	ldi	r27, 0x04	; 4
    3198:	3c d0       	rcall	.+120    	; 0x3212 <__ultoa_invert+0x9c>
    319a:	67 0f       	add	r22, r23
    319c:	78 1f       	adc	r23, r24
    319e:	89 1f       	adc	r24, r25
    31a0:	9a 1f       	adc	r25, r26
    31a2:	a1 1d       	adc	r26, r1
    31a4:	68 0f       	add	r22, r24
    31a6:	79 1f       	adc	r23, r25
    31a8:	8a 1f       	adc	r24, r26
    31aa:	91 1d       	adc	r25, r1
    31ac:	a1 1d       	adc	r26, r1
    31ae:	6a 0f       	add	r22, r26
    31b0:	71 1d       	adc	r23, r1
    31b2:	81 1d       	adc	r24, r1
    31b4:	91 1d       	adc	r25, r1
    31b6:	a1 1d       	adc	r26, r1
    31b8:	20 d0       	rcall	.+64     	; 0x31fa <__ultoa_invert+0x84>
    31ba:	09 f4       	brne	.+2      	; 0x31be <__ultoa_invert+0x48>
    31bc:	68 94       	set
    31be:	3f 91       	pop	r19
    31c0:	2a e0       	ldi	r18, 0x0A	; 10
    31c2:	26 9f       	mul	r18, r22
    31c4:	11 24       	eor	r1, r1
    31c6:	30 19       	sub	r19, r0
    31c8:	30 5d       	subi	r19, 0xD0	; 208
    31ca:	31 93       	st	Z+, r19
    31cc:	de f6       	brtc	.-74     	; 0x3184 <__ultoa_invert+0xe>
    31ce:	cf 01       	movw	r24, r30
    31d0:	08 95       	ret
    31d2:	46 2f       	mov	r20, r22
    31d4:	47 70       	andi	r20, 0x07	; 7
    31d6:	40 5d       	subi	r20, 0xD0	; 208
    31d8:	41 93       	st	Z+, r20
    31da:	b3 e0       	ldi	r27, 0x03	; 3
    31dc:	0f d0       	rcall	.+30     	; 0x31fc <__ultoa_invert+0x86>
    31de:	c9 f7       	brne	.-14     	; 0x31d2 <__ultoa_invert+0x5c>
    31e0:	f6 cf       	rjmp	.-20     	; 0x31ce <__ultoa_invert+0x58>
    31e2:	46 2f       	mov	r20, r22
    31e4:	4f 70       	andi	r20, 0x0F	; 15
    31e6:	40 5d       	subi	r20, 0xD0	; 208
    31e8:	4a 33       	cpi	r20, 0x3A	; 58
    31ea:	18 f0       	brcs	.+6      	; 0x31f2 <__ultoa_invert+0x7c>
    31ec:	49 5d       	subi	r20, 0xD9	; 217
    31ee:	31 fd       	sbrc	r19, 1
    31f0:	40 52       	subi	r20, 0x20	; 32
    31f2:	41 93       	st	Z+, r20
    31f4:	02 d0       	rcall	.+4      	; 0x31fa <__ultoa_invert+0x84>
    31f6:	a9 f7       	brne	.-22     	; 0x31e2 <__ultoa_invert+0x6c>
    31f8:	ea cf       	rjmp	.-44     	; 0x31ce <__ultoa_invert+0x58>
    31fa:	b4 e0       	ldi	r27, 0x04	; 4
    31fc:	a6 95       	lsr	r26
    31fe:	97 95       	ror	r25
    3200:	87 95       	ror	r24
    3202:	77 95       	ror	r23
    3204:	67 95       	ror	r22
    3206:	ba 95       	dec	r27
    3208:	c9 f7       	brne	.-14     	; 0x31fc <__ultoa_invert+0x86>
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	61 05       	cpc	r22, r1
    320e:	71 05       	cpc	r23, r1
    3210:	08 95       	ret
    3212:	9b 01       	movw	r18, r22
    3214:	ac 01       	movw	r20, r24
    3216:	0a 2e       	mov	r0, r26
    3218:	06 94       	lsr	r0
    321a:	57 95       	ror	r21
    321c:	47 95       	ror	r20
    321e:	37 95       	ror	r19
    3220:	27 95       	ror	r18
    3222:	ba 95       	dec	r27
    3224:	c9 f7       	brne	.-14     	; 0x3218 <__ultoa_invert+0xa2>
    3226:	62 0f       	add	r22, r18
    3228:	73 1f       	adc	r23, r19
    322a:	84 1f       	adc	r24, r20
    322c:	95 1f       	adc	r25, r21
    322e:	a0 1d       	adc	r26, r0
    3230:	08 95       	ret

00003232 <_exit>:
    3232:	f8 94       	cli

00003234 <__stop_program>:
    3234:	ff cf       	rjmp	.-2      	; 0x3234 <__stop_program>
